
DIO_nti.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006492  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000188  00800060  00006492  00006526  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008001e8  008001e8  000066ae  2**0
                  ALLOC
  3 .stab         00004a88  00000000  00000000  000066b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e08  00000000  00000000  0000b138  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000cf40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000d100  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000d314  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000f926  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00010df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00012100  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  000122e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  000125e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013001  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__vector_1>
       8:	0c 94 b7 0a 	jmp	0x156e	; 0x156e <__vector_2>
       c:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	f4 e6       	ldi	r31, 0x64	; 100
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3e       	cpi	r26, 0xE8	; 232
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ee       	ldi	r26, 0xE8	; 232
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3f       	cpi	r26, 0xF4	; 244
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <main>
      8a:	0c 94 47 32 	jmp	0x648e	; 0x648e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 10 32 	jmp	0x6420	; 0x6420 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2c 32 	jmp	0x6458	; 0x6458 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1c 32 	jmp	0x6438	; 0x6438 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 38 32 	jmp	0x6470	; 0x6470 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1c 32 	jmp	0x6438	; 0x6438 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 38 32 	jmp	0x6470	; 0x6470 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 10 32 	jmp	0x6420	; 0x6420 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2c 32 	jmp	0x6458	; 0x6458 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 18 32 	jmp	0x6430	; 0x6430 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 34 32 	jmp	0x6468	; 0x6468 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 1c 32 	jmp	0x6438	; 0x6438 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 38 32 	jmp	0x6470	; 0x6470 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 1c 32 	jmp	0x6438	; 0x6438 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 38 32 	jmp	0x6470	; 0x6470 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 1c 32 	jmp	0x6438	; 0x6438 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 38 32 	jmp	0x6470	; 0x6470 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 19 32 	jmp	0x6432	; 0x6432 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 35 32 	jmp	0x646a	; 0x646a <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 20 32 	jmp	0x6440	; 0x6440 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 3c 32 	jmp	0x6478	; 0x6478 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 18 32 	jmp	0x6430	; 0x6430 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 34 32 	jmp	0x6468	; 0x6468 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <EXTI_enuInit>:

static volatile void (*EXTI_ApfunINTFun[3])(void *) = {NULL, NULL, NULL}; //Volatile because it is call from ISR
void * EXTI_ApvoidGenericparameter[3] = {NULL, NULL, NULL};

ES_t EXTI_enuInit(EXTI_t * Copy_pstrEXTIConfig)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	2d 97       	sbiw	r28, 0x0d	; 13
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	9c 83       	std	Y+4, r25	; 0x04
     f00:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     f02:	1a 82       	std	Y+2, r1	; 0x02


	if(NULL != Copy_pstrEXTIConfig)
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	9c 81       	ldd	r25, Y+4	; 0x04
     f08:	00 97       	sbiw	r24, 0x00	; 0
     f0a:	09 f4       	brne	.+2      	; 0xf0e <EXTI_enuInit+0x24>
     f0c:	24 c1       	rjmp	.+584    	; 0x1156 <EXTI_enuInit+0x26c>
	{
		u8 Local_u8Iter = 0;
     f0e:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8Iter = 0; Local_u8Iter < 3; Local_u8Iter++)
     f10:	19 82       	std	Y+1, r1	; 0x01
     f12:	1a c1       	rjmp	.+564    	; 0x1148 <EXTI_enuInit+0x25e>
		{
			if(Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8State == ACTIVE)
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	88 2f       	mov	r24, r24
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	9c 01       	movw	r18, r24
     f1c:	22 0f       	add	r18, r18
     f1e:	33 1f       	adc	r19, r19
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	9c 81       	ldd	r25, Y+4	; 0x04
     f24:	fc 01       	movw	r30, r24
     f26:	e2 0f       	add	r30, r18
     f28:	f3 1f       	adc	r31, r19
     f2a:	80 81       	ld	r24, Z
     f2c:	85 30       	cpi	r24, 0x05	; 5
     f2e:	09 f0       	breq	.+2      	; 0xf32 <EXTI_enuInit+0x48>
     f30:	08 c1       	rjmp	.+528    	; 0x1142 <EXTI_enuInit+0x258>
			{
				switch(Local_u8Iter)
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	3d 87       	std	Y+13, r19	; 0x0d
     f3a:	2c 87       	std	Y+12, r18	; 0x0c
     f3c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f3e:	9d 85       	ldd	r25, Y+13	; 0x0d
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	91 05       	cpc	r25, r1
     f44:	09 f4       	brne	.+2      	; 0xf48 <EXTI_enuInit+0x5e>
     f46:	68 c0       	rjmp	.+208    	; 0x1018 <EXTI_enuInit+0x12e>
     f48:	2c 85       	ldd	r18, Y+12	; 0x0c
     f4a:	3d 85       	ldd	r19, Y+13	; 0x0d
     f4c:	22 30       	cpi	r18, 0x02	; 2
     f4e:	31 05       	cpc	r19, r1
     f50:	09 f4       	brne	.+2      	; 0xf54 <EXTI_enuInit+0x6a>
     f52:	bf c0       	rjmp	.+382    	; 0x10d2 <EXTI_enuInit+0x1e8>
     f54:	8c 85       	ldd	r24, Y+12	; 0x0c
     f56:	9d 85       	ldd	r25, Y+13	; 0x0d
     f58:	00 97       	sbiw	r24, 0x00	; 0
     f5a:	09 f0       	breq	.+2      	; 0xf5e <EXTI_enuInit+0x74>
     f5c:	f2 c0       	rjmp	.+484    	; 0x1142 <EXTI_enuInit+0x258>
				{
				case 0:
					GICR |= (1<<6);
     f5e:	ab e5       	ldi	r26, 0x5B	; 91
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	eb e5       	ldi	r30, 0x5B	; 91
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	80 64       	ori	r24, 0x40	; 64
     f6a:	8c 93       	st	X, r24
					 *            -> 0000 0011
					 *           -> 1111 1100
					 * MCUCR  &= 1111 1100
					 * */

					MCUCR &= ~(0x03 << 0);
     f6c:	a5 e5       	ldi	r26, 0x55	; 85
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e5 e5       	ldi	r30, 0x55	; 85
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	8c 7f       	andi	r24, 0xFC	; 252
     f78:	8c 93       	st	X, r24

					//Check Sense Mode
					switch(Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenceLevel)
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	88 2f       	mov	r24, r24
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	9c 01       	movw	r18, r24
     f82:	22 0f       	add	r18, r18
     f84:	33 1f       	adc	r19, r19
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	9c 81       	ldd	r25, Y+4	; 0x04
     f8a:	fc 01       	movw	r30, r24
     f8c:	e2 0f       	add	r30, r18
     f8e:	f3 1f       	adc	r31, r19
     f90:	81 81       	ldd	r24, Z+1	; 0x01
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	3b 87       	std	Y+11, r19	; 0x0b
     f98:	2a 87       	std	Y+10, r18	; 0x0a
     f9a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f9c:	9b 85       	ldd	r25, Y+11	; 0x0b
     f9e:	82 30       	cpi	r24, 0x02	; 2
     fa0:	91 05       	cpc	r25, r1
     fa2:	01 f1       	breq	.+64     	; 0xfe4 <EXTI_enuInit+0xfa>
     fa4:	2a 85       	ldd	r18, Y+10	; 0x0a
     fa6:	3b 85       	ldd	r19, Y+11	; 0x0b
     fa8:	23 30       	cpi	r18, 0x03	; 3
     faa:	31 05       	cpc	r19, r1
     fac:	34 f4       	brge	.+12     	; 0xfba <EXTI_enuInit+0xd0>
     fae:	8a 85       	ldd	r24, Y+10	; 0x0a
     fb0:	9b 85       	ldd	r25, Y+11	; 0x0b
     fb2:	81 30       	cpi	r24, 0x01	; 1
     fb4:	91 05       	cpc	r25, r1
     fb6:	61 f0       	breq	.+24     	; 0xfd0 <EXTI_enuInit+0xe6>
     fb8:	2c c0       	rjmp	.+88     	; 0x1012 <EXTI_enuInit+0x128>
     fba:	2a 85       	ldd	r18, Y+10	; 0x0a
     fbc:	3b 85       	ldd	r19, Y+11	; 0x0b
     fbe:	23 30       	cpi	r18, 0x03	; 3
     fc0:	31 05       	cpc	r19, r1
     fc2:	d1 f0       	breq	.+52     	; 0xff8 <EXTI_enuInit+0x10e>
     fc4:	8a 85       	ldd	r24, Y+10	; 0x0a
     fc6:	9b 85       	ldd	r25, Y+11	; 0x0b
     fc8:	84 30       	cpi	r24, 0x04	; 4
     fca:	91 05       	cpc	r25, r1
     fcc:	f9 f0       	breq	.+62     	; 0x100c <EXTI_enuInit+0x122>
     fce:	21 c0       	rjmp	.+66     	; 0x1012 <EXTI_enuInit+0x128>
					{
					case RISING_EDGE:
						MCUCR |= (3 << 0);
     fd0:	a5 e5       	ldi	r26, 0x55	; 85
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e5 e5       	ldi	r30, 0x55	; 85
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	83 60       	ori	r24, 0x03	; 3
     fdc:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	8a 83       	std	Y+2, r24	; 0x02
     fe2:	af c0       	rjmp	.+350    	; 0x1142 <EXTI_enuInit+0x258>
						break;
					case FALLING_EDGE:
						MCUCR |= (1 << 1);
     fe4:	a5 e5       	ldi	r26, 0x55	; 85
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e5 e5       	ldi	r30, 0x55	; 85
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	82 60       	ori	r24, 0x02	; 2
     ff0:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	8a 83       	std	Y+2, r24	; 0x02
     ff6:	a5 c0       	rjmp	.+330    	; 0x1142 <EXTI_enuInit+0x258>
						break;
					case ANY_LOGIC:
						MCUCR |= (1 << 0);
     ff8:	a5 e5       	ldi	r26, 0x55	; 85
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e5 e5       	ldi	r30, 0x55	; 85
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	81 60       	ori	r24, 0x01	; 1
    1004:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	8a 83       	std	Y+2, r24	; 0x02
    100a:	9b c0       	rjmp	.+310    	; 0x1142 <EXTI_enuInit+0x258>
						break;
					case LOW_LEVEL:
						Local_enuErrorState = ES_OK;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	8a 83       	std	Y+2, r24	; 0x02
    1010:	98 c0       	rjmp	.+304    	; 0x1142 <EXTI_enuInit+0x258>
						break;
					default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
    1012:	83 e0       	ldi	r24, 0x03	; 3
    1014:	8a 83       	std	Y+2, r24	; 0x02
    1016:	95 c0       	rjmp	.+298    	; 0x1142 <EXTI_enuInit+0x258>
					}
					break;

				case 1:
					GICR |= (1<<7);
    1018:	ab e5       	ldi	r26, 0x5B	; 91
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	eb e5       	ldi	r30, 0x5B	; 91
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	80 68       	ori	r24, 0x80	; 128
    1024:	8c 93       	st	X, r24
					MCUCR &= ~(3<<2); //Mask second 2 bits
    1026:	a5 e5       	ldi	r26, 0x55	; 85
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e5 e5       	ldi	r30, 0x55	; 85
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	83 7f       	andi	r24, 0xF3	; 243
    1032:	8c 93       	st	X, r24
					switch(Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenceLevel)
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	88 2f       	mov	r24, r24
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	9c 01       	movw	r18, r24
    103c:	22 0f       	add	r18, r18
    103e:	33 1f       	adc	r19, r19
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	9c 81       	ldd	r25, Y+4	; 0x04
    1044:	fc 01       	movw	r30, r24
    1046:	e2 0f       	add	r30, r18
    1048:	f3 1f       	adc	r31, r19
    104a:	81 81       	ldd	r24, Z+1	; 0x01
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	39 87       	std	Y+9, r19	; 0x09
    1052:	28 87       	std	Y+8, r18	; 0x08
    1054:	88 85       	ldd	r24, Y+8	; 0x08
    1056:	99 85       	ldd	r25, Y+9	; 0x09
    1058:	82 30       	cpi	r24, 0x02	; 2
    105a:	91 05       	cpc	r25, r1
    105c:	01 f1       	breq	.+64     	; 0x109e <EXTI_enuInit+0x1b4>
    105e:	28 85       	ldd	r18, Y+8	; 0x08
    1060:	39 85       	ldd	r19, Y+9	; 0x09
    1062:	23 30       	cpi	r18, 0x03	; 3
    1064:	31 05       	cpc	r19, r1
    1066:	34 f4       	brge	.+12     	; 0x1074 <EXTI_enuInit+0x18a>
    1068:	88 85       	ldd	r24, Y+8	; 0x08
    106a:	99 85       	ldd	r25, Y+9	; 0x09
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	91 05       	cpc	r25, r1
    1070:	61 f0       	breq	.+24     	; 0x108a <EXTI_enuInit+0x1a0>
    1072:	2c c0       	rjmp	.+88     	; 0x10cc <EXTI_enuInit+0x1e2>
    1074:	28 85       	ldd	r18, Y+8	; 0x08
    1076:	39 85       	ldd	r19, Y+9	; 0x09
    1078:	23 30       	cpi	r18, 0x03	; 3
    107a:	31 05       	cpc	r19, r1
    107c:	d1 f0       	breq	.+52     	; 0x10b2 <EXTI_enuInit+0x1c8>
    107e:	88 85       	ldd	r24, Y+8	; 0x08
    1080:	99 85       	ldd	r25, Y+9	; 0x09
    1082:	84 30       	cpi	r24, 0x04	; 4
    1084:	91 05       	cpc	r25, r1
    1086:	f9 f0       	breq	.+62     	; 0x10c6 <EXTI_enuInit+0x1dc>
    1088:	21 c0       	rjmp	.+66     	; 0x10cc <EXTI_enuInit+0x1e2>
					{
					case RISING_EDGE:
						MCUCR |= (3 << 2);
    108a:	a5 e5       	ldi	r26, 0x55	; 85
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e5 e5       	ldi	r30, 0x55	; 85
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	8c 60       	ori	r24, 0x0C	; 12
    1096:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	8a 83       	std	Y+2, r24	; 0x02
    109c:	52 c0       	rjmp	.+164    	; 0x1142 <EXTI_enuInit+0x258>
						break;
					case FALLING_EDGE:
						MCUCR |= (1 << 3);
    109e:	a5 e5       	ldi	r26, 0x55	; 85
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e5 e5       	ldi	r30, 0x55	; 85
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	88 60       	ori	r24, 0x08	; 8
    10aa:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	8a 83       	std	Y+2, r24	; 0x02
    10b0:	48 c0       	rjmp	.+144    	; 0x1142 <EXTI_enuInit+0x258>
						break;
					case ANY_LOGIC:
						MCUCR |= (1 << 2);
    10b2:	a5 e5       	ldi	r26, 0x55	; 85
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e5 e5       	ldi	r30, 0x55	; 85
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	84 60       	ori	r24, 0x04	; 4
    10be:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	8a 83       	std	Y+2, r24	; 0x02
    10c4:	3e c0       	rjmp	.+124    	; 0x1142 <EXTI_enuInit+0x258>
						break;
					case LOW_LEVEL:
						Local_enuErrorState = ES_OK;
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	8a 83       	std	Y+2, r24	; 0x02
    10ca:	3b c0       	rjmp	.+118    	; 0x1142 <EXTI_enuInit+0x258>
						break;
					default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
    10cc:	83 e0       	ldi	r24, 0x03	; 3
    10ce:	8a 83       	std	Y+2, r24	; 0x02
    10d0:	38 c0       	rjmp	.+112    	; 0x1142 <EXTI_enuInit+0x258>
					}
					break;

				case 2:
					GICR |= (1<<5);
    10d2:	ab e5       	ldi	r26, 0x5B	; 91
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	eb e5       	ldi	r30, 0x5B	; 91
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	80 62       	ori	r24, 0x20	; 32
    10de:	8c 93       	st	X, r24
					MCUCSR &= ~(1<<6); //Mask its control sense bit
    10e0:	a4 e5       	ldi	r26, 0x54	; 84
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e4 e5       	ldi	r30, 0x54	; 84
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	8f 7b       	andi	r24, 0xBF	; 191
    10ec:	8c 93       	st	X, r24

					switch(Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenceLevel)
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	88 2f       	mov	r24, r24
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	9c 01       	movw	r18, r24
    10f6:	22 0f       	add	r18, r18
    10f8:	33 1f       	adc	r19, r19
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	9c 81       	ldd	r25, Y+4	; 0x04
    10fe:	fc 01       	movw	r30, r24
    1100:	e2 0f       	add	r30, r18
    1102:	f3 1f       	adc	r31, r19
    1104:	81 81       	ldd	r24, Z+1	; 0x01
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	3f 83       	std	Y+7, r19	; 0x07
    110c:	2e 83       	std	Y+6, r18	; 0x06
    110e:	8e 81       	ldd	r24, Y+6	; 0x06
    1110:	9f 81       	ldd	r25, Y+7	; 0x07
    1112:	81 30       	cpi	r24, 0x01	; 1
    1114:	91 05       	cpc	r25, r1
    1116:	31 f0       	breq	.+12     	; 0x1124 <EXTI_enuInit+0x23a>
    1118:	2e 81       	ldd	r18, Y+6	; 0x06
    111a:	3f 81       	ldd	r19, Y+7	; 0x07
    111c:	22 30       	cpi	r18, 0x02	; 2
    111e:	31 05       	cpc	r19, r1
    1120:	59 f0       	breq	.+22     	; 0x1138 <EXTI_enuInit+0x24e>
    1122:	0d c0       	rjmp	.+26     	; 0x113e <EXTI_enuInit+0x254>
					{
					case RISING_EDGE:
						MCUCSR |= (1 << 6);
    1124:	a4 e5       	ldi	r26, 0x54	; 84
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e4 e5       	ldi	r30, 0x54	; 84
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	80 64       	ori	r24, 0x40	; 64
    1130:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	8a 83       	std	Y+2, r24	; 0x02
    1136:	05 c0       	rjmp	.+10     	; 0x1142 <EXTI_enuInit+0x258>
						break;
					case FALLING_EDGE:
						Local_enuErrorState = ES_OK;
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	8a 83       	std	Y+2, r24	; 0x02
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <EXTI_enuInit+0x258>
						break;
					default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
    113e:	83 e0       	ldi	r24, 0x03	; 3
    1140:	8a 83       	std	Y+2, r24	; 0x02


	if(NULL != Copy_pstrEXTIConfig)
	{
		u8 Local_u8Iter = 0;
		for(Local_u8Iter = 0; Local_u8Iter < 3; Local_u8Iter++)
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	8f 5f       	subi	r24, 0xFF	; 255
    1146:	89 83       	std	Y+1, r24	; 0x01
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	83 30       	cpi	r24, 0x03	; 3
    114c:	08 f4       	brcc	.+2      	; 0x1150 <EXTI_enuInit+0x266>
    114e:	e2 ce       	rjmp	.-572    	; 0xf14 <EXTI_enuInit+0x2a>
	{
		return ES_NULL_POINTER;
	}


	return Local_enuErrorState;
    1150:	3a 81       	ldd	r19, Y+2	; 0x02
    1152:	3d 83       	std	Y+5, r19	; 0x05
    1154:	02 c0       	rjmp	.+4      	; 0x115a <EXTI_enuInit+0x270>
			}
		}
	}
	else
	{
		return ES_NULL_POINTER;
    1156:	82 e0       	ldi	r24, 0x02	; 2
    1158:	8d 83       	std	Y+5, r24	; 0x05
    115a:	8d 81       	ldd	r24, Y+5	; 0x05
	}


	return Local_enuErrorState;
}
    115c:	2d 96       	adiw	r28, 0x0d	; 13
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <EXTI_enuSetSenceMode>:

ES_t EXTI_enuSetSenceMode(u8 Copy_u8EXTI_ID, u8 Copy_u8SenceLevel)
{
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	2c 97       	sbiw	r28, 0x0c	; 12
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	8a 83       	std	Y+2, r24	; 0x02
    1184:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1186:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8EXTI_ID < 3)
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	83 30       	cpi	r24, 0x03	; 3
    118c:	08 f0       	brcs	.+2      	; 0x1190 <EXTI_enuSetSenceMode+0x22>
    118e:	d5 c0       	rjmp	.+426    	; 0x133a <EXTI_enuSetSenceMode+0x1cc>
	{
		switch(Copy_u8EXTI_ID)
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	3c 87       	std	Y+12, r19	; 0x0c
    1198:	2b 87       	std	Y+11, r18	; 0x0b
    119a:	8b 85       	ldd	r24, Y+11	; 0x0b
    119c:	9c 85       	ldd	r25, Y+12	; 0x0c
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	91 05       	cpc	r25, r1
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <EXTI_enuSetSenceMode+0x38>
    11a4:	56 c0       	rjmp	.+172    	; 0x1252 <EXTI_enuSetSenceMode+0xe4>
    11a6:	2b 85       	ldd	r18, Y+11	; 0x0b
    11a8:	3c 85       	ldd	r19, Y+12	; 0x0c
    11aa:	22 30       	cpi	r18, 0x02	; 2
    11ac:	31 05       	cpc	r19, r1
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <EXTI_enuSetSenceMode+0x44>
    11b0:	9b c0       	rjmp	.+310    	; 0x12e8 <EXTI_enuSetSenceMode+0x17a>
    11b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    11b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    11b6:	00 97       	sbiw	r24, 0x00	; 0
    11b8:	09 f0       	breq	.+2      	; 0x11bc <EXTI_enuSetSenceMode+0x4e>
    11ba:	bc c0       	rjmp	.+376    	; 0x1334 <EXTI_enuSetSenceMode+0x1c6>
		{
		case 0:
			MCUCR &= ~(0x03 << 0);
    11bc:	a5 e5       	ldi	r26, 0x55	; 85
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e5 e5       	ldi	r30, 0x55	; 85
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	8c 7f       	andi	r24, 0xFC	; 252
    11c8:	8c 93       	st	X, r24
			//Check Sense Mode
			switch(Copy_u8SenceLevel)
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	3a 87       	std	Y+10, r19	; 0x0a
    11d2:	29 87       	std	Y+9, r18	; 0x09
    11d4:	89 85       	ldd	r24, Y+9	; 0x09
    11d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d8:	82 30       	cpi	r24, 0x02	; 2
    11da:	91 05       	cpc	r25, r1
    11dc:	01 f1       	breq	.+64     	; 0x121e <EXTI_enuSetSenceMode+0xb0>
    11de:	29 85       	ldd	r18, Y+9	; 0x09
    11e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    11e2:	23 30       	cpi	r18, 0x03	; 3
    11e4:	31 05       	cpc	r19, r1
    11e6:	34 f4       	brge	.+12     	; 0x11f4 <EXTI_enuSetSenceMode+0x86>
    11e8:	89 85       	ldd	r24, Y+9	; 0x09
    11ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	91 05       	cpc	r25, r1
    11f0:	61 f0       	breq	.+24     	; 0x120a <EXTI_enuSetSenceMode+0x9c>
    11f2:	2c c0       	rjmp	.+88     	; 0x124c <EXTI_enuSetSenceMode+0xde>
    11f4:	29 85       	ldd	r18, Y+9	; 0x09
    11f6:	3a 85       	ldd	r19, Y+10	; 0x0a
    11f8:	23 30       	cpi	r18, 0x03	; 3
    11fa:	31 05       	cpc	r19, r1
    11fc:	d1 f0       	breq	.+52     	; 0x1232 <EXTI_enuSetSenceMode+0xc4>
    11fe:	89 85       	ldd	r24, Y+9	; 0x09
    1200:	9a 85       	ldd	r25, Y+10	; 0x0a
    1202:	84 30       	cpi	r24, 0x04	; 4
    1204:	91 05       	cpc	r25, r1
    1206:	f9 f0       	breq	.+62     	; 0x1246 <EXTI_enuSetSenceMode+0xd8>
    1208:	21 c0       	rjmp	.+66     	; 0x124c <EXTI_enuSetSenceMode+0xde>
			{
			case RISING_EDGE:
				MCUCR |= (3 << 0);
    120a:	a5 e5       	ldi	r26, 0x55	; 85
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e5 e5       	ldi	r30, 0x55	; 85
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	83 60       	ori	r24, 0x03	; 3
    1216:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	89 83       	std	Y+1, r24	; 0x01
    121c:	8b c0       	rjmp	.+278    	; 0x1334 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case FALLING_EDGE:
				MCUCR |= (1 << 1);
    121e:	a5 e5       	ldi	r26, 0x55	; 85
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e5 e5       	ldi	r30, 0x55	; 85
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	82 60       	ori	r24, 0x02	; 2
    122a:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	81 c0       	rjmp	.+258    	; 0x1334 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case ANY_LOGIC:
				MCUCR |= (1 << 0);
    1232:	a5 e5       	ldi	r26, 0x55	; 85
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e5 e5       	ldi	r30, 0x55	; 85
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	81 60       	ori	r24, 0x01	; 1
    123e:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	89 83       	std	Y+1, r24	; 0x01
    1244:	77 c0       	rjmp	.+238    	; 0x1334 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case LOW_LEVEL:
				Local_enuErrorState = ES_OK;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	89 83       	std	Y+1, r24	; 0x01
    124a:	74 c0       	rjmp	.+232    	; 0x1334 <EXTI_enuSetSenceMode+0x1c6>
				break;
			default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    124c:	83 e0       	ldi	r24, 0x03	; 3
    124e:	89 83       	std	Y+1, r24	; 0x01
    1250:	71 c0       	rjmp	.+226    	; 0x1334 <EXTI_enuSetSenceMode+0x1c6>
			}
			break;

		case 1:
			MCUCR &= ~(3<<2); //Mask second 2 bits
    1252:	a5 e5       	ldi	r26, 0x55	; 85
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e5 e5       	ldi	r30, 0x55	; 85
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	83 7f       	andi	r24, 0xF3	; 243
    125e:	8c 93       	st	X, r24
			switch(Copy_u8SenceLevel)
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	38 87       	std	Y+8, r19	; 0x08
    1268:	2f 83       	std	Y+7, r18	; 0x07
    126a:	8f 81       	ldd	r24, Y+7	; 0x07
    126c:	98 85       	ldd	r25, Y+8	; 0x08
    126e:	82 30       	cpi	r24, 0x02	; 2
    1270:	91 05       	cpc	r25, r1
    1272:	01 f1       	breq	.+64     	; 0x12b4 <EXTI_enuSetSenceMode+0x146>
    1274:	2f 81       	ldd	r18, Y+7	; 0x07
    1276:	38 85       	ldd	r19, Y+8	; 0x08
    1278:	23 30       	cpi	r18, 0x03	; 3
    127a:	31 05       	cpc	r19, r1
    127c:	34 f4       	brge	.+12     	; 0x128a <EXTI_enuSetSenceMode+0x11c>
    127e:	8f 81       	ldd	r24, Y+7	; 0x07
    1280:	98 85       	ldd	r25, Y+8	; 0x08
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	91 05       	cpc	r25, r1
    1286:	61 f0       	breq	.+24     	; 0x12a0 <EXTI_enuSetSenceMode+0x132>
    1288:	2c c0       	rjmp	.+88     	; 0x12e2 <EXTI_enuSetSenceMode+0x174>
    128a:	2f 81       	ldd	r18, Y+7	; 0x07
    128c:	38 85       	ldd	r19, Y+8	; 0x08
    128e:	23 30       	cpi	r18, 0x03	; 3
    1290:	31 05       	cpc	r19, r1
    1292:	d1 f0       	breq	.+52     	; 0x12c8 <EXTI_enuSetSenceMode+0x15a>
    1294:	8f 81       	ldd	r24, Y+7	; 0x07
    1296:	98 85       	ldd	r25, Y+8	; 0x08
    1298:	84 30       	cpi	r24, 0x04	; 4
    129a:	91 05       	cpc	r25, r1
    129c:	f9 f0       	breq	.+62     	; 0x12dc <EXTI_enuSetSenceMode+0x16e>
    129e:	21 c0       	rjmp	.+66     	; 0x12e2 <EXTI_enuSetSenceMode+0x174>
			{
			case RISING_EDGE:
				MCUCR |= (3 << 2);
    12a0:	a5 e5       	ldi	r26, 0x55	; 85
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e5 e5       	ldi	r30, 0x55	; 85
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	8c 60       	ori	r24, 0x0C	; 12
    12ac:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	40 c0       	rjmp	.+128    	; 0x1334 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case FALLING_EDGE:
				MCUCR |= (1 << 3);
    12b4:	a5 e5       	ldi	r26, 0x55	; 85
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e5 e5       	ldi	r30, 0x55	; 85
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	88 60       	ori	r24, 0x08	; 8
    12c0:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	89 83       	std	Y+1, r24	; 0x01
    12c6:	36 c0       	rjmp	.+108    	; 0x1334 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case ANY_LOGIC:
				MCUCR |= (1 << 2);
    12c8:	a5 e5       	ldi	r26, 0x55	; 85
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e5 e5       	ldi	r30, 0x55	; 85
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	84 60       	ori	r24, 0x04	; 4
    12d4:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	89 83       	std	Y+1, r24	; 0x01
    12da:	2c c0       	rjmp	.+88     	; 0x1334 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case LOW_LEVEL:
				Local_enuErrorState = ES_OK;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	89 83       	std	Y+1, r24	; 0x01
    12e0:	29 c0       	rjmp	.+82     	; 0x1334 <EXTI_enuSetSenceMode+0x1c6>
				break;
			default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    12e2:	83 e0       	ldi	r24, 0x03	; 3
    12e4:	89 83       	std	Y+1, r24	; 0x01
    12e6:	26 c0       	rjmp	.+76     	; 0x1334 <EXTI_enuSetSenceMode+0x1c6>
			}
			break;

		case 2:
			MCUCSR &= ~(1<<6); //Mask its control sense bit
    12e8:	a4 e5       	ldi	r26, 0x54	; 84
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e4 e5       	ldi	r30, 0x54	; 84
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	8f 7b       	andi	r24, 0xBF	; 191
    12f4:	8c 93       	st	X, r24

			switch(Copy_u8SenceLevel)
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	3e 83       	std	Y+6, r19	; 0x06
    12fe:	2d 83       	std	Y+5, r18	; 0x05
    1300:	8d 81       	ldd	r24, Y+5	; 0x05
    1302:	9e 81       	ldd	r25, Y+6	; 0x06
    1304:	81 30       	cpi	r24, 0x01	; 1
    1306:	91 05       	cpc	r25, r1
    1308:	31 f0       	breq	.+12     	; 0x1316 <EXTI_enuSetSenceMode+0x1a8>
    130a:	2d 81       	ldd	r18, Y+5	; 0x05
    130c:	3e 81       	ldd	r19, Y+6	; 0x06
    130e:	22 30       	cpi	r18, 0x02	; 2
    1310:	31 05       	cpc	r19, r1
    1312:	59 f0       	breq	.+22     	; 0x132a <EXTI_enuSetSenceMode+0x1bc>
    1314:	0d c0       	rjmp	.+26     	; 0x1330 <EXTI_enuSetSenceMode+0x1c2>
			{
			case RISING_EDGE:
				MCUCSR |= (1 << 6);
    1316:	a4 e5       	ldi	r26, 0x54	; 84
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e4 e5       	ldi	r30, 0x54	; 84
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	80 64       	ori	r24, 0x40	; 64
    1322:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	89 83       	std	Y+1, r24	; 0x01
    1328:	05 c0       	rjmp	.+10     	; 0x1334 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case FALLING_EDGE:
				Local_enuErrorState = ES_OK;
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	89 83       	std	Y+1, r24	; 0x01
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <EXTI_enuSetSenceMode+0x1c6>
				break;
			default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    1330:	83 e0       	ldi	r24, 0x03	; 3
    1332:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		return ES_OUT_OF_RANGE;
	}

	return Local_enuErrorState;
    1334:	39 81       	ldd	r19, Y+1	; 0x01
    1336:	3c 83       	std	Y+4, r19	; 0x04
    1338:	02 c0       	rjmp	.+4      	; 0x133e <EXTI_enuSetSenceMode+0x1d0>

		}
	}
	else
	{
		return ES_OUT_OF_RANGE;
    133a:	83 e0       	ldi	r24, 0x03	; 3
    133c:	8c 83       	std	Y+4, r24	; 0x04
    133e:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return Local_enuErrorState;
}
    1340:	2c 96       	adiw	r28, 0x0c	; 12
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	cf 91       	pop	r28
    134e:	df 91       	pop	r29
    1350:	08 95       	ret

00001352 <EXTI_enuEnableINT>:

ES_t EXTI_enuEnableINT(u8 Copy_u8EXTI_ID)
{
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	00 d0       	rcall	.+0      	; 0x1358 <EXTI_enuEnableINT+0x6>
    1358:	00 d0       	rcall	.+0      	; 0x135a <EXTI_enuEnableINT+0x8>
    135a:	0f 92       	push	r0
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1362:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8EXTI_ID < 3)
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	83 30       	cpi	r24, 0x03	; 3
    1368:	98 f5       	brcc	.+102    	; 0x13d0 <EXTI_enuEnableINT+0x7e>
	{
		switch(Copy_u8EXTI_ID)
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	3d 83       	std	Y+5, r19	; 0x05
    1372:	2c 83       	std	Y+4, r18	; 0x04
    1374:	8c 81       	ldd	r24, Y+4	; 0x04
    1376:	9d 81       	ldd	r25, Y+5	; 0x05
    1378:	81 30       	cpi	r24, 0x01	; 1
    137a:	91 05       	cpc	r25, r1
    137c:	99 f0       	breq	.+38     	; 0x13a4 <EXTI_enuEnableINT+0x52>
    137e:	2c 81       	ldd	r18, Y+4	; 0x04
    1380:	3d 81       	ldd	r19, Y+5	; 0x05
    1382:	22 30       	cpi	r18, 0x02	; 2
    1384:	31 05       	cpc	r19, r1
    1386:	c1 f0       	breq	.+48     	; 0x13b8 <EXTI_enuEnableINT+0x66>
    1388:	8c 81       	ldd	r24, Y+4	; 0x04
    138a:	9d 81       	ldd	r25, Y+5	; 0x05
    138c:	00 97       	sbiw	r24, 0x00	; 0
    138e:	e9 f4       	brne	.+58     	; 0x13ca <EXTI_enuEnableINT+0x78>
		{
		case 0:
			GICR |= (1<<6);
    1390:	ab e5       	ldi	r26, 0x5B	; 91
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	eb e5       	ldi	r30, 0x5B	; 91
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	80 64       	ori	r24, 0x40	; 64
    139c:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	13 c0       	rjmp	.+38     	; 0x13ca <EXTI_enuEnableINT+0x78>
			break;

		case 1:
			GICR |= (1<<7);
    13a4:	ab e5       	ldi	r26, 0x5B	; 91
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	eb e5       	ldi	r30, 0x5B	; 91
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	80 68       	ori	r24, 0x80	; 128
    13b0:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	89 83       	std	Y+1, r24	; 0x01
    13b6:	09 c0       	rjmp	.+18     	; 0x13ca <EXTI_enuEnableINT+0x78>
			break;

		case 2:
			GICR |= (1<<5);
    13b8:	ab e5       	ldi	r26, 0x5B	; 91
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	eb e5       	ldi	r30, 0x5B	; 91
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	80 62       	ori	r24, 0x20	; 32
    13c4:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		return ES_OUT_OF_RANGE;
	}

	return Local_enuErrorState;
    13ca:	99 81       	ldd	r25, Y+1	; 0x01
    13cc:	9b 83       	std	Y+3, r25	; 0x03
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <EXTI_enuEnableINT+0x82>
			break;
		}
	}
	else
	{
		return ES_OUT_OF_RANGE;
    13d0:	23 e0       	ldi	r18, 0x03	; 3
    13d2:	2b 83       	std	Y+3, r18	; 0x03
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
	}

	return Local_enuErrorState;
}
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <EXTI_enuDisableINT>:

ES_t EXTI_enuDisableINT(u8 Copy_u8EXTI_ID)
{
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <EXTI_enuDisableINT+0x6>
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <EXTI_enuDisableINT+0x8>
    13ee:	0f 92       	push	r0
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    13f6:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8EXTI_ID < 3)
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	83 30       	cpi	r24, 0x03	; 3
    13fc:	98 f5       	brcc	.+102    	; 0x1464 <EXTI_enuDisableINT+0x7e>
	{
		switch(Copy_u8EXTI_ID)
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	3d 83       	std	Y+5, r19	; 0x05
    1406:	2c 83       	std	Y+4, r18	; 0x04
    1408:	8c 81       	ldd	r24, Y+4	; 0x04
    140a:	9d 81       	ldd	r25, Y+5	; 0x05
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	91 05       	cpc	r25, r1
    1410:	99 f0       	breq	.+38     	; 0x1438 <EXTI_enuDisableINT+0x52>
    1412:	2c 81       	ldd	r18, Y+4	; 0x04
    1414:	3d 81       	ldd	r19, Y+5	; 0x05
    1416:	22 30       	cpi	r18, 0x02	; 2
    1418:	31 05       	cpc	r19, r1
    141a:	c1 f0       	breq	.+48     	; 0x144c <EXTI_enuDisableINT+0x66>
    141c:	8c 81       	ldd	r24, Y+4	; 0x04
    141e:	9d 81       	ldd	r25, Y+5	; 0x05
    1420:	00 97       	sbiw	r24, 0x00	; 0
    1422:	e9 f4       	brne	.+58     	; 0x145e <EXTI_enuDisableINT+0x78>
		{
		case 0:
			GICR &= ~(1<<6);
    1424:	ab e5       	ldi	r26, 0x5B	; 91
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	eb e5       	ldi	r30, 0x5B	; 91
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	8f 7b       	andi	r24, 0xBF	; 191
    1430:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	89 83       	std	Y+1, r24	; 0x01
    1436:	13 c0       	rjmp	.+38     	; 0x145e <EXTI_enuDisableINT+0x78>
			break;

		case 1:
			GICR &= ~(1<<7);
    1438:	ab e5       	ldi	r26, 0x5B	; 91
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	eb e5       	ldi	r30, 0x5B	; 91
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	8f 77       	andi	r24, 0x7F	; 127
    1444:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	89 83       	std	Y+1, r24	; 0x01
    144a:	09 c0       	rjmp	.+18     	; 0x145e <EXTI_enuDisableINT+0x78>
			break;

		case 2:
			GICR &= ~(1<<5);
    144c:	ab e5       	ldi	r26, 0x5B	; 91
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	eb e5       	ldi	r30, 0x5B	; 91
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	8f 7d       	andi	r24, 0xDF	; 223
    1458:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		return ES_OUT_OF_RANGE;
	}

	return Local_enuErrorState;
    145e:	99 81       	ldd	r25, Y+1	; 0x01
    1460:	9b 83       	std	Y+3, r25	; 0x03
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <EXTI_enuDisableINT+0x82>
			break;
		}
	}
	else
	{
		return ES_OUT_OF_RANGE;
    1464:	23 e0       	ldi	r18, 0x03	; 3
    1466:	2b 83       	std	Y+3, r18	; 0x03
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
	}

	return Local_enuErrorState;
}
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	cf 91       	pop	r28
    1476:	df 91       	pop	r29
    1478:	08 95       	ret

0000147a <EXTI_enuCallBack>:

ES_t EXTI_enuCallBack(void (*Copy_pfunAppFun)(void), void * Copy_pvoidParameter, u8 Copy_u8EXTI_ID)
{
    147a:	df 93       	push	r29
    147c:	cf 93       	push	r28
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	27 97       	sbiw	r28, 0x07	; 7
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	de bf       	out	0x3e, r29	; 62
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	cd bf       	out	0x3d, r28	; 61
    148e:	9b 83       	std	Y+3, r25	; 0x03
    1490:	8a 83       	std	Y+2, r24	; 0x02
    1492:	7d 83       	std	Y+5, r23	; 0x05
    1494:	6c 83       	std	Y+4, r22	; 0x04
    1496:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
    1498:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8EXTI_ID < 3)
    149a:	8e 81       	ldd	r24, Y+6	; 0x06
    149c:	83 30       	cpi	r24, 0x03	; 3
    149e:	20 f5       	brcc	.+72     	; 0x14e8 <EXTI_enuCallBack+0x6e>
	{
		if(Copy_pfunAppFun != NULL)
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	9b 81       	ldd	r25, Y+3	; 0x03
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	c9 f0       	breq	.+50     	; 0x14da <EXTI_enuCallBack+0x60>
		{
			EXTI_ApfunINTFun[Copy_u8EXTI_ID] = Copy_pfunAppFun;
    14a8:	8e 81       	ldd	r24, Y+6	; 0x06
    14aa:	88 2f       	mov	r24, r24
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	2a 81       	ldd	r18, Y+2	; 0x02
    14b0:	3b 81       	ldd	r19, Y+3	; 0x03
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	fc 01       	movw	r30, r24
    14b8:	e8 51       	subi	r30, 0x18	; 24
    14ba:	fe 4f       	sbci	r31, 0xFE	; 254
    14bc:	31 83       	std	Z+1, r19	; 0x01
    14be:	20 83       	st	Z, r18
			EXTI_ApvoidGenericparameter[Copy_u8EXTI_ID] = Copy_pvoidParameter;
    14c0:	8e 81       	ldd	r24, Y+6	; 0x06
    14c2:	88 2f       	mov	r24, r24
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	fc 01       	movw	r30, r24
    14cc:	e2 51       	subi	r30, 0x12	; 18
    14ce:	fe 4f       	sbci	r31, 0xFE	; 254
    14d0:	8c 81       	ldd	r24, Y+4	; 0x04
    14d2:	9d 81       	ldd	r25, Y+5	; 0x05
    14d4:	91 83       	std	Z+1, r25	; 0x01
    14d6:	80 83       	st	Z, r24
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <EXTI_enuCallBack+0x64>
		}
		else
		{
			Local_enuErrorState = ES_NULL_POINTER;
    14da:	82 e0       	ldi	r24, 0x02	; 2
    14dc:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		return ES_OUT_OF_RANGE;
	}

	Local_enuErrorState = ES_OK;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	8f 83       	std	Y+7, r24	; 0x07
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <EXTI_enuCallBack+0x72>
			Local_enuErrorState = ES_NULL_POINTER;
		}
	}
	else
	{
		return ES_OUT_OF_RANGE;
    14e8:	83 e0       	ldi	r24, 0x03	; 3
    14ea:	8f 83       	std	Y+7, r24	; 0x07
    14ec:	8f 81       	ldd	r24, Y+7	; 0x07
	}

	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
}
    14ee:	27 96       	adiw	r28, 0x07	; 7
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	f8 94       	cli
    14f4:	de bf       	out	0x3e, r29	; 62
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	cd bf       	out	0x3d, r28	; 61
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	08 95       	ret

00001500 <__vector_1>:

ISR(VECT_INT0)
{
    1500:	1f 92       	push	r1
    1502:	0f 92       	push	r0
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	0f 92       	push	r0
    1508:	11 24       	eor	r1, r1
    150a:	2f 93       	push	r18
    150c:	3f 93       	push	r19
    150e:	4f 93       	push	r20
    1510:	5f 93       	push	r21
    1512:	6f 93       	push	r22
    1514:	7f 93       	push	r23
    1516:	8f 93       	push	r24
    1518:	9f 93       	push	r25
    151a:	af 93       	push	r26
    151c:	bf 93       	push	r27
    151e:	ef 93       	push	r30
    1520:	ff 93       	push	r31
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfunINTFun[0] != NULL)
    152a:	80 91 e8 01 	lds	r24, 0x01E8
    152e:	90 91 e9 01 	lds	r25, 0x01E9
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	49 f0       	breq	.+18     	; 0x1548 <__vector_1+0x48>
	{
		/* Two approaches working well*/
		(*EXTI_ApfunINTFun[0])(EXTI_ApvoidGenericparameter[0]);
    1536:	e0 91 e8 01 	lds	r30, 0x01E8
    153a:	f0 91 e9 01 	lds	r31, 0x01E9
    153e:	80 91 ee 01 	lds	r24, 0x01EE
    1542:	90 91 ef 01 	lds	r25, 0x01EF
    1546:	09 95       	icall
		//(*EXTI_ApfunINTFun[0])(EXTI_ApvoidGenericparameter[0]);
	}
}
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	ff 91       	pop	r31
    154e:	ef 91       	pop	r30
    1550:	bf 91       	pop	r27
    1552:	af 91       	pop	r26
    1554:	9f 91       	pop	r25
    1556:	8f 91       	pop	r24
    1558:	7f 91       	pop	r23
    155a:	6f 91       	pop	r22
    155c:	5f 91       	pop	r21
    155e:	4f 91       	pop	r20
    1560:	3f 91       	pop	r19
    1562:	2f 91       	pop	r18
    1564:	0f 90       	pop	r0
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	0f 90       	pop	r0
    156a:	1f 90       	pop	r1
    156c:	18 95       	reti

0000156e <__vector_2>:

ISR(VECT_INT1)
{
    156e:	1f 92       	push	r1
    1570:	0f 92       	push	r0
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	0f 92       	push	r0
    1576:	11 24       	eor	r1, r1
    1578:	2f 93       	push	r18
    157a:	3f 93       	push	r19
    157c:	4f 93       	push	r20
    157e:	5f 93       	push	r21
    1580:	6f 93       	push	r22
    1582:	7f 93       	push	r23
    1584:	8f 93       	push	r24
    1586:	9f 93       	push	r25
    1588:	af 93       	push	r26
    158a:	bf 93       	push	r27
    158c:	ef 93       	push	r30
    158e:	ff 93       	push	r31
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfunINTFun[1] != NULL)
    1598:	80 91 ea 01 	lds	r24, 0x01EA
    159c:	90 91 eb 01 	lds	r25, 0x01EB
    15a0:	00 97       	sbiw	r24, 0x00	; 0
    15a2:	49 f0       	breq	.+18     	; 0x15b6 <__vector_2+0x48>
	{
		(*EXTI_ApfunINTFun[1])(EXTI_ApvoidGenericparameter[1]);
    15a4:	e0 91 ea 01 	lds	r30, 0x01EA
    15a8:	f0 91 eb 01 	lds	r31, 0x01EB
    15ac:	80 91 f0 01 	lds	r24, 0x01F0
    15b0:	90 91 f1 01 	lds	r25, 0x01F1
    15b4:	09 95       	icall
	}
}
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	ff 91       	pop	r31
    15bc:	ef 91       	pop	r30
    15be:	bf 91       	pop	r27
    15c0:	af 91       	pop	r26
    15c2:	9f 91       	pop	r25
    15c4:	8f 91       	pop	r24
    15c6:	7f 91       	pop	r23
    15c8:	6f 91       	pop	r22
    15ca:	5f 91       	pop	r21
    15cc:	4f 91       	pop	r20
    15ce:	3f 91       	pop	r19
    15d0:	2f 91       	pop	r18
    15d2:	0f 90       	pop	r0
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	0f 90       	pop	r0
    15d8:	1f 90       	pop	r1
    15da:	18 95       	reti

000015dc <__vector_3>:

ISR(VECT_INT2)
{
    15dc:	1f 92       	push	r1
    15de:	0f 92       	push	r0
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	0f 92       	push	r0
    15e4:	11 24       	eor	r1, r1
    15e6:	2f 93       	push	r18
    15e8:	3f 93       	push	r19
    15ea:	4f 93       	push	r20
    15ec:	5f 93       	push	r21
    15ee:	6f 93       	push	r22
    15f0:	7f 93       	push	r23
    15f2:	8f 93       	push	r24
    15f4:	9f 93       	push	r25
    15f6:	af 93       	push	r26
    15f8:	bf 93       	push	r27
    15fa:	ef 93       	push	r30
    15fc:	ff 93       	push	r31
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfunINTFun[2] != NULL)
    1606:	80 91 ec 01 	lds	r24, 0x01EC
    160a:	90 91 ed 01 	lds	r25, 0x01ED
    160e:	00 97       	sbiw	r24, 0x00	; 0
    1610:	49 f0       	breq	.+18     	; 0x1624 <__vector_3+0x48>
	{
		(*EXTI_ApfunINTFun[2])(EXTI_ApvoidGenericparameter[2]);
    1612:	e0 91 ec 01 	lds	r30, 0x01EC
    1616:	f0 91 ed 01 	lds	r31, 0x01ED
    161a:	80 91 f2 01 	lds	r24, 0x01F2
    161e:	90 91 f3 01 	lds	r25, 0x01F3
    1622:	09 95       	icall
	}
}
    1624:	cf 91       	pop	r28
    1626:	df 91       	pop	r29
    1628:	ff 91       	pop	r31
    162a:	ef 91       	pop	r30
    162c:	bf 91       	pop	r27
    162e:	af 91       	pop	r26
    1630:	9f 91       	pop	r25
    1632:	8f 91       	pop	r24
    1634:	7f 91       	pop	r23
    1636:	6f 91       	pop	r22
    1638:	5f 91       	pop	r21
    163a:	4f 91       	pop	r20
    163c:	3f 91       	pop	r19
    163e:	2f 91       	pop	r18
    1640:	0f 90       	pop	r0
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	0f 90       	pop	r0
    1646:	1f 90       	pop	r1
    1648:	18 95       	reti

0000164a <DIO_enuInit>:
#include "DIO_config.h"



ES_t DIO_enuInit(void)
{
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	0f 92       	push	r0
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1654:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR, PA_PIN6_DIR, PA_PIN5_DIR, PA_PIN4_DIR, PA_PIN3_DIR, PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
    1656:	ea e3       	ldi	r30, 0x3A	; 58
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	8f ef       	ldi	r24, 0xFF	; 255
    165c:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR, PB_PIN6_DIR, PB_PIN5_DIR, PB_PIN4_DIR, PB_PIN3_DIR, PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
    165e:	e7 e3       	ldi	r30, 0x37	; 55
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	8f ef       	ldi	r24, 0xFF	; 255
    1664:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR, PC_PIN6_DIR, PC_PIN5_DIR, PC_PIN4_DIR, PC_PIN3_DIR, PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
    1666:	e4 e3       	ldi	r30, 0x34	; 52
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	8a ea       	ldi	r24, 0xAA	; 170
    166c:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR, PD_PIN6_DIR, PD_PIN5_DIR, PD_PIN4_DIR, PD_PIN3_DIR, PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
    166e:	e1 e3       	ldi	r30, 0x31	; 49
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	8a ea       	ldi	r24, 0xAA	; 170
    1674:	80 83       	st	Z, r24

	PORTA = CONC(PA_PIN7_VAL, PA_PIN6_VAL, PA_PIN5_VAL, PA_PIN4_VAL, PA_PIN3_VAL, PA_PIN2_VAL, PA_PIN1_VAL, PA_PIN0_VAL);
    1676:	eb e3       	ldi	r30, 0x3B	; 59
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	10 82       	st	Z, r1
	PORTB = CONC(PB_PIN7_VAL, PB_PIN6_VAL, PB_PIN5_VAL, PB_PIN4_VAL, PB_PIN3_VAL, PB_PIN2_VAL, PB_PIN1_VAL, PB_PIN0_VAL);
    167c:	e8 e3       	ldi	r30, 0x38	; 56
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	10 82       	st	Z, r1
	PORTC = CONC(PC_PIN7_VAL, PC_PIN6_VAL, PC_PIN5_VAL, PC_PIN4_VAL, PC_PIN3_VAL, PC_PIN2_VAL, PC_PIN1_VAL, PC_PIN0_VAL);
    1682:	e5 e3       	ldi	r30, 0x35	; 53
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	86 e6       	ldi	r24, 0x66	; 102
    1688:	80 83       	st	Z, r24
	PORTD = CONC(PD_PIN7_VAL, PD_PIN6_VAL, PD_PIN5_VAL, PD_PIN4_VAL, PD_PIN3_VAL, PD_PIN2_VAL, PD_PIN1_VAL, PD_PIN0_VAL);
    168a:	e2 e3       	ldi	r30, 0x32	; 50
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	86 e6       	ldi	r24, 0x66	; 102
    1690:	80 83       	st	Z, r24

	Local_enuErrorState = ES_OK;
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1696:	89 81       	ldd	r24, Y+1	; 0x01
}
    1698:	0f 90       	pop	r0
    169a:	cf 91       	pop	r28
    169c:	df 91       	pop	r29
    169e:	08 95       	ret

000016a0 <DIO_enuSetPortDirection>:


ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    16a0:	df 93       	push	r29
    16a2:	cf 93       	push	r28
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <DIO_enuSetPortDirection+0x6>
    16a6:	00 d0       	rcall	.+0      	; 0x16a8 <DIO_enuSetPortDirection+0x8>
    16a8:	0f 92       	push	r0
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	8a 83       	std	Y+2, r24	; 0x02
    16b0:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    16b2:	19 82       	std	Y+1, r1	; 0x01

	/*Range Check*/
	if(Copy_u8PortID <= DIO_PORTD)
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	84 30       	cpi	r24, 0x04	; 4
    16b8:	a8 f5       	brcc	.+106    	; 0x1724 <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	3d 83       	std	Y+5, r19	; 0x05
    16c2:	2c 83       	std	Y+4, r18	; 0x04
    16c4:	8c 81       	ldd	r24, Y+4	; 0x04
    16c6:	9d 81       	ldd	r25, Y+5	; 0x05
    16c8:	81 30       	cpi	r24, 0x01	; 1
    16ca:	91 05       	cpc	r25, r1
    16cc:	d1 f0       	breq	.+52     	; 0x1702 <DIO_enuSetPortDirection+0x62>
    16ce:	2c 81       	ldd	r18, Y+4	; 0x04
    16d0:	3d 81       	ldd	r19, Y+5	; 0x05
    16d2:	22 30       	cpi	r18, 0x02	; 2
    16d4:	31 05       	cpc	r19, r1
    16d6:	2c f4       	brge	.+10     	; 0x16e2 <DIO_enuSetPortDirection+0x42>
    16d8:	8c 81       	ldd	r24, Y+4	; 0x04
    16da:	9d 81       	ldd	r25, Y+5	; 0x05
    16dc:	00 97       	sbiw	r24, 0x00	; 0
    16de:	61 f0       	breq	.+24     	; 0x16f8 <DIO_enuSetPortDirection+0x58>
    16e0:	1e c0       	rjmp	.+60     	; 0x171e <DIO_enuSetPortDirection+0x7e>
    16e2:	2c 81       	ldd	r18, Y+4	; 0x04
    16e4:	3d 81       	ldd	r19, Y+5	; 0x05
    16e6:	22 30       	cpi	r18, 0x02	; 2
    16e8:	31 05       	cpc	r19, r1
    16ea:	81 f0       	breq	.+32     	; 0x170c <DIO_enuSetPortDirection+0x6c>
    16ec:	8c 81       	ldd	r24, Y+4	; 0x04
    16ee:	9d 81       	ldd	r25, Y+5	; 0x05
    16f0:	83 30       	cpi	r24, 0x03	; 3
    16f2:	91 05       	cpc	r25, r1
    16f4:	81 f0       	breq	.+32     	; 0x1716 <DIO_enuSetPortDirection+0x76>
    16f6:	13 c0       	rjmp	.+38     	; 0x171e <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
    16f8:	ea e3       	ldi	r30, 0x3A	; 58
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	80 83       	st	Z, r24
    1700:	0e c0       	rjmp	.+28     	; 0x171e <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
    1702:	e7 e3       	ldi	r30, 0x37	; 55
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	80 83       	st	Z, r24
    170a:	09 c0       	rjmp	.+18     	; 0x171e <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
    170c:	e4 e3       	ldi	r30, 0x34	; 52
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	80 83       	st	Z, r24
    1714:	04 c0       	rjmp	.+8      	; 0x171e <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
    1716:	e1 e3       	ldi	r30, 0x31	; 49
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1724:	83 e0       	ldi	r24, 0x03	; 3
    1726:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1728:	89 81       	ldd	r24, Y+1	; 0x01
}
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <DIO_enuSetPortValue>:


ES_t DIO_enuSetPortValue(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	00 d0       	rcall	.+0      	; 0x1740 <DIO_enuSetPortValue+0x6>
    1740:	00 d0       	rcall	.+0      	; 0x1742 <DIO_enuSetPortValue+0x8>
    1742:	0f 92       	push	r0
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	8a 83       	std	Y+2, r24	; 0x02
    174a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    174c:	19 82       	std	Y+1, r1	; 0x01

	/* Range Check */
	if(Copy_u8PortID <= DIO_PORTD)
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	84 30       	cpi	r24, 0x04	; 4
    1752:	a8 f5       	brcc	.+106    	; 0x17be <DIO_enuSetPortValue+0x84>
	{
		switch(Copy_u8PortID)
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	28 2f       	mov	r18, r24
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	3d 83       	std	Y+5, r19	; 0x05
    175c:	2c 83       	std	Y+4, r18	; 0x04
    175e:	8c 81       	ldd	r24, Y+4	; 0x04
    1760:	9d 81       	ldd	r25, Y+5	; 0x05
    1762:	81 30       	cpi	r24, 0x01	; 1
    1764:	91 05       	cpc	r25, r1
    1766:	d1 f0       	breq	.+52     	; 0x179c <DIO_enuSetPortValue+0x62>
    1768:	2c 81       	ldd	r18, Y+4	; 0x04
    176a:	3d 81       	ldd	r19, Y+5	; 0x05
    176c:	22 30       	cpi	r18, 0x02	; 2
    176e:	31 05       	cpc	r19, r1
    1770:	2c f4       	brge	.+10     	; 0x177c <DIO_enuSetPortValue+0x42>
    1772:	8c 81       	ldd	r24, Y+4	; 0x04
    1774:	9d 81       	ldd	r25, Y+5	; 0x05
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	61 f0       	breq	.+24     	; 0x1792 <DIO_enuSetPortValue+0x58>
    177a:	1e c0       	rjmp	.+60     	; 0x17b8 <DIO_enuSetPortValue+0x7e>
    177c:	2c 81       	ldd	r18, Y+4	; 0x04
    177e:	3d 81       	ldd	r19, Y+5	; 0x05
    1780:	22 30       	cpi	r18, 0x02	; 2
    1782:	31 05       	cpc	r19, r1
    1784:	81 f0       	breq	.+32     	; 0x17a6 <DIO_enuSetPortValue+0x6c>
    1786:	8c 81       	ldd	r24, Y+4	; 0x04
    1788:	9d 81       	ldd	r25, Y+5	; 0x05
    178a:	83 30       	cpi	r24, 0x03	; 3
    178c:	91 05       	cpc	r25, r1
    178e:	81 f0       	breq	.+32     	; 0x17b0 <DIO_enuSetPortValue+0x76>
    1790:	13 c0       	rjmp	.+38     	; 0x17b8 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA = Copy_u8Value;
    1792:	eb e3       	ldi	r30, 0x3B	; 59
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	80 83       	st	Z, r24
    179a:	0e c0       	rjmp	.+28     	; 0x17b8 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8Value;
    179c:	e8 e3       	ldi	r30, 0x38	; 56
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	80 83       	st	Z, r24
    17a4:	09 c0       	rjmp	.+18     	; 0x17b8 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8Value;
    17a6:	e5 e3       	ldi	r30, 0x35	; 53
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	80 83       	st	Z, r24
    17ae:	04 c0       	rjmp	.+8      	; 0x17b8 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = Copy_u8Value;
    17b0:	e2 e3       	ldi	r30, 0x32	; 50
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	89 83       	std	Y+1, r24	; 0x01
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    17be:	83 e0       	ldi	r24, 0x03	; 3
    17c0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	08 95       	ret

000017d4 <DIO_enuTogPortValue>:


ES_t DIO_enuTogPortValue(u8 Copy_u8PortID)
{
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	00 d0       	rcall	.+0      	; 0x17da <DIO_enuTogPortValue+0x6>
    17da:	00 d0       	rcall	.+0      	; 0x17dc <DIO_enuTogPortValue+0x8>
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
    17e0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    17e2:	19 82       	std	Y+1, r1	; 0x01

	/* Range Check */
	if(Copy_u8PortID <= DIO_PORTD)
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	84 30       	cpi	r24, 0x04	; 4
    17e8:	08 f0       	brcs	.+2      	; 0x17ec <DIO_enuTogPortValue+0x18>
    17ea:	41 c0       	rjmp	.+130    	; 0x186e <DIO_enuTogPortValue+0x9a>
	{
		switch(Copy_u8PortID)
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	3c 83       	std	Y+4, r19	; 0x04
    17f4:	2b 83       	std	Y+3, r18	; 0x03
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	9c 81       	ldd	r25, Y+4	; 0x04
    17fa:	81 30       	cpi	r24, 0x01	; 1
    17fc:	91 05       	cpc	r25, r1
    17fe:	e9 f0       	breq	.+58     	; 0x183a <DIO_enuTogPortValue+0x66>
    1800:	2b 81       	ldd	r18, Y+3	; 0x03
    1802:	3c 81       	ldd	r19, Y+4	; 0x04
    1804:	22 30       	cpi	r18, 0x02	; 2
    1806:	31 05       	cpc	r19, r1
    1808:	2c f4       	brge	.+10     	; 0x1814 <DIO_enuTogPortValue+0x40>
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	9c 81       	ldd	r25, Y+4	; 0x04
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	61 f0       	breq	.+24     	; 0x182a <DIO_enuTogPortValue+0x56>
    1812:	2a c0       	rjmp	.+84     	; 0x1868 <DIO_enuTogPortValue+0x94>
    1814:	2b 81       	ldd	r18, Y+3	; 0x03
    1816:	3c 81       	ldd	r19, Y+4	; 0x04
    1818:	22 30       	cpi	r18, 0x02	; 2
    181a:	31 05       	cpc	r19, r1
    181c:	b1 f0       	breq	.+44     	; 0x184a <DIO_enuTogPortValue+0x76>
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	9c 81       	ldd	r25, Y+4	; 0x04
    1822:	83 30       	cpi	r24, 0x03	; 3
    1824:	91 05       	cpc	r25, r1
    1826:	c9 f0       	breq	.+50     	; 0x185a <DIO_enuTogPortValue+0x86>
    1828:	1f c0       	rjmp	.+62     	; 0x1868 <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA = ~PORTA;
    182a:	ab e3       	ldi	r26, 0x3B	; 59
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	eb e3       	ldi	r30, 0x3B	; 59
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	80 95       	com	r24
    1836:	8c 93       	st	X, r24
    1838:	17 c0       	rjmp	.+46     	; 0x1868 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB = ~PORTB;
    183a:	a8 e3       	ldi	r26, 0x38	; 56
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e8 e3       	ldi	r30, 0x38	; 56
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	80 95       	com	r24
    1846:	8c 93       	st	X, r24
    1848:	0f c0       	rjmp	.+30     	; 0x1868 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC = ~PORTC;
    184a:	a5 e3       	ldi	r26, 0x35	; 53
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e5 e3       	ldi	r30, 0x35	; 53
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	80 95       	com	r24
    1856:	8c 93       	st	X, r24
    1858:	07 c0       	rjmp	.+14     	; 0x1868 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD = ~PORTD;
    185a:	a2 e3       	ldi	r26, 0x32	; 50
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e2 e3       	ldi	r30, 0x32	; 50
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	80 95       	com	r24
    1866:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	89 83       	std	Y+1, r24	; 0x01
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    186e:	83 e0       	ldi	r24, 0x03	; 3
    1870:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    1872:	89 81       	ldd	r24, Y+1	; 0x01
}
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <DIO_enuGetPortValue>:


ES_t DIO_enuGetPortValue(u8 Copy_u8PortID, u8 * Copy_pu8Value)
{
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	00 d0       	rcall	.+0      	; 0x1888 <DIO_enuGetPortValue+0x6>
    1888:	00 d0       	rcall	.+0      	; 0x188a <DIO_enuGetPortValue+0x8>
    188a:	00 d0       	rcall	.+0      	; 0x188c <DIO_enuGetPortValue+0xa>
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	8a 83       	std	Y+2, r24	; 0x02
    1892:	7c 83       	std	Y+4, r23	; 0x04
    1894:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1896:	19 82       	std	Y+1, r1	; 0x01

	/* Check if wild pointer */
	if(Copy_pu8Value != NULL)
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	9c 81       	ldd	r25, Y+4	; 0x04
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	09 f4       	brne	.+2      	; 0x18a2 <DIO_enuGetPortValue+0x20>
    18a0:	43 c0       	rjmp	.+134    	; 0x1928 <DIO_enuGetPortValue+0xa6>
	{
		/* Change Range */
		if(Copy_u8PortID <= DIO_PORTD)
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	84 30       	cpi	r24, 0x04	; 4
    18a6:	e8 f5       	brcc	.+122    	; 0x1922 <DIO_enuGetPortValue+0xa0>
		{
			switch(Copy_u8PortID)
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	3e 83       	std	Y+6, r19	; 0x06
    18b0:	2d 83       	std	Y+5, r18	; 0x05
    18b2:	8d 81       	ldd	r24, Y+5	; 0x05
    18b4:	9e 81       	ldd	r25, Y+6	; 0x06
    18b6:	81 30       	cpi	r24, 0x01	; 1
    18b8:	91 05       	cpc	r25, r1
    18ba:	e1 f0       	breq	.+56     	; 0x18f4 <DIO_enuGetPortValue+0x72>
    18bc:	2d 81       	ldd	r18, Y+5	; 0x05
    18be:	3e 81       	ldd	r19, Y+6	; 0x06
    18c0:	22 30       	cpi	r18, 0x02	; 2
    18c2:	31 05       	cpc	r19, r1
    18c4:	2c f4       	brge	.+10     	; 0x18d0 <DIO_enuGetPortValue+0x4e>
    18c6:	8d 81       	ldd	r24, Y+5	; 0x05
    18c8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	61 f0       	breq	.+24     	; 0x18e6 <DIO_enuGetPortValue+0x64>
    18ce:	26 c0       	rjmp	.+76     	; 0x191c <DIO_enuGetPortValue+0x9a>
    18d0:	2d 81       	ldd	r18, Y+5	; 0x05
    18d2:	3e 81       	ldd	r19, Y+6	; 0x06
    18d4:	22 30       	cpi	r18, 0x02	; 2
    18d6:	31 05       	cpc	r19, r1
    18d8:	a1 f0       	breq	.+40     	; 0x1902 <DIO_enuGetPortValue+0x80>
    18da:	8d 81       	ldd	r24, Y+5	; 0x05
    18dc:	9e 81       	ldd	r25, Y+6	; 0x06
    18de:	83 30       	cpi	r24, 0x03	; 3
    18e0:	91 05       	cpc	r25, r1
    18e2:	b1 f0       	breq	.+44     	; 0x1910 <DIO_enuGetPortValue+0x8e>
    18e4:	1b c0       	rjmp	.+54     	; 0x191c <DIO_enuGetPortValue+0x9a>
			{
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
    18e6:	e9 e3       	ldi	r30, 0x39	; 57
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	eb 81       	ldd	r30, Y+3	; 0x03
    18ee:	fc 81       	ldd	r31, Y+4	; 0x04
    18f0:	80 83       	st	Z, r24
    18f2:	14 c0       	rjmp	.+40     	; 0x191c <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
    18f4:	e6 e3       	ldi	r30, 0x36	; 54
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	eb 81       	ldd	r30, Y+3	; 0x03
    18fc:	fc 81       	ldd	r31, Y+4	; 0x04
    18fe:	80 83       	st	Z, r24
    1900:	0d c0       	rjmp	.+26     	; 0x191c <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
    1902:	e3 e3       	ldi	r30, 0x33	; 51
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	eb 81       	ldd	r30, Y+3	; 0x03
    190a:	fc 81       	ldd	r31, Y+4	; 0x04
    190c:	80 83       	st	Z, r24
    190e:	06 c0       	rjmp	.+12     	; 0x191c <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
    1910:	e0 e3       	ldi	r30, 0x30	; 48
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	eb 81       	ldd	r30, Y+3	; 0x03
    1918:	fc 81       	ldd	r31, Y+4	; 0x04
    191a:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	89 83       	std	Y+1, r24	; 0x01
    1920:	05 c0       	rjmp	.+10     	; 0x192c <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1922:	83 e0       	ldi	r24, 0x03	; 3
    1924:	89 83       	std	Y+1, r24	; 0x01
    1926:	02 c0       	rjmp	.+4      	; 0x192c <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1928:	82 e0       	ldi	r24, 0x02	; 2
    192a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    192c:	89 81       	ldd	r24, Y+1	; 0x01
}
    192e:	26 96       	adiw	r28, 0x06	; 6
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	00 d0       	rcall	.+0      	; 0x1946 <DIO_enuSetPinDirection+0x6>
    1946:	00 d0       	rcall	.+0      	; 0x1948 <DIO_enuSetPinDirection+0x8>
    1948:	00 d0       	rcall	.+0      	; 0x194a <DIO_enuSetPinDirection+0xa>
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	8a 83       	std	Y+2, r24	; 0x02
    1950:	6b 83       	std	Y+3, r22	; 0x03
    1952:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1954:	19 82       	std	Y+1, r1	; 0x01

	/* Check range */
	if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) && (Copy_u8Value <= OUTPUT))
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	84 30       	cpi	r24, 0x04	; 4
    195a:	08 f0       	brcs	.+2      	; 0x195e <DIO_enuSetPinDirection+0x1e>
    195c:	d1 c0       	rjmp	.+418    	; 0x1b00 <DIO_enuSetPinDirection+0x1c0>
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	88 30       	cpi	r24, 0x08	; 8
    1962:	08 f0       	brcs	.+2      	; 0x1966 <DIO_enuSetPinDirection+0x26>
    1964:	cd c0       	rjmp	.+410    	; 0x1b00 <DIO_enuSetPinDirection+0x1c0>
    1966:	8c 81       	ldd	r24, Y+4	; 0x04
    1968:	82 30       	cpi	r24, 0x02	; 2
    196a:	08 f0       	brcs	.+2      	; 0x196e <DIO_enuSetPinDirection+0x2e>
    196c:	c9 c0       	rjmp	.+402    	; 0x1b00 <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	3e 83       	std	Y+6, r19	; 0x06
    1976:	2d 83       	std	Y+5, r18	; 0x05
    1978:	6d 81       	ldd	r22, Y+5	; 0x05
    197a:	7e 81       	ldd	r23, Y+6	; 0x06
    197c:	61 30       	cpi	r22, 0x01	; 1
    197e:	71 05       	cpc	r23, r1
    1980:	09 f4       	brne	.+2      	; 0x1984 <DIO_enuSetPinDirection+0x44>
    1982:	41 c0       	rjmp	.+130    	; 0x1a06 <DIO_enuSetPinDirection+0xc6>
    1984:	8d 81       	ldd	r24, Y+5	; 0x05
    1986:	9e 81       	ldd	r25, Y+6	; 0x06
    1988:	82 30       	cpi	r24, 0x02	; 2
    198a:	91 05       	cpc	r25, r1
    198c:	34 f4       	brge	.+12     	; 0x199a <DIO_enuSetPinDirection+0x5a>
    198e:	2d 81       	ldd	r18, Y+5	; 0x05
    1990:	3e 81       	ldd	r19, Y+6	; 0x06
    1992:	21 15       	cp	r18, r1
    1994:	31 05       	cpc	r19, r1
    1996:	71 f0       	breq	.+28     	; 0x19b4 <DIO_enuSetPinDirection+0x74>
    1998:	b0 c0       	rjmp	.+352    	; 0x1afa <DIO_enuSetPinDirection+0x1ba>
    199a:	6d 81       	ldd	r22, Y+5	; 0x05
    199c:	7e 81       	ldd	r23, Y+6	; 0x06
    199e:	62 30       	cpi	r22, 0x02	; 2
    19a0:	71 05       	cpc	r23, r1
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <DIO_enuSetPinDirection+0x66>
    19a4:	59 c0       	rjmp	.+178    	; 0x1a58 <DIO_enuSetPinDirection+0x118>
    19a6:	8d 81       	ldd	r24, Y+5	; 0x05
    19a8:	9e 81       	ldd	r25, Y+6	; 0x06
    19aa:	83 30       	cpi	r24, 0x03	; 3
    19ac:	91 05       	cpc	r25, r1
    19ae:	09 f4       	brne	.+2      	; 0x19b2 <DIO_enuSetPinDirection+0x72>
    19b0:	7c c0       	rjmp	.+248    	; 0x1aaa <DIO_enuSetPinDirection+0x16a>
    19b2:	a3 c0       	rjmp	.+326    	; 0x1afa <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);             //Mask bit == Clear Bit
    19b4:	aa e3       	ldi	r26, 0x3A	; 58
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	ea e3       	ldi	r30, 0x3A	; 58
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	48 2f       	mov	r20, r24
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <DIO_enuSetPinDirection+0x90>
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	2a 95       	dec	r18
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <DIO_enuSetPinDirection+0x8c>
    19d4:	80 95       	com	r24
    19d6:	84 23       	and	r24, r20
    19d8:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID); //Write new value
    19da:	aa e3       	ldi	r26, 0x3A	; 58
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	ea e3       	ldi	r30, 0x3A	; 58
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	48 2f       	mov	r20, r24
    19e6:	8c 81       	ldd	r24, Y+4	; 0x04
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	88 2f       	mov	r24, r24
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	b9 01       	movw	r22, r18
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <DIO_enuSetPinDirection+0xba>
    19f6:	66 0f       	add	r22, r22
    19f8:	77 1f       	adc	r23, r23
    19fa:	8a 95       	dec	r24
    19fc:	e2 f7       	brpl	.-8      	; 0x19f6 <DIO_enuSetPinDirection+0xb6>
    19fe:	cb 01       	movw	r24, r22
    1a00:	84 2b       	or	r24, r20
    1a02:	8c 93       	st	X, r24
    1a04:	7a c0       	rjmp	.+244    	; 0x1afa <DIO_enuSetPinDirection+0x1ba>
			 *      -> 101-0-1001 | 000-1-0000 (Write Value)
			 *      -> 101-1-1-1001 (Result)
			 */
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1a06:	a7 e3       	ldi	r26, 0x37	; 55
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e7 e3       	ldi	r30, 0x37	; 55
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	48 2f       	mov	r20, r24
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	28 2f       	mov	r18, r24
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <DIO_enuSetPinDirection+0xe2>
    1a1e:	88 0f       	add	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	2a 95       	dec	r18
    1a24:	e2 f7       	brpl	.-8      	; 0x1a1e <DIO_enuSetPinDirection+0xde>
    1a26:	80 95       	com	r24
    1a28:	84 23       	and	r24, r20
    1a2a:	8c 93       	st	X, r24
			DDRB |= (Copy_u8Value << Copy_u8PinID);
    1a2c:	a7 e3       	ldi	r26, 0x37	; 55
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e7 e3       	ldi	r30, 0x37	; 55
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	48 2f       	mov	r20, r24
    1a38:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3a:	28 2f       	mov	r18, r24
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	88 2f       	mov	r24, r24
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	b9 01       	movw	r22, r18
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <DIO_enuSetPinDirection+0x10c>
    1a48:	66 0f       	add	r22, r22
    1a4a:	77 1f       	adc	r23, r23
    1a4c:	8a 95       	dec	r24
    1a4e:	e2 f7       	brpl	.-8      	; 0x1a48 <DIO_enuSetPinDirection+0x108>
    1a50:	cb 01       	movw	r24, r22
    1a52:	84 2b       	or	r24, r20
    1a54:	8c 93       	st	X, r24
    1a56:	51 c0       	rjmp	.+162    	; 0x1afa <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1a58:	a4 e3       	ldi	r26, 0x34	; 52
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e4 e3       	ldi	r30, 0x34	; 52
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	48 2f       	mov	r20, r24
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <DIO_enuSetPinDirection+0x134>
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	2a 95       	dec	r18
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <DIO_enuSetPinDirection+0x130>
    1a78:	80 95       	com	r24
    1a7a:	84 23       	and	r24, r20
    1a7c:	8c 93       	st	X, r24
			DDRC |= (Copy_u8Value << Copy_u8PinID);
    1a7e:	a4 e3       	ldi	r26, 0x34	; 52
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e4 e3       	ldi	r30, 0x34	; 52
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	48 2f       	mov	r20, r24
    1a8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8c:	28 2f       	mov	r18, r24
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	88 2f       	mov	r24, r24
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	b9 01       	movw	r22, r18
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <DIO_enuSetPinDirection+0x15e>
    1a9a:	66 0f       	add	r22, r22
    1a9c:	77 1f       	adc	r23, r23
    1a9e:	8a 95       	dec	r24
    1aa0:	e2 f7       	brpl	.-8      	; 0x1a9a <DIO_enuSetPinDirection+0x15a>
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	84 2b       	or	r24, r20
    1aa6:	8c 93       	st	X, r24
    1aa8:	28 c0       	rjmp	.+80     	; 0x1afa <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1aaa:	a1 e3       	ldi	r26, 0x31	; 49
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	e1 e3       	ldi	r30, 0x31	; 49
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	48 2f       	mov	r20, r24
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <DIO_enuSetPinDirection+0x186>
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	2a 95       	dec	r18
    1ac8:	e2 f7       	brpl	.-8      	; 0x1ac2 <DIO_enuSetPinDirection+0x182>
    1aca:	80 95       	com	r24
    1acc:	84 23       	and	r24, r20
    1ace:	8c 93       	st	X, r24
			DDRD |= (Copy_u8Value << Copy_u8PinID);
    1ad0:	a1 e3       	ldi	r26, 0x31	; 49
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e1 e3       	ldi	r30, 0x31	; 49
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	48 2f       	mov	r20, r24
    1adc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	88 2f       	mov	r24, r24
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	b9 01       	movw	r22, r18
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <DIO_enuSetPinDirection+0x1b0>
    1aec:	66 0f       	add	r22, r22
    1aee:	77 1f       	adc	r23, r23
    1af0:	8a 95       	dec	r24
    1af2:	e2 f7       	brpl	.-8      	; 0x1aec <DIO_enuSetPinDirection+0x1ac>
    1af4:	cb 01       	movw	r24, r22
    1af6:	84 2b       	or	r24, r20
    1af8:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	89 83       	std	Y+1, r24	; 0x01
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1b00:	83 e0       	ldi	r24, 0x03	; 3
    1b02:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b06:	26 96       	adiw	r28, 0x06	; 6
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	08 95       	ret

00001b18 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    1b18:	df 93       	push	r29
    1b1a:	cf 93       	push	r28
    1b1c:	00 d0       	rcall	.+0      	; 0x1b1e <DIO_enuSetPinValue+0x6>
    1b1e:	00 d0       	rcall	.+0      	; 0x1b20 <DIO_enuSetPinValue+0x8>
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <DIO_enuSetPinValue+0xa>
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	8a 83       	std	Y+2, r24	; 0x02
    1b28:	6b 83       	std	Y+3, r22	; 0x03
    1b2a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1b2c:	19 82       	std	Y+1, r1	; 0x01

	/* Check range */
	if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) && (Copy_u8Value <= HIGH))
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	84 30       	cpi	r24, 0x04	; 4
    1b32:	08 f0       	brcs	.+2      	; 0x1b36 <DIO_enuSetPinValue+0x1e>
    1b34:	d1 c0       	rjmp	.+418    	; 0x1cd8 <DIO_enuSetPinValue+0x1c0>
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	88 30       	cpi	r24, 0x08	; 8
    1b3a:	08 f0       	brcs	.+2      	; 0x1b3e <DIO_enuSetPinValue+0x26>
    1b3c:	cd c0       	rjmp	.+410    	; 0x1cd8 <DIO_enuSetPinValue+0x1c0>
    1b3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b40:	82 30       	cpi	r24, 0x02	; 2
    1b42:	08 f0       	brcs	.+2      	; 0x1b46 <DIO_enuSetPinValue+0x2e>
    1b44:	c9 c0       	rjmp	.+402    	; 0x1cd8 <DIO_enuSetPinValue+0x1c0>
	{
		switch(Copy_u8PortID)
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	3e 83       	std	Y+6, r19	; 0x06
    1b4e:	2d 83       	std	Y+5, r18	; 0x05
    1b50:	6d 81       	ldd	r22, Y+5	; 0x05
    1b52:	7e 81       	ldd	r23, Y+6	; 0x06
    1b54:	61 30       	cpi	r22, 0x01	; 1
    1b56:	71 05       	cpc	r23, r1
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <DIO_enuSetPinValue+0x44>
    1b5a:	41 c0       	rjmp	.+130    	; 0x1bde <DIO_enuSetPinValue+0xc6>
    1b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b60:	82 30       	cpi	r24, 0x02	; 2
    1b62:	91 05       	cpc	r25, r1
    1b64:	34 f4       	brge	.+12     	; 0x1b72 <DIO_enuSetPinValue+0x5a>
    1b66:	2d 81       	ldd	r18, Y+5	; 0x05
    1b68:	3e 81       	ldd	r19, Y+6	; 0x06
    1b6a:	21 15       	cp	r18, r1
    1b6c:	31 05       	cpc	r19, r1
    1b6e:	71 f0       	breq	.+28     	; 0x1b8c <DIO_enuSetPinValue+0x74>
    1b70:	b0 c0       	rjmp	.+352    	; 0x1cd2 <DIO_enuSetPinValue+0x1ba>
    1b72:	6d 81       	ldd	r22, Y+5	; 0x05
    1b74:	7e 81       	ldd	r23, Y+6	; 0x06
    1b76:	62 30       	cpi	r22, 0x02	; 2
    1b78:	71 05       	cpc	r23, r1
    1b7a:	09 f4       	brne	.+2      	; 0x1b7e <DIO_enuSetPinValue+0x66>
    1b7c:	59 c0       	rjmp	.+178    	; 0x1c30 <DIO_enuSetPinValue+0x118>
    1b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b80:	9e 81       	ldd	r25, Y+6	; 0x06
    1b82:	83 30       	cpi	r24, 0x03	; 3
    1b84:	91 05       	cpc	r25, r1
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <DIO_enuSetPinValue+0x72>
    1b88:	7c c0       	rjmp	.+248    	; 0x1c82 <DIO_enuSetPinValue+0x16a>
    1b8a:	a3 c0       	rjmp	.+326    	; 0x1cd2 <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);             //Mask bit == Clear Bit
    1b8c:	ab e3       	ldi	r26, 0x3B	; 59
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	eb e3       	ldi	r30, 0x3B	; 59
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	48 2f       	mov	r20, r24
    1b98:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9a:	28 2f       	mov	r18, r24
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <DIO_enuSetPinValue+0x90>
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	2a 95       	dec	r18
    1baa:	e2 f7       	brpl	.-8      	; 0x1ba4 <DIO_enuSetPinValue+0x8c>
    1bac:	80 95       	com	r24
    1bae:	84 23       	and	r24, r20
    1bb0:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID); //Write new value
    1bb2:	ab e3       	ldi	r26, 0x3B	; 59
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	eb e3       	ldi	r30, 0x3B	; 59
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	48 2f       	mov	r20, r24
    1bbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	88 2f       	mov	r24, r24
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	b9 01       	movw	r22, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <DIO_enuSetPinValue+0xba>
    1bce:	66 0f       	add	r22, r22
    1bd0:	77 1f       	adc	r23, r23
    1bd2:	8a 95       	dec	r24
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <DIO_enuSetPinValue+0xb6>
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	84 2b       	or	r24, r20
    1bda:	8c 93       	st	X, r24
    1bdc:	7a c0       	rjmp	.+244    	; 0x1cd2 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1bde:	a8 e3       	ldi	r26, 0x38	; 56
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e8 e3       	ldi	r30, 0x38	; 56
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	48 2f       	mov	r20, r24
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	28 2f       	mov	r18, r24
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <DIO_enuSetPinValue+0xe2>
    1bf6:	88 0f       	add	r24, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	2a 95       	dec	r18
    1bfc:	e2 f7       	brpl	.-8      	; 0x1bf6 <DIO_enuSetPinValue+0xde>
    1bfe:	80 95       	com	r24
    1c00:	84 23       	and	r24, r20
    1c02:	8c 93       	st	X, r24
			PORTB |= (Copy_u8Value << Copy_u8PinID);
    1c04:	a8 e3       	ldi	r26, 0x38	; 56
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e8 e3       	ldi	r30, 0x38	; 56
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	48 2f       	mov	r20, r24
    1c10:	8c 81       	ldd	r24, Y+4	; 0x04
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	88 2f       	mov	r24, r24
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	b9 01       	movw	r22, r18
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <DIO_enuSetPinValue+0x10c>
    1c20:	66 0f       	add	r22, r22
    1c22:	77 1f       	adc	r23, r23
    1c24:	8a 95       	dec	r24
    1c26:	e2 f7       	brpl	.-8      	; 0x1c20 <DIO_enuSetPinValue+0x108>
    1c28:	cb 01       	movw	r24, r22
    1c2a:	84 2b       	or	r24, r20
    1c2c:	8c 93       	st	X, r24
    1c2e:	51 c0       	rjmp	.+162    	; 0x1cd2 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1c30:	a5 e3       	ldi	r26, 0x35	; 53
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e5 e3       	ldi	r30, 0x35	; 53
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	48 2f       	mov	r20, r24
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <DIO_enuSetPinValue+0x134>
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	2a 95       	dec	r18
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <DIO_enuSetPinValue+0x130>
    1c50:	80 95       	com	r24
    1c52:	84 23       	and	r24, r20
    1c54:	8c 93       	st	X, r24
			PORTC |= (Copy_u8Value << Copy_u8PinID);
    1c56:	a5 e3       	ldi	r26, 0x35	; 53
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e5 e3       	ldi	r30, 0x35	; 53
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	48 2f       	mov	r20, r24
    1c62:	8c 81       	ldd	r24, Y+4	; 0x04
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6a:	88 2f       	mov	r24, r24
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	b9 01       	movw	r22, r18
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <DIO_enuSetPinValue+0x15e>
    1c72:	66 0f       	add	r22, r22
    1c74:	77 1f       	adc	r23, r23
    1c76:	8a 95       	dec	r24
    1c78:	e2 f7       	brpl	.-8      	; 0x1c72 <DIO_enuSetPinValue+0x15a>
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	84 2b       	or	r24, r20
    1c7e:	8c 93       	st	X, r24
    1c80:	28 c0       	rjmp	.+80     	; 0x1cd2 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1c82:	a2 e3       	ldi	r26, 0x32	; 50
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	e2 e3       	ldi	r30, 0x32	; 50
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	48 2f       	mov	r20, r24
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	28 2f       	mov	r18, r24
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <DIO_enuSetPinValue+0x186>
    1c9a:	88 0f       	add	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	2a 95       	dec	r18
    1ca0:	e2 f7       	brpl	.-8      	; 0x1c9a <DIO_enuSetPinValue+0x182>
    1ca2:	80 95       	com	r24
    1ca4:	84 23       	and	r24, r20
    1ca6:	8c 93       	st	X, r24
			PORTD |= (Copy_u8Value << Copy_u8PinID);
    1ca8:	a2 e3       	ldi	r26, 0x32	; 50
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	e2 e3       	ldi	r30, 0x32	; 50
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	48 2f       	mov	r20, r24
    1cb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	88 2f       	mov	r24, r24
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	b9 01       	movw	r22, r18
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <DIO_enuSetPinValue+0x1b0>
    1cc4:	66 0f       	add	r22, r22
    1cc6:	77 1f       	adc	r23, r23
    1cc8:	8a 95       	dec	r24
    1cca:	e2 f7       	brpl	.-8      	; 0x1cc4 <DIO_enuSetPinValue+0x1ac>
    1ccc:	cb 01       	movw	r24, r22
    1cce:	84 2b       	or	r24, r20
    1cd0:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	89 83       	std	Y+1, r24	; 0x01
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1cd8:	83 e0       	ldi	r24, 0x03	; 3
    1cda:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cde:	26 96       	adiw	r28, 0x06	; 6
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	de bf       	out	0x3e, r29	; 62
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	cd bf       	out	0x3d, r28	; 61
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	08 95       	ret

00001cf0 <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID)
{
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	00 d0       	rcall	.+0      	; 0x1cf6 <DIO_enuTogPinValue+0x6>
    1cf6:	00 d0       	rcall	.+0      	; 0x1cf8 <DIO_enuTogPinValue+0x8>
    1cf8:	0f 92       	push	r0
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	8a 83       	std	Y+2, r24	; 0x02
    1d00:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1d02:	19 82       	std	Y+1, r1	; 0x01

	/* Check range */
	if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7))
    1d04:	8a 81       	ldd	r24, Y+2	; 0x02
    1d06:	84 30       	cpi	r24, 0x04	; 4
    1d08:	08 f0       	brcs	.+2      	; 0x1d0c <DIO_enuTogPinValue+0x1c>
    1d0a:	75 c0       	rjmp	.+234    	; 0x1df6 <DIO_enuTogPinValue+0x106>
    1d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0e:	88 30       	cpi	r24, 0x08	; 8
    1d10:	08 f0       	brcs	.+2      	; 0x1d14 <DIO_enuTogPinValue+0x24>
    1d12:	71 c0       	rjmp	.+226    	; 0x1df6 <DIO_enuTogPinValue+0x106>
	{
		switch(Copy_u8PortID)
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	3d 83       	std	Y+5, r19	; 0x05
    1d1c:	2c 83       	std	Y+4, r18	; 0x04
    1d1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d20:	9d 81       	ldd	r25, Y+5	; 0x05
    1d22:	81 30       	cpi	r24, 0x01	; 1
    1d24:	91 05       	cpc	r25, r1
    1d26:	49 f1       	breq	.+82     	; 0x1d7a <DIO_enuTogPinValue+0x8a>
    1d28:	2c 81       	ldd	r18, Y+4	; 0x04
    1d2a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d2c:	22 30       	cpi	r18, 0x02	; 2
    1d2e:	31 05       	cpc	r19, r1
    1d30:	2c f4       	brge	.+10     	; 0x1d3c <DIO_enuTogPinValue+0x4c>
    1d32:	8c 81       	ldd	r24, Y+4	; 0x04
    1d34:	9d 81       	ldd	r25, Y+5	; 0x05
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	61 f0       	breq	.+24     	; 0x1d52 <DIO_enuTogPinValue+0x62>
    1d3a:	5a c0       	rjmp	.+180    	; 0x1df0 <DIO_enuTogPinValue+0x100>
    1d3c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d3e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d40:	22 30       	cpi	r18, 0x02	; 2
    1d42:	31 05       	cpc	r19, r1
    1d44:	71 f1       	breq	.+92     	; 0x1da2 <DIO_enuTogPinValue+0xb2>
    1d46:	8c 81       	ldd	r24, Y+4	; 0x04
    1d48:	9d 81       	ldd	r25, Y+5	; 0x05
    1d4a:	83 30       	cpi	r24, 0x03	; 3
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	e9 f1       	breq	.+122    	; 0x1dca <DIO_enuTogPinValue+0xda>
    1d50:	4f c0       	rjmp	.+158    	; 0x1df0 <DIO_enuTogPinValue+0x100>
		{
		case DIO_PORTA:
			PORTA ^=  (DIO_MASK_BIT << Copy_u8PinID);
    1d52:	ab e3       	ldi	r26, 0x3B	; 59
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	eb e3       	ldi	r30, 0x3B	; 59
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	48 2f       	mov	r20, r24
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	28 2f       	mov	r18, r24
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	02 2e       	mov	r0, r18
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <DIO_enuTogPinValue+0x80>
    1d6c:	88 0f       	add	r24, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	0a 94       	dec	r0
    1d72:	e2 f7       	brpl	.-8      	; 0x1d6c <DIO_enuTogPinValue+0x7c>
    1d74:	84 27       	eor	r24, r20
    1d76:	8c 93       	st	X, r24
    1d78:	3b c0       	rjmp	.+118    	; 0x1df0 <DIO_enuTogPinValue+0x100>
			 *       -> 000-1-0000
			 *       -> 101-0-1001
			 * */
			break;
		case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT << Copy_u8PinID);
    1d7a:	a8 e3       	ldi	r26, 0x38	; 56
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	e8 e3       	ldi	r30, 0x38	; 56
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	48 2f       	mov	r20, r24
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	28 2f       	mov	r18, r24
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	02 2e       	mov	r0, r18
    1d92:	02 c0       	rjmp	.+4      	; 0x1d98 <DIO_enuTogPinValue+0xa8>
    1d94:	88 0f       	add	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	0a 94       	dec	r0
    1d9a:	e2 f7       	brpl	.-8      	; 0x1d94 <DIO_enuTogPinValue+0xa4>
    1d9c:	84 27       	eor	r24, r20
    1d9e:	8c 93       	st	X, r24
    1da0:	27 c0       	rjmp	.+78     	; 0x1df0 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT << Copy_u8PinID);
    1da2:	a5 e3       	ldi	r26, 0x35	; 53
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e5 e3       	ldi	r30, 0x35	; 53
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	48 2f       	mov	r20, r24
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	28 2f       	mov	r18, r24
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	02 2e       	mov	r0, r18
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <DIO_enuTogPinValue+0xd0>
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	0a 94       	dec	r0
    1dc2:	e2 f7       	brpl	.-8      	; 0x1dbc <DIO_enuTogPinValue+0xcc>
    1dc4:	84 27       	eor	r24, r20
    1dc6:	8c 93       	st	X, r24
    1dc8:	13 c0       	rjmp	.+38     	; 0x1df0 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT << Copy_u8PinID);
    1dca:	a2 e3       	ldi	r26, 0x32	; 50
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e2 e3       	ldi	r30, 0x32	; 50
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	48 2f       	mov	r20, r24
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	02 2e       	mov	r0, r18
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <DIO_enuTogPinValue+0xf8>
    1de4:	88 0f       	add	r24, r24
    1de6:	99 1f       	adc	r25, r25
    1de8:	0a 94       	dec	r0
    1dea:	e2 f7       	brpl	.-8      	; 0x1de4 <DIO_enuTogPinValue+0xf4>
    1dec:	84 27       	eor	r24, r20
    1dee:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	89 83       	std	Y+1, r24	; 0x01
    1df4:	02 c0       	rjmp	.+4      	; 0x1dfa <DIO_enuTogPinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1df6:	83 e0       	ldi	r24, 0x03	; 3
    1df8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	cf 91       	pop	r28
    1e08:	df 91       	pop	r29
    1e0a:	08 95       	ret

00001e0c <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 * Copy_pu8Value)
{
    1e0c:	df 93       	push	r29
    1e0e:	cf 93       	push	r28
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
    1e14:	27 97       	sbiw	r28, 0x07	; 7
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	de bf       	out	0x3e, r29	; 62
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	cd bf       	out	0x3d, r28	; 61
    1e20:	8a 83       	std	Y+2, r24	; 0x02
    1e22:	6b 83       	std	Y+3, r22	; 0x03
    1e24:	5d 83       	std	Y+5, r21	; 0x05
    1e26:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1e28:	19 82       	std	Y+1, r1	; 0x01

	/* Check if wild pointer */
	if(Copy_pu8Value != NULL)
    1e2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e2e:	00 97       	sbiw	r24, 0x00	; 0
    1e30:	09 f4       	brne	.+2      	; 0x1e34 <DIO_enuGetPinValue+0x28>
    1e32:	7e c0       	rjmp	.+252    	; 0x1f30 <DIO_enuGetPinValue+0x124>
	{
		/* Check Range */
		if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7))
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	84 30       	cpi	r24, 0x04	; 4
    1e38:	08 f0       	brcs	.+2      	; 0x1e3c <DIO_enuGetPinValue+0x30>
    1e3a:	77 c0       	rjmp	.+238    	; 0x1f2a <DIO_enuGetPinValue+0x11e>
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	88 30       	cpi	r24, 0x08	; 8
    1e40:	08 f0       	brcs	.+2      	; 0x1e44 <DIO_enuGetPinValue+0x38>
    1e42:	73 c0       	rjmp	.+230    	; 0x1f2a <DIO_enuGetPinValue+0x11e>
		{
			switch(Copy_u8PortID)
    1e44:	8a 81       	ldd	r24, Y+2	; 0x02
    1e46:	28 2f       	mov	r18, r24
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	3f 83       	std	Y+7, r19	; 0x07
    1e4c:	2e 83       	std	Y+6, r18	; 0x06
    1e4e:	4e 81       	ldd	r20, Y+6	; 0x06
    1e50:	5f 81       	ldd	r21, Y+7	; 0x07
    1e52:	41 30       	cpi	r20, 0x01	; 1
    1e54:	51 05       	cpc	r21, r1
    1e56:	59 f1       	breq	.+86     	; 0x1eae <DIO_enuGetPinValue+0xa2>
    1e58:	8e 81       	ldd	r24, Y+6	; 0x06
    1e5a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e5c:	82 30       	cpi	r24, 0x02	; 2
    1e5e:	91 05       	cpc	r25, r1
    1e60:	34 f4       	brge	.+12     	; 0x1e6e <DIO_enuGetPinValue+0x62>
    1e62:	2e 81       	ldd	r18, Y+6	; 0x06
    1e64:	3f 81       	ldd	r19, Y+7	; 0x07
    1e66:	21 15       	cp	r18, r1
    1e68:	31 05       	cpc	r19, r1
    1e6a:	69 f0       	breq	.+26     	; 0x1e86 <DIO_enuGetPinValue+0x7a>
    1e6c:	5b c0       	rjmp	.+182    	; 0x1f24 <DIO_enuGetPinValue+0x118>
    1e6e:	4e 81       	ldd	r20, Y+6	; 0x06
    1e70:	5f 81       	ldd	r21, Y+7	; 0x07
    1e72:	42 30       	cpi	r20, 0x02	; 2
    1e74:	51 05       	cpc	r21, r1
    1e76:	79 f1       	breq	.+94     	; 0x1ed6 <DIO_enuGetPinValue+0xca>
    1e78:	8e 81       	ldd	r24, Y+6	; 0x06
    1e7a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e7c:	83 30       	cpi	r24, 0x03	; 3
    1e7e:	91 05       	cpc	r25, r1
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <DIO_enuGetPinValue+0x78>
    1e82:	3d c0       	rjmp	.+122    	; 0x1efe <DIO_enuGetPinValue+0xf2>
    1e84:	4f c0       	rjmp	.+158    	; 0x1f24 <DIO_enuGetPinValue+0x118>
			{
			case DIO_PORTA:
				*Copy_pu8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
    1e86:	e9 e3       	ldi	r30, 0x39	; 57
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	28 2f       	mov	r18, r24
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	88 2f       	mov	r24, r24
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	a9 01       	movw	r20, r18
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <DIO_enuGetPinValue+0x92>
    1e9a:	55 95       	asr	r21
    1e9c:	47 95       	ror	r20
    1e9e:	8a 95       	dec	r24
    1ea0:	e2 f7       	brpl	.-8      	; 0x1e9a <DIO_enuGetPinValue+0x8e>
    1ea2:	ca 01       	movw	r24, r20
    1ea4:	81 70       	andi	r24, 0x01	; 1
    1ea6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ea8:	fd 81       	ldd	r31, Y+5	; 0x05
    1eaa:	80 83       	st	Z, r24
    1eac:	3b c0       	rjmp	.+118    	; 0x1f24 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
    1eae:	e6 e3       	ldi	r30, 0x36	; 54
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	28 2f       	mov	r18, r24
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	88 2f       	mov	r24, r24
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	a9 01       	movw	r20, r18
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <DIO_enuGetPinValue+0xba>
    1ec2:	55 95       	asr	r21
    1ec4:	47 95       	ror	r20
    1ec6:	8a 95       	dec	r24
    1ec8:	e2 f7       	brpl	.-8      	; 0x1ec2 <DIO_enuGetPinValue+0xb6>
    1eca:	ca 01       	movw	r24, r20
    1ecc:	81 70       	andi	r24, 0x01	; 1
    1ece:	ec 81       	ldd	r30, Y+4	; 0x04
    1ed0:	fd 81       	ldd	r31, Y+5	; 0x05
    1ed2:	80 83       	st	Z, r24
    1ed4:	27 c0       	rjmp	.+78     	; 0x1f24 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
    1ed6:	e3 e3       	ldi	r30, 0x33	; 51
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	28 2f       	mov	r18, r24
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee2:	88 2f       	mov	r24, r24
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	a9 01       	movw	r20, r18
    1ee8:	02 c0       	rjmp	.+4      	; 0x1eee <DIO_enuGetPinValue+0xe2>
    1eea:	55 95       	asr	r21
    1eec:	47 95       	ror	r20
    1eee:	8a 95       	dec	r24
    1ef0:	e2 f7       	brpl	.-8      	; 0x1eea <DIO_enuGetPinValue+0xde>
    1ef2:	ca 01       	movw	r24, r20
    1ef4:	81 70       	andi	r24, 0x01	; 1
    1ef6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ef8:	fd 81       	ldd	r31, Y+5	; 0x05
    1efa:	80 83       	st	Z, r24
    1efc:	13 c0       	rjmp	.+38     	; 0x1f24 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = ((PIND >> Copy_u8PinID) & DIO_MASK_BIT);
    1efe:	e0 e3       	ldi	r30, 0x30	; 48
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	28 2f       	mov	r18, r24
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0a:	88 2f       	mov	r24, r24
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	a9 01       	movw	r20, r18
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <DIO_enuGetPinValue+0x10a>
    1f12:	55 95       	asr	r21
    1f14:	47 95       	ror	r20
    1f16:	8a 95       	dec	r24
    1f18:	e2 f7       	brpl	.-8      	; 0x1f12 <DIO_enuGetPinValue+0x106>
    1f1a:	ca 01       	movw	r24, r20
    1f1c:	81 70       	andi	r24, 0x01	; 1
    1f1e:	ec 81       	ldd	r30, Y+4	; 0x04
    1f20:	fd 81       	ldd	r31, Y+5	; 0x05
    1f22:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	89 83       	std	Y+1, r24	; 0x01
    1f28:	05 c0       	rjmp	.+10     	; 0x1f34 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1f2a:	83 e0       	ldi	r24, 0x03	; 3
    1f2c:	89 83       	std	Y+1, r24	; 0x01
    1f2e:	02 c0       	rjmp	.+4      	; 0x1f34 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1f30:	82 e0       	ldi	r24, 0x02	; 2
    1f32:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f36:	27 96       	adiw	r28, 0x07	; 7
    1f38:	0f b6       	in	r0, 0x3f	; 63
    1f3a:	f8 94       	cli
    1f3c:	de bf       	out	0x3e, r29	; 62
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	cd bf       	out	0x3d, r28	; 61
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	08 95       	ret

00001f48 <Switch_enuInit>:
#include "Switch_private.h"
#include "Switch_config.h"
/***********************	Includes Section End	***********************/

ES_t Switch_enuInit(SW_t * Copy_pAstrSwitches)
{
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	00 d0       	rcall	.+0      	; 0x1f4e <Switch_enuInit+0x6>
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <Switch_enuInit+0x8>
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	9c 83       	std	Y+4, r25	; 0x04
    1f56:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1f58:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_pAstrSwitches != NULL)
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	09 f4       	brne	.+2      	; 0x1f64 <Switch_enuInit+0x1c>
    1f62:	5d c0       	rjmp	.+186    	; 0x201e <Switch_enuInit+0xd6>
	{
		u8 Local_u8Iterator = 0;
    1f64:	19 82       	std	Y+1, r1	; 0x01

		for(Local_u8Iterator = 0; Local_u8Iterator < SW_NUM; Local_u8Iterator++)
    1f66:	19 82       	std	Y+1, r1	; 0x01
    1f68:	55 c0       	rjmp	.+170    	; 0x2014 <Switch_enuInit+0xcc>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_pAstrSwitches[Local_u8Iterator].SW_u8PortID,
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	c9 01       	movw	r24, r18
    1f72:	88 0f       	add	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	28 0f       	add	r18, r24
    1f78:	39 1f       	adc	r19, r25
    1f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7e:	fc 01       	movw	r30, r24
    1f80:	e2 0f       	add	r30, r18
    1f82:	f3 1f       	adc	r31, r19
    1f84:	40 81       	ld	r20, Z
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	c9 01       	movw	r24, r18
    1f8e:	88 0f       	add	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	28 0f       	add	r18, r24
    1f94:	39 1f       	adc	r19, r25
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	e2 0f       	add	r30, r18
    1f9e:	f3 1f       	adc	r31, r19
    1fa0:	91 81       	ldd	r25, Z+1	; 0x01
    1fa2:	84 2f       	mov	r24, r20
    1fa4:	69 2f       	mov	r22, r25
    1fa6:	40 e0       	ldi	r20, 0x00	; 0
    1fa8:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    1fac:	8a 83       	std	Y+2, r24	; 0x02
								   	   	   	   	   	     Copy_pAstrSwitches[Local_u8Iterator].SW_u8PinID,
														 DIO_u8INPUT);
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pAstrSwitches[Local_u8Iterator].SW_u8PortID,
    1fae:	89 81       	ldd	r24, Y+1	; 0x01
    1fb0:	28 2f       	mov	r18, r24
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	c9 01       	movw	r24, r18
    1fb6:	88 0f       	add	r24, r24
    1fb8:	99 1f       	adc	r25, r25
    1fba:	28 0f       	add	r18, r24
    1fbc:	39 1f       	adc	r19, r25
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	e2 0f       	add	r30, r18
    1fc6:	f3 1f       	adc	r31, r19
    1fc8:	50 81       	ld	r21, Z
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	c9 01       	movw	r24, r18
    1fd2:	88 0f       	add	r24, r24
    1fd4:	99 1f       	adc	r25, r25
    1fd6:	28 0f       	add	r18, r24
    1fd8:	39 1f       	adc	r19, r25
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fde:	fc 01       	movw	r30, r24
    1fe0:	e2 0f       	add	r30, r18
    1fe2:	f3 1f       	adc	r31, r19
    1fe4:	41 81       	ldd	r20, Z+1	; 0x01
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	28 2f       	mov	r18, r24
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	c9 01       	movw	r24, r18
    1fee:	88 0f       	add	r24, r24
    1ff0:	99 1f       	adc	r25, r25
    1ff2:	28 0f       	add	r18, r24
    1ff4:	39 1f       	adc	r19, r25
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	e2 0f       	add	r30, r18
    1ffe:	f3 1f       	adc	r31, r19
    2000:	92 81       	ldd	r25, Z+2	; 0x02
    2002:	85 2f       	mov	r24, r21
    2004:	64 2f       	mov	r22, r20
    2006:	49 2f       	mov	r20, r25
    2008:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    200c:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_pAstrSwitches != NULL)
	{
		u8 Local_u8Iterator = 0;

		for(Local_u8Iterator = 0; Local_u8Iterator < SW_NUM; Local_u8Iterator++)
    200e:	89 81       	ldd	r24, Y+1	; 0x01
    2010:	8f 5f       	subi	r24, 0xFF	; 255
    2012:	89 83       	std	Y+1, r24	; 0x01
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	83 30       	cpi	r24, 0x03	; 3
    2018:	08 f4       	brcc	.+2      	; 0x201c <Switch_enuInit+0xd4>
    201a:	a7 cf       	rjmp	.-178    	; 0x1f6a <Switch_enuInit+0x22>
    201c:	02 c0       	rjmp	.+4      	; 0x2022 <Switch_enuInit+0xda>
		}

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    201e:	82 e0       	ldi	r24, 0x02	; 2
    2020:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    2022:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	cf 91       	pop	r28
    202e:	df 91       	pop	r29
    2030:	08 95       	ret

00002032 <Switch_enuGetState>:

ES_t Switch_enuGetState(SW_t * Copy_pstrSwitches, u8 * Copy_pu8SwState)
{
    2032:	df 93       	push	r29
    2034:	cf 93       	push	r28
    2036:	00 d0       	rcall	.+0      	; 0x2038 <Switch_enuGetState+0x6>
    2038:	00 d0       	rcall	.+0      	; 0x203a <Switch_enuGetState+0x8>
    203a:	0f 92       	push	r0
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	9b 83       	std	Y+3, r25	; 0x03
    2042:	8a 83       	std	Y+2, r24	; 0x02
    2044:	7d 83       	std	Y+5, r23	; 0x05
    2046:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    2048:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pstrSwitches != NULL && Copy_pu8SwState != NULL)
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
    204c:	9b 81       	ldd	r25, Y+3	; 0x03
    204e:	00 97       	sbiw	r24, 0x00	; 0
    2050:	91 f0       	breq	.+36     	; 0x2076 <Switch_enuGetState+0x44>
    2052:	8c 81       	ldd	r24, Y+4	; 0x04
    2054:	9d 81       	ldd	r25, Y+5	; 0x05
    2056:	00 97       	sbiw	r24, 0x00	; 0
    2058:	71 f0       	breq	.+28     	; 0x2076 <Switch_enuGetState+0x44>
	{
		Local_enuErrorState = DIO_enuGetPinValue(Copy_pstrSwitches->SW_u8PortID,
    205a:	ea 81       	ldd	r30, Y+2	; 0x02
    205c:	fb 81       	ldd	r31, Y+3	; 0x03
    205e:	80 81       	ld	r24, Z
    2060:	ea 81       	ldd	r30, Y+2	; 0x02
    2062:	fb 81       	ldd	r31, Y+3	; 0x03
    2064:	91 81       	ldd	r25, Z+1	; 0x01
    2066:	2c 81       	ldd	r18, Y+4	; 0x04
    2068:	3d 81       	ldd	r19, Y+5	; 0x05
    206a:	69 2f       	mov	r22, r25
    206c:	a9 01       	movw	r20, r18
    206e:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_enuGetPinValue>
    2072:	89 83       	std	Y+1, r24	; 0x01
    2074:	02 c0       	rjmp	.+4      	; 0x207a <Switch_enuGetState+0x48>
												 Copy_pstrSwitches->SW_u8PinID,
												 Copy_pu8SwState);
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2076:	82 e0       	ldi	r24, 0x02	; 2
    2078:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    207a:	89 81       	ldd	r24, Y+1	; 0x01
}
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	cf 91       	pop	r28
    2088:	df 91       	pop	r29
    208a:	08 95       	ret

0000208c <SSDLT_enuInit>:
extern SEG_t SSD_AstrSegConfig[SEG_NUM];
/***********************	Declarations Section End	***********************/


ES_t SSDLT_enuInit(SEG_t * Copy_pstrSegConfig)
{
    208c:	df 93       	push	r29
    208e:	cf 93       	push	r28
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	2a 97       	sbiw	r28, 0x0a	; 10
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	f8 94       	cli
    209a:	de bf       	out	0x3e, r29	; 62
    209c:	0f be       	out	0x3f, r0	; 63
    209e:	cd bf       	out	0x3d, r28	; 61
    20a0:	99 87       	std	Y+9, r25	; 0x09
    20a2:	88 87       	std	Y+8, r24	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    20a4:	1f 82       	std	Y+7, r1	; 0x07

	u8 Local_u8Iterator = 0;
    20a6:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8LastBit  = 0;
    20a8:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Check  = 0;
    20aa:	19 82       	std	Y+1, r1	; 0x01
    20ac:	1a 82       	std	Y+2, r1	; 0x02
    20ae:	1b 82       	std	Y+3, r1	; 0x03
    20b0:	1c 82       	std	Y+4, r1	; 0x04

	if(Copy_pstrSegConfig != NULL)
    20b2:	88 85       	ldd	r24, Y+8	; 0x08
    20b4:	99 85       	ldd	r25, Y+9	; 0x09
    20b6:	00 97       	sbiw	r24, 0x00	; 0
    20b8:	09 f4       	brne	.+2      	; 0x20bc <SSDLT_enuInit+0x30>
    20ba:	35 c3       	rjmp	.+1642   	; 0x2726 <SSDLT_enuInit+0x69a>
	{
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
    20bc:	1e 82       	std	Y+6, r1	; 0x06
    20be:	2e c3       	rjmp	.+1628   	; 0x271c <SSDLT_enuInit+0x690>
		{
			Local_u32Check |= (DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8APort,
    20c0:	8e 81       	ldd	r24, Y+6	; 0x06
    20c2:	48 2f       	mov	r20, r24
    20c4:	50 e0       	ldi	r21, 0x00	; 0
    20c6:	ca 01       	movw	r24, r20
    20c8:	88 0f       	add	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	9c 01       	movw	r18, r24
    20ce:	22 0f       	add	r18, r18
    20d0:	33 1f       	adc	r19, r19
    20d2:	22 0f       	add	r18, r18
    20d4:	33 1f       	adc	r19, r19
    20d6:	22 0f       	add	r18, r18
    20d8:	33 1f       	adc	r19, r19
    20da:	82 0f       	add	r24, r18
    20dc:	93 1f       	adc	r25, r19
    20de:	9c 01       	movw	r18, r24
    20e0:	24 0f       	add	r18, r20
    20e2:	35 1f       	adc	r19, r21
    20e4:	88 85       	ldd	r24, Y+8	; 0x08
    20e6:	99 85       	ldd	r25, Y+9	; 0x09
    20e8:	fc 01       	movw	r30, r24
    20ea:	e2 0f       	add	r30, r18
    20ec:	f3 1f       	adc	r31, r19
    20ee:	60 81       	ld	r22, Z
    20f0:	8e 81       	ldd	r24, Y+6	; 0x06
    20f2:	48 2f       	mov	r20, r24
    20f4:	50 e0       	ldi	r21, 0x00	; 0
    20f6:	ca 01       	movw	r24, r20
    20f8:	88 0f       	add	r24, r24
    20fa:	99 1f       	adc	r25, r25
    20fc:	9c 01       	movw	r18, r24
    20fe:	22 0f       	add	r18, r18
    2100:	33 1f       	adc	r19, r19
    2102:	22 0f       	add	r18, r18
    2104:	33 1f       	adc	r19, r19
    2106:	22 0f       	add	r18, r18
    2108:	33 1f       	adc	r19, r19
    210a:	82 0f       	add	r24, r18
    210c:	93 1f       	adc	r25, r19
    210e:	9c 01       	movw	r18, r24
    2110:	24 0f       	add	r18, r20
    2112:	35 1f       	adc	r19, r21
    2114:	88 85       	ldd	r24, Y+8	; 0x08
    2116:	99 85       	ldd	r25, Y+9	; 0x09
    2118:	fc 01       	movw	r30, r24
    211a:	e2 0f       	add	r30, r18
    211c:	f3 1f       	adc	r31, r19
    211e:	91 81       	ldd	r25, Z+1	; 0x01
    2120:	86 2f       	mov	r24, r22
    2122:	69 2f       	mov	r22, r25
    2124:	41 e0       	ldi	r20, 0x01	; 1
    2126:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    212a:	28 2f       	mov	r18, r24
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e0       	ldi	r20, 0x00	; 0
    2130:	50 e0       	ldi	r21, 0x00	; 0
    2132:	89 81       	ldd	r24, Y+1	; 0x01
    2134:	9a 81       	ldd	r25, Y+2	; 0x02
    2136:	ab 81       	ldd	r26, Y+3	; 0x03
    2138:	bc 81       	ldd	r27, Y+4	; 0x04
    213a:	82 2b       	or	r24, r18
    213c:	93 2b       	or	r25, r19
    213e:	a4 2b       	or	r26, r20
    2140:	b5 2b       	or	r27, r21
    2142:	89 83       	std	Y+1, r24	; 0x01
    2144:	9a 83       	std	Y+2, r25	; 0x02
    2146:	ab 83       	std	Y+3, r26	; 0x03
    2148:	bc 83       	std	Y+4, r27	; 0x04
													  Copy_pstrSegConfig[Local_u8Iterator].SEG_u8APin, DIO_u8OUTPUT) << 0);

			Local_u32Check |= (DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8BPort,
    214a:	8e 81       	ldd	r24, Y+6	; 0x06
    214c:	48 2f       	mov	r20, r24
    214e:	50 e0       	ldi	r21, 0x00	; 0
    2150:	ca 01       	movw	r24, r20
    2152:	88 0f       	add	r24, r24
    2154:	99 1f       	adc	r25, r25
    2156:	9c 01       	movw	r18, r24
    2158:	22 0f       	add	r18, r18
    215a:	33 1f       	adc	r19, r19
    215c:	22 0f       	add	r18, r18
    215e:	33 1f       	adc	r19, r19
    2160:	22 0f       	add	r18, r18
    2162:	33 1f       	adc	r19, r19
    2164:	82 0f       	add	r24, r18
    2166:	93 1f       	adc	r25, r19
    2168:	9c 01       	movw	r18, r24
    216a:	24 0f       	add	r18, r20
    216c:	35 1f       	adc	r19, r21
    216e:	88 85       	ldd	r24, Y+8	; 0x08
    2170:	99 85       	ldd	r25, Y+9	; 0x09
    2172:	fc 01       	movw	r30, r24
    2174:	e2 0f       	add	r30, r18
    2176:	f3 1f       	adc	r31, r19
    2178:	62 81       	ldd	r22, Z+2	; 0x02
    217a:	8e 81       	ldd	r24, Y+6	; 0x06
    217c:	48 2f       	mov	r20, r24
    217e:	50 e0       	ldi	r21, 0x00	; 0
    2180:	ca 01       	movw	r24, r20
    2182:	88 0f       	add	r24, r24
    2184:	99 1f       	adc	r25, r25
    2186:	9c 01       	movw	r18, r24
    2188:	22 0f       	add	r18, r18
    218a:	33 1f       	adc	r19, r19
    218c:	22 0f       	add	r18, r18
    218e:	33 1f       	adc	r19, r19
    2190:	22 0f       	add	r18, r18
    2192:	33 1f       	adc	r19, r19
    2194:	82 0f       	add	r24, r18
    2196:	93 1f       	adc	r25, r19
    2198:	9c 01       	movw	r18, r24
    219a:	24 0f       	add	r18, r20
    219c:	35 1f       	adc	r19, r21
    219e:	88 85       	ldd	r24, Y+8	; 0x08
    21a0:	99 85       	ldd	r25, Y+9	; 0x09
    21a2:	fc 01       	movw	r30, r24
    21a4:	e2 0f       	add	r30, r18
    21a6:	f3 1f       	adc	r31, r19
    21a8:	93 81       	ldd	r25, Z+3	; 0x03
    21aa:	86 2f       	mov	r24, r22
    21ac:	69 2f       	mov	r22, r25
    21ae:	41 e0       	ldi	r20, 0x01	; 1
    21b0:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    21b4:	88 2f       	mov	r24, r24
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	88 0f       	add	r24, r24
    21ba:	99 1f       	adc	r25, r25
    21bc:	88 0f       	add	r24, r24
    21be:	99 1f       	adc	r25, r25
    21c0:	88 0f       	add	r24, r24
    21c2:	99 1f       	adc	r25, r25
    21c4:	9c 01       	movw	r18, r24
    21c6:	44 27       	eor	r20, r20
    21c8:	37 fd       	sbrc	r19, 7
    21ca:	40 95       	com	r20
    21cc:	54 2f       	mov	r21, r20
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	9a 81       	ldd	r25, Y+2	; 0x02
    21d2:	ab 81       	ldd	r26, Y+3	; 0x03
    21d4:	bc 81       	ldd	r27, Y+4	; 0x04
    21d6:	82 2b       	or	r24, r18
    21d8:	93 2b       	or	r25, r19
    21da:	a4 2b       	or	r26, r20
    21dc:	b5 2b       	or	r27, r21
    21de:	89 83       	std	Y+1, r24	; 0x01
    21e0:	9a 83       	std	Y+2, r25	; 0x02
    21e2:	ab 83       	std	Y+3, r26	; 0x03
    21e4:	bc 83       	std	Y+4, r27	; 0x04
													  Copy_pstrSegConfig[Local_u8Iterator].SEG_u8BPin, DIO_u8OUTPUT) << 3);

			Local_u32Check |= (DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8CPort,
    21e6:	8e 81       	ldd	r24, Y+6	; 0x06
    21e8:	48 2f       	mov	r20, r24
    21ea:	50 e0       	ldi	r21, 0x00	; 0
    21ec:	ca 01       	movw	r24, r20
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	9c 01       	movw	r18, r24
    21f4:	22 0f       	add	r18, r18
    21f6:	33 1f       	adc	r19, r19
    21f8:	22 0f       	add	r18, r18
    21fa:	33 1f       	adc	r19, r19
    21fc:	22 0f       	add	r18, r18
    21fe:	33 1f       	adc	r19, r19
    2200:	82 0f       	add	r24, r18
    2202:	93 1f       	adc	r25, r19
    2204:	9c 01       	movw	r18, r24
    2206:	24 0f       	add	r18, r20
    2208:	35 1f       	adc	r19, r21
    220a:	88 85       	ldd	r24, Y+8	; 0x08
    220c:	99 85       	ldd	r25, Y+9	; 0x09
    220e:	fc 01       	movw	r30, r24
    2210:	e2 0f       	add	r30, r18
    2212:	f3 1f       	adc	r31, r19
    2214:	64 81       	ldd	r22, Z+4	; 0x04
    2216:	8e 81       	ldd	r24, Y+6	; 0x06
    2218:	48 2f       	mov	r20, r24
    221a:	50 e0       	ldi	r21, 0x00	; 0
    221c:	ca 01       	movw	r24, r20
    221e:	88 0f       	add	r24, r24
    2220:	99 1f       	adc	r25, r25
    2222:	9c 01       	movw	r18, r24
    2224:	22 0f       	add	r18, r18
    2226:	33 1f       	adc	r19, r19
    2228:	22 0f       	add	r18, r18
    222a:	33 1f       	adc	r19, r19
    222c:	22 0f       	add	r18, r18
    222e:	33 1f       	adc	r19, r19
    2230:	82 0f       	add	r24, r18
    2232:	93 1f       	adc	r25, r19
    2234:	9c 01       	movw	r18, r24
    2236:	24 0f       	add	r18, r20
    2238:	35 1f       	adc	r19, r21
    223a:	88 85       	ldd	r24, Y+8	; 0x08
    223c:	99 85       	ldd	r25, Y+9	; 0x09
    223e:	fc 01       	movw	r30, r24
    2240:	e2 0f       	add	r30, r18
    2242:	f3 1f       	adc	r31, r19
    2244:	95 81       	ldd	r25, Z+5	; 0x05
    2246:	86 2f       	mov	r24, r22
    2248:	69 2f       	mov	r22, r25
    224a:	41 e0       	ldi	r20, 0x01	; 1
    224c:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    2250:	88 2f       	mov	r24, r24
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	00 24       	eor	r0, r0
    2256:	96 95       	lsr	r25
    2258:	87 95       	ror	r24
    225a:	07 94       	ror	r0
    225c:	96 95       	lsr	r25
    225e:	87 95       	ror	r24
    2260:	07 94       	ror	r0
    2262:	98 2f       	mov	r25, r24
    2264:	80 2d       	mov	r24, r0
    2266:	9c 01       	movw	r18, r24
    2268:	44 27       	eor	r20, r20
    226a:	37 fd       	sbrc	r19, 7
    226c:	40 95       	com	r20
    226e:	54 2f       	mov	r21, r20
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	9a 81       	ldd	r25, Y+2	; 0x02
    2274:	ab 81       	ldd	r26, Y+3	; 0x03
    2276:	bc 81       	ldd	r27, Y+4	; 0x04
    2278:	82 2b       	or	r24, r18
    227a:	93 2b       	or	r25, r19
    227c:	a4 2b       	or	r26, r20
    227e:	b5 2b       	or	r27, r21
    2280:	89 83       	std	Y+1, r24	; 0x01
    2282:	9a 83       	std	Y+2, r25	; 0x02
    2284:	ab 83       	std	Y+3, r26	; 0x03
    2286:	bc 83       	std	Y+4, r27	; 0x04
													  Copy_pstrSegConfig[Local_u8Iterator].SEG_u8CPin, DIO_u8OUTPUT) << 6);

			Local_u32Check |= (DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8DPort,
    2288:	8e 81       	ldd	r24, Y+6	; 0x06
    228a:	48 2f       	mov	r20, r24
    228c:	50 e0       	ldi	r21, 0x00	; 0
    228e:	ca 01       	movw	r24, r20
    2290:	88 0f       	add	r24, r24
    2292:	99 1f       	adc	r25, r25
    2294:	9c 01       	movw	r18, r24
    2296:	22 0f       	add	r18, r18
    2298:	33 1f       	adc	r19, r19
    229a:	22 0f       	add	r18, r18
    229c:	33 1f       	adc	r19, r19
    229e:	22 0f       	add	r18, r18
    22a0:	33 1f       	adc	r19, r19
    22a2:	82 0f       	add	r24, r18
    22a4:	93 1f       	adc	r25, r19
    22a6:	9c 01       	movw	r18, r24
    22a8:	24 0f       	add	r18, r20
    22aa:	35 1f       	adc	r19, r21
    22ac:	88 85       	ldd	r24, Y+8	; 0x08
    22ae:	99 85       	ldd	r25, Y+9	; 0x09
    22b0:	fc 01       	movw	r30, r24
    22b2:	e2 0f       	add	r30, r18
    22b4:	f3 1f       	adc	r31, r19
    22b6:	66 81       	ldd	r22, Z+6	; 0x06
    22b8:	8e 81       	ldd	r24, Y+6	; 0x06
    22ba:	48 2f       	mov	r20, r24
    22bc:	50 e0       	ldi	r21, 0x00	; 0
    22be:	ca 01       	movw	r24, r20
    22c0:	88 0f       	add	r24, r24
    22c2:	99 1f       	adc	r25, r25
    22c4:	9c 01       	movw	r18, r24
    22c6:	22 0f       	add	r18, r18
    22c8:	33 1f       	adc	r19, r19
    22ca:	22 0f       	add	r18, r18
    22cc:	33 1f       	adc	r19, r19
    22ce:	22 0f       	add	r18, r18
    22d0:	33 1f       	adc	r19, r19
    22d2:	82 0f       	add	r24, r18
    22d4:	93 1f       	adc	r25, r19
    22d6:	9c 01       	movw	r18, r24
    22d8:	24 0f       	add	r18, r20
    22da:	35 1f       	adc	r19, r21
    22dc:	88 85       	ldd	r24, Y+8	; 0x08
    22de:	99 85       	ldd	r25, Y+9	; 0x09
    22e0:	fc 01       	movw	r30, r24
    22e2:	e2 0f       	add	r30, r18
    22e4:	f3 1f       	adc	r31, r19
    22e6:	97 81       	ldd	r25, Z+7	; 0x07
    22e8:	86 2f       	mov	r24, r22
    22ea:	69 2f       	mov	r22, r25
    22ec:	41 e0       	ldi	r20, 0x01	; 1
    22ee:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    22f2:	88 2f       	mov	r24, r24
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	98 2f       	mov	r25, r24
    22f8:	88 27       	eor	r24, r24
    22fa:	99 0f       	add	r25, r25
    22fc:	9c 01       	movw	r18, r24
    22fe:	44 27       	eor	r20, r20
    2300:	37 fd       	sbrc	r19, 7
    2302:	40 95       	com	r20
    2304:	54 2f       	mov	r21, r20
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	9a 81       	ldd	r25, Y+2	; 0x02
    230a:	ab 81       	ldd	r26, Y+3	; 0x03
    230c:	bc 81       	ldd	r27, Y+4	; 0x04
    230e:	82 2b       	or	r24, r18
    2310:	93 2b       	or	r25, r19
    2312:	a4 2b       	or	r26, r20
    2314:	b5 2b       	or	r27, r21
    2316:	89 83       	std	Y+1, r24	; 0x01
    2318:	9a 83       	std	Y+2, r25	; 0x02
    231a:	ab 83       	std	Y+3, r26	; 0x03
    231c:	bc 83       	std	Y+4, r27	; 0x04
													  Copy_pstrSegConfig[Local_u8Iterator].SEG_u8DPin, DIO_u8OUTPUT) << 9);

			Local_u32Check |= (DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8EPort,
    231e:	8e 81       	ldd	r24, Y+6	; 0x06
    2320:	48 2f       	mov	r20, r24
    2322:	50 e0       	ldi	r21, 0x00	; 0
    2324:	ca 01       	movw	r24, r20
    2326:	88 0f       	add	r24, r24
    2328:	99 1f       	adc	r25, r25
    232a:	9c 01       	movw	r18, r24
    232c:	22 0f       	add	r18, r18
    232e:	33 1f       	adc	r19, r19
    2330:	22 0f       	add	r18, r18
    2332:	33 1f       	adc	r19, r19
    2334:	22 0f       	add	r18, r18
    2336:	33 1f       	adc	r19, r19
    2338:	82 0f       	add	r24, r18
    233a:	93 1f       	adc	r25, r19
    233c:	9c 01       	movw	r18, r24
    233e:	24 0f       	add	r18, r20
    2340:	35 1f       	adc	r19, r21
    2342:	88 85       	ldd	r24, Y+8	; 0x08
    2344:	99 85       	ldd	r25, Y+9	; 0x09
    2346:	fc 01       	movw	r30, r24
    2348:	e2 0f       	add	r30, r18
    234a:	f3 1f       	adc	r31, r19
    234c:	60 85       	ldd	r22, Z+8	; 0x08
    234e:	8e 81       	ldd	r24, Y+6	; 0x06
    2350:	48 2f       	mov	r20, r24
    2352:	50 e0       	ldi	r21, 0x00	; 0
    2354:	ca 01       	movw	r24, r20
    2356:	88 0f       	add	r24, r24
    2358:	99 1f       	adc	r25, r25
    235a:	9c 01       	movw	r18, r24
    235c:	22 0f       	add	r18, r18
    235e:	33 1f       	adc	r19, r19
    2360:	22 0f       	add	r18, r18
    2362:	33 1f       	adc	r19, r19
    2364:	22 0f       	add	r18, r18
    2366:	33 1f       	adc	r19, r19
    2368:	82 0f       	add	r24, r18
    236a:	93 1f       	adc	r25, r19
    236c:	9c 01       	movw	r18, r24
    236e:	24 0f       	add	r18, r20
    2370:	35 1f       	adc	r19, r21
    2372:	88 85       	ldd	r24, Y+8	; 0x08
    2374:	99 85       	ldd	r25, Y+9	; 0x09
    2376:	fc 01       	movw	r30, r24
    2378:	e2 0f       	add	r30, r18
    237a:	f3 1f       	adc	r31, r19
    237c:	91 85       	ldd	r25, Z+9	; 0x09
    237e:	86 2f       	mov	r24, r22
    2380:	69 2f       	mov	r22, r25
    2382:	41 e0       	ldi	r20, 0x01	; 1
    2384:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    2388:	88 2f       	mov	r24, r24
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	98 2f       	mov	r25, r24
    238e:	88 27       	eor	r24, r24
    2390:	92 95       	swap	r25
    2392:	90 7f       	andi	r25, 0xF0	; 240
    2394:	9c 01       	movw	r18, r24
    2396:	44 27       	eor	r20, r20
    2398:	37 fd       	sbrc	r19, 7
    239a:	40 95       	com	r20
    239c:	54 2f       	mov	r21, r20
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	9a 81       	ldd	r25, Y+2	; 0x02
    23a2:	ab 81       	ldd	r26, Y+3	; 0x03
    23a4:	bc 81       	ldd	r27, Y+4	; 0x04
    23a6:	82 2b       	or	r24, r18
    23a8:	93 2b       	or	r25, r19
    23aa:	a4 2b       	or	r26, r20
    23ac:	b5 2b       	or	r27, r21
    23ae:	89 83       	std	Y+1, r24	; 0x01
    23b0:	9a 83       	std	Y+2, r25	; 0x02
    23b2:	ab 83       	std	Y+3, r26	; 0x03
    23b4:	bc 83       	std	Y+4, r27	; 0x04
													  Copy_pstrSegConfig[Local_u8Iterator].SEG_u8EPin, DIO_u8OUTPUT) << 12);

			Local_u32Check |= (((u32)DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8FPort,
    23b6:	8e 81       	ldd	r24, Y+6	; 0x06
    23b8:	48 2f       	mov	r20, r24
    23ba:	50 e0       	ldi	r21, 0x00	; 0
    23bc:	ca 01       	movw	r24, r20
    23be:	88 0f       	add	r24, r24
    23c0:	99 1f       	adc	r25, r25
    23c2:	9c 01       	movw	r18, r24
    23c4:	22 0f       	add	r18, r18
    23c6:	33 1f       	adc	r19, r19
    23c8:	22 0f       	add	r18, r18
    23ca:	33 1f       	adc	r19, r19
    23cc:	22 0f       	add	r18, r18
    23ce:	33 1f       	adc	r19, r19
    23d0:	82 0f       	add	r24, r18
    23d2:	93 1f       	adc	r25, r19
    23d4:	9c 01       	movw	r18, r24
    23d6:	24 0f       	add	r18, r20
    23d8:	35 1f       	adc	r19, r21
    23da:	88 85       	ldd	r24, Y+8	; 0x08
    23dc:	99 85       	ldd	r25, Y+9	; 0x09
    23de:	fc 01       	movw	r30, r24
    23e0:	e2 0f       	add	r30, r18
    23e2:	f3 1f       	adc	r31, r19
    23e4:	62 85       	ldd	r22, Z+10	; 0x0a
    23e6:	8e 81       	ldd	r24, Y+6	; 0x06
    23e8:	48 2f       	mov	r20, r24
    23ea:	50 e0       	ldi	r21, 0x00	; 0
    23ec:	ca 01       	movw	r24, r20
    23ee:	88 0f       	add	r24, r24
    23f0:	99 1f       	adc	r25, r25
    23f2:	9c 01       	movw	r18, r24
    23f4:	22 0f       	add	r18, r18
    23f6:	33 1f       	adc	r19, r19
    23f8:	22 0f       	add	r18, r18
    23fa:	33 1f       	adc	r19, r19
    23fc:	22 0f       	add	r18, r18
    23fe:	33 1f       	adc	r19, r19
    2400:	82 0f       	add	r24, r18
    2402:	93 1f       	adc	r25, r19
    2404:	9c 01       	movw	r18, r24
    2406:	24 0f       	add	r18, r20
    2408:	35 1f       	adc	r19, r21
    240a:	88 85       	ldd	r24, Y+8	; 0x08
    240c:	99 85       	ldd	r25, Y+9	; 0x09
    240e:	fc 01       	movw	r30, r24
    2410:	e2 0f       	add	r30, r18
    2412:	f3 1f       	adc	r31, r19
    2414:	93 85       	ldd	r25, Z+11	; 0x0b
    2416:	86 2f       	mov	r24, r22
    2418:	69 2f       	mov	r22, r25
    241a:	41 e0       	ldi	r20, 0x01	; 1
    241c:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    2420:	88 2f       	mov	r24, r24
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	a0 e0       	ldi	r26, 0x00	; 0
    2426:	b0 e0       	ldi	r27, 0x00	; 0
    2428:	9c 01       	movw	r18, r24
    242a:	ad 01       	movw	r20, r26
    242c:	01 2e       	mov	r0, r17
    242e:	1f e0       	ldi	r17, 0x0F	; 15
    2430:	22 0f       	add	r18, r18
    2432:	33 1f       	adc	r19, r19
    2434:	44 1f       	adc	r20, r20
    2436:	55 1f       	adc	r21, r21
    2438:	1a 95       	dec	r17
    243a:	d1 f7       	brne	.-12     	; 0x2430 <SSDLT_enuInit+0x3a4>
    243c:	10 2d       	mov	r17, r0
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	9a 81       	ldd	r25, Y+2	; 0x02
    2442:	ab 81       	ldd	r26, Y+3	; 0x03
    2444:	bc 81       	ldd	r27, Y+4	; 0x04
    2446:	82 2b       	or	r24, r18
    2448:	93 2b       	or	r25, r19
    244a:	a4 2b       	or	r26, r20
    244c:	b5 2b       	or	r27, r21
    244e:	89 83       	std	Y+1, r24	; 0x01
    2450:	9a 83       	std	Y+2, r25	; 0x02
    2452:	ab 83       	std	Y+3, r26	; 0x03
    2454:	bc 83       	std	Y+4, r27	; 0x04
													 Copy_pstrSegConfig[Local_u8Iterator].SEG_u8FPin, DIO_u8OUTPUT)) << 15);

			Local_u32Check |= (((u32)DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8GPort,
    2456:	8e 81       	ldd	r24, Y+6	; 0x06
    2458:	48 2f       	mov	r20, r24
    245a:	50 e0       	ldi	r21, 0x00	; 0
    245c:	ca 01       	movw	r24, r20
    245e:	88 0f       	add	r24, r24
    2460:	99 1f       	adc	r25, r25
    2462:	9c 01       	movw	r18, r24
    2464:	22 0f       	add	r18, r18
    2466:	33 1f       	adc	r19, r19
    2468:	22 0f       	add	r18, r18
    246a:	33 1f       	adc	r19, r19
    246c:	22 0f       	add	r18, r18
    246e:	33 1f       	adc	r19, r19
    2470:	82 0f       	add	r24, r18
    2472:	93 1f       	adc	r25, r19
    2474:	9c 01       	movw	r18, r24
    2476:	24 0f       	add	r18, r20
    2478:	35 1f       	adc	r19, r21
    247a:	88 85       	ldd	r24, Y+8	; 0x08
    247c:	99 85       	ldd	r25, Y+9	; 0x09
    247e:	fc 01       	movw	r30, r24
    2480:	e2 0f       	add	r30, r18
    2482:	f3 1f       	adc	r31, r19
    2484:	64 85       	ldd	r22, Z+12	; 0x0c
    2486:	8e 81       	ldd	r24, Y+6	; 0x06
    2488:	48 2f       	mov	r20, r24
    248a:	50 e0       	ldi	r21, 0x00	; 0
    248c:	ca 01       	movw	r24, r20
    248e:	88 0f       	add	r24, r24
    2490:	99 1f       	adc	r25, r25
    2492:	9c 01       	movw	r18, r24
    2494:	22 0f       	add	r18, r18
    2496:	33 1f       	adc	r19, r19
    2498:	22 0f       	add	r18, r18
    249a:	33 1f       	adc	r19, r19
    249c:	22 0f       	add	r18, r18
    249e:	33 1f       	adc	r19, r19
    24a0:	82 0f       	add	r24, r18
    24a2:	93 1f       	adc	r25, r19
    24a4:	9c 01       	movw	r18, r24
    24a6:	24 0f       	add	r18, r20
    24a8:	35 1f       	adc	r19, r21
    24aa:	88 85       	ldd	r24, Y+8	; 0x08
    24ac:	99 85       	ldd	r25, Y+9	; 0x09
    24ae:	fc 01       	movw	r30, r24
    24b0:	e2 0f       	add	r30, r18
    24b2:	f3 1f       	adc	r31, r19
    24b4:	95 85       	ldd	r25, Z+13	; 0x0d
    24b6:	86 2f       	mov	r24, r22
    24b8:	69 2f       	mov	r22, r25
    24ba:	41 e0       	ldi	r20, 0x01	; 1
    24bc:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    24c0:	88 2f       	mov	r24, r24
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	a0 e0       	ldi	r26, 0x00	; 0
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	9c 01       	movw	r18, r24
    24ca:	ad 01       	movw	r20, r26
    24cc:	01 2e       	mov	r0, r17
    24ce:	12 e1       	ldi	r17, 0x12	; 18
    24d0:	22 0f       	add	r18, r18
    24d2:	33 1f       	adc	r19, r19
    24d4:	44 1f       	adc	r20, r20
    24d6:	55 1f       	adc	r21, r21
    24d8:	1a 95       	dec	r17
    24da:	d1 f7       	brne	.-12     	; 0x24d0 <SSDLT_enuInit+0x444>
    24dc:	10 2d       	mov	r17, r0
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	9a 81       	ldd	r25, Y+2	; 0x02
    24e2:	ab 81       	ldd	r26, Y+3	; 0x03
    24e4:	bc 81       	ldd	r27, Y+4	; 0x04
    24e6:	82 2b       	or	r24, r18
    24e8:	93 2b       	or	r25, r19
    24ea:	a4 2b       	or	r26, r20
    24ec:	b5 2b       	or	r27, r21
    24ee:	89 83       	std	Y+1, r24	; 0x01
    24f0:	9a 83       	std	Y+2, r25	; 0x02
    24f2:	ab 83       	std	Y+3, r26	; 0x03
    24f4:	bc 83       	std	Y+4, r27	; 0x04
													 Copy_pstrSegConfig[Local_u8Iterator].SEG_u8GPin, DIO_u8OUTPUT)) << 18);
			Local_u8LastBit = 21;
    24f6:	85 e1       	ldi	r24, 0x15	; 21
    24f8:	8d 83       	std	Y+5, r24	; 0x05

			if(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8CMN_Port != NOT_CONNECTED ||
    24fa:	8e 81       	ldd	r24, Y+6	; 0x06
    24fc:	48 2f       	mov	r20, r24
    24fe:	50 e0       	ldi	r21, 0x00	; 0
    2500:	ca 01       	movw	r24, r20
    2502:	88 0f       	add	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	9c 01       	movw	r18, r24
    2508:	22 0f       	add	r18, r18
    250a:	33 1f       	adc	r19, r19
    250c:	22 0f       	add	r18, r18
    250e:	33 1f       	adc	r19, r19
    2510:	22 0f       	add	r18, r18
    2512:	33 1f       	adc	r19, r19
    2514:	82 0f       	add	r24, r18
    2516:	93 1f       	adc	r25, r19
    2518:	9c 01       	movw	r18, r24
    251a:	24 0f       	add	r18, r20
    251c:	35 1f       	adc	r19, r21
    251e:	88 85       	ldd	r24, Y+8	; 0x08
    2520:	99 85       	ldd	r25, Y+9	; 0x09
    2522:	fc 01       	movw	r30, r24
    2524:	e2 0f       	add	r30, r18
    2526:	f3 1f       	adc	r31, r19
    2528:	86 85       	ldd	r24, Z+14	; 0x0e
    252a:	82 30       	cpi	r24, 0x02	; 2
    252c:	d9 f4       	brne	.+54     	; 0x2564 <SSDLT_enuInit+0x4d8>
    252e:	8e 81       	ldd	r24, Y+6	; 0x06
    2530:	48 2f       	mov	r20, r24
    2532:	50 e0       	ldi	r21, 0x00	; 0
    2534:	ca 01       	movw	r24, r20
    2536:	88 0f       	add	r24, r24
    2538:	99 1f       	adc	r25, r25
    253a:	9c 01       	movw	r18, r24
    253c:	22 0f       	add	r18, r18
    253e:	33 1f       	adc	r19, r19
    2540:	22 0f       	add	r18, r18
    2542:	33 1f       	adc	r19, r19
    2544:	22 0f       	add	r18, r18
    2546:	33 1f       	adc	r19, r19
    2548:	82 0f       	add	r24, r18
    254a:	93 1f       	adc	r25, r19
    254c:	9c 01       	movw	r18, r24
    254e:	24 0f       	add	r18, r20
    2550:	35 1f       	adc	r19, r21
    2552:	88 85       	ldd	r24, Y+8	; 0x08
    2554:	99 85       	ldd	r25, Y+9	; 0x09
    2556:	fc 01       	movw	r30, r24
    2558:	e2 0f       	add	r30, r18
    255a:	f3 1f       	adc	r31, r19
    255c:	87 85       	ldd	r24, Z+15	; 0x0f
    255e:	82 30       	cpi	r24, 0x02	; 2
    2560:	09 f4       	brne	.+2      	; 0x2564 <SSDLT_enuInit+0x4d8>
    2562:	52 c0       	rjmp	.+164    	; 0x2608 <SSDLT_enuInit+0x57c>
			   Copy_pstrSegConfig[Local_u8Iterator].SEG_u8CMN_Pin != NOT_CONNECTED)
			{
				Local_u32Check |= (((u32)DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8CMN_Port,
    2564:	8e 81       	ldd	r24, Y+6	; 0x06
    2566:	48 2f       	mov	r20, r24
    2568:	50 e0       	ldi	r21, 0x00	; 0
    256a:	ca 01       	movw	r24, r20
    256c:	88 0f       	add	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	9c 01       	movw	r18, r24
    2572:	22 0f       	add	r18, r18
    2574:	33 1f       	adc	r19, r19
    2576:	22 0f       	add	r18, r18
    2578:	33 1f       	adc	r19, r19
    257a:	22 0f       	add	r18, r18
    257c:	33 1f       	adc	r19, r19
    257e:	82 0f       	add	r24, r18
    2580:	93 1f       	adc	r25, r19
    2582:	9c 01       	movw	r18, r24
    2584:	24 0f       	add	r18, r20
    2586:	35 1f       	adc	r19, r21
    2588:	88 85       	ldd	r24, Y+8	; 0x08
    258a:	99 85       	ldd	r25, Y+9	; 0x09
    258c:	fc 01       	movw	r30, r24
    258e:	e2 0f       	add	r30, r18
    2590:	f3 1f       	adc	r31, r19
    2592:	66 85       	ldd	r22, Z+14	; 0x0e
    2594:	8e 81       	ldd	r24, Y+6	; 0x06
    2596:	48 2f       	mov	r20, r24
    2598:	50 e0       	ldi	r21, 0x00	; 0
    259a:	ca 01       	movw	r24, r20
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	9c 01       	movw	r18, r24
    25a2:	22 0f       	add	r18, r18
    25a4:	33 1f       	adc	r19, r19
    25a6:	22 0f       	add	r18, r18
    25a8:	33 1f       	adc	r19, r19
    25aa:	22 0f       	add	r18, r18
    25ac:	33 1f       	adc	r19, r19
    25ae:	82 0f       	add	r24, r18
    25b0:	93 1f       	adc	r25, r19
    25b2:	9c 01       	movw	r18, r24
    25b4:	24 0f       	add	r18, r20
    25b6:	35 1f       	adc	r19, r21
    25b8:	88 85       	ldd	r24, Y+8	; 0x08
    25ba:	99 85       	ldd	r25, Y+9	; 0x09
    25bc:	fc 01       	movw	r30, r24
    25be:	e2 0f       	add	r30, r18
    25c0:	f3 1f       	adc	r31, r19
    25c2:	97 85       	ldd	r25, Z+15	; 0x0f
    25c4:	86 2f       	mov	r24, r22
    25c6:	69 2f       	mov	r22, r25
    25c8:	41 e0       	ldi	r20, 0x01	; 1
    25ca:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    25ce:	28 2f       	mov	r18, r24
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	40 e0       	ldi	r20, 0x00	; 0
    25d4:	50 e0       	ldi	r21, 0x00	; 0
    25d6:	8d 81       	ldd	r24, Y+5	; 0x05
    25d8:	88 2f       	mov	r24, r24
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	04 c0       	rjmp	.+8      	; 0x25e6 <SSDLT_enuInit+0x55a>
    25de:	22 0f       	add	r18, r18
    25e0:	33 1f       	adc	r19, r19
    25e2:	44 1f       	adc	r20, r20
    25e4:	55 1f       	adc	r21, r21
    25e6:	8a 95       	dec	r24
    25e8:	d2 f7       	brpl	.-12     	; 0x25de <SSDLT_enuInit+0x552>
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	9a 81       	ldd	r25, Y+2	; 0x02
    25ee:	ab 81       	ldd	r26, Y+3	; 0x03
    25f0:	bc 81       	ldd	r27, Y+4	; 0x04
    25f2:	82 2b       	or	r24, r18
    25f4:	93 2b       	or	r25, r19
    25f6:	a4 2b       	or	r26, r20
    25f8:	b5 2b       	or	r27, r21
    25fa:	89 83       	std	Y+1, r24	; 0x01
    25fc:	9a 83       	std	Y+2, r25	; 0x02
    25fe:	ab 83       	std	Y+3, r26	; 0x03
    2600:	bc 83       	std	Y+4, r27	; 0x04
												   Copy_pstrSegConfig[Local_u8Iterator].SEG_u8CMN_Pin, DIO_u8OUTPUT) << Local_u8LastBit));
				Local_u8LastBit += 3;
    2602:	8d 81       	ldd	r24, Y+5	; 0x05
    2604:	8d 5f       	subi	r24, 0xFD	; 253
    2606:	8d 83       	std	Y+5, r24	; 0x05
			}

			if(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8DOT_Port != NOT_CONNECTED ||
    2608:	8e 81       	ldd	r24, Y+6	; 0x06
    260a:	48 2f       	mov	r20, r24
    260c:	50 e0       	ldi	r21, 0x00	; 0
    260e:	ca 01       	movw	r24, r20
    2610:	88 0f       	add	r24, r24
    2612:	99 1f       	adc	r25, r25
    2614:	9c 01       	movw	r18, r24
    2616:	22 0f       	add	r18, r18
    2618:	33 1f       	adc	r19, r19
    261a:	22 0f       	add	r18, r18
    261c:	33 1f       	adc	r19, r19
    261e:	22 0f       	add	r18, r18
    2620:	33 1f       	adc	r19, r19
    2622:	82 0f       	add	r24, r18
    2624:	93 1f       	adc	r25, r19
    2626:	9c 01       	movw	r18, r24
    2628:	24 0f       	add	r18, r20
    262a:	35 1f       	adc	r19, r21
    262c:	88 85       	ldd	r24, Y+8	; 0x08
    262e:	99 85       	ldd	r25, Y+9	; 0x09
    2630:	fc 01       	movw	r30, r24
    2632:	e2 0f       	add	r30, r18
    2634:	f3 1f       	adc	r31, r19
    2636:	80 89       	ldd	r24, Z+16	; 0x10
    2638:	82 30       	cpi	r24, 0x02	; 2
    263a:	d9 f4       	brne	.+54     	; 0x2672 <SSDLT_enuInit+0x5e6>
    263c:	8e 81       	ldd	r24, Y+6	; 0x06
    263e:	48 2f       	mov	r20, r24
    2640:	50 e0       	ldi	r21, 0x00	; 0
    2642:	ca 01       	movw	r24, r20
    2644:	88 0f       	add	r24, r24
    2646:	99 1f       	adc	r25, r25
    2648:	9c 01       	movw	r18, r24
    264a:	22 0f       	add	r18, r18
    264c:	33 1f       	adc	r19, r19
    264e:	22 0f       	add	r18, r18
    2650:	33 1f       	adc	r19, r19
    2652:	22 0f       	add	r18, r18
    2654:	33 1f       	adc	r19, r19
    2656:	82 0f       	add	r24, r18
    2658:	93 1f       	adc	r25, r19
    265a:	9c 01       	movw	r18, r24
    265c:	24 0f       	add	r18, r20
    265e:	35 1f       	adc	r19, r21
    2660:	88 85       	ldd	r24, Y+8	; 0x08
    2662:	99 85       	ldd	r25, Y+9	; 0x09
    2664:	fc 01       	movw	r30, r24
    2666:	e2 0f       	add	r30, r18
    2668:	f3 1f       	adc	r31, r19
    266a:	81 89       	ldd	r24, Z+17	; 0x11
    266c:	82 30       	cpi	r24, 0x02	; 2
    266e:	09 f4       	brne	.+2      	; 0x2672 <SSDLT_enuInit+0x5e6>
    2670:	52 c0       	rjmp	.+164    	; 0x2716 <SSDLT_enuInit+0x68a>
			   Copy_pstrSegConfig[Local_u8Iterator].SEG_u8DOT_Pin != NOT_CONNECTED)
			{
				Local_u32Check |= (((u32)DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8DOT_Port,
    2672:	8e 81       	ldd	r24, Y+6	; 0x06
    2674:	48 2f       	mov	r20, r24
    2676:	50 e0       	ldi	r21, 0x00	; 0
    2678:	ca 01       	movw	r24, r20
    267a:	88 0f       	add	r24, r24
    267c:	99 1f       	adc	r25, r25
    267e:	9c 01       	movw	r18, r24
    2680:	22 0f       	add	r18, r18
    2682:	33 1f       	adc	r19, r19
    2684:	22 0f       	add	r18, r18
    2686:	33 1f       	adc	r19, r19
    2688:	22 0f       	add	r18, r18
    268a:	33 1f       	adc	r19, r19
    268c:	82 0f       	add	r24, r18
    268e:	93 1f       	adc	r25, r19
    2690:	9c 01       	movw	r18, r24
    2692:	24 0f       	add	r18, r20
    2694:	35 1f       	adc	r19, r21
    2696:	88 85       	ldd	r24, Y+8	; 0x08
    2698:	99 85       	ldd	r25, Y+9	; 0x09
    269a:	fc 01       	movw	r30, r24
    269c:	e2 0f       	add	r30, r18
    269e:	f3 1f       	adc	r31, r19
    26a0:	60 89       	ldd	r22, Z+16	; 0x10
    26a2:	8e 81       	ldd	r24, Y+6	; 0x06
    26a4:	48 2f       	mov	r20, r24
    26a6:	50 e0       	ldi	r21, 0x00	; 0
    26a8:	ca 01       	movw	r24, r20
    26aa:	88 0f       	add	r24, r24
    26ac:	99 1f       	adc	r25, r25
    26ae:	9c 01       	movw	r18, r24
    26b0:	22 0f       	add	r18, r18
    26b2:	33 1f       	adc	r19, r19
    26b4:	22 0f       	add	r18, r18
    26b6:	33 1f       	adc	r19, r19
    26b8:	22 0f       	add	r18, r18
    26ba:	33 1f       	adc	r19, r19
    26bc:	82 0f       	add	r24, r18
    26be:	93 1f       	adc	r25, r19
    26c0:	9c 01       	movw	r18, r24
    26c2:	24 0f       	add	r18, r20
    26c4:	35 1f       	adc	r19, r21
    26c6:	88 85       	ldd	r24, Y+8	; 0x08
    26c8:	99 85       	ldd	r25, Y+9	; 0x09
    26ca:	fc 01       	movw	r30, r24
    26cc:	e2 0f       	add	r30, r18
    26ce:	f3 1f       	adc	r31, r19
    26d0:	91 89       	ldd	r25, Z+17	; 0x11
    26d2:	86 2f       	mov	r24, r22
    26d4:	69 2f       	mov	r22, r25
    26d6:	41 e0       	ldi	r20, 0x01	; 1
    26d8:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    26dc:	28 2f       	mov	r18, r24
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	40 e0       	ldi	r20, 0x00	; 0
    26e2:	50 e0       	ldi	r21, 0x00	; 0
    26e4:	8d 81       	ldd	r24, Y+5	; 0x05
    26e6:	88 2f       	mov	r24, r24
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	04 c0       	rjmp	.+8      	; 0x26f4 <SSDLT_enuInit+0x668>
    26ec:	22 0f       	add	r18, r18
    26ee:	33 1f       	adc	r19, r19
    26f0:	44 1f       	adc	r20, r20
    26f2:	55 1f       	adc	r21, r21
    26f4:	8a 95       	dec	r24
    26f6:	d2 f7       	brpl	.-12     	; 0x26ec <SSDLT_enuInit+0x660>
    26f8:	89 81       	ldd	r24, Y+1	; 0x01
    26fa:	9a 81       	ldd	r25, Y+2	; 0x02
    26fc:	ab 81       	ldd	r26, Y+3	; 0x03
    26fe:	bc 81       	ldd	r27, Y+4	; 0x04
    2700:	82 2b       	or	r24, r18
    2702:	93 2b       	or	r25, r19
    2704:	a4 2b       	or	r26, r20
    2706:	b5 2b       	or	r27, r21
    2708:	89 83       	std	Y+1, r24	; 0x01
    270a:	9a 83       	std	Y+2, r25	; 0x02
    270c:	ab 83       	std	Y+3, r26	; 0x03
    270e:	bc 83       	std	Y+4, r27	; 0x04
												   Copy_pstrSegConfig[Local_u8Iterator].SEG_u8DOT_Pin, DIO_u8OUTPUT) << Local_u8LastBit));
				Local_u8LastBit += 3;
    2710:	8d 81       	ldd	r24, Y+5	; 0x05
    2712:	8d 5f       	subi	r24, 0xFD	; 253
    2714:	8d 83       	std	Y+5, r24	; 0x05
	u8 Local_u8LastBit  = 0;
	u32 Local_u32Check  = 0;

	if(Copy_pstrSegConfig != NULL)
	{
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
    2716:	8e 81       	ldd	r24, Y+6	; 0x06
    2718:	8f 5f       	subi	r24, 0xFF	; 255
    271a:	8e 83       	std	Y+6, r24	; 0x06
    271c:	8e 81       	ldd	r24, Y+6	; 0x06
    271e:	82 30       	cpi	r24, 0x02	; 2
    2720:	08 f4       	brcc	.+2      	; 0x2724 <SSDLT_enuInit+0x698>
    2722:	ce cc       	rjmp	.-1636   	; 0x20c0 <SSDLT_enuInit+0x34>
    2724:	02 c0       	rjmp	.+4      	; 0x272a <SSDLT_enuInit+0x69e>

		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2726:	82 e0       	ldi	r24, 0x02	; 2
    2728:	8f 83       	std	Y+7, r24	; 0x07
	}


	for(Local_u8Iterator = 0; Local_u8Iterator < Local_u8LastBit; Local_u8Iterator += 3)
    272a:	1e 82       	std	Y+6, r1	; 0x06
    272c:	1e c0       	rjmp	.+60     	; 0x276a <SSDLT_enuInit+0x6de>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
    272e:	8e 81       	ldd	r24, Y+6	; 0x06
    2730:	28 2f       	mov	r18, r24
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	89 81       	ldd	r24, Y+1	; 0x01
    2736:	9a 81       	ldd	r25, Y+2	; 0x02
    2738:	ab 81       	ldd	r26, Y+3	; 0x03
    273a:	bc 81       	ldd	r27, Y+4	; 0x04
    273c:	02 2e       	mov	r0, r18
    273e:	04 c0       	rjmp	.+8      	; 0x2748 <SSDLT_enuInit+0x6bc>
    2740:	b6 95       	lsr	r27
    2742:	a7 95       	ror	r26
    2744:	97 95       	ror	r25
    2746:	87 95       	ror	r24
    2748:	0a 94       	dec	r0
    274a:	d2 f7       	brpl	.-12     	; 0x2740 <SSDLT_enuInit+0x6b4>
    274c:	87 70       	andi	r24, 0x07	; 7
    274e:	90 70       	andi	r25, 0x00	; 0
    2750:	a0 70       	andi	r26, 0x00	; 0
    2752:	b0 70       	andi	r27, 0x00	; 0
    2754:	81 30       	cpi	r24, 0x01	; 1
    2756:	91 05       	cpc	r25, r1
    2758:	a1 05       	cpc	r26, r1
    275a:	b1 05       	cpc	r27, r1
    275c:	19 f0       	breq	.+6      	; 0x2764 <SSDLT_enuInit+0x6d8>
		{
			return Local_enuErrorState;
    275e:	8f 81       	ldd	r24, Y+7	; 0x07
    2760:	8a 87       	std	Y+10, r24	; 0x0a
    2762:	0b c0       	rjmp	.+22     	; 0x277a <SSDLT_enuInit+0x6ee>
	{
		Local_enuErrorState = ES_NULL_POINTER;
	}


	for(Local_u8Iterator = 0; Local_u8Iterator < Local_u8LastBit; Local_u8Iterator += 3)
    2764:	8e 81       	ldd	r24, Y+6	; 0x06
    2766:	8d 5f       	subi	r24, 0xFD	; 253
    2768:	8e 83       	std	Y+6, r24	; 0x06
    276a:	9e 81       	ldd	r25, Y+6	; 0x06
    276c:	8d 81       	ldd	r24, Y+5	; 0x05
    276e:	98 17       	cp	r25, r24
    2770:	f0 f2       	brcs	.-68     	; 0x272e <SSDLT_enuInit+0x6a2>
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
		{
			return Local_enuErrorState;
		}
	}
	Local_enuErrorState = ES_OK;
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	8f 83       	std	Y+7, r24	; 0x07

	return Local_enuErrorState;
    2776:	8f 81       	ldd	r24, Y+7	; 0x07
    2778:	8a 87       	std	Y+10, r24	; 0x0a
    277a:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    277c:	2a 96       	adiw	r28, 0x0a	; 10
    277e:	0f b6       	in	r0, 0x3f	; 63
    2780:	f8 94       	cli
    2782:	de bf       	out	0x3e, r29	; 62
    2784:	0f be       	out	0x3f, r0	; 63
    2786:	cd bf       	out	0x3d, r28	; 61
    2788:	cf 91       	pop	r28
    278a:	df 91       	pop	r29
    278c:	08 95       	ret

0000278e <SSDLT_enuDisplayNum>:

ES_t SSDLT_enuDisplayNum(u8 Copy_u8SegID, u8 Copy_u8Number)
{
    278e:	df 93       	push	r29
    2790:	cf 93       	push	r28
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
    2796:	6e 97       	sbiw	r28, 0x1e	; 30
    2798:	0f b6       	in	r0, 0x3f	; 63
    279a:	f8 94       	cli
    279c:	de bf       	out	0x3e, r29	; 62
    279e:	0f be       	out	0x3f, r0	; 63
    27a0:	cd bf       	out	0x3d, r28	; 61
    27a2:	8f 83       	std	Y+7, r24	; 0x07
    27a4:	68 87       	std	Y+8, r22	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    27a6:	1e 82       	std	Y+6, r1	; 0x06

	u8 Local_u8Iterator = 0;
    27a8:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Check = 0;
    27aa:	19 82       	std	Y+1, r1	; 0x01
    27ac:	1a 82       	std	Y+2, r1	; 0x02
    27ae:	1b 82       	std	Y+3, r1	; 0x03
    27b0:	1c 82       	std	Y+4, r1	; 0x04

	if(Copy_u8Number < 10 && Copy_u8SegID < SEG_NUM)
    27b2:	88 85       	ldd	r24, Y+8	; 0x08
    27b4:	8a 30       	cpi	r24, 0x0A	; 10
    27b6:	08 f0       	brcs	.+2      	; 0x27ba <SSDLT_enuDisplayNum+0x2c>
    27b8:	f6 c4       	rjmp	.+2540   	; 0x31a6 <SSDLT_enuDisplayNum+0xa18>
    27ba:	8f 81       	ldd	r24, Y+7	; 0x07
    27bc:	82 30       	cpi	r24, 0x02	; 2
    27be:	08 f0       	brcs	.+2      	; 0x27c2 <SSDLT_enuDisplayNum+0x34>
    27c0:	f2 c4       	rjmp	.+2532   	; 0x31a6 <SSDLT_enuDisplayNum+0xa18>
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    27c2:	8f 81       	ldd	r24, Y+7	; 0x07
    27c4:	48 2f       	mov	r20, r24
    27c6:	50 e0       	ldi	r21, 0x00	; 0
    27c8:	ca 01       	movw	r24, r20
    27ca:	88 0f       	add	r24, r24
    27cc:	99 1f       	adc	r25, r25
    27ce:	9c 01       	movw	r18, r24
    27d0:	22 0f       	add	r18, r18
    27d2:	33 1f       	adc	r19, r19
    27d4:	22 0f       	add	r18, r18
    27d6:	33 1f       	adc	r19, r19
    27d8:	22 0f       	add	r18, r18
    27da:	33 1f       	adc	r19, r19
    27dc:	82 0f       	add	r24, r18
    27de:	93 1f       	adc	r25, r19
    27e0:	84 0f       	add	r24, r20
    27e2:	95 1f       	adc	r25, r21
    27e4:	fc 01       	movw	r30, r24
    27e6:	ed 56       	subi	r30, 0x6D	; 109
    27e8:	fe 4f       	sbci	r31, 0xFE	; 254
    27ea:	80 81       	ld	r24, Z
    27ec:	81 30       	cpi	r24, 0x01	; 1
    27ee:	09 f0       	breq	.+2      	; 0x27f2 <SSDLT_enuDisplayNum+0x64>
    27f0:	40 c2       	rjmp	.+1152   	; 0x2c72 <SSDLT_enuDisplayNum+0x4e4>
		{
			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APort,
    27f2:	8f 81       	ldd	r24, Y+7	; 0x07
    27f4:	48 2f       	mov	r20, r24
    27f6:	50 e0       	ldi	r21, 0x00	; 0
    27f8:	ca 01       	movw	r24, r20
    27fa:	88 0f       	add	r24, r24
    27fc:	99 1f       	adc	r25, r25
    27fe:	9c 01       	movw	r18, r24
    2800:	22 0f       	add	r18, r18
    2802:	33 1f       	adc	r19, r19
    2804:	22 0f       	add	r18, r18
    2806:	33 1f       	adc	r19, r19
    2808:	22 0f       	add	r18, r18
    280a:	33 1f       	adc	r19, r19
    280c:	82 0f       	add	r24, r18
    280e:	93 1f       	adc	r25, r19
    2810:	84 0f       	add	r24, r20
    2812:	95 1f       	adc	r25, r21
    2814:	fc 01       	movw	r30, r24
    2816:	ef 57       	subi	r30, 0x7F	; 127
    2818:	fe 4f       	sbci	r31, 0xFE	; 254
    281a:	60 81       	ld	r22, Z
    281c:	8f 81       	ldd	r24, Y+7	; 0x07
    281e:	48 2f       	mov	r20, r24
    2820:	50 e0       	ldi	r21, 0x00	; 0
    2822:	ca 01       	movw	r24, r20
    2824:	88 0f       	add	r24, r24
    2826:	99 1f       	adc	r25, r25
    2828:	9c 01       	movw	r18, r24
    282a:	22 0f       	add	r18, r18
    282c:	33 1f       	adc	r19, r19
    282e:	22 0f       	add	r18, r18
    2830:	33 1f       	adc	r19, r19
    2832:	22 0f       	add	r18, r18
    2834:	33 1f       	adc	r19, r19
    2836:	82 0f       	add	r24, r18
    2838:	93 1f       	adc	r25, r19
    283a:	84 0f       	add	r24, r20
    283c:	95 1f       	adc	r25, r21
    283e:	fc 01       	movw	r30, r24
    2840:	ee 57       	subi	r30, 0x7E	; 126
    2842:	fe 4f       	sbci	r31, 0xFE	; 254
    2844:	20 81       	ld	r18, Z
    2846:	88 85       	ldd	r24, Y+8	; 0x08
    2848:	88 2f       	mov	r24, r24
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	fc 01       	movw	r30, r24
    284e:	e9 55       	subi	r30, 0x59	; 89
    2850:	fe 4f       	sbci	r31, 0xFE	; 254
    2852:	80 81       	ld	r24, Z
    2854:	98 2f       	mov	r25, r24
    2856:	91 70       	andi	r25, 0x01	; 1
    2858:	86 2f       	mov	r24, r22
    285a:	62 2f       	mov	r22, r18
    285c:	49 2f       	mov	r20, r25
    285e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    2862:	28 2f       	mov	r18, r24
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	40 e0       	ldi	r20, 0x00	; 0
    2868:	50 e0       	ldi	r21, 0x00	; 0
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	9a 81       	ldd	r25, Y+2	; 0x02
    286e:	ab 81       	ldd	r26, Y+3	; 0x03
    2870:	bc 81       	ldd	r27, Y+4	; 0x04
    2872:	82 2b       	or	r24, r18
    2874:	93 2b       	or	r25, r19
    2876:	a4 2b       	or	r26, r20
    2878:	b5 2b       	or	r27, r21
    287a:	89 83       	std	Y+1, r24	; 0x01
    287c:	9a 83       	std	Y+2, r25	; 0x02
    287e:	ab 83       	std	Y+3, r26	; 0x03
    2880:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	      SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APin,
											   	  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>0) & 1)) << 0);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPort,
    2882:	8f 81       	ldd	r24, Y+7	; 0x07
    2884:	48 2f       	mov	r20, r24
    2886:	50 e0       	ldi	r21, 0x00	; 0
    2888:	ca 01       	movw	r24, r20
    288a:	88 0f       	add	r24, r24
    288c:	99 1f       	adc	r25, r25
    288e:	9c 01       	movw	r18, r24
    2890:	22 0f       	add	r18, r18
    2892:	33 1f       	adc	r19, r19
    2894:	22 0f       	add	r18, r18
    2896:	33 1f       	adc	r19, r19
    2898:	22 0f       	add	r18, r18
    289a:	33 1f       	adc	r19, r19
    289c:	82 0f       	add	r24, r18
    289e:	93 1f       	adc	r25, r19
    28a0:	84 0f       	add	r24, r20
    28a2:	95 1f       	adc	r25, r21
    28a4:	fc 01       	movw	r30, r24
    28a6:	ed 57       	subi	r30, 0x7D	; 125
    28a8:	fe 4f       	sbci	r31, 0xFE	; 254
    28aa:	60 81       	ld	r22, Z
    28ac:	8f 81       	ldd	r24, Y+7	; 0x07
    28ae:	48 2f       	mov	r20, r24
    28b0:	50 e0       	ldi	r21, 0x00	; 0
    28b2:	ca 01       	movw	r24, r20
    28b4:	88 0f       	add	r24, r24
    28b6:	99 1f       	adc	r25, r25
    28b8:	9c 01       	movw	r18, r24
    28ba:	22 0f       	add	r18, r18
    28bc:	33 1f       	adc	r19, r19
    28be:	22 0f       	add	r18, r18
    28c0:	33 1f       	adc	r19, r19
    28c2:	22 0f       	add	r18, r18
    28c4:	33 1f       	adc	r19, r19
    28c6:	82 0f       	add	r24, r18
    28c8:	93 1f       	adc	r25, r19
    28ca:	84 0f       	add	r24, r20
    28cc:	95 1f       	adc	r25, r21
    28ce:	fc 01       	movw	r30, r24
    28d0:	ec 57       	subi	r30, 0x7C	; 124
    28d2:	fe 4f       	sbci	r31, 0xFE	; 254
    28d4:	20 81       	ld	r18, Z
    28d6:	88 85       	ldd	r24, Y+8	; 0x08
    28d8:	88 2f       	mov	r24, r24
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	fc 01       	movw	r30, r24
    28de:	e9 55       	subi	r30, 0x59	; 89
    28e0:	fe 4f       	sbci	r31, 0xFE	; 254
    28e2:	80 81       	ld	r24, Z
    28e4:	86 95       	lsr	r24
    28e6:	98 2f       	mov	r25, r24
    28e8:	91 70       	andi	r25, 0x01	; 1
    28ea:	86 2f       	mov	r24, r22
    28ec:	62 2f       	mov	r22, r18
    28ee:	49 2f       	mov	r20, r25
    28f0:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    28f4:	88 2f       	mov	r24, r24
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	88 0f       	add	r24, r24
    28fa:	99 1f       	adc	r25, r25
    28fc:	88 0f       	add	r24, r24
    28fe:	99 1f       	adc	r25, r25
    2900:	88 0f       	add	r24, r24
    2902:	99 1f       	adc	r25, r25
    2904:	9c 01       	movw	r18, r24
    2906:	44 27       	eor	r20, r20
    2908:	37 fd       	sbrc	r19, 7
    290a:	40 95       	com	r20
    290c:	54 2f       	mov	r21, r20
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	9a 81       	ldd	r25, Y+2	; 0x02
    2912:	ab 81       	ldd	r26, Y+3	; 0x03
    2914:	bc 81       	ldd	r27, Y+4	; 0x04
    2916:	82 2b       	or	r24, r18
    2918:	93 2b       	or	r25, r19
    291a:	a4 2b       	or	r26, r20
    291c:	b5 2b       	or	r27, r21
    291e:	89 83       	std	Y+1, r24	; 0x01
    2920:	9a 83       	std	Y+2, r25	; 0x02
    2922:	ab 83       	std	Y+3, r26	; 0x03
    2924:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPin,
												  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>1) & 1)) << 3);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPort,
    2926:	8f 81       	ldd	r24, Y+7	; 0x07
    2928:	48 2f       	mov	r20, r24
    292a:	50 e0       	ldi	r21, 0x00	; 0
    292c:	ca 01       	movw	r24, r20
    292e:	88 0f       	add	r24, r24
    2930:	99 1f       	adc	r25, r25
    2932:	9c 01       	movw	r18, r24
    2934:	22 0f       	add	r18, r18
    2936:	33 1f       	adc	r19, r19
    2938:	22 0f       	add	r18, r18
    293a:	33 1f       	adc	r19, r19
    293c:	22 0f       	add	r18, r18
    293e:	33 1f       	adc	r19, r19
    2940:	82 0f       	add	r24, r18
    2942:	93 1f       	adc	r25, r19
    2944:	84 0f       	add	r24, r20
    2946:	95 1f       	adc	r25, r21
    2948:	fc 01       	movw	r30, r24
    294a:	eb 57       	subi	r30, 0x7B	; 123
    294c:	fe 4f       	sbci	r31, 0xFE	; 254
    294e:	60 81       	ld	r22, Z
    2950:	8f 81       	ldd	r24, Y+7	; 0x07
    2952:	48 2f       	mov	r20, r24
    2954:	50 e0       	ldi	r21, 0x00	; 0
    2956:	ca 01       	movw	r24, r20
    2958:	88 0f       	add	r24, r24
    295a:	99 1f       	adc	r25, r25
    295c:	9c 01       	movw	r18, r24
    295e:	22 0f       	add	r18, r18
    2960:	33 1f       	adc	r19, r19
    2962:	22 0f       	add	r18, r18
    2964:	33 1f       	adc	r19, r19
    2966:	22 0f       	add	r18, r18
    2968:	33 1f       	adc	r19, r19
    296a:	82 0f       	add	r24, r18
    296c:	93 1f       	adc	r25, r19
    296e:	84 0f       	add	r24, r20
    2970:	95 1f       	adc	r25, r21
    2972:	fc 01       	movw	r30, r24
    2974:	ea 57       	subi	r30, 0x7A	; 122
    2976:	fe 4f       	sbci	r31, 0xFE	; 254
    2978:	20 81       	ld	r18, Z
    297a:	88 85       	ldd	r24, Y+8	; 0x08
    297c:	88 2f       	mov	r24, r24
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	fc 01       	movw	r30, r24
    2982:	e9 55       	subi	r30, 0x59	; 89
    2984:	fe 4f       	sbci	r31, 0xFE	; 254
    2986:	80 81       	ld	r24, Z
    2988:	86 95       	lsr	r24
    298a:	86 95       	lsr	r24
    298c:	98 2f       	mov	r25, r24
    298e:	91 70       	andi	r25, 0x01	; 1
    2990:	86 2f       	mov	r24, r22
    2992:	62 2f       	mov	r22, r18
    2994:	49 2f       	mov	r20, r25
    2996:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    299a:	88 2f       	mov	r24, r24
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	00 24       	eor	r0, r0
    29a0:	96 95       	lsr	r25
    29a2:	87 95       	ror	r24
    29a4:	07 94       	ror	r0
    29a6:	96 95       	lsr	r25
    29a8:	87 95       	ror	r24
    29aa:	07 94       	ror	r0
    29ac:	98 2f       	mov	r25, r24
    29ae:	80 2d       	mov	r24, r0
    29b0:	9c 01       	movw	r18, r24
    29b2:	44 27       	eor	r20, r20
    29b4:	37 fd       	sbrc	r19, 7
    29b6:	40 95       	com	r20
    29b8:	54 2f       	mov	r21, r20
    29ba:	89 81       	ldd	r24, Y+1	; 0x01
    29bc:	9a 81       	ldd	r25, Y+2	; 0x02
    29be:	ab 81       	ldd	r26, Y+3	; 0x03
    29c0:	bc 81       	ldd	r27, Y+4	; 0x04
    29c2:	82 2b       	or	r24, r18
    29c4:	93 2b       	or	r25, r19
    29c6:	a4 2b       	or	r26, r20
    29c8:	b5 2b       	or	r27, r21
    29ca:	89 83       	std	Y+1, r24	; 0x01
    29cc:	9a 83       	std	Y+2, r25	; 0x02
    29ce:	ab 83       	std	Y+3, r26	; 0x03
    29d0:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPin,
												  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>2) & 1)) << 6);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPort,
    29d2:	8f 81       	ldd	r24, Y+7	; 0x07
    29d4:	48 2f       	mov	r20, r24
    29d6:	50 e0       	ldi	r21, 0x00	; 0
    29d8:	ca 01       	movw	r24, r20
    29da:	88 0f       	add	r24, r24
    29dc:	99 1f       	adc	r25, r25
    29de:	9c 01       	movw	r18, r24
    29e0:	22 0f       	add	r18, r18
    29e2:	33 1f       	adc	r19, r19
    29e4:	22 0f       	add	r18, r18
    29e6:	33 1f       	adc	r19, r19
    29e8:	22 0f       	add	r18, r18
    29ea:	33 1f       	adc	r19, r19
    29ec:	82 0f       	add	r24, r18
    29ee:	93 1f       	adc	r25, r19
    29f0:	84 0f       	add	r24, r20
    29f2:	95 1f       	adc	r25, r21
    29f4:	fc 01       	movw	r30, r24
    29f6:	e9 57       	subi	r30, 0x79	; 121
    29f8:	fe 4f       	sbci	r31, 0xFE	; 254
    29fa:	60 81       	ld	r22, Z
    29fc:	8f 81       	ldd	r24, Y+7	; 0x07
    29fe:	48 2f       	mov	r20, r24
    2a00:	50 e0       	ldi	r21, 0x00	; 0
    2a02:	ca 01       	movw	r24, r20
    2a04:	88 0f       	add	r24, r24
    2a06:	99 1f       	adc	r25, r25
    2a08:	9c 01       	movw	r18, r24
    2a0a:	22 0f       	add	r18, r18
    2a0c:	33 1f       	adc	r19, r19
    2a0e:	22 0f       	add	r18, r18
    2a10:	33 1f       	adc	r19, r19
    2a12:	22 0f       	add	r18, r18
    2a14:	33 1f       	adc	r19, r19
    2a16:	82 0f       	add	r24, r18
    2a18:	93 1f       	adc	r25, r19
    2a1a:	84 0f       	add	r24, r20
    2a1c:	95 1f       	adc	r25, r21
    2a1e:	fc 01       	movw	r30, r24
    2a20:	e8 57       	subi	r30, 0x78	; 120
    2a22:	fe 4f       	sbci	r31, 0xFE	; 254
    2a24:	20 81       	ld	r18, Z
    2a26:	88 85       	ldd	r24, Y+8	; 0x08
    2a28:	88 2f       	mov	r24, r24
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	e9 55       	subi	r30, 0x59	; 89
    2a30:	fe 4f       	sbci	r31, 0xFE	; 254
    2a32:	80 81       	ld	r24, Z
    2a34:	86 95       	lsr	r24
    2a36:	86 95       	lsr	r24
    2a38:	86 95       	lsr	r24
    2a3a:	98 2f       	mov	r25, r24
    2a3c:	91 70       	andi	r25, 0x01	; 1
    2a3e:	86 2f       	mov	r24, r22
    2a40:	62 2f       	mov	r22, r18
    2a42:	49 2f       	mov	r20, r25
    2a44:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    2a48:	88 2f       	mov	r24, r24
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	98 2f       	mov	r25, r24
    2a4e:	88 27       	eor	r24, r24
    2a50:	99 0f       	add	r25, r25
    2a52:	9c 01       	movw	r18, r24
    2a54:	44 27       	eor	r20, r20
    2a56:	37 fd       	sbrc	r19, 7
    2a58:	40 95       	com	r20
    2a5a:	54 2f       	mov	r21, r20
    2a5c:	89 81       	ldd	r24, Y+1	; 0x01
    2a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a60:	ab 81       	ldd	r26, Y+3	; 0x03
    2a62:	bc 81       	ldd	r27, Y+4	; 0x04
    2a64:	82 2b       	or	r24, r18
    2a66:	93 2b       	or	r25, r19
    2a68:	a4 2b       	or	r26, r20
    2a6a:	b5 2b       	or	r27, r21
    2a6c:	89 83       	std	Y+1, r24	; 0x01
    2a6e:	9a 83       	std	Y+2, r25	; 0x02
    2a70:	ab 83       	std	Y+3, r26	; 0x03
    2a72:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPin,
												  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>3) & 1)) << 9) ;

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPort,
    2a74:	8f 81       	ldd	r24, Y+7	; 0x07
    2a76:	48 2f       	mov	r20, r24
    2a78:	50 e0       	ldi	r21, 0x00	; 0
    2a7a:	ca 01       	movw	r24, r20
    2a7c:	88 0f       	add	r24, r24
    2a7e:	99 1f       	adc	r25, r25
    2a80:	9c 01       	movw	r18, r24
    2a82:	22 0f       	add	r18, r18
    2a84:	33 1f       	adc	r19, r19
    2a86:	22 0f       	add	r18, r18
    2a88:	33 1f       	adc	r19, r19
    2a8a:	22 0f       	add	r18, r18
    2a8c:	33 1f       	adc	r19, r19
    2a8e:	82 0f       	add	r24, r18
    2a90:	93 1f       	adc	r25, r19
    2a92:	84 0f       	add	r24, r20
    2a94:	95 1f       	adc	r25, r21
    2a96:	fc 01       	movw	r30, r24
    2a98:	e7 57       	subi	r30, 0x77	; 119
    2a9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a9c:	60 81       	ld	r22, Z
    2a9e:	8f 81       	ldd	r24, Y+7	; 0x07
    2aa0:	48 2f       	mov	r20, r24
    2aa2:	50 e0       	ldi	r21, 0x00	; 0
    2aa4:	ca 01       	movw	r24, r20
    2aa6:	88 0f       	add	r24, r24
    2aa8:	99 1f       	adc	r25, r25
    2aaa:	9c 01       	movw	r18, r24
    2aac:	22 0f       	add	r18, r18
    2aae:	33 1f       	adc	r19, r19
    2ab0:	22 0f       	add	r18, r18
    2ab2:	33 1f       	adc	r19, r19
    2ab4:	22 0f       	add	r18, r18
    2ab6:	33 1f       	adc	r19, r19
    2ab8:	82 0f       	add	r24, r18
    2aba:	93 1f       	adc	r25, r19
    2abc:	84 0f       	add	r24, r20
    2abe:	95 1f       	adc	r25, r21
    2ac0:	fc 01       	movw	r30, r24
    2ac2:	e6 57       	subi	r30, 0x76	; 118
    2ac4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ac6:	20 81       	ld	r18, Z
    2ac8:	88 85       	ldd	r24, Y+8	; 0x08
    2aca:	88 2f       	mov	r24, r24
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	fc 01       	movw	r30, r24
    2ad0:	e9 55       	subi	r30, 0x59	; 89
    2ad2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ad4:	80 81       	ld	r24, Z
    2ad6:	82 95       	swap	r24
    2ad8:	8f 70       	andi	r24, 0x0F	; 15
    2ada:	98 2f       	mov	r25, r24
    2adc:	91 70       	andi	r25, 0x01	; 1
    2ade:	86 2f       	mov	r24, r22
    2ae0:	62 2f       	mov	r22, r18
    2ae2:	49 2f       	mov	r20, r25
    2ae4:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    2ae8:	88 2f       	mov	r24, r24
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	98 2f       	mov	r25, r24
    2aee:	88 27       	eor	r24, r24
    2af0:	92 95       	swap	r25
    2af2:	90 7f       	andi	r25, 0xF0	; 240
    2af4:	9c 01       	movw	r18, r24
    2af6:	44 27       	eor	r20, r20
    2af8:	37 fd       	sbrc	r19, 7
    2afa:	40 95       	com	r20
    2afc:	54 2f       	mov	r21, r20
    2afe:	89 81       	ldd	r24, Y+1	; 0x01
    2b00:	9a 81       	ldd	r25, Y+2	; 0x02
    2b02:	ab 81       	ldd	r26, Y+3	; 0x03
    2b04:	bc 81       	ldd	r27, Y+4	; 0x04
    2b06:	82 2b       	or	r24, r18
    2b08:	93 2b       	or	r25, r19
    2b0a:	a4 2b       	or	r26, r20
    2b0c:	b5 2b       	or	r27, r21
    2b0e:	89 83       	std	Y+1, r24	; 0x01
    2b10:	9a 83       	std	Y+2, r25	; 0x02
    2b12:	ab 83       	std	Y+3, r26	; 0x03
    2b14:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPin,
												  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>4) & 1)) << 12);

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPort,
    2b16:	8f 81       	ldd	r24, Y+7	; 0x07
    2b18:	48 2f       	mov	r20, r24
    2b1a:	50 e0       	ldi	r21, 0x00	; 0
    2b1c:	ca 01       	movw	r24, r20
    2b1e:	88 0f       	add	r24, r24
    2b20:	99 1f       	adc	r25, r25
    2b22:	9c 01       	movw	r18, r24
    2b24:	22 0f       	add	r18, r18
    2b26:	33 1f       	adc	r19, r19
    2b28:	22 0f       	add	r18, r18
    2b2a:	33 1f       	adc	r19, r19
    2b2c:	22 0f       	add	r18, r18
    2b2e:	33 1f       	adc	r19, r19
    2b30:	82 0f       	add	r24, r18
    2b32:	93 1f       	adc	r25, r19
    2b34:	84 0f       	add	r24, r20
    2b36:	95 1f       	adc	r25, r21
    2b38:	fc 01       	movw	r30, r24
    2b3a:	e5 57       	subi	r30, 0x75	; 117
    2b3c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b3e:	60 81       	ld	r22, Z
    2b40:	8f 81       	ldd	r24, Y+7	; 0x07
    2b42:	48 2f       	mov	r20, r24
    2b44:	50 e0       	ldi	r21, 0x00	; 0
    2b46:	ca 01       	movw	r24, r20
    2b48:	88 0f       	add	r24, r24
    2b4a:	99 1f       	adc	r25, r25
    2b4c:	9c 01       	movw	r18, r24
    2b4e:	22 0f       	add	r18, r18
    2b50:	33 1f       	adc	r19, r19
    2b52:	22 0f       	add	r18, r18
    2b54:	33 1f       	adc	r19, r19
    2b56:	22 0f       	add	r18, r18
    2b58:	33 1f       	adc	r19, r19
    2b5a:	82 0f       	add	r24, r18
    2b5c:	93 1f       	adc	r25, r19
    2b5e:	84 0f       	add	r24, r20
    2b60:	95 1f       	adc	r25, r21
    2b62:	fc 01       	movw	r30, r24
    2b64:	e4 57       	subi	r30, 0x74	; 116
    2b66:	fe 4f       	sbci	r31, 0xFE	; 254
    2b68:	20 81       	ld	r18, Z
    2b6a:	88 85       	ldd	r24, Y+8	; 0x08
    2b6c:	88 2f       	mov	r24, r24
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	fc 01       	movw	r30, r24
    2b72:	e9 55       	subi	r30, 0x59	; 89
    2b74:	fe 4f       	sbci	r31, 0xFE	; 254
    2b76:	80 81       	ld	r24, Z
    2b78:	82 95       	swap	r24
    2b7a:	86 95       	lsr	r24
    2b7c:	87 70       	andi	r24, 0x07	; 7
    2b7e:	98 2f       	mov	r25, r24
    2b80:	91 70       	andi	r25, 0x01	; 1
    2b82:	86 2f       	mov	r24, r22
    2b84:	62 2f       	mov	r22, r18
    2b86:	49 2f       	mov	r20, r25
    2b88:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    2b8c:	88 2f       	mov	r24, r24
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	a0 e0       	ldi	r26, 0x00	; 0
    2b92:	b0 e0       	ldi	r27, 0x00	; 0
    2b94:	9c 01       	movw	r18, r24
    2b96:	ad 01       	movw	r20, r26
    2b98:	01 2e       	mov	r0, r17
    2b9a:	1f e0       	ldi	r17, 0x0F	; 15
    2b9c:	22 0f       	add	r18, r18
    2b9e:	33 1f       	adc	r19, r19
    2ba0:	44 1f       	adc	r20, r20
    2ba2:	55 1f       	adc	r21, r21
    2ba4:	1a 95       	dec	r17
    2ba6:	d1 f7       	brne	.-12     	; 0x2b9c <SSDLT_enuDisplayNum+0x40e>
    2ba8:	10 2d       	mov	r17, r0
    2baa:	89 81       	ldd	r24, Y+1	; 0x01
    2bac:	9a 81       	ldd	r25, Y+2	; 0x02
    2bae:	ab 81       	ldd	r26, Y+3	; 0x03
    2bb0:	bc 81       	ldd	r27, Y+4	; 0x04
    2bb2:	82 2b       	or	r24, r18
    2bb4:	93 2b       	or	r25, r19
    2bb6:	a4 2b       	or	r26, r20
    2bb8:	b5 2b       	or	r27, r21
    2bba:	89 83       	std	Y+1, r24	; 0x01
    2bbc:	9a 83       	std	Y+2, r25	; 0x02
    2bbe:	ab 83       	std	Y+3, r26	; 0x03
    2bc0:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPin,
												  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>5) & 1)) << 15));

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPort,
    2bc2:	8f 81       	ldd	r24, Y+7	; 0x07
    2bc4:	48 2f       	mov	r20, r24
    2bc6:	50 e0       	ldi	r21, 0x00	; 0
    2bc8:	ca 01       	movw	r24, r20
    2bca:	88 0f       	add	r24, r24
    2bcc:	99 1f       	adc	r25, r25
    2bce:	9c 01       	movw	r18, r24
    2bd0:	22 0f       	add	r18, r18
    2bd2:	33 1f       	adc	r19, r19
    2bd4:	22 0f       	add	r18, r18
    2bd6:	33 1f       	adc	r19, r19
    2bd8:	22 0f       	add	r18, r18
    2bda:	33 1f       	adc	r19, r19
    2bdc:	82 0f       	add	r24, r18
    2bde:	93 1f       	adc	r25, r19
    2be0:	84 0f       	add	r24, r20
    2be2:	95 1f       	adc	r25, r21
    2be4:	fc 01       	movw	r30, r24
    2be6:	e3 57       	subi	r30, 0x73	; 115
    2be8:	fe 4f       	sbci	r31, 0xFE	; 254
    2bea:	60 81       	ld	r22, Z
    2bec:	8f 81       	ldd	r24, Y+7	; 0x07
    2bee:	48 2f       	mov	r20, r24
    2bf0:	50 e0       	ldi	r21, 0x00	; 0
    2bf2:	ca 01       	movw	r24, r20
    2bf4:	88 0f       	add	r24, r24
    2bf6:	99 1f       	adc	r25, r25
    2bf8:	9c 01       	movw	r18, r24
    2bfa:	22 0f       	add	r18, r18
    2bfc:	33 1f       	adc	r19, r19
    2bfe:	22 0f       	add	r18, r18
    2c00:	33 1f       	adc	r19, r19
    2c02:	22 0f       	add	r18, r18
    2c04:	33 1f       	adc	r19, r19
    2c06:	82 0f       	add	r24, r18
    2c08:	93 1f       	adc	r25, r19
    2c0a:	84 0f       	add	r24, r20
    2c0c:	95 1f       	adc	r25, r21
    2c0e:	fc 01       	movw	r30, r24
    2c10:	e2 57       	subi	r30, 0x72	; 114
    2c12:	fe 4f       	sbci	r31, 0xFE	; 254
    2c14:	20 81       	ld	r18, Z
    2c16:	88 85       	ldd	r24, Y+8	; 0x08
    2c18:	88 2f       	mov	r24, r24
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	fc 01       	movw	r30, r24
    2c1e:	e9 55       	subi	r30, 0x59	; 89
    2c20:	fe 4f       	sbci	r31, 0xFE	; 254
    2c22:	80 81       	ld	r24, Z
    2c24:	82 95       	swap	r24
    2c26:	86 95       	lsr	r24
    2c28:	86 95       	lsr	r24
    2c2a:	83 70       	andi	r24, 0x03	; 3
    2c2c:	98 2f       	mov	r25, r24
    2c2e:	91 70       	andi	r25, 0x01	; 1
    2c30:	86 2f       	mov	r24, r22
    2c32:	62 2f       	mov	r22, r18
    2c34:	49 2f       	mov	r20, r25
    2c36:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    2c3a:	88 2f       	mov	r24, r24
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	a0 e0       	ldi	r26, 0x00	; 0
    2c40:	b0 e0       	ldi	r27, 0x00	; 0
    2c42:	9c 01       	movw	r18, r24
    2c44:	ad 01       	movw	r20, r26
    2c46:	01 2e       	mov	r0, r17
    2c48:	12 e1       	ldi	r17, 0x12	; 18
    2c4a:	22 0f       	add	r18, r18
    2c4c:	33 1f       	adc	r19, r19
    2c4e:	44 1f       	adc	r20, r20
    2c50:	55 1f       	adc	r21, r21
    2c52:	1a 95       	dec	r17
    2c54:	d1 f7       	brne	.-12     	; 0x2c4a <SSDLT_enuDisplayNum+0x4bc>
    2c56:	10 2d       	mov	r17, r0
    2c58:	89 81       	ldd	r24, Y+1	; 0x01
    2c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5c:	ab 81       	ldd	r26, Y+3	; 0x03
    2c5e:	bc 81       	ldd	r27, Y+4	; 0x04
    2c60:	82 2b       	or	r24, r18
    2c62:	93 2b       	or	r25, r19
    2c64:	a4 2b       	or	r26, r20
    2c66:	b5 2b       	or	r27, r21
    2c68:	89 83       	std	Y+1, r24	; 0x01
    2c6a:	9a 83       	std	Y+2, r25	; 0x02
    2c6c:	ab 83       	std	Y+3, r26	; 0x03
    2c6e:	bc 83       	std	Y+4, r27	; 0x04
    2c70:	9c c2       	rjmp	.+1336   	; 0x31aa <SSDLT_enuDisplayNum+0xa1c>
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPin,
												  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>6) & 1)) << 18));

		}
		else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    2c72:	8f 81       	ldd	r24, Y+7	; 0x07
    2c74:	48 2f       	mov	r20, r24
    2c76:	50 e0       	ldi	r21, 0x00	; 0
    2c78:	ca 01       	movw	r24, r20
    2c7a:	88 0f       	add	r24, r24
    2c7c:	99 1f       	adc	r25, r25
    2c7e:	9c 01       	movw	r18, r24
    2c80:	22 0f       	add	r18, r18
    2c82:	33 1f       	adc	r19, r19
    2c84:	22 0f       	add	r18, r18
    2c86:	33 1f       	adc	r19, r19
    2c88:	22 0f       	add	r18, r18
    2c8a:	33 1f       	adc	r19, r19
    2c8c:	82 0f       	add	r24, r18
    2c8e:	93 1f       	adc	r25, r19
    2c90:	84 0f       	add	r24, r20
    2c92:	95 1f       	adc	r25, r21
    2c94:	fc 01       	movw	r30, r24
    2c96:	ed 56       	subi	r30, 0x6D	; 109
    2c98:	fe 4f       	sbci	r31, 0xFE	; 254
    2c9a:	80 81       	ld	r24, Z
    2c9c:	88 23       	and	r24, r24
    2c9e:	09 f0       	breq	.+2      	; 0x2ca2 <SSDLT_enuDisplayNum+0x514>
    2ca0:	7f c2       	rjmp	.+1278   	; 0x31a0 <SSDLT_enuDisplayNum+0xa12>
		{
			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APort,
    2ca2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ca4:	48 2f       	mov	r20, r24
    2ca6:	50 e0       	ldi	r21, 0x00	; 0
    2ca8:	ca 01       	movw	r24, r20
    2caa:	88 0f       	add	r24, r24
    2cac:	99 1f       	adc	r25, r25
    2cae:	9c 01       	movw	r18, r24
    2cb0:	22 0f       	add	r18, r18
    2cb2:	33 1f       	adc	r19, r19
    2cb4:	22 0f       	add	r18, r18
    2cb6:	33 1f       	adc	r19, r19
    2cb8:	22 0f       	add	r18, r18
    2cba:	33 1f       	adc	r19, r19
    2cbc:	82 0f       	add	r24, r18
    2cbe:	93 1f       	adc	r25, r19
    2cc0:	84 0f       	add	r24, r20
    2cc2:	95 1f       	adc	r25, r21
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	ef 57       	subi	r30, 0x7F	; 127
    2cc8:	fe 4f       	sbci	r31, 0xFE	; 254
    2cca:	80 81       	ld	r24, Z
    2ccc:	8e 8f       	std	Y+30, r24	; 0x1e
    2cce:	8f 81       	ldd	r24, Y+7	; 0x07
    2cd0:	48 2f       	mov	r20, r24
    2cd2:	50 e0       	ldi	r21, 0x00	; 0
    2cd4:	ca 01       	movw	r24, r20
    2cd6:	88 0f       	add	r24, r24
    2cd8:	99 1f       	adc	r25, r25
    2cda:	9c 01       	movw	r18, r24
    2cdc:	22 0f       	add	r18, r18
    2cde:	33 1f       	adc	r19, r19
    2ce0:	22 0f       	add	r18, r18
    2ce2:	33 1f       	adc	r19, r19
    2ce4:	22 0f       	add	r18, r18
    2ce6:	33 1f       	adc	r19, r19
    2ce8:	82 0f       	add	r24, r18
    2cea:	93 1f       	adc	r25, r19
    2cec:	84 0f       	add	r24, r20
    2cee:	95 1f       	adc	r25, r21
    2cf0:	fc 01       	movw	r30, r24
    2cf2:	ee 57       	subi	r30, 0x7E	; 126
    2cf4:	fe 4f       	sbci	r31, 0xFE	; 254
    2cf6:	80 81       	ld	r24, Z
    2cf8:	8d 8f       	std	Y+29, r24	; 0x1d
    2cfa:	88 85       	ldd	r24, Y+8	; 0x08
    2cfc:	88 2f       	mov	r24, r24
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	fc 01       	movw	r30, r24
    2d02:	e9 55       	subi	r30, 0x59	; 89
    2d04:	fe 4f       	sbci	r31, 0xFE	; 254
    2d06:	80 81       	ld	r24, Z
    2d08:	88 2f       	mov	r24, r24
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	81 70       	andi	r24, 0x01	; 1
    2d0e:	90 70       	andi	r25, 0x00	; 0
    2d10:	1c 8e       	std	Y+28, r1	; 0x1c
    2d12:	00 97       	sbiw	r24, 0x00	; 0
    2d14:	11 f4       	brne	.+4      	; 0x2d1a <SSDLT_enuDisplayNum+0x58c>
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	8c 8f       	std	Y+28, r24	; 0x1c
    2d1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d1c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2d1e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2d20:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    2d24:	28 2f       	mov	r18, r24
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	40 e0       	ldi	r20, 0x00	; 0
    2d2a:	50 e0       	ldi	r21, 0x00	; 0
    2d2c:	89 81       	ldd	r24, Y+1	; 0x01
    2d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d30:	ab 81       	ldd	r26, Y+3	; 0x03
    2d32:	bc 81       	ldd	r27, Y+4	; 0x04
    2d34:	82 2b       	or	r24, r18
    2d36:	93 2b       	or	r25, r19
    2d38:	a4 2b       	or	r26, r20
    2d3a:	b5 2b       	or	r27, r21
    2d3c:	89 83       	std	Y+1, r24	; 0x01
    2d3e:	9a 83       	std	Y+2, r25	; 0x02
    2d40:	ab 83       	std	Y+3, r26	; 0x03
    2d42:	bc 83       	std	Y+4, r27	; 0x04
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>0) & 1))) << 0);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPort,
    2d44:	8f 81       	ldd	r24, Y+7	; 0x07
    2d46:	48 2f       	mov	r20, r24
    2d48:	50 e0       	ldi	r21, 0x00	; 0
    2d4a:	ca 01       	movw	r24, r20
    2d4c:	88 0f       	add	r24, r24
    2d4e:	99 1f       	adc	r25, r25
    2d50:	9c 01       	movw	r18, r24
    2d52:	22 0f       	add	r18, r18
    2d54:	33 1f       	adc	r19, r19
    2d56:	22 0f       	add	r18, r18
    2d58:	33 1f       	adc	r19, r19
    2d5a:	22 0f       	add	r18, r18
    2d5c:	33 1f       	adc	r19, r19
    2d5e:	82 0f       	add	r24, r18
    2d60:	93 1f       	adc	r25, r19
    2d62:	84 0f       	add	r24, r20
    2d64:	95 1f       	adc	r25, r21
    2d66:	fc 01       	movw	r30, r24
    2d68:	ed 57       	subi	r30, 0x7D	; 125
    2d6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d6c:	80 81       	ld	r24, Z
    2d6e:	8b 8f       	std	Y+27, r24	; 0x1b
    2d70:	8f 81       	ldd	r24, Y+7	; 0x07
    2d72:	48 2f       	mov	r20, r24
    2d74:	50 e0       	ldi	r21, 0x00	; 0
    2d76:	ca 01       	movw	r24, r20
    2d78:	88 0f       	add	r24, r24
    2d7a:	99 1f       	adc	r25, r25
    2d7c:	9c 01       	movw	r18, r24
    2d7e:	22 0f       	add	r18, r18
    2d80:	33 1f       	adc	r19, r19
    2d82:	22 0f       	add	r18, r18
    2d84:	33 1f       	adc	r19, r19
    2d86:	22 0f       	add	r18, r18
    2d88:	33 1f       	adc	r19, r19
    2d8a:	82 0f       	add	r24, r18
    2d8c:	93 1f       	adc	r25, r19
    2d8e:	84 0f       	add	r24, r20
    2d90:	95 1f       	adc	r25, r21
    2d92:	fc 01       	movw	r30, r24
    2d94:	ec 57       	subi	r30, 0x7C	; 124
    2d96:	fe 4f       	sbci	r31, 0xFE	; 254
    2d98:	80 81       	ld	r24, Z
    2d9a:	8a 8f       	std	Y+26, r24	; 0x1a
    2d9c:	88 85       	ldd	r24, Y+8	; 0x08
    2d9e:	88 2f       	mov	r24, r24
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	fc 01       	movw	r30, r24
    2da4:	e9 55       	subi	r30, 0x59	; 89
    2da6:	fe 4f       	sbci	r31, 0xFE	; 254
    2da8:	80 81       	ld	r24, Z
    2daa:	86 95       	lsr	r24
    2dac:	88 2f       	mov	r24, r24
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	81 70       	andi	r24, 0x01	; 1
    2db2:	90 70       	andi	r25, 0x00	; 0
    2db4:	19 8e       	std	Y+25, r1	; 0x19
    2db6:	00 97       	sbiw	r24, 0x00	; 0
    2db8:	11 f4       	brne	.+4      	; 0x2dbe <SSDLT_enuDisplayNum+0x630>
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	89 8f       	std	Y+25, r24	; 0x19
    2dbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dc0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2dc2:	49 8d       	ldd	r20, Y+25	; 0x19
    2dc4:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    2dc8:	88 2f       	mov	r24, r24
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	88 0f       	add	r24, r24
    2dce:	99 1f       	adc	r25, r25
    2dd0:	88 0f       	add	r24, r24
    2dd2:	99 1f       	adc	r25, r25
    2dd4:	88 0f       	add	r24, r24
    2dd6:	99 1f       	adc	r25, r25
    2dd8:	9c 01       	movw	r18, r24
    2dda:	44 27       	eor	r20, r20
    2ddc:	37 fd       	sbrc	r19, 7
    2dde:	40 95       	com	r20
    2de0:	54 2f       	mov	r21, r20
    2de2:	89 81       	ldd	r24, Y+1	; 0x01
    2de4:	9a 81       	ldd	r25, Y+2	; 0x02
    2de6:	ab 81       	ldd	r26, Y+3	; 0x03
    2de8:	bc 81       	ldd	r27, Y+4	; 0x04
    2dea:	82 2b       	or	r24, r18
    2dec:	93 2b       	or	r25, r19
    2dee:	a4 2b       	or	r26, r20
    2df0:	b5 2b       	or	r27, r21
    2df2:	89 83       	std	Y+1, r24	; 0x01
    2df4:	9a 83       	std	Y+2, r25	; 0x02
    2df6:	ab 83       	std	Y+3, r26	; 0x03
    2df8:	bc 83       	std	Y+4, r27	; 0x04
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>1) & 1))) << 3);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPort,
    2dfa:	8f 81       	ldd	r24, Y+7	; 0x07
    2dfc:	48 2f       	mov	r20, r24
    2dfe:	50 e0       	ldi	r21, 0x00	; 0
    2e00:	ca 01       	movw	r24, r20
    2e02:	88 0f       	add	r24, r24
    2e04:	99 1f       	adc	r25, r25
    2e06:	9c 01       	movw	r18, r24
    2e08:	22 0f       	add	r18, r18
    2e0a:	33 1f       	adc	r19, r19
    2e0c:	22 0f       	add	r18, r18
    2e0e:	33 1f       	adc	r19, r19
    2e10:	22 0f       	add	r18, r18
    2e12:	33 1f       	adc	r19, r19
    2e14:	82 0f       	add	r24, r18
    2e16:	93 1f       	adc	r25, r19
    2e18:	84 0f       	add	r24, r20
    2e1a:	95 1f       	adc	r25, r21
    2e1c:	fc 01       	movw	r30, r24
    2e1e:	eb 57       	subi	r30, 0x7B	; 123
    2e20:	fe 4f       	sbci	r31, 0xFE	; 254
    2e22:	80 81       	ld	r24, Z
    2e24:	88 8f       	std	Y+24, r24	; 0x18
    2e26:	8f 81       	ldd	r24, Y+7	; 0x07
    2e28:	48 2f       	mov	r20, r24
    2e2a:	50 e0       	ldi	r21, 0x00	; 0
    2e2c:	ca 01       	movw	r24, r20
    2e2e:	88 0f       	add	r24, r24
    2e30:	99 1f       	adc	r25, r25
    2e32:	9c 01       	movw	r18, r24
    2e34:	22 0f       	add	r18, r18
    2e36:	33 1f       	adc	r19, r19
    2e38:	22 0f       	add	r18, r18
    2e3a:	33 1f       	adc	r19, r19
    2e3c:	22 0f       	add	r18, r18
    2e3e:	33 1f       	adc	r19, r19
    2e40:	82 0f       	add	r24, r18
    2e42:	93 1f       	adc	r25, r19
    2e44:	84 0f       	add	r24, r20
    2e46:	95 1f       	adc	r25, r21
    2e48:	fc 01       	movw	r30, r24
    2e4a:	ea 57       	subi	r30, 0x7A	; 122
    2e4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e4e:	80 81       	ld	r24, Z
    2e50:	8f 8b       	std	Y+23, r24	; 0x17
    2e52:	88 85       	ldd	r24, Y+8	; 0x08
    2e54:	88 2f       	mov	r24, r24
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	fc 01       	movw	r30, r24
    2e5a:	e9 55       	subi	r30, 0x59	; 89
    2e5c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e5e:	80 81       	ld	r24, Z
    2e60:	86 95       	lsr	r24
    2e62:	86 95       	lsr	r24
    2e64:	88 2f       	mov	r24, r24
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	81 70       	andi	r24, 0x01	; 1
    2e6a:	90 70       	andi	r25, 0x00	; 0
    2e6c:	1e 8a       	std	Y+22, r1	; 0x16
    2e6e:	00 97       	sbiw	r24, 0x00	; 0
    2e70:	11 f4       	brne	.+4      	; 0x2e76 <SSDLT_enuDisplayNum+0x6e8>
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	8e 8b       	std	Y+22, r24	; 0x16
    2e76:	88 8d       	ldd	r24, Y+24	; 0x18
    2e78:	6f 89       	ldd	r22, Y+23	; 0x17
    2e7a:	4e 89       	ldd	r20, Y+22	; 0x16
    2e7c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    2e80:	88 2f       	mov	r24, r24
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	00 24       	eor	r0, r0
    2e86:	96 95       	lsr	r25
    2e88:	87 95       	ror	r24
    2e8a:	07 94       	ror	r0
    2e8c:	96 95       	lsr	r25
    2e8e:	87 95       	ror	r24
    2e90:	07 94       	ror	r0
    2e92:	98 2f       	mov	r25, r24
    2e94:	80 2d       	mov	r24, r0
    2e96:	9c 01       	movw	r18, r24
    2e98:	44 27       	eor	r20, r20
    2e9a:	37 fd       	sbrc	r19, 7
    2e9c:	40 95       	com	r20
    2e9e:	54 2f       	mov	r21, r20
    2ea0:	89 81       	ldd	r24, Y+1	; 0x01
    2ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea4:	ab 81       	ldd	r26, Y+3	; 0x03
    2ea6:	bc 81       	ldd	r27, Y+4	; 0x04
    2ea8:	82 2b       	or	r24, r18
    2eaa:	93 2b       	or	r25, r19
    2eac:	a4 2b       	or	r26, r20
    2eae:	b5 2b       	or	r27, r21
    2eb0:	89 83       	std	Y+1, r24	; 0x01
    2eb2:	9a 83       	std	Y+2, r25	; 0x02
    2eb4:	ab 83       	std	Y+3, r26	; 0x03
    2eb6:	bc 83       	std	Y+4, r27	; 0x04
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>2) & 1))) << 6);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPort,
    2eb8:	8f 81       	ldd	r24, Y+7	; 0x07
    2eba:	48 2f       	mov	r20, r24
    2ebc:	50 e0       	ldi	r21, 0x00	; 0
    2ebe:	ca 01       	movw	r24, r20
    2ec0:	88 0f       	add	r24, r24
    2ec2:	99 1f       	adc	r25, r25
    2ec4:	9c 01       	movw	r18, r24
    2ec6:	22 0f       	add	r18, r18
    2ec8:	33 1f       	adc	r19, r19
    2eca:	22 0f       	add	r18, r18
    2ecc:	33 1f       	adc	r19, r19
    2ece:	22 0f       	add	r18, r18
    2ed0:	33 1f       	adc	r19, r19
    2ed2:	82 0f       	add	r24, r18
    2ed4:	93 1f       	adc	r25, r19
    2ed6:	84 0f       	add	r24, r20
    2ed8:	95 1f       	adc	r25, r21
    2eda:	fc 01       	movw	r30, r24
    2edc:	e9 57       	subi	r30, 0x79	; 121
    2ede:	fe 4f       	sbci	r31, 0xFE	; 254
    2ee0:	80 81       	ld	r24, Z
    2ee2:	8d 8b       	std	Y+21, r24	; 0x15
    2ee4:	8f 81       	ldd	r24, Y+7	; 0x07
    2ee6:	48 2f       	mov	r20, r24
    2ee8:	50 e0       	ldi	r21, 0x00	; 0
    2eea:	ca 01       	movw	r24, r20
    2eec:	88 0f       	add	r24, r24
    2eee:	99 1f       	adc	r25, r25
    2ef0:	9c 01       	movw	r18, r24
    2ef2:	22 0f       	add	r18, r18
    2ef4:	33 1f       	adc	r19, r19
    2ef6:	22 0f       	add	r18, r18
    2ef8:	33 1f       	adc	r19, r19
    2efa:	22 0f       	add	r18, r18
    2efc:	33 1f       	adc	r19, r19
    2efe:	82 0f       	add	r24, r18
    2f00:	93 1f       	adc	r25, r19
    2f02:	84 0f       	add	r24, r20
    2f04:	95 1f       	adc	r25, r21
    2f06:	fc 01       	movw	r30, r24
    2f08:	e8 57       	subi	r30, 0x78	; 120
    2f0a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f0c:	80 81       	ld	r24, Z
    2f0e:	8c 8b       	std	Y+20, r24	; 0x14
    2f10:	88 85       	ldd	r24, Y+8	; 0x08
    2f12:	88 2f       	mov	r24, r24
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	fc 01       	movw	r30, r24
    2f18:	e9 55       	subi	r30, 0x59	; 89
    2f1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f1c:	80 81       	ld	r24, Z
    2f1e:	86 95       	lsr	r24
    2f20:	86 95       	lsr	r24
    2f22:	86 95       	lsr	r24
    2f24:	88 2f       	mov	r24, r24
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	81 70       	andi	r24, 0x01	; 1
    2f2a:	90 70       	andi	r25, 0x00	; 0
    2f2c:	1b 8a       	std	Y+19, r1	; 0x13
    2f2e:	00 97       	sbiw	r24, 0x00	; 0
    2f30:	11 f4       	brne	.+4      	; 0x2f36 <SSDLT_enuDisplayNum+0x7a8>
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	8b 8b       	std	Y+19, r24	; 0x13
    2f36:	8d 89       	ldd	r24, Y+21	; 0x15
    2f38:	6c 89       	ldd	r22, Y+20	; 0x14
    2f3a:	4b 89       	ldd	r20, Y+19	; 0x13
    2f3c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    2f40:	88 2f       	mov	r24, r24
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	98 2f       	mov	r25, r24
    2f46:	88 27       	eor	r24, r24
    2f48:	99 0f       	add	r25, r25
    2f4a:	9c 01       	movw	r18, r24
    2f4c:	44 27       	eor	r20, r20
    2f4e:	37 fd       	sbrc	r19, 7
    2f50:	40 95       	com	r20
    2f52:	54 2f       	mov	r21, r20
    2f54:	89 81       	ldd	r24, Y+1	; 0x01
    2f56:	9a 81       	ldd	r25, Y+2	; 0x02
    2f58:	ab 81       	ldd	r26, Y+3	; 0x03
    2f5a:	bc 81       	ldd	r27, Y+4	; 0x04
    2f5c:	82 2b       	or	r24, r18
    2f5e:	93 2b       	or	r25, r19
    2f60:	a4 2b       	or	r26, r20
    2f62:	b5 2b       	or	r27, r21
    2f64:	89 83       	std	Y+1, r24	; 0x01
    2f66:	9a 83       	std	Y+2, r25	; 0x02
    2f68:	ab 83       	std	Y+3, r26	; 0x03
    2f6a:	bc 83       	std	Y+4, r27	; 0x04
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>3) & 1))) << 9);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPort,
    2f6c:	8f 81       	ldd	r24, Y+7	; 0x07
    2f6e:	48 2f       	mov	r20, r24
    2f70:	50 e0       	ldi	r21, 0x00	; 0
    2f72:	ca 01       	movw	r24, r20
    2f74:	88 0f       	add	r24, r24
    2f76:	99 1f       	adc	r25, r25
    2f78:	9c 01       	movw	r18, r24
    2f7a:	22 0f       	add	r18, r18
    2f7c:	33 1f       	adc	r19, r19
    2f7e:	22 0f       	add	r18, r18
    2f80:	33 1f       	adc	r19, r19
    2f82:	22 0f       	add	r18, r18
    2f84:	33 1f       	adc	r19, r19
    2f86:	82 0f       	add	r24, r18
    2f88:	93 1f       	adc	r25, r19
    2f8a:	84 0f       	add	r24, r20
    2f8c:	95 1f       	adc	r25, r21
    2f8e:	fc 01       	movw	r30, r24
    2f90:	e7 57       	subi	r30, 0x77	; 119
    2f92:	fe 4f       	sbci	r31, 0xFE	; 254
    2f94:	80 81       	ld	r24, Z
    2f96:	8a 8b       	std	Y+18, r24	; 0x12
    2f98:	8f 81       	ldd	r24, Y+7	; 0x07
    2f9a:	48 2f       	mov	r20, r24
    2f9c:	50 e0       	ldi	r21, 0x00	; 0
    2f9e:	ca 01       	movw	r24, r20
    2fa0:	88 0f       	add	r24, r24
    2fa2:	99 1f       	adc	r25, r25
    2fa4:	9c 01       	movw	r18, r24
    2fa6:	22 0f       	add	r18, r18
    2fa8:	33 1f       	adc	r19, r19
    2faa:	22 0f       	add	r18, r18
    2fac:	33 1f       	adc	r19, r19
    2fae:	22 0f       	add	r18, r18
    2fb0:	33 1f       	adc	r19, r19
    2fb2:	82 0f       	add	r24, r18
    2fb4:	93 1f       	adc	r25, r19
    2fb6:	84 0f       	add	r24, r20
    2fb8:	95 1f       	adc	r25, r21
    2fba:	fc 01       	movw	r30, r24
    2fbc:	e6 57       	subi	r30, 0x76	; 118
    2fbe:	fe 4f       	sbci	r31, 0xFE	; 254
    2fc0:	80 81       	ld	r24, Z
    2fc2:	89 8b       	std	Y+17, r24	; 0x11
    2fc4:	88 85       	ldd	r24, Y+8	; 0x08
    2fc6:	88 2f       	mov	r24, r24
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	fc 01       	movw	r30, r24
    2fcc:	e9 55       	subi	r30, 0x59	; 89
    2fce:	fe 4f       	sbci	r31, 0xFE	; 254
    2fd0:	80 81       	ld	r24, Z
    2fd2:	82 95       	swap	r24
    2fd4:	8f 70       	andi	r24, 0x0F	; 15
    2fd6:	88 2f       	mov	r24, r24
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	81 70       	andi	r24, 0x01	; 1
    2fdc:	90 70       	andi	r25, 0x00	; 0
    2fde:	18 8a       	std	Y+16, r1	; 0x10
    2fe0:	00 97       	sbiw	r24, 0x00	; 0
    2fe2:	11 f4       	brne	.+4      	; 0x2fe8 <SSDLT_enuDisplayNum+0x85a>
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	88 8b       	std	Y+16, r24	; 0x10
    2fe8:	8a 89       	ldd	r24, Y+18	; 0x12
    2fea:	69 89       	ldd	r22, Y+17	; 0x11
    2fec:	48 89       	ldd	r20, Y+16	; 0x10
    2fee:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    2ff2:	88 2f       	mov	r24, r24
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	98 2f       	mov	r25, r24
    2ff8:	88 27       	eor	r24, r24
    2ffa:	92 95       	swap	r25
    2ffc:	90 7f       	andi	r25, 0xF0	; 240
    2ffe:	9c 01       	movw	r18, r24
    3000:	44 27       	eor	r20, r20
    3002:	37 fd       	sbrc	r19, 7
    3004:	40 95       	com	r20
    3006:	54 2f       	mov	r21, r20
    3008:	89 81       	ldd	r24, Y+1	; 0x01
    300a:	9a 81       	ldd	r25, Y+2	; 0x02
    300c:	ab 81       	ldd	r26, Y+3	; 0x03
    300e:	bc 81       	ldd	r27, Y+4	; 0x04
    3010:	82 2b       	or	r24, r18
    3012:	93 2b       	or	r25, r19
    3014:	a4 2b       	or	r26, r20
    3016:	b5 2b       	or	r27, r21
    3018:	89 83       	std	Y+1, r24	; 0x01
    301a:	9a 83       	std	Y+2, r25	; 0x02
    301c:	ab 83       	std	Y+3, r26	; 0x03
    301e:	bc 83       	std	Y+4, r27	; 0x04
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>4) & 1))) << 12);

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPort,
    3020:	8f 81       	ldd	r24, Y+7	; 0x07
    3022:	48 2f       	mov	r20, r24
    3024:	50 e0       	ldi	r21, 0x00	; 0
    3026:	ca 01       	movw	r24, r20
    3028:	88 0f       	add	r24, r24
    302a:	99 1f       	adc	r25, r25
    302c:	9c 01       	movw	r18, r24
    302e:	22 0f       	add	r18, r18
    3030:	33 1f       	adc	r19, r19
    3032:	22 0f       	add	r18, r18
    3034:	33 1f       	adc	r19, r19
    3036:	22 0f       	add	r18, r18
    3038:	33 1f       	adc	r19, r19
    303a:	82 0f       	add	r24, r18
    303c:	93 1f       	adc	r25, r19
    303e:	84 0f       	add	r24, r20
    3040:	95 1f       	adc	r25, r21
    3042:	fc 01       	movw	r30, r24
    3044:	e5 57       	subi	r30, 0x75	; 117
    3046:	fe 4f       	sbci	r31, 0xFE	; 254
    3048:	80 81       	ld	r24, Z
    304a:	8f 87       	std	Y+15, r24	; 0x0f
    304c:	8f 81       	ldd	r24, Y+7	; 0x07
    304e:	48 2f       	mov	r20, r24
    3050:	50 e0       	ldi	r21, 0x00	; 0
    3052:	ca 01       	movw	r24, r20
    3054:	88 0f       	add	r24, r24
    3056:	99 1f       	adc	r25, r25
    3058:	9c 01       	movw	r18, r24
    305a:	22 0f       	add	r18, r18
    305c:	33 1f       	adc	r19, r19
    305e:	22 0f       	add	r18, r18
    3060:	33 1f       	adc	r19, r19
    3062:	22 0f       	add	r18, r18
    3064:	33 1f       	adc	r19, r19
    3066:	82 0f       	add	r24, r18
    3068:	93 1f       	adc	r25, r19
    306a:	84 0f       	add	r24, r20
    306c:	95 1f       	adc	r25, r21
    306e:	fc 01       	movw	r30, r24
    3070:	e4 57       	subi	r30, 0x74	; 116
    3072:	fe 4f       	sbci	r31, 0xFE	; 254
    3074:	80 81       	ld	r24, Z
    3076:	8e 87       	std	Y+14, r24	; 0x0e
    3078:	88 85       	ldd	r24, Y+8	; 0x08
    307a:	88 2f       	mov	r24, r24
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	fc 01       	movw	r30, r24
    3080:	e9 55       	subi	r30, 0x59	; 89
    3082:	fe 4f       	sbci	r31, 0xFE	; 254
    3084:	80 81       	ld	r24, Z
    3086:	82 95       	swap	r24
    3088:	86 95       	lsr	r24
    308a:	87 70       	andi	r24, 0x07	; 7
    308c:	88 2f       	mov	r24, r24
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	81 70       	andi	r24, 0x01	; 1
    3092:	90 70       	andi	r25, 0x00	; 0
    3094:	1d 86       	std	Y+13, r1	; 0x0d
    3096:	00 97       	sbiw	r24, 0x00	; 0
    3098:	11 f4       	brne	.+4      	; 0x309e <SSDLT_enuDisplayNum+0x910>
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	8d 87       	std	Y+13, r24	; 0x0d
    309e:	8f 85       	ldd	r24, Y+15	; 0x0f
    30a0:	6e 85       	ldd	r22, Y+14	; 0x0e
    30a2:	4d 85       	ldd	r20, Y+13	; 0x0d
    30a4:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    30a8:	88 2f       	mov	r24, r24
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	a0 e0       	ldi	r26, 0x00	; 0
    30ae:	b0 e0       	ldi	r27, 0x00	; 0
    30b0:	9c 01       	movw	r18, r24
    30b2:	ad 01       	movw	r20, r26
    30b4:	01 2e       	mov	r0, r17
    30b6:	1f e0       	ldi	r17, 0x0F	; 15
    30b8:	22 0f       	add	r18, r18
    30ba:	33 1f       	adc	r19, r19
    30bc:	44 1f       	adc	r20, r20
    30be:	55 1f       	adc	r21, r21
    30c0:	1a 95       	dec	r17
    30c2:	d1 f7       	brne	.-12     	; 0x30b8 <SSDLT_enuDisplayNum+0x92a>
    30c4:	10 2d       	mov	r17, r0
    30c6:	89 81       	ldd	r24, Y+1	; 0x01
    30c8:	9a 81       	ldd	r25, Y+2	; 0x02
    30ca:	ab 81       	ldd	r26, Y+3	; 0x03
    30cc:	bc 81       	ldd	r27, Y+4	; 0x04
    30ce:	82 2b       	or	r24, r18
    30d0:	93 2b       	or	r25, r19
    30d2:	a4 2b       	or	r26, r20
    30d4:	b5 2b       	or	r27, r21
    30d6:	89 83       	std	Y+1, r24	; 0x01
    30d8:	9a 83       	std	Y+2, r25	; 0x02
    30da:	ab 83       	std	Y+3, r26	; 0x03
    30dc:	bc 83       	std	Y+4, r27	; 0x04
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>5) & 1))) << 15));

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPort,
    30de:	8f 81       	ldd	r24, Y+7	; 0x07
    30e0:	48 2f       	mov	r20, r24
    30e2:	50 e0       	ldi	r21, 0x00	; 0
    30e4:	ca 01       	movw	r24, r20
    30e6:	88 0f       	add	r24, r24
    30e8:	99 1f       	adc	r25, r25
    30ea:	9c 01       	movw	r18, r24
    30ec:	22 0f       	add	r18, r18
    30ee:	33 1f       	adc	r19, r19
    30f0:	22 0f       	add	r18, r18
    30f2:	33 1f       	adc	r19, r19
    30f4:	22 0f       	add	r18, r18
    30f6:	33 1f       	adc	r19, r19
    30f8:	82 0f       	add	r24, r18
    30fa:	93 1f       	adc	r25, r19
    30fc:	84 0f       	add	r24, r20
    30fe:	95 1f       	adc	r25, r21
    3100:	fc 01       	movw	r30, r24
    3102:	e3 57       	subi	r30, 0x73	; 115
    3104:	fe 4f       	sbci	r31, 0xFE	; 254
    3106:	80 81       	ld	r24, Z
    3108:	8c 87       	std	Y+12, r24	; 0x0c
    310a:	8f 81       	ldd	r24, Y+7	; 0x07
    310c:	48 2f       	mov	r20, r24
    310e:	50 e0       	ldi	r21, 0x00	; 0
    3110:	ca 01       	movw	r24, r20
    3112:	88 0f       	add	r24, r24
    3114:	99 1f       	adc	r25, r25
    3116:	9c 01       	movw	r18, r24
    3118:	22 0f       	add	r18, r18
    311a:	33 1f       	adc	r19, r19
    311c:	22 0f       	add	r18, r18
    311e:	33 1f       	adc	r19, r19
    3120:	22 0f       	add	r18, r18
    3122:	33 1f       	adc	r19, r19
    3124:	82 0f       	add	r24, r18
    3126:	93 1f       	adc	r25, r19
    3128:	84 0f       	add	r24, r20
    312a:	95 1f       	adc	r25, r21
    312c:	fc 01       	movw	r30, r24
    312e:	e2 57       	subi	r30, 0x72	; 114
    3130:	fe 4f       	sbci	r31, 0xFE	; 254
    3132:	80 81       	ld	r24, Z
    3134:	8b 87       	std	Y+11, r24	; 0x0b
    3136:	88 85       	ldd	r24, Y+8	; 0x08
    3138:	88 2f       	mov	r24, r24
    313a:	90 e0       	ldi	r25, 0x00	; 0
    313c:	fc 01       	movw	r30, r24
    313e:	e9 55       	subi	r30, 0x59	; 89
    3140:	fe 4f       	sbci	r31, 0xFE	; 254
    3142:	80 81       	ld	r24, Z
    3144:	82 95       	swap	r24
    3146:	86 95       	lsr	r24
    3148:	86 95       	lsr	r24
    314a:	83 70       	andi	r24, 0x03	; 3
    314c:	88 2f       	mov	r24, r24
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	81 70       	andi	r24, 0x01	; 1
    3152:	90 70       	andi	r25, 0x00	; 0
    3154:	1a 86       	std	Y+10, r1	; 0x0a
    3156:	00 97       	sbiw	r24, 0x00	; 0
    3158:	11 f4       	brne	.+4      	; 0x315e <SSDLT_enuDisplayNum+0x9d0>
    315a:	81 e0       	ldi	r24, 0x01	; 1
    315c:	8a 87       	std	Y+10, r24	; 0x0a
    315e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3160:	6b 85       	ldd	r22, Y+11	; 0x0b
    3162:	4a 85       	ldd	r20, Y+10	; 0x0a
    3164:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3168:	88 2f       	mov	r24, r24
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	a0 e0       	ldi	r26, 0x00	; 0
    316e:	b0 e0       	ldi	r27, 0x00	; 0
    3170:	9c 01       	movw	r18, r24
    3172:	ad 01       	movw	r20, r26
    3174:	01 2e       	mov	r0, r17
    3176:	12 e1       	ldi	r17, 0x12	; 18
    3178:	22 0f       	add	r18, r18
    317a:	33 1f       	adc	r19, r19
    317c:	44 1f       	adc	r20, r20
    317e:	55 1f       	adc	r21, r21
    3180:	1a 95       	dec	r17
    3182:	d1 f7       	brne	.-12     	; 0x3178 <SSDLT_enuDisplayNum+0x9ea>
    3184:	10 2d       	mov	r17, r0
    3186:	89 81       	ldd	r24, Y+1	; 0x01
    3188:	9a 81       	ldd	r25, Y+2	; 0x02
    318a:	ab 81       	ldd	r26, Y+3	; 0x03
    318c:	bc 81       	ldd	r27, Y+4	; 0x04
    318e:	82 2b       	or	r24, r18
    3190:	93 2b       	or	r25, r19
    3192:	a4 2b       	or	r26, r20
    3194:	b5 2b       	or	r27, r21
    3196:	89 83       	std	Y+1, r24	; 0x01
    3198:	9a 83       	std	Y+2, r25	; 0x02
    319a:	ab 83       	std	Y+3, r26	; 0x03
    319c:	bc 83       	std	Y+4, r27	; 0x04
    319e:	05 c0       	rjmp	.+10     	; 0x31aa <SSDLT_enuDisplayNum+0xa1c>
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>6) & 1))) << 18));
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    31a0:	83 e0       	ldi	r24, 0x03	; 3
    31a2:	8e 83       	std	Y+6, r24	; 0x06
    31a4:	02 c0       	rjmp	.+4      	; 0x31aa <SSDLT_enuDisplayNum+0xa1c>
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    31a6:	83 e0       	ldi	r24, 0x03	; 3
    31a8:	8e 83       	std	Y+6, r24	; 0x06
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    31aa:	1d 82       	std	Y+5, r1	; 0x05
    31ac:	1e c0       	rjmp	.+60     	; 0x31ea <SSDLT_enuDisplayNum+0xa5c>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
    31ae:	8d 81       	ldd	r24, Y+5	; 0x05
    31b0:	28 2f       	mov	r18, r24
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	89 81       	ldd	r24, Y+1	; 0x01
    31b6:	9a 81       	ldd	r25, Y+2	; 0x02
    31b8:	ab 81       	ldd	r26, Y+3	; 0x03
    31ba:	bc 81       	ldd	r27, Y+4	; 0x04
    31bc:	02 2e       	mov	r0, r18
    31be:	04 c0       	rjmp	.+8      	; 0x31c8 <SSDLT_enuDisplayNum+0xa3a>
    31c0:	b6 95       	lsr	r27
    31c2:	a7 95       	ror	r26
    31c4:	97 95       	ror	r25
    31c6:	87 95       	ror	r24
    31c8:	0a 94       	dec	r0
    31ca:	d2 f7       	brpl	.-12     	; 0x31c0 <SSDLT_enuDisplayNum+0xa32>
    31cc:	87 70       	andi	r24, 0x07	; 7
    31ce:	90 70       	andi	r25, 0x00	; 0
    31d0:	a0 70       	andi	r26, 0x00	; 0
    31d2:	b0 70       	andi	r27, 0x00	; 0
    31d4:	81 30       	cpi	r24, 0x01	; 1
    31d6:	91 05       	cpc	r25, r1
    31d8:	a1 05       	cpc	r26, r1
    31da:	b1 05       	cpc	r27, r1
    31dc:	19 f0       	breq	.+6      	; 0x31e4 <SSDLT_enuDisplayNum+0xa56>
		{
			return Local_enuErrorState;
    31de:	8e 81       	ldd	r24, Y+6	; 0x06
    31e0:	89 87       	std	Y+9, r24	; 0x09
    31e2:	0a c0       	rjmp	.+20     	; 0x31f8 <SSDLT_enuDisplayNum+0xa6a>
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    31e4:	8d 81       	ldd	r24, Y+5	; 0x05
    31e6:	8d 5f       	subi	r24, 0xFD	; 253
    31e8:	8d 83       	std	Y+5, r24	; 0x05
    31ea:	8d 81       	ldd	r24, Y+5	; 0x05
    31ec:	85 31       	cpi	r24, 0x15	; 21
    31ee:	f8 f2       	brcs	.-66     	; 0x31ae <SSDLT_enuDisplayNum+0xa20>
		{
			return Local_enuErrorState;
		}
	}

	Local_enuErrorState = ES_OK;
    31f0:	81 e0       	ldi	r24, 0x01	; 1
    31f2:	8e 83       	std	Y+6, r24	; 0x06

	return Local_enuErrorState;
    31f4:	8e 81       	ldd	r24, Y+6	; 0x06
    31f6:	89 87       	std	Y+9, r24	; 0x09
    31f8:	89 85       	ldd	r24, Y+9	; 0x09
}
    31fa:	6e 96       	adiw	r28, 0x1e	; 30
    31fc:	0f b6       	in	r0, 0x3f	; 63
    31fe:	f8 94       	cli
    3200:	de bf       	out	0x3e, r29	; 62
    3202:	0f be       	out	0x3f, r0	; 63
    3204:	cd bf       	out	0x3d, r28	; 61
    3206:	cf 91       	pop	r28
    3208:	df 91       	pop	r29
    320a:	08 95       	ret

0000320c <SSDLT_enuEnableCommon>:

ES_t SSDLT_enuEnableCommon(u8 Copy_u8SegID)
{
    320c:	df 93       	push	r29
    320e:	cf 93       	push	r28
    3210:	00 d0       	rcall	.+0      	; 0x3212 <SSDLT_enuEnableCommon+0x6>
    3212:	cd b7       	in	r28, 0x3d	; 61
    3214:	de b7       	in	r29, 0x3e	; 62
    3216:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3218:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8SegID < SEG_NUM)
    321a:	8a 81       	ldd	r24, Y+2	; 0x02
    321c:	82 30       	cpi	r24, 0x02	; 2
    321e:	08 f0       	brcs	.+2      	; 0x3222 <SSDLT_enuEnableCommon+0x16>
    3220:	c2 c0       	rjmp	.+388    	; 0x33a6 <SSDLT_enuEnableCommon+0x19a>
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port != NOT_CONNECTED ||
    3222:	8a 81       	ldd	r24, Y+2	; 0x02
    3224:	48 2f       	mov	r20, r24
    3226:	50 e0       	ldi	r21, 0x00	; 0
    3228:	ca 01       	movw	r24, r20
    322a:	88 0f       	add	r24, r24
    322c:	99 1f       	adc	r25, r25
    322e:	9c 01       	movw	r18, r24
    3230:	22 0f       	add	r18, r18
    3232:	33 1f       	adc	r19, r19
    3234:	22 0f       	add	r18, r18
    3236:	33 1f       	adc	r19, r19
    3238:	22 0f       	add	r18, r18
    323a:	33 1f       	adc	r19, r19
    323c:	82 0f       	add	r24, r18
    323e:	93 1f       	adc	r25, r19
    3240:	84 0f       	add	r24, r20
    3242:	95 1f       	adc	r25, r21
    3244:	fc 01       	movw	r30, r24
    3246:	e1 57       	subi	r30, 0x71	; 113
    3248:	fe 4f       	sbci	r31, 0xFE	; 254
    324a:	80 81       	ld	r24, Z
    324c:	82 30       	cpi	r24, 0x02	; 2
    324e:	c1 f4       	brne	.+48     	; 0x3280 <SSDLT_enuEnableCommon+0x74>
    3250:	8a 81       	ldd	r24, Y+2	; 0x02
    3252:	48 2f       	mov	r20, r24
    3254:	50 e0       	ldi	r21, 0x00	; 0
    3256:	ca 01       	movw	r24, r20
    3258:	88 0f       	add	r24, r24
    325a:	99 1f       	adc	r25, r25
    325c:	9c 01       	movw	r18, r24
    325e:	22 0f       	add	r18, r18
    3260:	33 1f       	adc	r19, r19
    3262:	22 0f       	add	r18, r18
    3264:	33 1f       	adc	r19, r19
    3266:	22 0f       	add	r18, r18
    3268:	33 1f       	adc	r19, r19
    326a:	82 0f       	add	r24, r18
    326c:	93 1f       	adc	r25, r19
    326e:	84 0f       	add	r24, r20
    3270:	95 1f       	adc	r25, r21
    3272:	fc 01       	movw	r30, r24
    3274:	e0 57       	subi	r30, 0x70	; 112
    3276:	fe 4f       	sbci	r31, 0xFE	; 254
    3278:	80 81       	ld	r24, Z
    327a:	82 30       	cpi	r24, 0x02	; 2
    327c:	09 f4       	brne	.+2      	; 0x3280 <SSDLT_enuEnableCommon+0x74>
    327e:	95 c0       	rjmp	.+298    	; 0x33aa <SSDLT_enuEnableCommon+0x19e>
				SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin != NOT_CONNECTED)
		{
			if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    3280:	8a 81       	ldd	r24, Y+2	; 0x02
    3282:	48 2f       	mov	r20, r24
    3284:	50 e0       	ldi	r21, 0x00	; 0
    3286:	ca 01       	movw	r24, r20
    3288:	88 0f       	add	r24, r24
    328a:	99 1f       	adc	r25, r25
    328c:	9c 01       	movw	r18, r24
    328e:	22 0f       	add	r18, r18
    3290:	33 1f       	adc	r19, r19
    3292:	22 0f       	add	r18, r18
    3294:	33 1f       	adc	r19, r19
    3296:	22 0f       	add	r18, r18
    3298:	33 1f       	adc	r19, r19
    329a:	82 0f       	add	r24, r18
    329c:	93 1f       	adc	r25, r19
    329e:	84 0f       	add	r24, r20
    32a0:	95 1f       	adc	r25, r21
    32a2:	fc 01       	movw	r30, r24
    32a4:	ed 56       	subi	r30, 0x6D	; 109
    32a6:	fe 4f       	sbci	r31, 0xFE	; 254
    32a8:	80 81       	ld	r24, Z
    32aa:	81 30       	cpi	r24, 0x01	; 1
    32ac:	89 f5       	brne	.+98     	; 0x3310 <SSDLT_enuEnableCommon+0x104>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port,
    32ae:	8a 81       	ldd	r24, Y+2	; 0x02
    32b0:	48 2f       	mov	r20, r24
    32b2:	50 e0       	ldi	r21, 0x00	; 0
    32b4:	ca 01       	movw	r24, r20
    32b6:	88 0f       	add	r24, r24
    32b8:	99 1f       	adc	r25, r25
    32ba:	9c 01       	movw	r18, r24
    32bc:	22 0f       	add	r18, r18
    32be:	33 1f       	adc	r19, r19
    32c0:	22 0f       	add	r18, r18
    32c2:	33 1f       	adc	r19, r19
    32c4:	22 0f       	add	r18, r18
    32c6:	33 1f       	adc	r19, r19
    32c8:	82 0f       	add	r24, r18
    32ca:	93 1f       	adc	r25, r19
    32cc:	84 0f       	add	r24, r20
    32ce:	95 1f       	adc	r25, r21
    32d0:	fc 01       	movw	r30, r24
    32d2:	e1 57       	subi	r30, 0x71	; 113
    32d4:	fe 4f       	sbci	r31, 0xFE	; 254
    32d6:	60 81       	ld	r22, Z
    32d8:	8a 81       	ldd	r24, Y+2	; 0x02
    32da:	48 2f       	mov	r20, r24
    32dc:	50 e0       	ldi	r21, 0x00	; 0
    32de:	ca 01       	movw	r24, r20
    32e0:	88 0f       	add	r24, r24
    32e2:	99 1f       	adc	r25, r25
    32e4:	9c 01       	movw	r18, r24
    32e6:	22 0f       	add	r18, r18
    32e8:	33 1f       	adc	r19, r19
    32ea:	22 0f       	add	r18, r18
    32ec:	33 1f       	adc	r19, r19
    32ee:	22 0f       	add	r18, r18
    32f0:	33 1f       	adc	r19, r19
    32f2:	82 0f       	add	r24, r18
    32f4:	93 1f       	adc	r25, r19
    32f6:	84 0f       	add	r24, r20
    32f8:	95 1f       	adc	r25, r21
    32fa:	fc 01       	movw	r30, r24
    32fc:	e0 57       	subi	r30, 0x70	; 112
    32fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3300:	90 81       	ld	r25, Z
    3302:	86 2f       	mov	r24, r22
    3304:	69 2f       	mov	r22, r25
    3306:	40 e0       	ldi	r20, 0x00	; 0
    3308:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    330c:	89 83       	std	Y+1, r24	; 0x01
    330e:	4d c0       	rjmp	.+154    	; 0x33aa <SSDLT_enuEnableCommon+0x19e>
														 SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin, DIO_u8LOW);
			}
			else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    3310:	8a 81       	ldd	r24, Y+2	; 0x02
    3312:	48 2f       	mov	r20, r24
    3314:	50 e0       	ldi	r21, 0x00	; 0
    3316:	ca 01       	movw	r24, r20
    3318:	88 0f       	add	r24, r24
    331a:	99 1f       	adc	r25, r25
    331c:	9c 01       	movw	r18, r24
    331e:	22 0f       	add	r18, r18
    3320:	33 1f       	adc	r19, r19
    3322:	22 0f       	add	r18, r18
    3324:	33 1f       	adc	r19, r19
    3326:	22 0f       	add	r18, r18
    3328:	33 1f       	adc	r19, r19
    332a:	82 0f       	add	r24, r18
    332c:	93 1f       	adc	r25, r19
    332e:	84 0f       	add	r24, r20
    3330:	95 1f       	adc	r25, r21
    3332:	fc 01       	movw	r30, r24
    3334:	ed 56       	subi	r30, 0x6D	; 109
    3336:	fe 4f       	sbci	r31, 0xFE	; 254
    3338:	80 81       	ld	r24, Z
    333a:	88 23       	and	r24, r24
    333c:	89 f5       	brne	.+98     	; 0x33a0 <SSDLT_enuEnableCommon+0x194>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port,
    333e:	8a 81       	ldd	r24, Y+2	; 0x02
    3340:	48 2f       	mov	r20, r24
    3342:	50 e0       	ldi	r21, 0x00	; 0
    3344:	ca 01       	movw	r24, r20
    3346:	88 0f       	add	r24, r24
    3348:	99 1f       	adc	r25, r25
    334a:	9c 01       	movw	r18, r24
    334c:	22 0f       	add	r18, r18
    334e:	33 1f       	adc	r19, r19
    3350:	22 0f       	add	r18, r18
    3352:	33 1f       	adc	r19, r19
    3354:	22 0f       	add	r18, r18
    3356:	33 1f       	adc	r19, r19
    3358:	82 0f       	add	r24, r18
    335a:	93 1f       	adc	r25, r19
    335c:	84 0f       	add	r24, r20
    335e:	95 1f       	adc	r25, r21
    3360:	fc 01       	movw	r30, r24
    3362:	e1 57       	subi	r30, 0x71	; 113
    3364:	fe 4f       	sbci	r31, 0xFE	; 254
    3366:	60 81       	ld	r22, Z
    3368:	8a 81       	ldd	r24, Y+2	; 0x02
    336a:	48 2f       	mov	r20, r24
    336c:	50 e0       	ldi	r21, 0x00	; 0
    336e:	ca 01       	movw	r24, r20
    3370:	88 0f       	add	r24, r24
    3372:	99 1f       	adc	r25, r25
    3374:	9c 01       	movw	r18, r24
    3376:	22 0f       	add	r18, r18
    3378:	33 1f       	adc	r19, r19
    337a:	22 0f       	add	r18, r18
    337c:	33 1f       	adc	r19, r19
    337e:	22 0f       	add	r18, r18
    3380:	33 1f       	adc	r19, r19
    3382:	82 0f       	add	r24, r18
    3384:	93 1f       	adc	r25, r19
    3386:	84 0f       	add	r24, r20
    3388:	95 1f       	adc	r25, r21
    338a:	fc 01       	movw	r30, r24
    338c:	e0 57       	subi	r30, 0x70	; 112
    338e:	fe 4f       	sbci	r31, 0xFE	; 254
    3390:	90 81       	ld	r25, Z
    3392:	86 2f       	mov	r24, r22
    3394:	69 2f       	mov	r22, r25
    3396:	41 e0       	ldi	r20, 0x01	; 1
    3398:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    339c:	89 83       	std	Y+1, r24	; 0x01
    339e:	05 c0       	rjmp	.+10     	; 0x33aa <SSDLT_enuEnableCommon+0x19e>
														SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin, DIO_u8HIGH);
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    33a0:	83 e0       	ldi	r24, 0x03	; 3
    33a2:	89 83       	std	Y+1, r24	; 0x01
    33a4:	02 c0       	rjmp	.+4      	; 0x33aa <SSDLT_enuEnableCommon+0x19e>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    33a6:	83 e0       	ldi	r24, 0x03	; 3
    33a8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    33aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    33ac:	0f 90       	pop	r0
    33ae:	0f 90       	pop	r0
    33b0:	cf 91       	pop	r28
    33b2:	df 91       	pop	r29
    33b4:	08 95       	ret

000033b6 <SSDLT_enuDisableCommon>:

ES_t SSDLT_enuDisableCommon(u8 Copy_u8SegID)
{
    33b6:	df 93       	push	r29
    33b8:	cf 93       	push	r28
    33ba:	00 d0       	rcall	.+0      	; 0x33bc <SSDLT_enuDisableCommon+0x6>
    33bc:	cd b7       	in	r28, 0x3d	; 61
    33be:	de b7       	in	r29, 0x3e	; 62
    33c0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    33c2:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8SegID < SEG_NUM)
    33c4:	8a 81       	ldd	r24, Y+2	; 0x02
    33c6:	82 30       	cpi	r24, 0x02	; 2
    33c8:	08 f0       	brcs	.+2      	; 0x33cc <SSDLT_enuDisableCommon+0x16>
    33ca:	c2 c0       	rjmp	.+388    	; 0x3550 <SSDLT_enuDisableCommon+0x19a>
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port != NOT_CONNECTED ||
    33cc:	8a 81       	ldd	r24, Y+2	; 0x02
    33ce:	48 2f       	mov	r20, r24
    33d0:	50 e0       	ldi	r21, 0x00	; 0
    33d2:	ca 01       	movw	r24, r20
    33d4:	88 0f       	add	r24, r24
    33d6:	99 1f       	adc	r25, r25
    33d8:	9c 01       	movw	r18, r24
    33da:	22 0f       	add	r18, r18
    33dc:	33 1f       	adc	r19, r19
    33de:	22 0f       	add	r18, r18
    33e0:	33 1f       	adc	r19, r19
    33e2:	22 0f       	add	r18, r18
    33e4:	33 1f       	adc	r19, r19
    33e6:	82 0f       	add	r24, r18
    33e8:	93 1f       	adc	r25, r19
    33ea:	84 0f       	add	r24, r20
    33ec:	95 1f       	adc	r25, r21
    33ee:	fc 01       	movw	r30, r24
    33f0:	e1 57       	subi	r30, 0x71	; 113
    33f2:	fe 4f       	sbci	r31, 0xFE	; 254
    33f4:	80 81       	ld	r24, Z
    33f6:	82 30       	cpi	r24, 0x02	; 2
    33f8:	c1 f4       	brne	.+48     	; 0x342a <SSDLT_enuDisableCommon+0x74>
    33fa:	8a 81       	ldd	r24, Y+2	; 0x02
    33fc:	48 2f       	mov	r20, r24
    33fe:	50 e0       	ldi	r21, 0x00	; 0
    3400:	ca 01       	movw	r24, r20
    3402:	88 0f       	add	r24, r24
    3404:	99 1f       	adc	r25, r25
    3406:	9c 01       	movw	r18, r24
    3408:	22 0f       	add	r18, r18
    340a:	33 1f       	adc	r19, r19
    340c:	22 0f       	add	r18, r18
    340e:	33 1f       	adc	r19, r19
    3410:	22 0f       	add	r18, r18
    3412:	33 1f       	adc	r19, r19
    3414:	82 0f       	add	r24, r18
    3416:	93 1f       	adc	r25, r19
    3418:	84 0f       	add	r24, r20
    341a:	95 1f       	adc	r25, r21
    341c:	fc 01       	movw	r30, r24
    341e:	e0 57       	subi	r30, 0x70	; 112
    3420:	fe 4f       	sbci	r31, 0xFE	; 254
    3422:	80 81       	ld	r24, Z
    3424:	82 30       	cpi	r24, 0x02	; 2
    3426:	09 f4       	brne	.+2      	; 0x342a <SSDLT_enuDisableCommon+0x74>
    3428:	95 c0       	rjmp	.+298    	; 0x3554 <SSDLT_enuDisableCommon+0x19e>
				SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin != NOT_CONNECTED)
		{
			if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    342a:	8a 81       	ldd	r24, Y+2	; 0x02
    342c:	48 2f       	mov	r20, r24
    342e:	50 e0       	ldi	r21, 0x00	; 0
    3430:	ca 01       	movw	r24, r20
    3432:	88 0f       	add	r24, r24
    3434:	99 1f       	adc	r25, r25
    3436:	9c 01       	movw	r18, r24
    3438:	22 0f       	add	r18, r18
    343a:	33 1f       	adc	r19, r19
    343c:	22 0f       	add	r18, r18
    343e:	33 1f       	adc	r19, r19
    3440:	22 0f       	add	r18, r18
    3442:	33 1f       	adc	r19, r19
    3444:	82 0f       	add	r24, r18
    3446:	93 1f       	adc	r25, r19
    3448:	84 0f       	add	r24, r20
    344a:	95 1f       	adc	r25, r21
    344c:	fc 01       	movw	r30, r24
    344e:	ed 56       	subi	r30, 0x6D	; 109
    3450:	fe 4f       	sbci	r31, 0xFE	; 254
    3452:	80 81       	ld	r24, Z
    3454:	81 30       	cpi	r24, 0x01	; 1
    3456:	89 f5       	brne	.+98     	; 0x34ba <SSDLT_enuDisableCommon+0x104>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port,
    3458:	8a 81       	ldd	r24, Y+2	; 0x02
    345a:	48 2f       	mov	r20, r24
    345c:	50 e0       	ldi	r21, 0x00	; 0
    345e:	ca 01       	movw	r24, r20
    3460:	88 0f       	add	r24, r24
    3462:	99 1f       	adc	r25, r25
    3464:	9c 01       	movw	r18, r24
    3466:	22 0f       	add	r18, r18
    3468:	33 1f       	adc	r19, r19
    346a:	22 0f       	add	r18, r18
    346c:	33 1f       	adc	r19, r19
    346e:	22 0f       	add	r18, r18
    3470:	33 1f       	adc	r19, r19
    3472:	82 0f       	add	r24, r18
    3474:	93 1f       	adc	r25, r19
    3476:	84 0f       	add	r24, r20
    3478:	95 1f       	adc	r25, r21
    347a:	fc 01       	movw	r30, r24
    347c:	e1 57       	subi	r30, 0x71	; 113
    347e:	fe 4f       	sbci	r31, 0xFE	; 254
    3480:	60 81       	ld	r22, Z
    3482:	8a 81       	ldd	r24, Y+2	; 0x02
    3484:	48 2f       	mov	r20, r24
    3486:	50 e0       	ldi	r21, 0x00	; 0
    3488:	ca 01       	movw	r24, r20
    348a:	88 0f       	add	r24, r24
    348c:	99 1f       	adc	r25, r25
    348e:	9c 01       	movw	r18, r24
    3490:	22 0f       	add	r18, r18
    3492:	33 1f       	adc	r19, r19
    3494:	22 0f       	add	r18, r18
    3496:	33 1f       	adc	r19, r19
    3498:	22 0f       	add	r18, r18
    349a:	33 1f       	adc	r19, r19
    349c:	82 0f       	add	r24, r18
    349e:	93 1f       	adc	r25, r19
    34a0:	84 0f       	add	r24, r20
    34a2:	95 1f       	adc	r25, r21
    34a4:	fc 01       	movw	r30, r24
    34a6:	e0 57       	subi	r30, 0x70	; 112
    34a8:	fe 4f       	sbci	r31, 0xFE	; 254
    34aa:	90 81       	ld	r25, Z
    34ac:	86 2f       	mov	r24, r22
    34ae:	69 2f       	mov	r22, r25
    34b0:	41 e0       	ldi	r20, 0x01	; 1
    34b2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    34b6:	89 83       	std	Y+1, r24	; 0x01
    34b8:	4d c0       	rjmp	.+154    	; 0x3554 <SSDLT_enuDisableCommon+0x19e>
														 SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin, DIO_u8HIGH);
			}
			else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    34ba:	8a 81       	ldd	r24, Y+2	; 0x02
    34bc:	48 2f       	mov	r20, r24
    34be:	50 e0       	ldi	r21, 0x00	; 0
    34c0:	ca 01       	movw	r24, r20
    34c2:	88 0f       	add	r24, r24
    34c4:	99 1f       	adc	r25, r25
    34c6:	9c 01       	movw	r18, r24
    34c8:	22 0f       	add	r18, r18
    34ca:	33 1f       	adc	r19, r19
    34cc:	22 0f       	add	r18, r18
    34ce:	33 1f       	adc	r19, r19
    34d0:	22 0f       	add	r18, r18
    34d2:	33 1f       	adc	r19, r19
    34d4:	82 0f       	add	r24, r18
    34d6:	93 1f       	adc	r25, r19
    34d8:	84 0f       	add	r24, r20
    34da:	95 1f       	adc	r25, r21
    34dc:	fc 01       	movw	r30, r24
    34de:	ed 56       	subi	r30, 0x6D	; 109
    34e0:	fe 4f       	sbci	r31, 0xFE	; 254
    34e2:	80 81       	ld	r24, Z
    34e4:	88 23       	and	r24, r24
    34e6:	89 f5       	brne	.+98     	; 0x354a <SSDLT_enuDisableCommon+0x194>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port,
    34e8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ea:	48 2f       	mov	r20, r24
    34ec:	50 e0       	ldi	r21, 0x00	; 0
    34ee:	ca 01       	movw	r24, r20
    34f0:	88 0f       	add	r24, r24
    34f2:	99 1f       	adc	r25, r25
    34f4:	9c 01       	movw	r18, r24
    34f6:	22 0f       	add	r18, r18
    34f8:	33 1f       	adc	r19, r19
    34fa:	22 0f       	add	r18, r18
    34fc:	33 1f       	adc	r19, r19
    34fe:	22 0f       	add	r18, r18
    3500:	33 1f       	adc	r19, r19
    3502:	82 0f       	add	r24, r18
    3504:	93 1f       	adc	r25, r19
    3506:	84 0f       	add	r24, r20
    3508:	95 1f       	adc	r25, r21
    350a:	fc 01       	movw	r30, r24
    350c:	e1 57       	subi	r30, 0x71	; 113
    350e:	fe 4f       	sbci	r31, 0xFE	; 254
    3510:	60 81       	ld	r22, Z
    3512:	8a 81       	ldd	r24, Y+2	; 0x02
    3514:	48 2f       	mov	r20, r24
    3516:	50 e0       	ldi	r21, 0x00	; 0
    3518:	ca 01       	movw	r24, r20
    351a:	88 0f       	add	r24, r24
    351c:	99 1f       	adc	r25, r25
    351e:	9c 01       	movw	r18, r24
    3520:	22 0f       	add	r18, r18
    3522:	33 1f       	adc	r19, r19
    3524:	22 0f       	add	r18, r18
    3526:	33 1f       	adc	r19, r19
    3528:	22 0f       	add	r18, r18
    352a:	33 1f       	adc	r19, r19
    352c:	82 0f       	add	r24, r18
    352e:	93 1f       	adc	r25, r19
    3530:	84 0f       	add	r24, r20
    3532:	95 1f       	adc	r25, r21
    3534:	fc 01       	movw	r30, r24
    3536:	e0 57       	subi	r30, 0x70	; 112
    3538:	fe 4f       	sbci	r31, 0xFE	; 254
    353a:	90 81       	ld	r25, Z
    353c:	86 2f       	mov	r24, r22
    353e:	69 2f       	mov	r22, r25
    3540:	40 e0       	ldi	r20, 0x00	; 0
    3542:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3546:	89 83       	std	Y+1, r24	; 0x01
    3548:	05 c0       	rjmp	.+10     	; 0x3554 <SSDLT_enuDisableCommon+0x19e>
														SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin, DIO_u8LOW);
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    354a:	83 e0       	ldi	r24, 0x03	; 3
    354c:	89 83       	std	Y+1, r24	; 0x01
    354e:	02 c0       	rjmp	.+4      	; 0x3554 <SSDLT_enuDisableCommon+0x19e>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    3550:	83 e0       	ldi	r24, 0x03	; 3
    3552:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    3554:	89 81       	ldd	r24, Y+1	; 0x01
}
    3556:	0f 90       	pop	r0
    3558:	0f 90       	pop	r0
    355a:	cf 91       	pop	r28
    355c:	df 91       	pop	r29
    355e:	08 95       	ret

00003560 <SSDLT_enuEnableDot>:

ES_t SSDLT_enuEnableDot(u8 Copy_u8SegID)
{
    3560:	df 93       	push	r29
    3562:	cf 93       	push	r28
    3564:	00 d0       	rcall	.+0      	; 0x3566 <SSDLT_enuEnableDot+0x6>
    3566:	cd b7       	in	r28, 0x3d	; 61
    3568:	de b7       	in	r29, 0x3e	; 62
    356a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    356c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8SegID < SEG_NUM)
    356e:	8a 81       	ldd	r24, Y+2	; 0x02
    3570:	82 30       	cpi	r24, 0x02	; 2
    3572:	08 f0       	brcs	.+2      	; 0x3576 <SSDLT_enuEnableDot+0x16>
    3574:	c2 c0       	rjmp	.+388    	; 0x36fa <SSDLT_enuEnableDot+0x19a>
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port != NOT_CONNECTED ||
    3576:	8a 81       	ldd	r24, Y+2	; 0x02
    3578:	48 2f       	mov	r20, r24
    357a:	50 e0       	ldi	r21, 0x00	; 0
    357c:	ca 01       	movw	r24, r20
    357e:	88 0f       	add	r24, r24
    3580:	99 1f       	adc	r25, r25
    3582:	9c 01       	movw	r18, r24
    3584:	22 0f       	add	r18, r18
    3586:	33 1f       	adc	r19, r19
    3588:	22 0f       	add	r18, r18
    358a:	33 1f       	adc	r19, r19
    358c:	22 0f       	add	r18, r18
    358e:	33 1f       	adc	r19, r19
    3590:	82 0f       	add	r24, r18
    3592:	93 1f       	adc	r25, r19
    3594:	84 0f       	add	r24, r20
    3596:	95 1f       	adc	r25, r21
    3598:	fc 01       	movw	r30, r24
    359a:	ef 56       	subi	r30, 0x6F	; 111
    359c:	fe 4f       	sbci	r31, 0xFE	; 254
    359e:	80 81       	ld	r24, Z
    35a0:	82 30       	cpi	r24, 0x02	; 2
    35a2:	c1 f4       	brne	.+48     	; 0x35d4 <SSDLT_enuEnableDot+0x74>
    35a4:	8a 81       	ldd	r24, Y+2	; 0x02
    35a6:	48 2f       	mov	r20, r24
    35a8:	50 e0       	ldi	r21, 0x00	; 0
    35aa:	ca 01       	movw	r24, r20
    35ac:	88 0f       	add	r24, r24
    35ae:	99 1f       	adc	r25, r25
    35b0:	9c 01       	movw	r18, r24
    35b2:	22 0f       	add	r18, r18
    35b4:	33 1f       	adc	r19, r19
    35b6:	22 0f       	add	r18, r18
    35b8:	33 1f       	adc	r19, r19
    35ba:	22 0f       	add	r18, r18
    35bc:	33 1f       	adc	r19, r19
    35be:	82 0f       	add	r24, r18
    35c0:	93 1f       	adc	r25, r19
    35c2:	84 0f       	add	r24, r20
    35c4:	95 1f       	adc	r25, r21
    35c6:	fc 01       	movw	r30, r24
    35c8:	ee 56       	subi	r30, 0x6E	; 110
    35ca:	fe 4f       	sbci	r31, 0xFE	; 254
    35cc:	80 81       	ld	r24, Z
    35ce:	82 30       	cpi	r24, 0x02	; 2
    35d0:	09 f4       	brne	.+2      	; 0x35d4 <SSDLT_enuEnableDot+0x74>
    35d2:	95 c0       	rjmp	.+298    	; 0x36fe <SSDLT_enuEnableDot+0x19e>
				SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin != NOT_CONNECTED)
		{
			if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    35d4:	8a 81       	ldd	r24, Y+2	; 0x02
    35d6:	48 2f       	mov	r20, r24
    35d8:	50 e0       	ldi	r21, 0x00	; 0
    35da:	ca 01       	movw	r24, r20
    35dc:	88 0f       	add	r24, r24
    35de:	99 1f       	adc	r25, r25
    35e0:	9c 01       	movw	r18, r24
    35e2:	22 0f       	add	r18, r18
    35e4:	33 1f       	adc	r19, r19
    35e6:	22 0f       	add	r18, r18
    35e8:	33 1f       	adc	r19, r19
    35ea:	22 0f       	add	r18, r18
    35ec:	33 1f       	adc	r19, r19
    35ee:	82 0f       	add	r24, r18
    35f0:	93 1f       	adc	r25, r19
    35f2:	84 0f       	add	r24, r20
    35f4:	95 1f       	adc	r25, r21
    35f6:	fc 01       	movw	r30, r24
    35f8:	ed 56       	subi	r30, 0x6D	; 109
    35fa:	fe 4f       	sbci	r31, 0xFE	; 254
    35fc:	80 81       	ld	r24, Z
    35fe:	81 30       	cpi	r24, 0x01	; 1
    3600:	89 f5       	brne	.+98     	; 0x3664 <SSDLT_enuEnableDot+0x104>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port,
    3602:	8a 81       	ldd	r24, Y+2	; 0x02
    3604:	48 2f       	mov	r20, r24
    3606:	50 e0       	ldi	r21, 0x00	; 0
    3608:	ca 01       	movw	r24, r20
    360a:	88 0f       	add	r24, r24
    360c:	99 1f       	adc	r25, r25
    360e:	9c 01       	movw	r18, r24
    3610:	22 0f       	add	r18, r18
    3612:	33 1f       	adc	r19, r19
    3614:	22 0f       	add	r18, r18
    3616:	33 1f       	adc	r19, r19
    3618:	22 0f       	add	r18, r18
    361a:	33 1f       	adc	r19, r19
    361c:	82 0f       	add	r24, r18
    361e:	93 1f       	adc	r25, r19
    3620:	84 0f       	add	r24, r20
    3622:	95 1f       	adc	r25, r21
    3624:	fc 01       	movw	r30, r24
    3626:	ef 56       	subi	r30, 0x6F	; 111
    3628:	fe 4f       	sbci	r31, 0xFE	; 254
    362a:	60 81       	ld	r22, Z
    362c:	8a 81       	ldd	r24, Y+2	; 0x02
    362e:	48 2f       	mov	r20, r24
    3630:	50 e0       	ldi	r21, 0x00	; 0
    3632:	ca 01       	movw	r24, r20
    3634:	88 0f       	add	r24, r24
    3636:	99 1f       	adc	r25, r25
    3638:	9c 01       	movw	r18, r24
    363a:	22 0f       	add	r18, r18
    363c:	33 1f       	adc	r19, r19
    363e:	22 0f       	add	r18, r18
    3640:	33 1f       	adc	r19, r19
    3642:	22 0f       	add	r18, r18
    3644:	33 1f       	adc	r19, r19
    3646:	82 0f       	add	r24, r18
    3648:	93 1f       	adc	r25, r19
    364a:	84 0f       	add	r24, r20
    364c:	95 1f       	adc	r25, r21
    364e:	fc 01       	movw	r30, r24
    3650:	ee 56       	subi	r30, 0x6E	; 110
    3652:	fe 4f       	sbci	r31, 0xFE	; 254
    3654:	90 81       	ld	r25, Z
    3656:	86 2f       	mov	r24, r22
    3658:	69 2f       	mov	r22, r25
    365a:	41 e0       	ldi	r20, 0x01	; 1
    365c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3660:	89 83       	std	Y+1, r24	; 0x01
    3662:	4d c0       	rjmp	.+154    	; 0x36fe <SSDLT_enuEnableDot+0x19e>
														 SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin, DIO_u8HIGH);
			}
			else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    3664:	8a 81       	ldd	r24, Y+2	; 0x02
    3666:	48 2f       	mov	r20, r24
    3668:	50 e0       	ldi	r21, 0x00	; 0
    366a:	ca 01       	movw	r24, r20
    366c:	88 0f       	add	r24, r24
    366e:	99 1f       	adc	r25, r25
    3670:	9c 01       	movw	r18, r24
    3672:	22 0f       	add	r18, r18
    3674:	33 1f       	adc	r19, r19
    3676:	22 0f       	add	r18, r18
    3678:	33 1f       	adc	r19, r19
    367a:	22 0f       	add	r18, r18
    367c:	33 1f       	adc	r19, r19
    367e:	82 0f       	add	r24, r18
    3680:	93 1f       	adc	r25, r19
    3682:	84 0f       	add	r24, r20
    3684:	95 1f       	adc	r25, r21
    3686:	fc 01       	movw	r30, r24
    3688:	ed 56       	subi	r30, 0x6D	; 109
    368a:	fe 4f       	sbci	r31, 0xFE	; 254
    368c:	80 81       	ld	r24, Z
    368e:	88 23       	and	r24, r24
    3690:	89 f5       	brne	.+98     	; 0x36f4 <SSDLT_enuEnableDot+0x194>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port,
    3692:	8a 81       	ldd	r24, Y+2	; 0x02
    3694:	48 2f       	mov	r20, r24
    3696:	50 e0       	ldi	r21, 0x00	; 0
    3698:	ca 01       	movw	r24, r20
    369a:	88 0f       	add	r24, r24
    369c:	99 1f       	adc	r25, r25
    369e:	9c 01       	movw	r18, r24
    36a0:	22 0f       	add	r18, r18
    36a2:	33 1f       	adc	r19, r19
    36a4:	22 0f       	add	r18, r18
    36a6:	33 1f       	adc	r19, r19
    36a8:	22 0f       	add	r18, r18
    36aa:	33 1f       	adc	r19, r19
    36ac:	82 0f       	add	r24, r18
    36ae:	93 1f       	adc	r25, r19
    36b0:	84 0f       	add	r24, r20
    36b2:	95 1f       	adc	r25, r21
    36b4:	fc 01       	movw	r30, r24
    36b6:	ef 56       	subi	r30, 0x6F	; 111
    36b8:	fe 4f       	sbci	r31, 0xFE	; 254
    36ba:	60 81       	ld	r22, Z
    36bc:	8a 81       	ldd	r24, Y+2	; 0x02
    36be:	48 2f       	mov	r20, r24
    36c0:	50 e0       	ldi	r21, 0x00	; 0
    36c2:	ca 01       	movw	r24, r20
    36c4:	88 0f       	add	r24, r24
    36c6:	99 1f       	adc	r25, r25
    36c8:	9c 01       	movw	r18, r24
    36ca:	22 0f       	add	r18, r18
    36cc:	33 1f       	adc	r19, r19
    36ce:	22 0f       	add	r18, r18
    36d0:	33 1f       	adc	r19, r19
    36d2:	22 0f       	add	r18, r18
    36d4:	33 1f       	adc	r19, r19
    36d6:	82 0f       	add	r24, r18
    36d8:	93 1f       	adc	r25, r19
    36da:	84 0f       	add	r24, r20
    36dc:	95 1f       	adc	r25, r21
    36de:	fc 01       	movw	r30, r24
    36e0:	ee 56       	subi	r30, 0x6E	; 110
    36e2:	fe 4f       	sbci	r31, 0xFE	; 254
    36e4:	90 81       	ld	r25, Z
    36e6:	86 2f       	mov	r24, r22
    36e8:	69 2f       	mov	r22, r25
    36ea:	40 e0       	ldi	r20, 0x00	; 0
    36ec:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    36f0:	89 83       	std	Y+1, r24	; 0x01
    36f2:	05 c0       	rjmp	.+10     	; 0x36fe <SSDLT_enuEnableDot+0x19e>
														SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin, DIO_u8LOW);
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    36f4:	83 e0       	ldi	r24, 0x03	; 3
    36f6:	89 83       	std	Y+1, r24	; 0x01
    36f8:	02 c0       	rjmp	.+4      	; 0x36fe <SSDLT_enuEnableDot+0x19e>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    36fa:	83 e0       	ldi	r24, 0x03	; 3
    36fc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    36fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3700:	0f 90       	pop	r0
    3702:	0f 90       	pop	r0
    3704:	cf 91       	pop	r28
    3706:	df 91       	pop	r29
    3708:	08 95       	ret

0000370a <SSDLT_enuDisableDot>:

ES_t SSDLT_enuDisableDot(u8 Copy_u8SegID)
{
    370a:	df 93       	push	r29
    370c:	cf 93       	push	r28
    370e:	00 d0       	rcall	.+0      	; 0x3710 <SSDLT_enuDisableDot+0x6>
    3710:	0f 92       	push	r0
    3712:	cd b7       	in	r28, 0x3d	; 61
    3714:	de b7       	in	r29, 0x3e	; 62
    3716:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3718:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8SegID < SEG_NUM)
    371a:	8a 81       	ldd	r24, Y+2	; 0x02
    371c:	82 30       	cpi	r24, 0x02	; 2
    371e:	08 f0       	brcs	.+2      	; 0x3722 <SSDLT_enuDisableDot+0x18>
    3720:	c5 c0       	rjmp	.+394    	; 0x38ac <SSDLT_enuDisableDot+0x1a2>
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port != NOT_CONNECTED ||
    3722:	8a 81       	ldd	r24, Y+2	; 0x02
    3724:	48 2f       	mov	r20, r24
    3726:	50 e0       	ldi	r21, 0x00	; 0
    3728:	ca 01       	movw	r24, r20
    372a:	88 0f       	add	r24, r24
    372c:	99 1f       	adc	r25, r25
    372e:	9c 01       	movw	r18, r24
    3730:	22 0f       	add	r18, r18
    3732:	33 1f       	adc	r19, r19
    3734:	22 0f       	add	r18, r18
    3736:	33 1f       	adc	r19, r19
    3738:	22 0f       	add	r18, r18
    373a:	33 1f       	adc	r19, r19
    373c:	82 0f       	add	r24, r18
    373e:	93 1f       	adc	r25, r19
    3740:	84 0f       	add	r24, r20
    3742:	95 1f       	adc	r25, r21
    3744:	fc 01       	movw	r30, r24
    3746:	ef 56       	subi	r30, 0x6F	; 111
    3748:	fe 4f       	sbci	r31, 0xFE	; 254
    374a:	80 81       	ld	r24, Z
    374c:	82 30       	cpi	r24, 0x02	; 2
    374e:	c1 f4       	brne	.+48     	; 0x3780 <SSDLT_enuDisableDot+0x76>
    3750:	8a 81       	ldd	r24, Y+2	; 0x02
    3752:	48 2f       	mov	r20, r24
    3754:	50 e0       	ldi	r21, 0x00	; 0
    3756:	ca 01       	movw	r24, r20
    3758:	88 0f       	add	r24, r24
    375a:	99 1f       	adc	r25, r25
    375c:	9c 01       	movw	r18, r24
    375e:	22 0f       	add	r18, r18
    3760:	33 1f       	adc	r19, r19
    3762:	22 0f       	add	r18, r18
    3764:	33 1f       	adc	r19, r19
    3766:	22 0f       	add	r18, r18
    3768:	33 1f       	adc	r19, r19
    376a:	82 0f       	add	r24, r18
    376c:	93 1f       	adc	r25, r19
    376e:	84 0f       	add	r24, r20
    3770:	95 1f       	adc	r25, r21
    3772:	fc 01       	movw	r30, r24
    3774:	ee 56       	subi	r30, 0x6E	; 110
    3776:	fe 4f       	sbci	r31, 0xFE	; 254
    3778:	80 81       	ld	r24, Z
    377a:	82 30       	cpi	r24, 0x02	; 2
    377c:	09 f4       	brne	.+2      	; 0x3780 <SSDLT_enuDisableDot+0x76>
    377e:	93 c0       	rjmp	.+294    	; 0x38a6 <SSDLT_enuDisableDot+0x19c>
				SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin != NOT_CONNECTED)
		{
			if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    3780:	8a 81       	ldd	r24, Y+2	; 0x02
    3782:	48 2f       	mov	r20, r24
    3784:	50 e0       	ldi	r21, 0x00	; 0
    3786:	ca 01       	movw	r24, r20
    3788:	88 0f       	add	r24, r24
    378a:	99 1f       	adc	r25, r25
    378c:	9c 01       	movw	r18, r24
    378e:	22 0f       	add	r18, r18
    3790:	33 1f       	adc	r19, r19
    3792:	22 0f       	add	r18, r18
    3794:	33 1f       	adc	r19, r19
    3796:	22 0f       	add	r18, r18
    3798:	33 1f       	adc	r19, r19
    379a:	82 0f       	add	r24, r18
    379c:	93 1f       	adc	r25, r19
    379e:	84 0f       	add	r24, r20
    37a0:	95 1f       	adc	r25, r21
    37a2:	fc 01       	movw	r30, r24
    37a4:	ed 56       	subi	r30, 0x6D	; 109
    37a6:	fe 4f       	sbci	r31, 0xFE	; 254
    37a8:	80 81       	ld	r24, Z
    37aa:	81 30       	cpi	r24, 0x01	; 1
    37ac:	89 f5       	brne	.+98     	; 0x3810 <SSDLT_enuDisableDot+0x106>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port,
    37ae:	8a 81       	ldd	r24, Y+2	; 0x02
    37b0:	48 2f       	mov	r20, r24
    37b2:	50 e0       	ldi	r21, 0x00	; 0
    37b4:	ca 01       	movw	r24, r20
    37b6:	88 0f       	add	r24, r24
    37b8:	99 1f       	adc	r25, r25
    37ba:	9c 01       	movw	r18, r24
    37bc:	22 0f       	add	r18, r18
    37be:	33 1f       	adc	r19, r19
    37c0:	22 0f       	add	r18, r18
    37c2:	33 1f       	adc	r19, r19
    37c4:	22 0f       	add	r18, r18
    37c6:	33 1f       	adc	r19, r19
    37c8:	82 0f       	add	r24, r18
    37ca:	93 1f       	adc	r25, r19
    37cc:	84 0f       	add	r24, r20
    37ce:	95 1f       	adc	r25, r21
    37d0:	fc 01       	movw	r30, r24
    37d2:	ef 56       	subi	r30, 0x6F	; 111
    37d4:	fe 4f       	sbci	r31, 0xFE	; 254
    37d6:	60 81       	ld	r22, Z
    37d8:	8a 81       	ldd	r24, Y+2	; 0x02
    37da:	48 2f       	mov	r20, r24
    37dc:	50 e0       	ldi	r21, 0x00	; 0
    37de:	ca 01       	movw	r24, r20
    37e0:	88 0f       	add	r24, r24
    37e2:	99 1f       	adc	r25, r25
    37e4:	9c 01       	movw	r18, r24
    37e6:	22 0f       	add	r18, r18
    37e8:	33 1f       	adc	r19, r19
    37ea:	22 0f       	add	r18, r18
    37ec:	33 1f       	adc	r19, r19
    37ee:	22 0f       	add	r18, r18
    37f0:	33 1f       	adc	r19, r19
    37f2:	82 0f       	add	r24, r18
    37f4:	93 1f       	adc	r25, r19
    37f6:	84 0f       	add	r24, r20
    37f8:	95 1f       	adc	r25, r21
    37fa:	fc 01       	movw	r30, r24
    37fc:	ee 56       	subi	r30, 0x6E	; 110
    37fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3800:	90 81       	ld	r25, Z
    3802:	86 2f       	mov	r24, r22
    3804:	69 2f       	mov	r22, r25
    3806:	40 e0       	ldi	r20, 0x00	; 0
    3808:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    380c:	89 83       	std	Y+1, r24	; 0x01
    380e:	4b c0       	rjmp	.+150    	; 0x38a6 <SSDLT_enuDisableDot+0x19c>
														 SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin, DIO_u8LOW);
			}
			else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    3810:	8a 81       	ldd	r24, Y+2	; 0x02
    3812:	48 2f       	mov	r20, r24
    3814:	50 e0       	ldi	r21, 0x00	; 0
    3816:	ca 01       	movw	r24, r20
    3818:	88 0f       	add	r24, r24
    381a:	99 1f       	adc	r25, r25
    381c:	9c 01       	movw	r18, r24
    381e:	22 0f       	add	r18, r18
    3820:	33 1f       	adc	r19, r19
    3822:	22 0f       	add	r18, r18
    3824:	33 1f       	adc	r19, r19
    3826:	22 0f       	add	r18, r18
    3828:	33 1f       	adc	r19, r19
    382a:	82 0f       	add	r24, r18
    382c:	93 1f       	adc	r25, r19
    382e:	84 0f       	add	r24, r20
    3830:	95 1f       	adc	r25, r21
    3832:	fc 01       	movw	r30, r24
    3834:	ed 56       	subi	r30, 0x6D	; 109
    3836:	fe 4f       	sbci	r31, 0xFE	; 254
    3838:	80 81       	ld	r24, Z
    383a:	88 23       	and	r24, r24
    383c:	89 f5       	brne	.+98     	; 0x38a0 <SSDLT_enuDisableDot+0x196>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port,
    383e:	8a 81       	ldd	r24, Y+2	; 0x02
    3840:	48 2f       	mov	r20, r24
    3842:	50 e0       	ldi	r21, 0x00	; 0
    3844:	ca 01       	movw	r24, r20
    3846:	88 0f       	add	r24, r24
    3848:	99 1f       	adc	r25, r25
    384a:	9c 01       	movw	r18, r24
    384c:	22 0f       	add	r18, r18
    384e:	33 1f       	adc	r19, r19
    3850:	22 0f       	add	r18, r18
    3852:	33 1f       	adc	r19, r19
    3854:	22 0f       	add	r18, r18
    3856:	33 1f       	adc	r19, r19
    3858:	82 0f       	add	r24, r18
    385a:	93 1f       	adc	r25, r19
    385c:	84 0f       	add	r24, r20
    385e:	95 1f       	adc	r25, r21
    3860:	fc 01       	movw	r30, r24
    3862:	ef 56       	subi	r30, 0x6F	; 111
    3864:	fe 4f       	sbci	r31, 0xFE	; 254
    3866:	60 81       	ld	r22, Z
    3868:	8a 81       	ldd	r24, Y+2	; 0x02
    386a:	48 2f       	mov	r20, r24
    386c:	50 e0       	ldi	r21, 0x00	; 0
    386e:	ca 01       	movw	r24, r20
    3870:	88 0f       	add	r24, r24
    3872:	99 1f       	adc	r25, r25
    3874:	9c 01       	movw	r18, r24
    3876:	22 0f       	add	r18, r18
    3878:	33 1f       	adc	r19, r19
    387a:	22 0f       	add	r18, r18
    387c:	33 1f       	adc	r19, r19
    387e:	22 0f       	add	r18, r18
    3880:	33 1f       	adc	r19, r19
    3882:	82 0f       	add	r24, r18
    3884:	93 1f       	adc	r25, r19
    3886:	84 0f       	add	r24, r20
    3888:	95 1f       	adc	r25, r21
    388a:	fc 01       	movw	r30, r24
    388c:	ee 56       	subi	r30, 0x6E	; 110
    388e:	fe 4f       	sbci	r31, 0xFE	; 254
    3890:	90 81       	ld	r25, Z
    3892:	86 2f       	mov	r24, r22
    3894:	69 2f       	mov	r22, r25
    3896:	41 e0       	ldi	r20, 0x01	; 1
    3898:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    389c:	89 83       	std	Y+1, r24	; 0x01
    389e:	03 c0       	rjmp	.+6      	; 0x38a6 <SSDLT_enuDisableDot+0x19c>
														SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin, DIO_u8HIGH);
			}
			else
			{
				return ES_OUT_OF_RANGE;
    38a0:	83 e0       	ldi	r24, 0x03	; 3
    38a2:	8b 83       	std	Y+3, r24	; 0x03
    38a4:	05 c0       	rjmp	.+10     	; 0x38b0 <SSDLT_enuDisableDot+0x1a6>
	}
	else
	{
		return ES_OUT_OF_RANGE;
	}
	return Local_enuErrorState;
    38a6:	89 81       	ldd	r24, Y+1	; 0x01
    38a8:	8b 83       	std	Y+3, r24	; 0x03
    38aa:	02 c0       	rjmp	.+4      	; 0x38b0 <SSDLT_enuDisableDot+0x1a6>
			}
		}
	}
	else
	{
		return ES_OUT_OF_RANGE;
    38ac:	83 e0       	ldi	r24, 0x03	; 3
    38ae:	8b 83       	std	Y+3, r24	; 0x03
    38b0:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return Local_enuErrorState;
}
    38b2:	0f 90       	pop	r0
    38b4:	0f 90       	pop	r0
    38b6:	0f 90       	pop	r0
    38b8:	cf 91       	pop	r28
    38ba:	df 91       	pop	r29
    38bc:	08 95       	ret

000038be <SSDLT_enuClearDisplay>:

ES_t SSDLT_enuClearDisplay(u8 Copy_u8SegID)
{
    38be:	ef 92       	push	r14
    38c0:	ff 92       	push	r15
    38c2:	0f 93       	push	r16
    38c4:	1f 93       	push	r17
    38c6:	df 93       	push	r29
    38c8:	cf 93       	push	r28
    38ca:	cd b7       	in	r28, 0x3d	; 61
    38cc:	de b7       	in	r29, 0x3e	; 62
    38ce:	29 97       	sbiw	r28, 0x09	; 9
    38d0:	0f b6       	in	r0, 0x3f	; 63
    38d2:	f8 94       	cli
    38d4:	de bf       	out	0x3e, r29	; 62
    38d6:	0f be       	out	0x3f, r0	; 63
    38d8:	cd bf       	out	0x3d, r28	; 61
    38da:	88 87       	std	Y+8, r24	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    38dc:	1f 82       	std	Y+7, r1	; 0x07

	u8 Local_u8Iterator = 0;
    38de:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8LastBit = 0;
    38e0:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Check = 0;
    38e2:	19 82       	std	Y+1, r1	; 0x01
    38e4:	1a 82       	std	Y+2, r1	; 0x02
    38e6:	1b 82       	std	Y+3, r1	; 0x03
    38e8:	1c 82       	std	Y+4, r1	; 0x04

	if(Copy_u8SegID < SEG_NUM)
    38ea:	88 85       	ldd	r24, Y+8	; 0x08
    38ec:	82 30       	cpi	r24, 0x02	; 2
    38ee:	08 f0       	brcs	.+2      	; 0x38f2 <SSDLT_enuClearDisplay+0x34>
    38f0:	33 c4       	rjmp	.+2150   	; 0x4158 <SSDLT_enuClearDisplay+0x89a>
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    38f2:	88 85       	ldd	r24, Y+8	; 0x08
    38f4:	48 2f       	mov	r20, r24
    38f6:	50 e0       	ldi	r21, 0x00	; 0
    38f8:	ca 01       	movw	r24, r20
    38fa:	88 0f       	add	r24, r24
    38fc:	99 1f       	adc	r25, r25
    38fe:	9c 01       	movw	r18, r24
    3900:	22 0f       	add	r18, r18
    3902:	33 1f       	adc	r19, r19
    3904:	22 0f       	add	r18, r18
    3906:	33 1f       	adc	r19, r19
    3908:	22 0f       	add	r18, r18
    390a:	33 1f       	adc	r19, r19
    390c:	82 0f       	add	r24, r18
    390e:	93 1f       	adc	r25, r19
    3910:	84 0f       	add	r24, r20
    3912:	95 1f       	adc	r25, r21
    3914:	fc 01       	movw	r30, r24
    3916:	ed 56       	subi	r30, 0x6D	; 109
    3918:	fe 4f       	sbci	r31, 0xFE	; 254
    391a:	80 81       	ld	r24, Z
    391c:	81 30       	cpi	r24, 0x01	; 1
    391e:	09 f0       	breq	.+2      	; 0x3922 <SSDLT_enuClearDisplay+0x64>
    3920:	f4 c1       	rjmp	.+1000   	; 0x3d0a <SSDLT_enuClearDisplay+0x44c>
		{
			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APort,
    3922:	88 85       	ldd	r24, Y+8	; 0x08
    3924:	48 2f       	mov	r20, r24
    3926:	50 e0       	ldi	r21, 0x00	; 0
    3928:	ca 01       	movw	r24, r20
    392a:	88 0f       	add	r24, r24
    392c:	99 1f       	adc	r25, r25
    392e:	9c 01       	movw	r18, r24
    3930:	22 0f       	add	r18, r18
    3932:	33 1f       	adc	r19, r19
    3934:	22 0f       	add	r18, r18
    3936:	33 1f       	adc	r19, r19
    3938:	22 0f       	add	r18, r18
    393a:	33 1f       	adc	r19, r19
    393c:	82 0f       	add	r24, r18
    393e:	93 1f       	adc	r25, r19
    3940:	84 0f       	add	r24, r20
    3942:	95 1f       	adc	r25, r21
    3944:	fc 01       	movw	r30, r24
    3946:	ef 57       	subi	r30, 0x7F	; 127
    3948:	fe 4f       	sbci	r31, 0xFE	; 254
    394a:	60 81       	ld	r22, Z
    394c:	88 85       	ldd	r24, Y+8	; 0x08
    394e:	48 2f       	mov	r20, r24
    3950:	50 e0       	ldi	r21, 0x00	; 0
    3952:	ca 01       	movw	r24, r20
    3954:	88 0f       	add	r24, r24
    3956:	99 1f       	adc	r25, r25
    3958:	9c 01       	movw	r18, r24
    395a:	22 0f       	add	r18, r18
    395c:	33 1f       	adc	r19, r19
    395e:	22 0f       	add	r18, r18
    3960:	33 1f       	adc	r19, r19
    3962:	22 0f       	add	r18, r18
    3964:	33 1f       	adc	r19, r19
    3966:	82 0f       	add	r24, r18
    3968:	93 1f       	adc	r25, r19
    396a:	84 0f       	add	r24, r20
    396c:	95 1f       	adc	r25, r21
    396e:	fc 01       	movw	r30, r24
    3970:	ee 57       	subi	r30, 0x7E	; 126
    3972:	fe 4f       	sbci	r31, 0xFE	; 254
    3974:	90 81       	ld	r25, Z
    3976:	86 2f       	mov	r24, r22
    3978:	69 2f       	mov	r22, r25
    397a:	40 e0       	ldi	r20, 0x00	; 0
    397c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3980:	28 2f       	mov	r18, r24
    3982:	30 e0       	ldi	r19, 0x00	; 0
    3984:	40 e0       	ldi	r20, 0x00	; 0
    3986:	50 e0       	ldi	r21, 0x00	; 0
    3988:	89 81       	ldd	r24, Y+1	; 0x01
    398a:	9a 81       	ldd	r25, Y+2	; 0x02
    398c:	ab 81       	ldd	r26, Y+3	; 0x03
    398e:	bc 81       	ldd	r27, Y+4	; 0x04
    3990:	82 2b       	or	r24, r18
    3992:	93 2b       	or	r25, r19
    3994:	a4 2b       	or	r26, r20
    3996:	b5 2b       	or	r27, r21
    3998:	89 83       	std	Y+1, r24	; 0x01
    399a:	9a 83       	std	Y+2, r25	; 0x02
    399c:	ab 83       	std	Y+3, r26	; 0x03
    399e:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	      SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APin,
											   	  DIO_u8LOW) << 0);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPort,
    39a0:	88 85       	ldd	r24, Y+8	; 0x08
    39a2:	48 2f       	mov	r20, r24
    39a4:	50 e0       	ldi	r21, 0x00	; 0
    39a6:	ca 01       	movw	r24, r20
    39a8:	88 0f       	add	r24, r24
    39aa:	99 1f       	adc	r25, r25
    39ac:	9c 01       	movw	r18, r24
    39ae:	22 0f       	add	r18, r18
    39b0:	33 1f       	adc	r19, r19
    39b2:	22 0f       	add	r18, r18
    39b4:	33 1f       	adc	r19, r19
    39b6:	22 0f       	add	r18, r18
    39b8:	33 1f       	adc	r19, r19
    39ba:	82 0f       	add	r24, r18
    39bc:	93 1f       	adc	r25, r19
    39be:	84 0f       	add	r24, r20
    39c0:	95 1f       	adc	r25, r21
    39c2:	fc 01       	movw	r30, r24
    39c4:	ed 57       	subi	r30, 0x7D	; 125
    39c6:	fe 4f       	sbci	r31, 0xFE	; 254
    39c8:	60 81       	ld	r22, Z
    39ca:	88 85       	ldd	r24, Y+8	; 0x08
    39cc:	48 2f       	mov	r20, r24
    39ce:	50 e0       	ldi	r21, 0x00	; 0
    39d0:	ca 01       	movw	r24, r20
    39d2:	88 0f       	add	r24, r24
    39d4:	99 1f       	adc	r25, r25
    39d6:	9c 01       	movw	r18, r24
    39d8:	22 0f       	add	r18, r18
    39da:	33 1f       	adc	r19, r19
    39dc:	22 0f       	add	r18, r18
    39de:	33 1f       	adc	r19, r19
    39e0:	22 0f       	add	r18, r18
    39e2:	33 1f       	adc	r19, r19
    39e4:	82 0f       	add	r24, r18
    39e6:	93 1f       	adc	r25, r19
    39e8:	84 0f       	add	r24, r20
    39ea:	95 1f       	adc	r25, r21
    39ec:	fc 01       	movw	r30, r24
    39ee:	ec 57       	subi	r30, 0x7C	; 124
    39f0:	fe 4f       	sbci	r31, 0xFE	; 254
    39f2:	90 81       	ld	r25, Z
    39f4:	86 2f       	mov	r24, r22
    39f6:	69 2f       	mov	r22, r25
    39f8:	40 e0       	ldi	r20, 0x00	; 0
    39fa:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    39fe:	88 2f       	mov	r24, r24
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	88 0f       	add	r24, r24
    3a04:	99 1f       	adc	r25, r25
    3a06:	88 0f       	add	r24, r24
    3a08:	99 1f       	adc	r25, r25
    3a0a:	88 0f       	add	r24, r24
    3a0c:	99 1f       	adc	r25, r25
    3a0e:	9c 01       	movw	r18, r24
    3a10:	44 27       	eor	r20, r20
    3a12:	37 fd       	sbrc	r19, 7
    3a14:	40 95       	com	r20
    3a16:	54 2f       	mov	r21, r20
    3a18:	89 81       	ldd	r24, Y+1	; 0x01
    3a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a1c:	ab 81       	ldd	r26, Y+3	; 0x03
    3a1e:	bc 81       	ldd	r27, Y+4	; 0x04
    3a20:	82 2b       	or	r24, r18
    3a22:	93 2b       	or	r25, r19
    3a24:	a4 2b       	or	r26, r20
    3a26:	b5 2b       	or	r27, r21
    3a28:	89 83       	std	Y+1, r24	; 0x01
    3a2a:	9a 83       	std	Y+2, r25	; 0x02
    3a2c:	ab 83       	std	Y+3, r26	; 0x03
    3a2e:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPin,
												  DIO_u8LOW) << 3);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPort,
    3a30:	88 85       	ldd	r24, Y+8	; 0x08
    3a32:	48 2f       	mov	r20, r24
    3a34:	50 e0       	ldi	r21, 0x00	; 0
    3a36:	ca 01       	movw	r24, r20
    3a38:	88 0f       	add	r24, r24
    3a3a:	99 1f       	adc	r25, r25
    3a3c:	9c 01       	movw	r18, r24
    3a3e:	22 0f       	add	r18, r18
    3a40:	33 1f       	adc	r19, r19
    3a42:	22 0f       	add	r18, r18
    3a44:	33 1f       	adc	r19, r19
    3a46:	22 0f       	add	r18, r18
    3a48:	33 1f       	adc	r19, r19
    3a4a:	82 0f       	add	r24, r18
    3a4c:	93 1f       	adc	r25, r19
    3a4e:	84 0f       	add	r24, r20
    3a50:	95 1f       	adc	r25, r21
    3a52:	fc 01       	movw	r30, r24
    3a54:	eb 57       	subi	r30, 0x7B	; 123
    3a56:	fe 4f       	sbci	r31, 0xFE	; 254
    3a58:	60 81       	ld	r22, Z
    3a5a:	88 85       	ldd	r24, Y+8	; 0x08
    3a5c:	48 2f       	mov	r20, r24
    3a5e:	50 e0       	ldi	r21, 0x00	; 0
    3a60:	ca 01       	movw	r24, r20
    3a62:	88 0f       	add	r24, r24
    3a64:	99 1f       	adc	r25, r25
    3a66:	9c 01       	movw	r18, r24
    3a68:	22 0f       	add	r18, r18
    3a6a:	33 1f       	adc	r19, r19
    3a6c:	22 0f       	add	r18, r18
    3a6e:	33 1f       	adc	r19, r19
    3a70:	22 0f       	add	r18, r18
    3a72:	33 1f       	adc	r19, r19
    3a74:	82 0f       	add	r24, r18
    3a76:	93 1f       	adc	r25, r19
    3a78:	84 0f       	add	r24, r20
    3a7a:	95 1f       	adc	r25, r21
    3a7c:	fc 01       	movw	r30, r24
    3a7e:	ea 57       	subi	r30, 0x7A	; 122
    3a80:	fe 4f       	sbci	r31, 0xFE	; 254
    3a82:	90 81       	ld	r25, Z
    3a84:	86 2f       	mov	r24, r22
    3a86:	69 2f       	mov	r22, r25
    3a88:	40 e0       	ldi	r20, 0x00	; 0
    3a8a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3a8e:	88 2f       	mov	r24, r24
    3a90:	90 e0       	ldi	r25, 0x00	; 0
    3a92:	00 24       	eor	r0, r0
    3a94:	96 95       	lsr	r25
    3a96:	87 95       	ror	r24
    3a98:	07 94       	ror	r0
    3a9a:	96 95       	lsr	r25
    3a9c:	87 95       	ror	r24
    3a9e:	07 94       	ror	r0
    3aa0:	98 2f       	mov	r25, r24
    3aa2:	80 2d       	mov	r24, r0
    3aa4:	9c 01       	movw	r18, r24
    3aa6:	44 27       	eor	r20, r20
    3aa8:	37 fd       	sbrc	r19, 7
    3aaa:	40 95       	com	r20
    3aac:	54 2f       	mov	r21, r20
    3aae:	89 81       	ldd	r24, Y+1	; 0x01
    3ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ab2:	ab 81       	ldd	r26, Y+3	; 0x03
    3ab4:	bc 81       	ldd	r27, Y+4	; 0x04
    3ab6:	82 2b       	or	r24, r18
    3ab8:	93 2b       	or	r25, r19
    3aba:	a4 2b       	or	r26, r20
    3abc:	b5 2b       	or	r27, r21
    3abe:	89 83       	std	Y+1, r24	; 0x01
    3ac0:	9a 83       	std	Y+2, r25	; 0x02
    3ac2:	ab 83       	std	Y+3, r26	; 0x03
    3ac4:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPin,
												  DIO_u8LOW) << 6);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPort,
    3ac6:	88 85       	ldd	r24, Y+8	; 0x08
    3ac8:	48 2f       	mov	r20, r24
    3aca:	50 e0       	ldi	r21, 0x00	; 0
    3acc:	ca 01       	movw	r24, r20
    3ace:	88 0f       	add	r24, r24
    3ad0:	99 1f       	adc	r25, r25
    3ad2:	9c 01       	movw	r18, r24
    3ad4:	22 0f       	add	r18, r18
    3ad6:	33 1f       	adc	r19, r19
    3ad8:	22 0f       	add	r18, r18
    3ada:	33 1f       	adc	r19, r19
    3adc:	22 0f       	add	r18, r18
    3ade:	33 1f       	adc	r19, r19
    3ae0:	82 0f       	add	r24, r18
    3ae2:	93 1f       	adc	r25, r19
    3ae4:	84 0f       	add	r24, r20
    3ae6:	95 1f       	adc	r25, r21
    3ae8:	fc 01       	movw	r30, r24
    3aea:	e9 57       	subi	r30, 0x79	; 121
    3aec:	fe 4f       	sbci	r31, 0xFE	; 254
    3aee:	60 81       	ld	r22, Z
    3af0:	88 85       	ldd	r24, Y+8	; 0x08
    3af2:	48 2f       	mov	r20, r24
    3af4:	50 e0       	ldi	r21, 0x00	; 0
    3af6:	ca 01       	movw	r24, r20
    3af8:	88 0f       	add	r24, r24
    3afa:	99 1f       	adc	r25, r25
    3afc:	9c 01       	movw	r18, r24
    3afe:	22 0f       	add	r18, r18
    3b00:	33 1f       	adc	r19, r19
    3b02:	22 0f       	add	r18, r18
    3b04:	33 1f       	adc	r19, r19
    3b06:	22 0f       	add	r18, r18
    3b08:	33 1f       	adc	r19, r19
    3b0a:	82 0f       	add	r24, r18
    3b0c:	93 1f       	adc	r25, r19
    3b0e:	84 0f       	add	r24, r20
    3b10:	95 1f       	adc	r25, r21
    3b12:	fc 01       	movw	r30, r24
    3b14:	e8 57       	subi	r30, 0x78	; 120
    3b16:	fe 4f       	sbci	r31, 0xFE	; 254
    3b18:	90 81       	ld	r25, Z
    3b1a:	86 2f       	mov	r24, r22
    3b1c:	69 2f       	mov	r22, r25
    3b1e:	40 e0       	ldi	r20, 0x00	; 0
    3b20:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3b24:	88 2f       	mov	r24, r24
    3b26:	90 e0       	ldi	r25, 0x00	; 0
    3b28:	98 2f       	mov	r25, r24
    3b2a:	88 27       	eor	r24, r24
    3b2c:	99 0f       	add	r25, r25
    3b2e:	9c 01       	movw	r18, r24
    3b30:	44 27       	eor	r20, r20
    3b32:	37 fd       	sbrc	r19, 7
    3b34:	40 95       	com	r20
    3b36:	54 2f       	mov	r21, r20
    3b38:	89 81       	ldd	r24, Y+1	; 0x01
    3b3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b3c:	ab 81       	ldd	r26, Y+3	; 0x03
    3b3e:	bc 81       	ldd	r27, Y+4	; 0x04
    3b40:	82 2b       	or	r24, r18
    3b42:	93 2b       	or	r25, r19
    3b44:	a4 2b       	or	r26, r20
    3b46:	b5 2b       	or	r27, r21
    3b48:	89 83       	std	Y+1, r24	; 0x01
    3b4a:	9a 83       	std	Y+2, r25	; 0x02
    3b4c:	ab 83       	std	Y+3, r26	; 0x03
    3b4e:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPin,
												  DIO_u8LOW) << 9) ;

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPort,
    3b50:	88 85       	ldd	r24, Y+8	; 0x08
    3b52:	48 2f       	mov	r20, r24
    3b54:	50 e0       	ldi	r21, 0x00	; 0
    3b56:	ca 01       	movw	r24, r20
    3b58:	88 0f       	add	r24, r24
    3b5a:	99 1f       	adc	r25, r25
    3b5c:	9c 01       	movw	r18, r24
    3b5e:	22 0f       	add	r18, r18
    3b60:	33 1f       	adc	r19, r19
    3b62:	22 0f       	add	r18, r18
    3b64:	33 1f       	adc	r19, r19
    3b66:	22 0f       	add	r18, r18
    3b68:	33 1f       	adc	r19, r19
    3b6a:	82 0f       	add	r24, r18
    3b6c:	93 1f       	adc	r25, r19
    3b6e:	84 0f       	add	r24, r20
    3b70:	95 1f       	adc	r25, r21
    3b72:	fc 01       	movw	r30, r24
    3b74:	e7 57       	subi	r30, 0x77	; 119
    3b76:	fe 4f       	sbci	r31, 0xFE	; 254
    3b78:	60 81       	ld	r22, Z
    3b7a:	88 85       	ldd	r24, Y+8	; 0x08
    3b7c:	48 2f       	mov	r20, r24
    3b7e:	50 e0       	ldi	r21, 0x00	; 0
    3b80:	ca 01       	movw	r24, r20
    3b82:	88 0f       	add	r24, r24
    3b84:	99 1f       	adc	r25, r25
    3b86:	9c 01       	movw	r18, r24
    3b88:	22 0f       	add	r18, r18
    3b8a:	33 1f       	adc	r19, r19
    3b8c:	22 0f       	add	r18, r18
    3b8e:	33 1f       	adc	r19, r19
    3b90:	22 0f       	add	r18, r18
    3b92:	33 1f       	adc	r19, r19
    3b94:	82 0f       	add	r24, r18
    3b96:	93 1f       	adc	r25, r19
    3b98:	84 0f       	add	r24, r20
    3b9a:	95 1f       	adc	r25, r21
    3b9c:	fc 01       	movw	r30, r24
    3b9e:	e6 57       	subi	r30, 0x76	; 118
    3ba0:	fe 4f       	sbci	r31, 0xFE	; 254
    3ba2:	90 81       	ld	r25, Z
    3ba4:	86 2f       	mov	r24, r22
    3ba6:	69 2f       	mov	r22, r25
    3ba8:	40 e0       	ldi	r20, 0x00	; 0
    3baa:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3bae:	88 2f       	mov	r24, r24
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	98 2f       	mov	r25, r24
    3bb4:	88 27       	eor	r24, r24
    3bb6:	92 95       	swap	r25
    3bb8:	90 7f       	andi	r25, 0xF0	; 240
    3bba:	9c 01       	movw	r18, r24
    3bbc:	44 27       	eor	r20, r20
    3bbe:	37 fd       	sbrc	r19, 7
    3bc0:	40 95       	com	r20
    3bc2:	54 2f       	mov	r21, r20
    3bc4:	89 81       	ldd	r24, Y+1	; 0x01
    3bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc8:	ab 81       	ldd	r26, Y+3	; 0x03
    3bca:	bc 81       	ldd	r27, Y+4	; 0x04
    3bcc:	82 2b       	or	r24, r18
    3bce:	93 2b       	or	r25, r19
    3bd0:	a4 2b       	or	r26, r20
    3bd2:	b5 2b       	or	r27, r21
    3bd4:	89 83       	std	Y+1, r24	; 0x01
    3bd6:	9a 83       	std	Y+2, r25	; 0x02
    3bd8:	ab 83       	std	Y+3, r26	; 0x03
    3bda:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPin,
												  DIO_u8LOW) << 12);

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPort,
    3bdc:	88 85       	ldd	r24, Y+8	; 0x08
    3bde:	48 2f       	mov	r20, r24
    3be0:	50 e0       	ldi	r21, 0x00	; 0
    3be2:	ca 01       	movw	r24, r20
    3be4:	88 0f       	add	r24, r24
    3be6:	99 1f       	adc	r25, r25
    3be8:	9c 01       	movw	r18, r24
    3bea:	22 0f       	add	r18, r18
    3bec:	33 1f       	adc	r19, r19
    3bee:	22 0f       	add	r18, r18
    3bf0:	33 1f       	adc	r19, r19
    3bf2:	22 0f       	add	r18, r18
    3bf4:	33 1f       	adc	r19, r19
    3bf6:	82 0f       	add	r24, r18
    3bf8:	93 1f       	adc	r25, r19
    3bfa:	84 0f       	add	r24, r20
    3bfc:	95 1f       	adc	r25, r21
    3bfe:	fc 01       	movw	r30, r24
    3c00:	e5 57       	subi	r30, 0x75	; 117
    3c02:	fe 4f       	sbci	r31, 0xFE	; 254
    3c04:	60 81       	ld	r22, Z
    3c06:	88 85       	ldd	r24, Y+8	; 0x08
    3c08:	48 2f       	mov	r20, r24
    3c0a:	50 e0       	ldi	r21, 0x00	; 0
    3c0c:	ca 01       	movw	r24, r20
    3c0e:	88 0f       	add	r24, r24
    3c10:	99 1f       	adc	r25, r25
    3c12:	9c 01       	movw	r18, r24
    3c14:	22 0f       	add	r18, r18
    3c16:	33 1f       	adc	r19, r19
    3c18:	22 0f       	add	r18, r18
    3c1a:	33 1f       	adc	r19, r19
    3c1c:	22 0f       	add	r18, r18
    3c1e:	33 1f       	adc	r19, r19
    3c20:	82 0f       	add	r24, r18
    3c22:	93 1f       	adc	r25, r19
    3c24:	84 0f       	add	r24, r20
    3c26:	95 1f       	adc	r25, r21
    3c28:	fc 01       	movw	r30, r24
    3c2a:	e4 57       	subi	r30, 0x74	; 116
    3c2c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c2e:	90 81       	ld	r25, Z
    3c30:	86 2f       	mov	r24, r22
    3c32:	69 2f       	mov	r22, r25
    3c34:	40 e0       	ldi	r20, 0x00	; 0
    3c36:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3c3a:	88 2f       	mov	r24, r24
    3c3c:	90 e0       	ldi	r25, 0x00	; 0
    3c3e:	a0 e0       	ldi	r26, 0x00	; 0
    3c40:	b0 e0       	ldi	r27, 0x00	; 0
    3c42:	9c 01       	movw	r18, r24
    3c44:	ad 01       	movw	r20, r26
    3c46:	01 2e       	mov	r0, r17
    3c48:	1f e0       	ldi	r17, 0x0F	; 15
    3c4a:	22 0f       	add	r18, r18
    3c4c:	33 1f       	adc	r19, r19
    3c4e:	44 1f       	adc	r20, r20
    3c50:	55 1f       	adc	r21, r21
    3c52:	1a 95       	dec	r17
    3c54:	d1 f7       	brne	.-12     	; 0x3c4a <SSDLT_enuClearDisplay+0x38c>
    3c56:	10 2d       	mov	r17, r0
    3c58:	89 81       	ldd	r24, Y+1	; 0x01
    3c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c5c:	ab 81       	ldd	r26, Y+3	; 0x03
    3c5e:	bc 81       	ldd	r27, Y+4	; 0x04
    3c60:	82 2b       	or	r24, r18
    3c62:	93 2b       	or	r25, r19
    3c64:	a4 2b       	or	r26, r20
    3c66:	b5 2b       	or	r27, r21
    3c68:	89 83       	std	Y+1, r24	; 0x01
    3c6a:	9a 83       	std	Y+2, r25	; 0x02
    3c6c:	ab 83       	std	Y+3, r26	; 0x03
    3c6e:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPin,
												  DIO_u8LOW) << 15));

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPort,
    3c70:	88 85       	ldd	r24, Y+8	; 0x08
    3c72:	48 2f       	mov	r20, r24
    3c74:	50 e0       	ldi	r21, 0x00	; 0
    3c76:	ca 01       	movw	r24, r20
    3c78:	88 0f       	add	r24, r24
    3c7a:	99 1f       	adc	r25, r25
    3c7c:	9c 01       	movw	r18, r24
    3c7e:	22 0f       	add	r18, r18
    3c80:	33 1f       	adc	r19, r19
    3c82:	22 0f       	add	r18, r18
    3c84:	33 1f       	adc	r19, r19
    3c86:	22 0f       	add	r18, r18
    3c88:	33 1f       	adc	r19, r19
    3c8a:	82 0f       	add	r24, r18
    3c8c:	93 1f       	adc	r25, r19
    3c8e:	84 0f       	add	r24, r20
    3c90:	95 1f       	adc	r25, r21
    3c92:	fc 01       	movw	r30, r24
    3c94:	e3 57       	subi	r30, 0x73	; 115
    3c96:	fe 4f       	sbci	r31, 0xFE	; 254
    3c98:	60 81       	ld	r22, Z
    3c9a:	88 85       	ldd	r24, Y+8	; 0x08
    3c9c:	48 2f       	mov	r20, r24
    3c9e:	50 e0       	ldi	r21, 0x00	; 0
    3ca0:	ca 01       	movw	r24, r20
    3ca2:	88 0f       	add	r24, r24
    3ca4:	99 1f       	adc	r25, r25
    3ca6:	9c 01       	movw	r18, r24
    3ca8:	22 0f       	add	r18, r18
    3caa:	33 1f       	adc	r19, r19
    3cac:	22 0f       	add	r18, r18
    3cae:	33 1f       	adc	r19, r19
    3cb0:	22 0f       	add	r18, r18
    3cb2:	33 1f       	adc	r19, r19
    3cb4:	82 0f       	add	r24, r18
    3cb6:	93 1f       	adc	r25, r19
    3cb8:	84 0f       	add	r24, r20
    3cba:	95 1f       	adc	r25, r21
    3cbc:	fc 01       	movw	r30, r24
    3cbe:	e2 57       	subi	r30, 0x72	; 114
    3cc0:	fe 4f       	sbci	r31, 0xFE	; 254
    3cc2:	90 81       	ld	r25, Z
    3cc4:	86 2f       	mov	r24, r22
    3cc6:	69 2f       	mov	r22, r25
    3cc8:	40 e0       	ldi	r20, 0x00	; 0
    3cca:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3cce:	88 2f       	mov	r24, r24
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	a0 e0       	ldi	r26, 0x00	; 0
    3cd4:	b0 e0       	ldi	r27, 0x00	; 0
    3cd6:	9c 01       	movw	r18, r24
    3cd8:	ad 01       	movw	r20, r26
    3cda:	01 2e       	mov	r0, r17
    3cdc:	12 e1       	ldi	r17, 0x12	; 18
    3cde:	22 0f       	add	r18, r18
    3ce0:	33 1f       	adc	r19, r19
    3ce2:	44 1f       	adc	r20, r20
    3ce4:	55 1f       	adc	r21, r21
    3ce6:	1a 95       	dec	r17
    3ce8:	d1 f7       	brne	.-12     	; 0x3cde <SSDLT_enuClearDisplay+0x420>
    3cea:	10 2d       	mov	r17, r0
    3cec:	89 81       	ldd	r24, Y+1	; 0x01
    3cee:	9a 81       	ldd	r25, Y+2	; 0x02
    3cf0:	ab 81       	ldd	r26, Y+3	; 0x03
    3cf2:	bc 81       	ldd	r27, Y+4	; 0x04
    3cf4:	82 2b       	or	r24, r18
    3cf6:	93 2b       	or	r25, r19
    3cf8:	a4 2b       	or	r26, r20
    3cfa:	b5 2b       	or	r27, r21
    3cfc:	89 83       	std	Y+1, r24	; 0x01
    3cfe:	9a 83       	std	Y+2, r25	; 0x02
    3d00:	ab 83       	std	Y+3, r26	; 0x03
    3d02:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPin,
												  DIO_u8LOW) << 18));
			Local_u8LastBit = 21;
    3d04:	85 e1       	ldi	r24, 0x15	; 21
    3d06:	8d 83       	std	Y+5, r24	; 0x05
    3d08:	0f c2       	rjmp	.+1054   	; 0x4128 <SSDLT_enuClearDisplay+0x86a>
		}
		else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    3d0a:	88 85       	ldd	r24, Y+8	; 0x08
    3d0c:	48 2f       	mov	r20, r24
    3d0e:	50 e0       	ldi	r21, 0x00	; 0
    3d10:	ca 01       	movw	r24, r20
    3d12:	88 0f       	add	r24, r24
    3d14:	99 1f       	adc	r25, r25
    3d16:	9c 01       	movw	r18, r24
    3d18:	22 0f       	add	r18, r18
    3d1a:	33 1f       	adc	r19, r19
    3d1c:	22 0f       	add	r18, r18
    3d1e:	33 1f       	adc	r19, r19
    3d20:	22 0f       	add	r18, r18
    3d22:	33 1f       	adc	r19, r19
    3d24:	82 0f       	add	r24, r18
    3d26:	93 1f       	adc	r25, r19
    3d28:	84 0f       	add	r24, r20
    3d2a:	95 1f       	adc	r25, r21
    3d2c:	fc 01       	movw	r30, r24
    3d2e:	ed 56       	subi	r30, 0x6D	; 109
    3d30:	fe 4f       	sbci	r31, 0xFE	; 254
    3d32:	80 81       	ld	r24, Z
    3d34:	88 23       	and	r24, r24
    3d36:	09 f0       	breq	.+2      	; 0x3d3a <SSDLT_enuClearDisplay+0x47c>
    3d38:	f4 c1       	rjmp	.+1000   	; 0x4122 <SSDLT_enuClearDisplay+0x864>
		{
			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APort,
    3d3a:	88 85       	ldd	r24, Y+8	; 0x08
    3d3c:	48 2f       	mov	r20, r24
    3d3e:	50 e0       	ldi	r21, 0x00	; 0
    3d40:	ca 01       	movw	r24, r20
    3d42:	88 0f       	add	r24, r24
    3d44:	99 1f       	adc	r25, r25
    3d46:	9c 01       	movw	r18, r24
    3d48:	22 0f       	add	r18, r18
    3d4a:	33 1f       	adc	r19, r19
    3d4c:	22 0f       	add	r18, r18
    3d4e:	33 1f       	adc	r19, r19
    3d50:	22 0f       	add	r18, r18
    3d52:	33 1f       	adc	r19, r19
    3d54:	82 0f       	add	r24, r18
    3d56:	93 1f       	adc	r25, r19
    3d58:	84 0f       	add	r24, r20
    3d5a:	95 1f       	adc	r25, r21
    3d5c:	fc 01       	movw	r30, r24
    3d5e:	ef 57       	subi	r30, 0x7F	; 127
    3d60:	fe 4f       	sbci	r31, 0xFE	; 254
    3d62:	60 81       	ld	r22, Z
    3d64:	88 85       	ldd	r24, Y+8	; 0x08
    3d66:	48 2f       	mov	r20, r24
    3d68:	50 e0       	ldi	r21, 0x00	; 0
    3d6a:	ca 01       	movw	r24, r20
    3d6c:	88 0f       	add	r24, r24
    3d6e:	99 1f       	adc	r25, r25
    3d70:	9c 01       	movw	r18, r24
    3d72:	22 0f       	add	r18, r18
    3d74:	33 1f       	adc	r19, r19
    3d76:	22 0f       	add	r18, r18
    3d78:	33 1f       	adc	r19, r19
    3d7a:	22 0f       	add	r18, r18
    3d7c:	33 1f       	adc	r19, r19
    3d7e:	82 0f       	add	r24, r18
    3d80:	93 1f       	adc	r25, r19
    3d82:	84 0f       	add	r24, r20
    3d84:	95 1f       	adc	r25, r21
    3d86:	fc 01       	movw	r30, r24
    3d88:	ee 57       	subi	r30, 0x7E	; 126
    3d8a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d8c:	90 81       	ld	r25, Z
    3d8e:	86 2f       	mov	r24, r22
    3d90:	69 2f       	mov	r22, r25
    3d92:	41 e0       	ldi	r20, 0x01	; 1
    3d94:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3d98:	28 2f       	mov	r18, r24
    3d9a:	30 e0       	ldi	r19, 0x00	; 0
    3d9c:	40 e0       	ldi	r20, 0x00	; 0
    3d9e:	50 e0       	ldi	r21, 0x00	; 0
    3da0:	89 81       	ldd	r24, Y+1	; 0x01
    3da2:	9a 81       	ldd	r25, Y+2	; 0x02
    3da4:	ab 81       	ldd	r26, Y+3	; 0x03
    3da6:	bc 81       	ldd	r27, Y+4	; 0x04
    3da8:	82 2b       	or	r24, r18
    3daa:	93 2b       	or	r25, r19
    3dac:	a4 2b       	or	r26, r20
    3dae:	b5 2b       	or	r27, r21
    3db0:	89 83       	std	Y+1, r24	; 0x01
    3db2:	9a 83       	std	Y+2, r25	; 0x02
    3db4:	ab 83       	std	Y+3, r26	; 0x03
    3db6:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	      SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APin,
											   	  DIO_u8HIGH) << 0);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPort,
    3db8:	88 85       	ldd	r24, Y+8	; 0x08
    3dba:	48 2f       	mov	r20, r24
    3dbc:	50 e0       	ldi	r21, 0x00	; 0
    3dbe:	ca 01       	movw	r24, r20
    3dc0:	88 0f       	add	r24, r24
    3dc2:	99 1f       	adc	r25, r25
    3dc4:	9c 01       	movw	r18, r24
    3dc6:	22 0f       	add	r18, r18
    3dc8:	33 1f       	adc	r19, r19
    3dca:	22 0f       	add	r18, r18
    3dcc:	33 1f       	adc	r19, r19
    3dce:	22 0f       	add	r18, r18
    3dd0:	33 1f       	adc	r19, r19
    3dd2:	82 0f       	add	r24, r18
    3dd4:	93 1f       	adc	r25, r19
    3dd6:	84 0f       	add	r24, r20
    3dd8:	95 1f       	adc	r25, r21
    3dda:	fc 01       	movw	r30, r24
    3ddc:	ed 57       	subi	r30, 0x7D	; 125
    3dde:	fe 4f       	sbci	r31, 0xFE	; 254
    3de0:	60 81       	ld	r22, Z
    3de2:	88 85       	ldd	r24, Y+8	; 0x08
    3de4:	48 2f       	mov	r20, r24
    3de6:	50 e0       	ldi	r21, 0x00	; 0
    3de8:	ca 01       	movw	r24, r20
    3dea:	88 0f       	add	r24, r24
    3dec:	99 1f       	adc	r25, r25
    3dee:	9c 01       	movw	r18, r24
    3df0:	22 0f       	add	r18, r18
    3df2:	33 1f       	adc	r19, r19
    3df4:	22 0f       	add	r18, r18
    3df6:	33 1f       	adc	r19, r19
    3df8:	22 0f       	add	r18, r18
    3dfa:	33 1f       	adc	r19, r19
    3dfc:	82 0f       	add	r24, r18
    3dfe:	93 1f       	adc	r25, r19
    3e00:	84 0f       	add	r24, r20
    3e02:	95 1f       	adc	r25, r21
    3e04:	fc 01       	movw	r30, r24
    3e06:	ec 57       	subi	r30, 0x7C	; 124
    3e08:	fe 4f       	sbci	r31, 0xFE	; 254
    3e0a:	90 81       	ld	r25, Z
    3e0c:	86 2f       	mov	r24, r22
    3e0e:	69 2f       	mov	r22, r25
    3e10:	41 e0       	ldi	r20, 0x01	; 1
    3e12:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3e16:	88 2f       	mov	r24, r24
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	88 0f       	add	r24, r24
    3e1c:	99 1f       	adc	r25, r25
    3e1e:	88 0f       	add	r24, r24
    3e20:	99 1f       	adc	r25, r25
    3e22:	88 0f       	add	r24, r24
    3e24:	99 1f       	adc	r25, r25
    3e26:	9c 01       	movw	r18, r24
    3e28:	44 27       	eor	r20, r20
    3e2a:	37 fd       	sbrc	r19, 7
    3e2c:	40 95       	com	r20
    3e2e:	54 2f       	mov	r21, r20
    3e30:	89 81       	ldd	r24, Y+1	; 0x01
    3e32:	9a 81       	ldd	r25, Y+2	; 0x02
    3e34:	ab 81       	ldd	r26, Y+3	; 0x03
    3e36:	bc 81       	ldd	r27, Y+4	; 0x04
    3e38:	82 2b       	or	r24, r18
    3e3a:	93 2b       	or	r25, r19
    3e3c:	a4 2b       	or	r26, r20
    3e3e:	b5 2b       	or	r27, r21
    3e40:	89 83       	std	Y+1, r24	; 0x01
    3e42:	9a 83       	std	Y+2, r25	; 0x02
    3e44:	ab 83       	std	Y+3, r26	; 0x03
    3e46:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPin,
												  DIO_u8HIGH) << 3);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPort,
    3e48:	88 85       	ldd	r24, Y+8	; 0x08
    3e4a:	48 2f       	mov	r20, r24
    3e4c:	50 e0       	ldi	r21, 0x00	; 0
    3e4e:	ca 01       	movw	r24, r20
    3e50:	88 0f       	add	r24, r24
    3e52:	99 1f       	adc	r25, r25
    3e54:	9c 01       	movw	r18, r24
    3e56:	22 0f       	add	r18, r18
    3e58:	33 1f       	adc	r19, r19
    3e5a:	22 0f       	add	r18, r18
    3e5c:	33 1f       	adc	r19, r19
    3e5e:	22 0f       	add	r18, r18
    3e60:	33 1f       	adc	r19, r19
    3e62:	82 0f       	add	r24, r18
    3e64:	93 1f       	adc	r25, r19
    3e66:	84 0f       	add	r24, r20
    3e68:	95 1f       	adc	r25, r21
    3e6a:	fc 01       	movw	r30, r24
    3e6c:	eb 57       	subi	r30, 0x7B	; 123
    3e6e:	fe 4f       	sbci	r31, 0xFE	; 254
    3e70:	60 81       	ld	r22, Z
    3e72:	88 85       	ldd	r24, Y+8	; 0x08
    3e74:	48 2f       	mov	r20, r24
    3e76:	50 e0       	ldi	r21, 0x00	; 0
    3e78:	ca 01       	movw	r24, r20
    3e7a:	88 0f       	add	r24, r24
    3e7c:	99 1f       	adc	r25, r25
    3e7e:	9c 01       	movw	r18, r24
    3e80:	22 0f       	add	r18, r18
    3e82:	33 1f       	adc	r19, r19
    3e84:	22 0f       	add	r18, r18
    3e86:	33 1f       	adc	r19, r19
    3e88:	22 0f       	add	r18, r18
    3e8a:	33 1f       	adc	r19, r19
    3e8c:	82 0f       	add	r24, r18
    3e8e:	93 1f       	adc	r25, r19
    3e90:	84 0f       	add	r24, r20
    3e92:	95 1f       	adc	r25, r21
    3e94:	fc 01       	movw	r30, r24
    3e96:	ea 57       	subi	r30, 0x7A	; 122
    3e98:	fe 4f       	sbci	r31, 0xFE	; 254
    3e9a:	90 81       	ld	r25, Z
    3e9c:	86 2f       	mov	r24, r22
    3e9e:	69 2f       	mov	r22, r25
    3ea0:	41 e0       	ldi	r20, 0x01	; 1
    3ea2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3ea6:	88 2f       	mov	r24, r24
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
    3eaa:	00 24       	eor	r0, r0
    3eac:	96 95       	lsr	r25
    3eae:	87 95       	ror	r24
    3eb0:	07 94       	ror	r0
    3eb2:	96 95       	lsr	r25
    3eb4:	87 95       	ror	r24
    3eb6:	07 94       	ror	r0
    3eb8:	98 2f       	mov	r25, r24
    3eba:	80 2d       	mov	r24, r0
    3ebc:	9c 01       	movw	r18, r24
    3ebe:	44 27       	eor	r20, r20
    3ec0:	37 fd       	sbrc	r19, 7
    3ec2:	40 95       	com	r20
    3ec4:	54 2f       	mov	r21, r20
    3ec6:	89 81       	ldd	r24, Y+1	; 0x01
    3ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    3eca:	ab 81       	ldd	r26, Y+3	; 0x03
    3ecc:	bc 81       	ldd	r27, Y+4	; 0x04
    3ece:	82 2b       	or	r24, r18
    3ed0:	93 2b       	or	r25, r19
    3ed2:	a4 2b       	or	r26, r20
    3ed4:	b5 2b       	or	r27, r21
    3ed6:	89 83       	std	Y+1, r24	; 0x01
    3ed8:	9a 83       	std	Y+2, r25	; 0x02
    3eda:	ab 83       	std	Y+3, r26	; 0x03
    3edc:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPin,
												  DIO_u8HIGH) << 6);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPort,
    3ede:	88 85       	ldd	r24, Y+8	; 0x08
    3ee0:	48 2f       	mov	r20, r24
    3ee2:	50 e0       	ldi	r21, 0x00	; 0
    3ee4:	ca 01       	movw	r24, r20
    3ee6:	88 0f       	add	r24, r24
    3ee8:	99 1f       	adc	r25, r25
    3eea:	9c 01       	movw	r18, r24
    3eec:	22 0f       	add	r18, r18
    3eee:	33 1f       	adc	r19, r19
    3ef0:	22 0f       	add	r18, r18
    3ef2:	33 1f       	adc	r19, r19
    3ef4:	22 0f       	add	r18, r18
    3ef6:	33 1f       	adc	r19, r19
    3ef8:	82 0f       	add	r24, r18
    3efa:	93 1f       	adc	r25, r19
    3efc:	84 0f       	add	r24, r20
    3efe:	95 1f       	adc	r25, r21
    3f00:	fc 01       	movw	r30, r24
    3f02:	e9 57       	subi	r30, 0x79	; 121
    3f04:	fe 4f       	sbci	r31, 0xFE	; 254
    3f06:	60 81       	ld	r22, Z
    3f08:	88 85       	ldd	r24, Y+8	; 0x08
    3f0a:	48 2f       	mov	r20, r24
    3f0c:	50 e0       	ldi	r21, 0x00	; 0
    3f0e:	ca 01       	movw	r24, r20
    3f10:	88 0f       	add	r24, r24
    3f12:	99 1f       	adc	r25, r25
    3f14:	9c 01       	movw	r18, r24
    3f16:	22 0f       	add	r18, r18
    3f18:	33 1f       	adc	r19, r19
    3f1a:	22 0f       	add	r18, r18
    3f1c:	33 1f       	adc	r19, r19
    3f1e:	22 0f       	add	r18, r18
    3f20:	33 1f       	adc	r19, r19
    3f22:	82 0f       	add	r24, r18
    3f24:	93 1f       	adc	r25, r19
    3f26:	84 0f       	add	r24, r20
    3f28:	95 1f       	adc	r25, r21
    3f2a:	fc 01       	movw	r30, r24
    3f2c:	e8 57       	subi	r30, 0x78	; 120
    3f2e:	fe 4f       	sbci	r31, 0xFE	; 254
    3f30:	90 81       	ld	r25, Z
    3f32:	86 2f       	mov	r24, r22
    3f34:	69 2f       	mov	r22, r25
    3f36:	41 e0       	ldi	r20, 0x01	; 1
    3f38:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3f3c:	88 2f       	mov	r24, r24
    3f3e:	90 e0       	ldi	r25, 0x00	; 0
    3f40:	98 2f       	mov	r25, r24
    3f42:	88 27       	eor	r24, r24
    3f44:	99 0f       	add	r25, r25
    3f46:	9c 01       	movw	r18, r24
    3f48:	44 27       	eor	r20, r20
    3f4a:	37 fd       	sbrc	r19, 7
    3f4c:	40 95       	com	r20
    3f4e:	54 2f       	mov	r21, r20
    3f50:	89 81       	ldd	r24, Y+1	; 0x01
    3f52:	9a 81       	ldd	r25, Y+2	; 0x02
    3f54:	ab 81       	ldd	r26, Y+3	; 0x03
    3f56:	bc 81       	ldd	r27, Y+4	; 0x04
    3f58:	82 2b       	or	r24, r18
    3f5a:	93 2b       	or	r25, r19
    3f5c:	a4 2b       	or	r26, r20
    3f5e:	b5 2b       	or	r27, r21
    3f60:	89 83       	std	Y+1, r24	; 0x01
    3f62:	9a 83       	std	Y+2, r25	; 0x02
    3f64:	ab 83       	std	Y+3, r26	; 0x03
    3f66:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPin,
												  DIO_u8HIGH) << 9) ;

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPort,
    3f68:	88 85       	ldd	r24, Y+8	; 0x08
    3f6a:	48 2f       	mov	r20, r24
    3f6c:	50 e0       	ldi	r21, 0x00	; 0
    3f6e:	ca 01       	movw	r24, r20
    3f70:	88 0f       	add	r24, r24
    3f72:	99 1f       	adc	r25, r25
    3f74:	9c 01       	movw	r18, r24
    3f76:	22 0f       	add	r18, r18
    3f78:	33 1f       	adc	r19, r19
    3f7a:	22 0f       	add	r18, r18
    3f7c:	33 1f       	adc	r19, r19
    3f7e:	22 0f       	add	r18, r18
    3f80:	33 1f       	adc	r19, r19
    3f82:	82 0f       	add	r24, r18
    3f84:	93 1f       	adc	r25, r19
    3f86:	84 0f       	add	r24, r20
    3f88:	95 1f       	adc	r25, r21
    3f8a:	fc 01       	movw	r30, r24
    3f8c:	e7 57       	subi	r30, 0x77	; 119
    3f8e:	fe 4f       	sbci	r31, 0xFE	; 254
    3f90:	60 81       	ld	r22, Z
    3f92:	88 85       	ldd	r24, Y+8	; 0x08
    3f94:	48 2f       	mov	r20, r24
    3f96:	50 e0       	ldi	r21, 0x00	; 0
    3f98:	ca 01       	movw	r24, r20
    3f9a:	88 0f       	add	r24, r24
    3f9c:	99 1f       	adc	r25, r25
    3f9e:	9c 01       	movw	r18, r24
    3fa0:	22 0f       	add	r18, r18
    3fa2:	33 1f       	adc	r19, r19
    3fa4:	22 0f       	add	r18, r18
    3fa6:	33 1f       	adc	r19, r19
    3fa8:	22 0f       	add	r18, r18
    3faa:	33 1f       	adc	r19, r19
    3fac:	82 0f       	add	r24, r18
    3fae:	93 1f       	adc	r25, r19
    3fb0:	84 0f       	add	r24, r20
    3fb2:	95 1f       	adc	r25, r21
    3fb4:	fc 01       	movw	r30, r24
    3fb6:	e6 57       	subi	r30, 0x76	; 118
    3fb8:	fe 4f       	sbci	r31, 0xFE	; 254
    3fba:	90 81       	ld	r25, Z
    3fbc:	86 2f       	mov	r24, r22
    3fbe:	69 2f       	mov	r22, r25
    3fc0:	41 e0       	ldi	r20, 0x01	; 1
    3fc2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3fc6:	88 2f       	mov	r24, r24
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	98 2f       	mov	r25, r24
    3fcc:	88 27       	eor	r24, r24
    3fce:	92 95       	swap	r25
    3fd0:	90 7f       	andi	r25, 0xF0	; 240
    3fd2:	9c 01       	movw	r18, r24
    3fd4:	44 27       	eor	r20, r20
    3fd6:	37 fd       	sbrc	r19, 7
    3fd8:	40 95       	com	r20
    3fda:	54 2f       	mov	r21, r20
    3fdc:	89 81       	ldd	r24, Y+1	; 0x01
    3fde:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe0:	ab 81       	ldd	r26, Y+3	; 0x03
    3fe2:	bc 81       	ldd	r27, Y+4	; 0x04
    3fe4:	82 2b       	or	r24, r18
    3fe6:	93 2b       	or	r25, r19
    3fe8:	a4 2b       	or	r26, r20
    3fea:	b5 2b       	or	r27, r21
    3fec:	89 83       	std	Y+1, r24	; 0x01
    3fee:	9a 83       	std	Y+2, r25	; 0x02
    3ff0:	ab 83       	std	Y+3, r26	; 0x03
    3ff2:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPin,
												  DIO_u8HIGH) << 12);

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPort,
    3ff4:	88 85       	ldd	r24, Y+8	; 0x08
    3ff6:	48 2f       	mov	r20, r24
    3ff8:	50 e0       	ldi	r21, 0x00	; 0
    3ffa:	ca 01       	movw	r24, r20
    3ffc:	88 0f       	add	r24, r24
    3ffe:	99 1f       	adc	r25, r25
    4000:	9c 01       	movw	r18, r24
    4002:	22 0f       	add	r18, r18
    4004:	33 1f       	adc	r19, r19
    4006:	22 0f       	add	r18, r18
    4008:	33 1f       	adc	r19, r19
    400a:	22 0f       	add	r18, r18
    400c:	33 1f       	adc	r19, r19
    400e:	82 0f       	add	r24, r18
    4010:	93 1f       	adc	r25, r19
    4012:	84 0f       	add	r24, r20
    4014:	95 1f       	adc	r25, r21
    4016:	fc 01       	movw	r30, r24
    4018:	e5 57       	subi	r30, 0x75	; 117
    401a:	fe 4f       	sbci	r31, 0xFE	; 254
    401c:	60 81       	ld	r22, Z
    401e:	88 85       	ldd	r24, Y+8	; 0x08
    4020:	48 2f       	mov	r20, r24
    4022:	50 e0       	ldi	r21, 0x00	; 0
    4024:	ca 01       	movw	r24, r20
    4026:	88 0f       	add	r24, r24
    4028:	99 1f       	adc	r25, r25
    402a:	9c 01       	movw	r18, r24
    402c:	22 0f       	add	r18, r18
    402e:	33 1f       	adc	r19, r19
    4030:	22 0f       	add	r18, r18
    4032:	33 1f       	adc	r19, r19
    4034:	22 0f       	add	r18, r18
    4036:	33 1f       	adc	r19, r19
    4038:	82 0f       	add	r24, r18
    403a:	93 1f       	adc	r25, r19
    403c:	84 0f       	add	r24, r20
    403e:	95 1f       	adc	r25, r21
    4040:	fc 01       	movw	r30, r24
    4042:	e4 57       	subi	r30, 0x74	; 116
    4044:	fe 4f       	sbci	r31, 0xFE	; 254
    4046:	90 81       	ld	r25, Z
    4048:	86 2f       	mov	r24, r22
    404a:	69 2f       	mov	r22, r25
    404c:	41 e0       	ldi	r20, 0x01	; 1
    404e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4052:	88 2f       	mov	r24, r24
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	a0 e0       	ldi	r26, 0x00	; 0
    4058:	b0 e0       	ldi	r27, 0x00	; 0
    405a:	9c 01       	movw	r18, r24
    405c:	ad 01       	movw	r20, r26
    405e:	01 2e       	mov	r0, r17
    4060:	1f e0       	ldi	r17, 0x0F	; 15
    4062:	22 0f       	add	r18, r18
    4064:	33 1f       	adc	r19, r19
    4066:	44 1f       	adc	r20, r20
    4068:	55 1f       	adc	r21, r21
    406a:	1a 95       	dec	r17
    406c:	d1 f7       	brne	.-12     	; 0x4062 <SSDLT_enuClearDisplay+0x7a4>
    406e:	10 2d       	mov	r17, r0
    4070:	89 81       	ldd	r24, Y+1	; 0x01
    4072:	9a 81       	ldd	r25, Y+2	; 0x02
    4074:	ab 81       	ldd	r26, Y+3	; 0x03
    4076:	bc 81       	ldd	r27, Y+4	; 0x04
    4078:	82 2b       	or	r24, r18
    407a:	93 2b       	or	r25, r19
    407c:	a4 2b       	or	r26, r20
    407e:	b5 2b       	or	r27, r21
    4080:	89 83       	std	Y+1, r24	; 0x01
    4082:	9a 83       	std	Y+2, r25	; 0x02
    4084:	ab 83       	std	Y+3, r26	; 0x03
    4086:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPin,
												  DIO_u8HIGH) << 15));

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPort,
    4088:	88 85       	ldd	r24, Y+8	; 0x08
    408a:	48 2f       	mov	r20, r24
    408c:	50 e0       	ldi	r21, 0x00	; 0
    408e:	ca 01       	movw	r24, r20
    4090:	88 0f       	add	r24, r24
    4092:	99 1f       	adc	r25, r25
    4094:	9c 01       	movw	r18, r24
    4096:	22 0f       	add	r18, r18
    4098:	33 1f       	adc	r19, r19
    409a:	22 0f       	add	r18, r18
    409c:	33 1f       	adc	r19, r19
    409e:	22 0f       	add	r18, r18
    40a0:	33 1f       	adc	r19, r19
    40a2:	82 0f       	add	r24, r18
    40a4:	93 1f       	adc	r25, r19
    40a6:	84 0f       	add	r24, r20
    40a8:	95 1f       	adc	r25, r21
    40aa:	fc 01       	movw	r30, r24
    40ac:	e3 57       	subi	r30, 0x73	; 115
    40ae:	fe 4f       	sbci	r31, 0xFE	; 254
    40b0:	60 81       	ld	r22, Z
    40b2:	88 85       	ldd	r24, Y+8	; 0x08
    40b4:	48 2f       	mov	r20, r24
    40b6:	50 e0       	ldi	r21, 0x00	; 0
    40b8:	ca 01       	movw	r24, r20
    40ba:	88 0f       	add	r24, r24
    40bc:	99 1f       	adc	r25, r25
    40be:	9c 01       	movw	r18, r24
    40c0:	22 0f       	add	r18, r18
    40c2:	33 1f       	adc	r19, r19
    40c4:	22 0f       	add	r18, r18
    40c6:	33 1f       	adc	r19, r19
    40c8:	22 0f       	add	r18, r18
    40ca:	33 1f       	adc	r19, r19
    40cc:	82 0f       	add	r24, r18
    40ce:	93 1f       	adc	r25, r19
    40d0:	84 0f       	add	r24, r20
    40d2:	95 1f       	adc	r25, r21
    40d4:	fc 01       	movw	r30, r24
    40d6:	e2 57       	subi	r30, 0x72	; 114
    40d8:	fe 4f       	sbci	r31, 0xFE	; 254
    40da:	90 81       	ld	r25, Z
    40dc:	86 2f       	mov	r24, r22
    40de:	69 2f       	mov	r22, r25
    40e0:	41 e0       	ldi	r20, 0x01	; 1
    40e2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    40e6:	88 2f       	mov	r24, r24
    40e8:	90 e0       	ldi	r25, 0x00	; 0
    40ea:	a0 e0       	ldi	r26, 0x00	; 0
    40ec:	b0 e0       	ldi	r27, 0x00	; 0
    40ee:	9c 01       	movw	r18, r24
    40f0:	ad 01       	movw	r20, r26
    40f2:	01 2e       	mov	r0, r17
    40f4:	12 e1       	ldi	r17, 0x12	; 18
    40f6:	22 0f       	add	r18, r18
    40f8:	33 1f       	adc	r19, r19
    40fa:	44 1f       	adc	r20, r20
    40fc:	55 1f       	adc	r21, r21
    40fe:	1a 95       	dec	r17
    4100:	d1 f7       	brne	.-12     	; 0x40f6 <SSDLT_enuClearDisplay+0x838>
    4102:	10 2d       	mov	r17, r0
    4104:	89 81       	ldd	r24, Y+1	; 0x01
    4106:	9a 81       	ldd	r25, Y+2	; 0x02
    4108:	ab 81       	ldd	r26, Y+3	; 0x03
    410a:	bc 81       	ldd	r27, Y+4	; 0x04
    410c:	82 2b       	or	r24, r18
    410e:	93 2b       	or	r25, r19
    4110:	a4 2b       	or	r26, r20
    4112:	b5 2b       	or	r27, r21
    4114:	89 83       	std	Y+1, r24	; 0x01
    4116:	9a 83       	std	Y+2, r25	; 0x02
    4118:	ab 83       	std	Y+3, r26	; 0x03
    411a:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPin,
												  DIO_u8HIGH) << 18));
			Local_u8LastBit = 21;
    411c:	85 e1       	ldi	r24, 0x15	; 21
    411e:	8d 83       	std	Y+5, r24	; 0x05
    4120:	03 c0       	rjmp	.+6      	; 0x4128 <SSDLT_enuClearDisplay+0x86a>
		}
		else
		{
			return ES_OUT_OF_RANGE;
    4122:	03 e0       	ldi	r16, 0x03	; 3
    4124:	09 87       	std	Y+9, r16	; 0x09
    4126:	23 c1       	rjmp	.+582    	; 0x436e <SSDLT_enuClearDisplay+0xab0>
	else
	{
		return ES_OUT_OF_RANGE;
	}

	if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port != NOT_CONNECTED ||
    4128:	88 85       	ldd	r24, Y+8	; 0x08
    412a:	48 2f       	mov	r20, r24
    412c:	50 e0       	ldi	r21, 0x00	; 0
    412e:	ca 01       	movw	r24, r20
    4130:	88 0f       	add	r24, r24
    4132:	99 1f       	adc	r25, r25
    4134:	9c 01       	movw	r18, r24
    4136:	22 0f       	add	r18, r18
    4138:	33 1f       	adc	r19, r19
    413a:	22 0f       	add	r18, r18
    413c:	33 1f       	adc	r19, r19
    413e:	22 0f       	add	r18, r18
    4140:	33 1f       	adc	r19, r19
    4142:	82 0f       	add	r24, r18
    4144:	93 1f       	adc	r25, r19
    4146:	84 0f       	add	r24, r20
    4148:	95 1f       	adc	r25, r21
    414a:	fc 01       	movw	r30, r24
    414c:	ef 56       	subi	r30, 0x6F	; 111
    414e:	fe 4f       	sbci	r31, 0xFE	; 254
    4150:	80 81       	ld	r24, Z
    4152:	82 30       	cpi	r24, 0x02	; 2
    4154:	e1 f4       	brne	.+56     	; 0x418e <SSDLT_enuClearDisplay+0x8d0>
    4156:	03 c0       	rjmp	.+6      	; 0x415e <SSDLT_enuClearDisplay+0x8a0>
			return ES_OUT_OF_RANGE;
		}
	}
	else
	{
		return ES_OUT_OF_RANGE;
    4158:	13 e0       	ldi	r17, 0x03	; 3
    415a:	19 87       	std	Y+9, r17	; 0x09
    415c:	08 c1       	rjmp	.+528    	; 0x436e <SSDLT_enuClearDisplay+0xab0>
	}

	if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port != NOT_CONNECTED ||
    415e:	88 85       	ldd	r24, Y+8	; 0x08
    4160:	48 2f       	mov	r20, r24
    4162:	50 e0       	ldi	r21, 0x00	; 0
    4164:	ca 01       	movw	r24, r20
    4166:	88 0f       	add	r24, r24
    4168:	99 1f       	adc	r25, r25
    416a:	9c 01       	movw	r18, r24
    416c:	22 0f       	add	r18, r18
    416e:	33 1f       	adc	r19, r19
    4170:	22 0f       	add	r18, r18
    4172:	33 1f       	adc	r19, r19
    4174:	22 0f       	add	r18, r18
    4176:	33 1f       	adc	r19, r19
    4178:	82 0f       	add	r24, r18
    417a:	93 1f       	adc	r25, r19
    417c:	84 0f       	add	r24, r20
    417e:	95 1f       	adc	r25, r21
    4180:	fc 01       	movw	r30, r24
    4182:	ee 56       	subi	r30, 0x6E	; 110
    4184:	fe 4f       	sbci	r31, 0xFE	; 254
    4186:	80 81       	ld	r24, Z
    4188:	82 30       	cpi	r24, 0x02	; 2
    418a:	09 f4       	brne	.+2      	; 0x418e <SSDLT_enuClearDisplay+0x8d0>
    418c:	c7 c0       	rjmp	.+398    	; 0x431c <SSDLT_enuClearDisplay+0xa5e>
		SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin != NOT_CONNECTED)
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    418e:	88 85       	ldd	r24, Y+8	; 0x08
    4190:	48 2f       	mov	r20, r24
    4192:	50 e0       	ldi	r21, 0x00	; 0
    4194:	ca 01       	movw	r24, r20
    4196:	88 0f       	add	r24, r24
    4198:	99 1f       	adc	r25, r25
    419a:	9c 01       	movw	r18, r24
    419c:	22 0f       	add	r18, r18
    419e:	33 1f       	adc	r19, r19
    41a0:	22 0f       	add	r18, r18
    41a2:	33 1f       	adc	r19, r19
    41a4:	22 0f       	add	r18, r18
    41a6:	33 1f       	adc	r19, r19
    41a8:	82 0f       	add	r24, r18
    41aa:	93 1f       	adc	r25, r19
    41ac:	84 0f       	add	r24, r20
    41ae:	95 1f       	adc	r25, r21
    41b0:	fc 01       	movw	r30, r24
    41b2:	ed 56       	subi	r30, 0x6D	; 109
    41b4:	fe 4f       	sbci	r31, 0xFE	; 254
    41b6:	80 81       	ld	r24, Z
    41b8:	81 30       	cpi	r24, 0x01	; 1
    41ba:	09 f0       	breq	.+2      	; 0x41be <SSDLT_enuClearDisplay+0x900>
    41bc:	49 c0       	rjmp	.+146    	; 0x4250 <SSDLT_enuClearDisplay+0x992>
		{
			Local_enuErrorState |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port,
    41be:	88 85       	ldd	r24, Y+8	; 0x08
    41c0:	48 2f       	mov	r20, r24
    41c2:	50 e0       	ldi	r21, 0x00	; 0
    41c4:	ca 01       	movw	r24, r20
    41c6:	88 0f       	add	r24, r24
    41c8:	99 1f       	adc	r25, r25
    41ca:	9c 01       	movw	r18, r24
    41cc:	22 0f       	add	r18, r18
    41ce:	33 1f       	adc	r19, r19
    41d0:	22 0f       	add	r18, r18
    41d2:	33 1f       	adc	r19, r19
    41d4:	22 0f       	add	r18, r18
    41d6:	33 1f       	adc	r19, r19
    41d8:	82 0f       	add	r24, r18
    41da:	93 1f       	adc	r25, r19
    41dc:	84 0f       	add	r24, r20
    41de:	95 1f       	adc	r25, r21
    41e0:	fc 01       	movw	r30, r24
    41e2:	ef 56       	subi	r30, 0x6F	; 111
    41e4:	fe 4f       	sbci	r31, 0xFE	; 254
    41e6:	60 81       	ld	r22, Z
    41e8:	88 85       	ldd	r24, Y+8	; 0x08
    41ea:	48 2f       	mov	r20, r24
    41ec:	50 e0       	ldi	r21, 0x00	; 0
    41ee:	ca 01       	movw	r24, r20
    41f0:	88 0f       	add	r24, r24
    41f2:	99 1f       	adc	r25, r25
    41f4:	9c 01       	movw	r18, r24
    41f6:	22 0f       	add	r18, r18
    41f8:	33 1f       	adc	r19, r19
    41fa:	22 0f       	add	r18, r18
    41fc:	33 1f       	adc	r19, r19
    41fe:	22 0f       	add	r18, r18
    4200:	33 1f       	adc	r19, r19
    4202:	82 0f       	add	r24, r18
    4204:	93 1f       	adc	r25, r19
    4206:	84 0f       	add	r24, r20
    4208:	95 1f       	adc	r25, r21
    420a:	fc 01       	movw	r30, r24
    420c:	ee 56       	subi	r30, 0x6E	; 110
    420e:	fe 4f       	sbci	r31, 0xFE	; 254
    4210:	90 81       	ld	r25, Z
    4212:	86 2f       	mov	r24, r22
    4214:	69 2f       	mov	r22, r25
    4216:	40 e0       	ldi	r20, 0x00	; 0
    4218:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    421c:	28 2f       	mov	r18, r24
    421e:	30 e0       	ldi	r19, 0x00	; 0
    4220:	40 e0       	ldi	r20, 0x00	; 0
    4222:	50 e0       	ldi	r21, 0x00	; 0
    4224:	8d 81       	ldd	r24, Y+5	; 0x05
    4226:	88 2f       	mov	r24, r24
    4228:	90 e0       	ldi	r25, 0x00	; 0
    422a:	79 01       	movw	r14, r18
    422c:	8a 01       	movw	r16, r20
    422e:	04 c0       	rjmp	.+8      	; 0x4238 <SSDLT_enuClearDisplay+0x97a>
    4230:	ee 0c       	add	r14, r14
    4232:	ff 1c       	adc	r15, r15
    4234:	00 1f       	adc	r16, r16
    4236:	11 1f       	adc	r17, r17
    4238:	8a 95       	dec	r24
    423a:	d2 f7       	brpl	.-12     	; 0x4230 <SSDLT_enuClearDisplay+0x972>
    423c:	d8 01       	movw	r26, r16
    423e:	c7 01       	movw	r24, r14
    4240:	98 2f       	mov	r25, r24
    4242:	8f 81       	ldd	r24, Y+7	; 0x07
    4244:	89 2b       	or	r24, r25
    4246:	8f 83       	std	Y+7, r24	; 0x07
													 SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin, DIO_u8LOW) << Local_u8LastBit));
			Local_u8LastBit += 3;
    4248:	8d 81       	ldd	r24, Y+5	; 0x05
    424a:	8d 5f       	subi	r24, 0xFD	; 253
    424c:	8d 83       	std	Y+5, r24	; 0x05
    424e:	64 c0       	rjmp	.+200    	; 0x4318 <SSDLT_enuClearDisplay+0xa5a>
		}
		else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    4250:	88 85       	ldd	r24, Y+8	; 0x08
    4252:	48 2f       	mov	r20, r24
    4254:	50 e0       	ldi	r21, 0x00	; 0
    4256:	ca 01       	movw	r24, r20
    4258:	88 0f       	add	r24, r24
    425a:	99 1f       	adc	r25, r25
    425c:	9c 01       	movw	r18, r24
    425e:	22 0f       	add	r18, r18
    4260:	33 1f       	adc	r19, r19
    4262:	22 0f       	add	r18, r18
    4264:	33 1f       	adc	r19, r19
    4266:	22 0f       	add	r18, r18
    4268:	33 1f       	adc	r19, r19
    426a:	82 0f       	add	r24, r18
    426c:	93 1f       	adc	r25, r19
    426e:	84 0f       	add	r24, r20
    4270:	95 1f       	adc	r25, r21
    4272:	fc 01       	movw	r30, r24
    4274:	ed 56       	subi	r30, 0x6D	; 109
    4276:	fe 4f       	sbci	r31, 0xFE	; 254
    4278:	80 81       	ld	r24, Z
    427a:	88 23       	and	r24, r24
    427c:	09 f0       	breq	.+2      	; 0x4280 <SSDLT_enuClearDisplay+0x9c2>
    427e:	49 c0       	rjmp	.+146    	; 0x4312 <SSDLT_enuClearDisplay+0xa54>
		{
			Local_enuErrorState |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port,
    4280:	88 85       	ldd	r24, Y+8	; 0x08
    4282:	48 2f       	mov	r20, r24
    4284:	50 e0       	ldi	r21, 0x00	; 0
    4286:	ca 01       	movw	r24, r20
    4288:	88 0f       	add	r24, r24
    428a:	99 1f       	adc	r25, r25
    428c:	9c 01       	movw	r18, r24
    428e:	22 0f       	add	r18, r18
    4290:	33 1f       	adc	r19, r19
    4292:	22 0f       	add	r18, r18
    4294:	33 1f       	adc	r19, r19
    4296:	22 0f       	add	r18, r18
    4298:	33 1f       	adc	r19, r19
    429a:	82 0f       	add	r24, r18
    429c:	93 1f       	adc	r25, r19
    429e:	84 0f       	add	r24, r20
    42a0:	95 1f       	adc	r25, r21
    42a2:	fc 01       	movw	r30, r24
    42a4:	ef 56       	subi	r30, 0x6F	; 111
    42a6:	fe 4f       	sbci	r31, 0xFE	; 254
    42a8:	60 81       	ld	r22, Z
    42aa:	88 85       	ldd	r24, Y+8	; 0x08
    42ac:	48 2f       	mov	r20, r24
    42ae:	50 e0       	ldi	r21, 0x00	; 0
    42b0:	ca 01       	movw	r24, r20
    42b2:	88 0f       	add	r24, r24
    42b4:	99 1f       	adc	r25, r25
    42b6:	9c 01       	movw	r18, r24
    42b8:	22 0f       	add	r18, r18
    42ba:	33 1f       	adc	r19, r19
    42bc:	22 0f       	add	r18, r18
    42be:	33 1f       	adc	r19, r19
    42c0:	22 0f       	add	r18, r18
    42c2:	33 1f       	adc	r19, r19
    42c4:	82 0f       	add	r24, r18
    42c6:	93 1f       	adc	r25, r19
    42c8:	84 0f       	add	r24, r20
    42ca:	95 1f       	adc	r25, r21
    42cc:	fc 01       	movw	r30, r24
    42ce:	ee 56       	subi	r30, 0x6E	; 110
    42d0:	fe 4f       	sbci	r31, 0xFE	; 254
    42d2:	90 81       	ld	r25, Z
    42d4:	86 2f       	mov	r24, r22
    42d6:	69 2f       	mov	r22, r25
    42d8:	41 e0       	ldi	r20, 0x01	; 1
    42da:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    42de:	28 2f       	mov	r18, r24
    42e0:	30 e0       	ldi	r19, 0x00	; 0
    42e2:	40 e0       	ldi	r20, 0x00	; 0
    42e4:	50 e0       	ldi	r21, 0x00	; 0
    42e6:	8d 81       	ldd	r24, Y+5	; 0x05
    42e8:	88 2f       	mov	r24, r24
    42ea:	90 e0       	ldi	r25, 0x00	; 0
    42ec:	79 01       	movw	r14, r18
    42ee:	8a 01       	movw	r16, r20
    42f0:	04 c0       	rjmp	.+8      	; 0x42fa <SSDLT_enuClearDisplay+0xa3c>
    42f2:	ee 0c       	add	r14, r14
    42f4:	ff 1c       	adc	r15, r15
    42f6:	00 1f       	adc	r16, r16
    42f8:	11 1f       	adc	r17, r17
    42fa:	8a 95       	dec	r24
    42fc:	d2 f7       	brpl	.-12     	; 0x42f2 <SSDLT_enuClearDisplay+0xa34>
    42fe:	d8 01       	movw	r26, r16
    4300:	c7 01       	movw	r24, r14
    4302:	98 2f       	mov	r25, r24
    4304:	8f 81       	ldd	r24, Y+7	; 0x07
    4306:	89 2b       	or	r24, r25
    4308:	8f 83       	std	Y+7, r24	; 0x07
													SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin, DIO_u8HIGH) << Local_u8LastBit));
			Local_u8LastBit += 3;
    430a:	8d 81       	ldd	r24, Y+5	; 0x05
    430c:	8d 5f       	subi	r24, 0xFD	; 253
    430e:	8d 83       	std	Y+5, r24	; 0x05
    4310:	03 c0       	rjmp	.+6      	; 0x4318 <SSDLT_enuClearDisplay+0xa5a>
		}
		else
		{
			return ES_OUT_OF_RANGE;
    4312:	03 e0       	ldi	r16, 0x03	; 3
    4314:	09 87       	std	Y+9, r16	; 0x09
    4316:	2b c0       	rjmp	.+86     	; 0x436e <SSDLT_enuClearDisplay+0xab0>
	else
	{
		return ES_OUT_OF_RANGE;
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < Local_u8LastBit; Local_u8Iterator += 3)
    4318:	1e 82       	std	Y+6, r1	; 0x06
    431a:	21 c0       	rjmp	.+66     	; 0x435e <SSDLT_enuClearDisplay+0xaa0>
		}

	}
	else
	{
		return ES_OUT_OF_RANGE;
    431c:	13 e0       	ldi	r17, 0x03	; 3
    431e:	19 87       	std	Y+9, r17	; 0x09
    4320:	26 c0       	rjmp	.+76     	; 0x436e <SSDLT_enuClearDisplay+0xab0>
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < Local_u8LastBit; Local_u8Iterator += 3)
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
    4322:	8e 81       	ldd	r24, Y+6	; 0x06
    4324:	28 2f       	mov	r18, r24
    4326:	30 e0       	ldi	r19, 0x00	; 0
    4328:	89 81       	ldd	r24, Y+1	; 0x01
    432a:	9a 81       	ldd	r25, Y+2	; 0x02
    432c:	ab 81       	ldd	r26, Y+3	; 0x03
    432e:	bc 81       	ldd	r27, Y+4	; 0x04
    4330:	02 2e       	mov	r0, r18
    4332:	04 c0       	rjmp	.+8      	; 0x433c <SSDLT_enuClearDisplay+0xa7e>
    4334:	b6 95       	lsr	r27
    4336:	a7 95       	ror	r26
    4338:	97 95       	ror	r25
    433a:	87 95       	ror	r24
    433c:	0a 94       	dec	r0
    433e:	d2 f7       	brpl	.-12     	; 0x4334 <SSDLT_enuClearDisplay+0xa76>
    4340:	87 70       	andi	r24, 0x07	; 7
    4342:	90 70       	andi	r25, 0x00	; 0
    4344:	a0 70       	andi	r26, 0x00	; 0
    4346:	b0 70       	andi	r27, 0x00	; 0
    4348:	81 30       	cpi	r24, 0x01	; 1
    434a:	91 05       	cpc	r25, r1
    434c:	a1 05       	cpc	r26, r1
    434e:	b1 05       	cpc	r27, r1
    4350:	19 f0       	breq	.+6      	; 0x4358 <SSDLT_enuClearDisplay+0xa9a>
		{
			return Local_enuErrorState;
    4352:	8f 81       	ldd	r24, Y+7	; 0x07
    4354:	89 87       	std	Y+9, r24	; 0x09
    4356:	0b c0       	rjmp	.+22     	; 0x436e <SSDLT_enuClearDisplay+0xab0>
	else
	{
		return ES_OUT_OF_RANGE;
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < Local_u8LastBit; Local_u8Iterator += 3)
    4358:	8e 81       	ldd	r24, Y+6	; 0x06
    435a:	8d 5f       	subi	r24, 0xFD	; 253
    435c:	8e 83       	std	Y+6, r24	; 0x06
    435e:	9e 81       	ldd	r25, Y+6	; 0x06
    4360:	8d 81       	ldd	r24, Y+5	; 0x05
    4362:	98 17       	cp	r25, r24
    4364:	f0 f2       	brcs	.-68     	; 0x4322 <SSDLT_enuClearDisplay+0xa64>
		{
			return Local_enuErrorState;
		}
	}

	Local_enuErrorState = ES_OK;
    4366:	81 e0       	ldi	r24, 0x01	; 1
    4368:	8f 83       	std	Y+7, r24	; 0x07

	return Local_enuErrorState;
    436a:	ef 80       	ldd	r14, Y+7	; 0x07
    436c:	e9 86       	std	Y+9, r14	; 0x09
    436e:	89 85       	ldd	r24, Y+9	; 0x09
}
    4370:	29 96       	adiw	r28, 0x09	; 9
    4372:	0f b6       	in	r0, 0x3f	; 63
    4374:	f8 94       	cli
    4376:	de bf       	out	0x3e, r29	; 62
    4378:	0f be       	out	0x3f, r0	; 63
    437a:	cd bf       	out	0x3d, r28	; 61
    437c:	cf 91       	pop	r28
    437e:	df 91       	pop	r29
    4380:	1f 91       	pop	r17
    4382:	0f 91       	pop	r16
    4384:	ff 90       	pop	r15
    4386:	ef 90       	pop	r14
    4388:	08 95       	ret

0000438a <SSD_enuInit>:
#include "SSD_config.h"
#include "SSD_private.h"
/***********************	Includes Section End	***********************/

ES_t SSD_enuInit(void)
{
    438a:	df 93       	push	r29
    438c:	cf 93       	push	r28
    438e:	cd b7       	in	r28, 0x3d	; 61
    4390:	de b7       	in	r29, 0x3e	; 62
    4392:	27 97       	sbiw	r28, 0x07	; 7
    4394:	0f b6       	in	r0, 0x3f	; 63
    4396:	f8 94       	cli
    4398:	de bf       	out	0x3e, r29	; 62
    439a:	0f be       	out	0x3f, r0	; 63
    439c:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    439e:	1e 82       	std	Y+6, r1	; 0x06

	u32 Local_u32Check = 0;
    43a0:	1a 82       	std	Y+2, r1	; 0x02
    43a2:	1b 82       	std	Y+3, r1	; 0x03
    43a4:	1c 82       	std	Y+4, r1	; 0x04
    43a6:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8Iterator = 0;
    43a8:	19 82       	std	Y+1, r1	; 0x01

	Local_u32Check |= (DIO_enuSetPinDirection(SEG_APORT, SEG_APIN, DIO_u8OUTPUT) << 0);
    43aa:	80 e0       	ldi	r24, 0x00	; 0
    43ac:	60 e0       	ldi	r22, 0x00	; 0
    43ae:	41 e0       	ldi	r20, 0x01	; 1
    43b0:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    43b4:	28 2f       	mov	r18, r24
    43b6:	30 e0       	ldi	r19, 0x00	; 0
    43b8:	40 e0       	ldi	r20, 0x00	; 0
    43ba:	50 e0       	ldi	r21, 0x00	; 0
    43bc:	8a 81       	ldd	r24, Y+2	; 0x02
    43be:	9b 81       	ldd	r25, Y+3	; 0x03
    43c0:	ac 81       	ldd	r26, Y+4	; 0x04
    43c2:	bd 81       	ldd	r27, Y+5	; 0x05
    43c4:	82 2b       	or	r24, r18
    43c6:	93 2b       	or	r25, r19
    43c8:	a4 2b       	or	r26, r20
    43ca:	b5 2b       	or	r27, r21
    43cc:	8a 83       	std	Y+2, r24	; 0x02
    43ce:	9b 83       	std	Y+3, r25	; 0x03
    43d0:	ac 83       	std	Y+4, r26	; 0x04
    43d2:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (DIO_enuSetPinDirection(SEG_BPORT, SEG_BPIN, DIO_u8OUTPUT) << 3);
    43d4:	80 e0       	ldi	r24, 0x00	; 0
    43d6:	61 e0       	ldi	r22, 0x01	; 1
    43d8:	41 e0       	ldi	r20, 0x01	; 1
    43da:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    43de:	88 2f       	mov	r24, r24
    43e0:	90 e0       	ldi	r25, 0x00	; 0
    43e2:	88 0f       	add	r24, r24
    43e4:	99 1f       	adc	r25, r25
    43e6:	88 0f       	add	r24, r24
    43e8:	99 1f       	adc	r25, r25
    43ea:	88 0f       	add	r24, r24
    43ec:	99 1f       	adc	r25, r25
    43ee:	9c 01       	movw	r18, r24
    43f0:	44 27       	eor	r20, r20
    43f2:	37 fd       	sbrc	r19, 7
    43f4:	40 95       	com	r20
    43f6:	54 2f       	mov	r21, r20
    43f8:	8a 81       	ldd	r24, Y+2	; 0x02
    43fa:	9b 81       	ldd	r25, Y+3	; 0x03
    43fc:	ac 81       	ldd	r26, Y+4	; 0x04
    43fe:	bd 81       	ldd	r27, Y+5	; 0x05
    4400:	82 2b       	or	r24, r18
    4402:	93 2b       	or	r25, r19
    4404:	a4 2b       	or	r26, r20
    4406:	b5 2b       	or	r27, r21
    4408:	8a 83       	std	Y+2, r24	; 0x02
    440a:	9b 83       	std	Y+3, r25	; 0x03
    440c:	ac 83       	std	Y+4, r26	; 0x04
    440e:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (DIO_enuSetPinDirection(SEG_CPORT, SEG_CPIN, DIO_u8OUTPUT) << 6);
    4410:	80 e0       	ldi	r24, 0x00	; 0
    4412:	62 e0       	ldi	r22, 0x02	; 2
    4414:	41 e0       	ldi	r20, 0x01	; 1
    4416:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    441a:	88 2f       	mov	r24, r24
    441c:	90 e0       	ldi	r25, 0x00	; 0
    441e:	00 24       	eor	r0, r0
    4420:	96 95       	lsr	r25
    4422:	87 95       	ror	r24
    4424:	07 94       	ror	r0
    4426:	96 95       	lsr	r25
    4428:	87 95       	ror	r24
    442a:	07 94       	ror	r0
    442c:	98 2f       	mov	r25, r24
    442e:	80 2d       	mov	r24, r0
    4430:	9c 01       	movw	r18, r24
    4432:	44 27       	eor	r20, r20
    4434:	37 fd       	sbrc	r19, 7
    4436:	40 95       	com	r20
    4438:	54 2f       	mov	r21, r20
    443a:	8a 81       	ldd	r24, Y+2	; 0x02
    443c:	9b 81       	ldd	r25, Y+3	; 0x03
    443e:	ac 81       	ldd	r26, Y+4	; 0x04
    4440:	bd 81       	ldd	r27, Y+5	; 0x05
    4442:	82 2b       	or	r24, r18
    4444:	93 2b       	or	r25, r19
    4446:	a4 2b       	or	r26, r20
    4448:	b5 2b       	or	r27, r21
    444a:	8a 83       	std	Y+2, r24	; 0x02
    444c:	9b 83       	std	Y+3, r25	; 0x03
    444e:	ac 83       	std	Y+4, r26	; 0x04
    4450:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (DIO_enuSetPinDirection(SEG_DPORT, SEG_DPIN, DIO_u8OUTPUT) << 9);
    4452:	81 e0       	ldi	r24, 0x01	; 1
    4454:	60 e0       	ldi	r22, 0x00	; 0
    4456:	41 e0       	ldi	r20, 0x01	; 1
    4458:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    445c:	88 2f       	mov	r24, r24
    445e:	90 e0       	ldi	r25, 0x00	; 0
    4460:	98 2f       	mov	r25, r24
    4462:	88 27       	eor	r24, r24
    4464:	99 0f       	add	r25, r25
    4466:	9c 01       	movw	r18, r24
    4468:	44 27       	eor	r20, r20
    446a:	37 fd       	sbrc	r19, 7
    446c:	40 95       	com	r20
    446e:	54 2f       	mov	r21, r20
    4470:	8a 81       	ldd	r24, Y+2	; 0x02
    4472:	9b 81       	ldd	r25, Y+3	; 0x03
    4474:	ac 81       	ldd	r26, Y+4	; 0x04
    4476:	bd 81       	ldd	r27, Y+5	; 0x05
    4478:	82 2b       	or	r24, r18
    447a:	93 2b       	or	r25, r19
    447c:	a4 2b       	or	r26, r20
    447e:	b5 2b       	or	r27, r21
    4480:	8a 83       	std	Y+2, r24	; 0x02
    4482:	9b 83       	std	Y+3, r25	; 0x03
    4484:	ac 83       	std	Y+4, r26	; 0x04
    4486:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (DIO_enuSetPinDirection(SEG_EPORT, SEG_EPIN, DIO_u8OUTPUT) << 12);
    4488:	81 e0       	ldi	r24, 0x01	; 1
    448a:	61 e0       	ldi	r22, 0x01	; 1
    448c:	41 e0       	ldi	r20, 0x01	; 1
    448e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    4492:	88 2f       	mov	r24, r24
    4494:	90 e0       	ldi	r25, 0x00	; 0
    4496:	98 2f       	mov	r25, r24
    4498:	88 27       	eor	r24, r24
    449a:	92 95       	swap	r25
    449c:	90 7f       	andi	r25, 0xF0	; 240
    449e:	9c 01       	movw	r18, r24
    44a0:	44 27       	eor	r20, r20
    44a2:	37 fd       	sbrc	r19, 7
    44a4:	40 95       	com	r20
    44a6:	54 2f       	mov	r21, r20
    44a8:	8a 81       	ldd	r24, Y+2	; 0x02
    44aa:	9b 81       	ldd	r25, Y+3	; 0x03
    44ac:	ac 81       	ldd	r26, Y+4	; 0x04
    44ae:	bd 81       	ldd	r27, Y+5	; 0x05
    44b0:	82 2b       	or	r24, r18
    44b2:	93 2b       	or	r25, r19
    44b4:	a4 2b       	or	r26, r20
    44b6:	b5 2b       	or	r27, r21
    44b8:	8a 83       	std	Y+2, r24	; 0x02
    44ba:	9b 83       	std	Y+3, r25	; 0x03
    44bc:	ac 83       	std	Y+4, r26	; 0x04
    44be:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (((u32)DIO_enuSetPinDirection(SEG_GPORT, SEG_GPIN, DIO_u8OUTPUT)) << 15);
    44c0:	81 e0       	ldi	r24, 0x01	; 1
    44c2:	63 e0       	ldi	r22, 0x03	; 3
    44c4:	41 e0       	ldi	r20, 0x01	; 1
    44c6:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    44ca:	88 2f       	mov	r24, r24
    44cc:	90 e0       	ldi	r25, 0x00	; 0
    44ce:	a0 e0       	ldi	r26, 0x00	; 0
    44d0:	b0 e0       	ldi	r27, 0x00	; 0
    44d2:	9c 01       	movw	r18, r24
    44d4:	ad 01       	movw	r20, r26
    44d6:	01 2e       	mov	r0, r17
    44d8:	1f e0       	ldi	r17, 0x0F	; 15
    44da:	22 0f       	add	r18, r18
    44dc:	33 1f       	adc	r19, r19
    44de:	44 1f       	adc	r20, r20
    44e0:	55 1f       	adc	r21, r21
    44e2:	1a 95       	dec	r17
    44e4:	d1 f7       	brne	.-12     	; 0x44da <SSD_enuInit+0x150>
    44e6:	10 2d       	mov	r17, r0
    44e8:	8a 81       	ldd	r24, Y+2	; 0x02
    44ea:	9b 81       	ldd	r25, Y+3	; 0x03
    44ec:	ac 81       	ldd	r26, Y+4	; 0x04
    44ee:	bd 81       	ldd	r27, Y+5	; 0x05
    44f0:	82 2b       	or	r24, r18
    44f2:	93 2b       	or	r25, r19
    44f4:	a4 2b       	or	r26, r20
    44f6:	b5 2b       	or	r27, r21
    44f8:	8a 83       	std	Y+2, r24	; 0x02
    44fa:	9b 83       	std	Y+3, r25	; 0x03
    44fc:	ac 83       	std	Y+4, r26	; 0x04
    44fe:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (((u32)DIO_enuSetPinDirection(SEG_GPORT, SEG_GPIN, DIO_u8OUTPUT)) << 18);
    4500:	81 e0       	ldi	r24, 0x01	; 1
    4502:	63 e0       	ldi	r22, 0x03	; 3
    4504:	41 e0       	ldi	r20, 0x01	; 1
    4506:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    450a:	88 2f       	mov	r24, r24
    450c:	90 e0       	ldi	r25, 0x00	; 0
    450e:	a0 e0       	ldi	r26, 0x00	; 0
    4510:	b0 e0       	ldi	r27, 0x00	; 0
    4512:	9c 01       	movw	r18, r24
    4514:	ad 01       	movw	r20, r26
    4516:	01 2e       	mov	r0, r17
    4518:	12 e1       	ldi	r17, 0x12	; 18
    451a:	22 0f       	add	r18, r18
    451c:	33 1f       	adc	r19, r19
    451e:	44 1f       	adc	r20, r20
    4520:	55 1f       	adc	r21, r21
    4522:	1a 95       	dec	r17
    4524:	d1 f7       	brne	.-12     	; 0x451a <SSD_enuInit+0x190>
    4526:	10 2d       	mov	r17, r0
    4528:	8a 81       	ldd	r24, Y+2	; 0x02
    452a:	9b 81       	ldd	r25, Y+3	; 0x03
    452c:	ac 81       	ldd	r26, Y+4	; 0x04
    452e:	bd 81       	ldd	r27, Y+5	; 0x05
    4530:	82 2b       	or	r24, r18
    4532:	93 2b       	or	r25, r19
    4534:	a4 2b       	or	r26, r20
    4536:	b5 2b       	or	r27, r21
    4538:	8a 83       	std	Y+2, r24	; 0x02
    453a:	9b 83       	std	Y+3, r25	; 0x03
    453c:	ac 83       	std	Y+4, r26	; 0x04
    453e:	bd 83       	std	Y+5, r27	; 0x05
	 *  	0000 0000 0000 0100 1001 0010 0100 1001
	 * */

	//Because we work as pre compile config we will use #if
	#if SEG_CMN_PIN <= DIO_u8PIN7 && SEG_CMN_PORT <= DIO_u8PORTD
		Local_u32Check |= (((u32)DIO_enuSetPinDirection(SEG_CMN_PORT, SEG_CMN_PIN, DIO_u8OUTPUT)) << 21);
    4540:	82 e0       	ldi	r24, 0x02	; 2
    4542:	62 e0       	ldi	r22, 0x02	; 2
    4544:	41 e0       	ldi	r20, 0x01	; 1
    4546:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    454a:	88 2f       	mov	r24, r24
    454c:	90 e0       	ldi	r25, 0x00	; 0
    454e:	a0 e0       	ldi	r26, 0x00	; 0
    4550:	b0 e0       	ldi	r27, 0x00	; 0
    4552:	9c 01       	movw	r18, r24
    4554:	ad 01       	movw	r20, r26
    4556:	01 2e       	mov	r0, r17
    4558:	15 e1       	ldi	r17, 0x15	; 21
    455a:	22 0f       	add	r18, r18
    455c:	33 1f       	adc	r19, r19
    455e:	44 1f       	adc	r20, r20
    4560:	55 1f       	adc	r21, r21
    4562:	1a 95       	dec	r17
    4564:	d1 f7       	brne	.-12     	; 0x455a <SSD_enuInit+0x1d0>
    4566:	10 2d       	mov	r17, r0
    4568:	8a 81       	ldd	r24, Y+2	; 0x02
    456a:	9b 81       	ldd	r25, Y+3	; 0x03
    456c:	ac 81       	ldd	r26, Y+4	; 0x04
    456e:	bd 81       	ldd	r27, Y+5	; 0x05
    4570:	82 2b       	or	r24, r18
    4572:	93 2b       	or	r25, r19
    4574:	a4 2b       	or	r26, r20
    4576:	b5 2b       	or	r27, r21
    4578:	8a 83       	std	Y+2, r24	; 0x02
    457a:	9b 83       	std	Y+3, r25	; 0x03
    457c:	ac 83       	std	Y+4, r26	; 0x04
    457e:	bd 83       	std	Y+5, r27	; 0x05
	#else
		#error "Your Common pin has a wrong selection!"
	#endif

	#if SEG_DOT_PIN <= DIO_u8PIN7 && SEG_DOT_PORT <= DIO_u8PORTD
		Local_u32Check |= (((u32)DIO_enuSetPinDirection(SEG_DOT_PORT, SEG_DOT_PIN, DIO_u8OUTPUT)) << 24);
    4580:	82 e0       	ldi	r24, 0x02	; 2
    4582:	62 e0       	ldi	r22, 0x02	; 2
    4584:	41 e0       	ldi	r20, 0x01	; 1
    4586:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    458a:	88 2f       	mov	r24, r24
    458c:	90 e0       	ldi	r25, 0x00	; 0
    458e:	a0 e0       	ldi	r26, 0x00	; 0
    4590:	b0 e0       	ldi	r27, 0x00	; 0
    4592:	58 2f       	mov	r21, r24
    4594:	44 27       	eor	r20, r20
    4596:	33 27       	eor	r19, r19
    4598:	22 27       	eor	r18, r18
    459a:	8a 81       	ldd	r24, Y+2	; 0x02
    459c:	9b 81       	ldd	r25, Y+3	; 0x03
    459e:	ac 81       	ldd	r26, Y+4	; 0x04
    45a0:	bd 81       	ldd	r27, Y+5	; 0x05
    45a2:	82 2b       	or	r24, r18
    45a4:	93 2b       	or	r25, r19
    45a6:	a4 2b       	or	r26, r20
    45a8:	b5 2b       	or	r27, r21
    45aa:	8a 83       	std	Y+2, r24	; 0x02
    45ac:	9b 83       	std	Y+3, r25	; 0x03
    45ae:	ac 83       	std	Y+4, r26	; 0x04
    45b0:	bd 83       	std	Y+5, r27	; 0x05
	#else
		#error "Your DOT pin has a wrong selection!"
	#endif


	for(Local_u8Iterator = 0; Local_u8Iterator < 27; Local_u8Iterator += 3)
    45b2:	19 82       	std	Y+1, r1	; 0x01
    45b4:	1e c0       	rjmp	.+60     	; 0x45f2 <SSD_enuInit+0x268>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
    45b6:	89 81       	ldd	r24, Y+1	; 0x01
    45b8:	28 2f       	mov	r18, r24
    45ba:	30 e0       	ldi	r19, 0x00	; 0
    45bc:	8a 81       	ldd	r24, Y+2	; 0x02
    45be:	9b 81       	ldd	r25, Y+3	; 0x03
    45c0:	ac 81       	ldd	r26, Y+4	; 0x04
    45c2:	bd 81       	ldd	r27, Y+5	; 0x05
    45c4:	02 2e       	mov	r0, r18
    45c6:	04 c0       	rjmp	.+8      	; 0x45d0 <SSD_enuInit+0x246>
    45c8:	b6 95       	lsr	r27
    45ca:	a7 95       	ror	r26
    45cc:	97 95       	ror	r25
    45ce:	87 95       	ror	r24
    45d0:	0a 94       	dec	r0
    45d2:	d2 f7       	brpl	.-12     	; 0x45c8 <SSD_enuInit+0x23e>
    45d4:	87 70       	andi	r24, 0x07	; 7
    45d6:	90 70       	andi	r25, 0x00	; 0
    45d8:	a0 70       	andi	r26, 0x00	; 0
    45da:	b0 70       	andi	r27, 0x00	; 0
    45dc:	81 30       	cpi	r24, 0x01	; 1
    45de:	91 05       	cpc	r25, r1
    45e0:	a1 05       	cpc	r26, r1
    45e2:	b1 05       	cpc	r27, r1
    45e4:	19 f0       	breq	.+6      	; 0x45ec <SSD_enuInit+0x262>
		{
			return Local_enuErrorState;
    45e6:	8e 81       	ldd	r24, Y+6	; 0x06
    45e8:	8f 83       	std	Y+7, r24	; 0x07
    45ea:	0a c0       	rjmp	.+20     	; 0x4600 <SSD_enuInit+0x276>
	#else
		#error "Your DOT pin has a wrong selection!"
	#endif


	for(Local_u8Iterator = 0; Local_u8Iterator < 27; Local_u8Iterator += 3)
    45ec:	89 81       	ldd	r24, Y+1	; 0x01
    45ee:	8d 5f       	subi	r24, 0xFD	; 253
    45f0:	89 83       	std	Y+1, r24	; 0x01
    45f2:	89 81       	ldd	r24, Y+1	; 0x01
    45f4:	8b 31       	cpi	r24, 0x1B	; 27
    45f6:	f8 f2       	brcs	.-66     	; 0x45b6 <SSD_enuInit+0x22c>
		{
			return Local_enuErrorState;
		}
	}

	Local_enuErrorState = ES_OK;
    45f8:	81 e0       	ldi	r24, 0x01	; 1
    45fa:	8e 83       	std	Y+6, r24	; 0x06

	return Local_enuErrorState;
    45fc:	8e 81       	ldd	r24, Y+6	; 0x06
    45fe:	8f 83       	std	Y+7, r24	; 0x07
    4600:	8f 81       	ldd	r24, Y+7	; 0x07
}
    4602:	27 96       	adiw	r28, 0x07	; 7
    4604:	0f b6       	in	r0, 0x3f	; 63
    4606:	f8 94       	cli
    4608:	de bf       	out	0x3e, r29	; 62
    460a:	0f be       	out	0x3f, r0	; 63
    460c:	cd bf       	out	0x3d, r28	; 61
    460e:	cf 91       	pop	r28
    4610:	df 91       	pop	r29
    4612:	08 95       	ret

00004614 <SSD_enuDisplayNum>:

ES_t SSD_enuDisplayNum(u8 Copy_u8Number)
{
    4614:	df 93       	push	r29
    4616:	cf 93       	push	r28
    4618:	cd b7       	in	r28, 0x3d	; 61
    461a:	de b7       	in	r29, 0x3e	; 62
    461c:	28 97       	sbiw	r28, 0x08	; 8
    461e:	0f b6       	in	r0, 0x3f	; 63
    4620:	f8 94       	cli
    4622:	de bf       	out	0x3e, r29	; 62
    4624:	0f be       	out	0x3f, r0	; 63
    4626:	cd bf       	out	0x3d, r28	; 61
    4628:	8f 83       	std	Y+7, r24	; 0x07
	ES_t Local_enuErrorState = ES_NOK;
    462a:	1e 82       	std	Y+6, r1	; 0x06

	u32 Local_u32Check = 0;
    462c:	1a 82       	std	Y+2, r1	; 0x02
    462e:	1b 82       	std	Y+3, r1	; 0x03
    4630:	1c 82       	std	Y+4, r1	; 0x04
    4632:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8Iterator = 0;
    4634:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Number < 10)
    4636:	8f 81       	ldd	r24, Y+7	; 0x07
    4638:	8a 30       	cpi	r24, 0x0A	; 10
    463a:	08 f0       	brcs	.+2      	; 0x463e <SSD_enuDisplayNum+0x2a>
    463c:	1b c1       	rjmp	.+566    	; 0x4874 <SSD_enuDisplayNum+0x260>
	{
		#if SEG_TYPE == COMMON_CATHODE
			Local_u32Check |= (DIO_enuSetPinValue(SEG_APORT, SEG_APIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 0) & 1)) << 0);
    463e:	8f 81       	ldd	r24, Y+7	; 0x07
    4640:	88 2f       	mov	r24, r24
    4642:	90 e0       	ldi	r25, 0x00	; 0
    4644:	fc 01       	movw	r30, r24
    4646:	ef 54       	subi	r30, 0x4F	; 79
    4648:	fe 4f       	sbci	r31, 0xFE	; 254
    464a:	80 81       	ld	r24, Z
    464c:	98 2f       	mov	r25, r24
    464e:	91 70       	andi	r25, 0x01	; 1
    4650:	80 e0       	ldi	r24, 0x00	; 0
    4652:	60 e0       	ldi	r22, 0x00	; 0
    4654:	49 2f       	mov	r20, r25
    4656:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    465a:	28 2f       	mov	r18, r24
    465c:	30 e0       	ldi	r19, 0x00	; 0
    465e:	40 e0       	ldi	r20, 0x00	; 0
    4660:	50 e0       	ldi	r21, 0x00	; 0
    4662:	8a 81       	ldd	r24, Y+2	; 0x02
    4664:	9b 81       	ldd	r25, Y+3	; 0x03
    4666:	ac 81       	ldd	r26, Y+4	; 0x04
    4668:	bd 81       	ldd	r27, Y+5	; 0x05
    466a:	82 2b       	or	r24, r18
    466c:	93 2b       	or	r25, r19
    466e:	a4 2b       	or	r26, r20
    4670:	b5 2b       	or	r27, r21
    4672:	8a 83       	std	Y+2, r24	; 0x02
    4674:	9b 83       	std	Y+3, r25	; 0x03
    4676:	ac 83       	std	Y+4, r26	; 0x04
    4678:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (DIO_enuSetPinValue(SEG_BPORT, SEG_BPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 1) & 1)) << 3);
    467a:	8f 81       	ldd	r24, Y+7	; 0x07
    467c:	88 2f       	mov	r24, r24
    467e:	90 e0       	ldi	r25, 0x00	; 0
    4680:	fc 01       	movw	r30, r24
    4682:	ef 54       	subi	r30, 0x4F	; 79
    4684:	fe 4f       	sbci	r31, 0xFE	; 254
    4686:	80 81       	ld	r24, Z
    4688:	86 95       	lsr	r24
    468a:	98 2f       	mov	r25, r24
    468c:	91 70       	andi	r25, 0x01	; 1
    468e:	80 e0       	ldi	r24, 0x00	; 0
    4690:	61 e0       	ldi	r22, 0x01	; 1
    4692:	49 2f       	mov	r20, r25
    4694:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4698:	88 2f       	mov	r24, r24
    469a:	90 e0       	ldi	r25, 0x00	; 0
    469c:	88 0f       	add	r24, r24
    469e:	99 1f       	adc	r25, r25
    46a0:	88 0f       	add	r24, r24
    46a2:	99 1f       	adc	r25, r25
    46a4:	88 0f       	add	r24, r24
    46a6:	99 1f       	adc	r25, r25
    46a8:	9c 01       	movw	r18, r24
    46aa:	44 27       	eor	r20, r20
    46ac:	37 fd       	sbrc	r19, 7
    46ae:	40 95       	com	r20
    46b0:	54 2f       	mov	r21, r20
    46b2:	8a 81       	ldd	r24, Y+2	; 0x02
    46b4:	9b 81       	ldd	r25, Y+3	; 0x03
    46b6:	ac 81       	ldd	r26, Y+4	; 0x04
    46b8:	bd 81       	ldd	r27, Y+5	; 0x05
    46ba:	82 2b       	or	r24, r18
    46bc:	93 2b       	or	r25, r19
    46be:	a4 2b       	or	r26, r20
    46c0:	b5 2b       	or	r27, r21
    46c2:	8a 83       	std	Y+2, r24	; 0x02
    46c4:	9b 83       	std	Y+3, r25	; 0x03
    46c6:	ac 83       	std	Y+4, r26	; 0x04
    46c8:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (DIO_enuSetPinValue(SEG_CPORT, SEG_CPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 2) & 1)) << 6);
    46ca:	8f 81       	ldd	r24, Y+7	; 0x07
    46cc:	88 2f       	mov	r24, r24
    46ce:	90 e0       	ldi	r25, 0x00	; 0
    46d0:	fc 01       	movw	r30, r24
    46d2:	ef 54       	subi	r30, 0x4F	; 79
    46d4:	fe 4f       	sbci	r31, 0xFE	; 254
    46d6:	80 81       	ld	r24, Z
    46d8:	86 95       	lsr	r24
    46da:	86 95       	lsr	r24
    46dc:	98 2f       	mov	r25, r24
    46de:	91 70       	andi	r25, 0x01	; 1
    46e0:	80 e0       	ldi	r24, 0x00	; 0
    46e2:	62 e0       	ldi	r22, 0x02	; 2
    46e4:	49 2f       	mov	r20, r25
    46e6:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    46ea:	88 2f       	mov	r24, r24
    46ec:	90 e0       	ldi	r25, 0x00	; 0
    46ee:	00 24       	eor	r0, r0
    46f0:	96 95       	lsr	r25
    46f2:	87 95       	ror	r24
    46f4:	07 94       	ror	r0
    46f6:	96 95       	lsr	r25
    46f8:	87 95       	ror	r24
    46fa:	07 94       	ror	r0
    46fc:	98 2f       	mov	r25, r24
    46fe:	80 2d       	mov	r24, r0
    4700:	9c 01       	movw	r18, r24
    4702:	44 27       	eor	r20, r20
    4704:	37 fd       	sbrc	r19, 7
    4706:	40 95       	com	r20
    4708:	54 2f       	mov	r21, r20
    470a:	8a 81       	ldd	r24, Y+2	; 0x02
    470c:	9b 81       	ldd	r25, Y+3	; 0x03
    470e:	ac 81       	ldd	r26, Y+4	; 0x04
    4710:	bd 81       	ldd	r27, Y+5	; 0x05
    4712:	82 2b       	or	r24, r18
    4714:	93 2b       	or	r25, r19
    4716:	a4 2b       	or	r26, r20
    4718:	b5 2b       	or	r27, r21
    471a:	8a 83       	std	Y+2, r24	; 0x02
    471c:	9b 83       	std	Y+3, r25	; 0x03
    471e:	ac 83       	std	Y+4, r26	; 0x04
    4720:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (DIO_enuSetPinValue(SEG_DPORT, SEG_DPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 3) & 1)) << 9);
    4722:	8f 81       	ldd	r24, Y+7	; 0x07
    4724:	88 2f       	mov	r24, r24
    4726:	90 e0       	ldi	r25, 0x00	; 0
    4728:	fc 01       	movw	r30, r24
    472a:	ef 54       	subi	r30, 0x4F	; 79
    472c:	fe 4f       	sbci	r31, 0xFE	; 254
    472e:	80 81       	ld	r24, Z
    4730:	86 95       	lsr	r24
    4732:	86 95       	lsr	r24
    4734:	86 95       	lsr	r24
    4736:	98 2f       	mov	r25, r24
    4738:	91 70       	andi	r25, 0x01	; 1
    473a:	81 e0       	ldi	r24, 0x01	; 1
    473c:	60 e0       	ldi	r22, 0x00	; 0
    473e:	49 2f       	mov	r20, r25
    4740:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4744:	88 2f       	mov	r24, r24
    4746:	90 e0       	ldi	r25, 0x00	; 0
    4748:	98 2f       	mov	r25, r24
    474a:	88 27       	eor	r24, r24
    474c:	99 0f       	add	r25, r25
    474e:	9c 01       	movw	r18, r24
    4750:	44 27       	eor	r20, r20
    4752:	37 fd       	sbrc	r19, 7
    4754:	40 95       	com	r20
    4756:	54 2f       	mov	r21, r20
    4758:	8a 81       	ldd	r24, Y+2	; 0x02
    475a:	9b 81       	ldd	r25, Y+3	; 0x03
    475c:	ac 81       	ldd	r26, Y+4	; 0x04
    475e:	bd 81       	ldd	r27, Y+5	; 0x05
    4760:	82 2b       	or	r24, r18
    4762:	93 2b       	or	r25, r19
    4764:	a4 2b       	or	r26, r20
    4766:	b5 2b       	or	r27, r21
    4768:	8a 83       	std	Y+2, r24	; 0x02
    476a:	9b 83       	std	Y+3, r25	; 0x03
    476c:	ac 83       	std	Y+4, r26	; 0x04
    476e:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (DIO_enuSetPinValue(SEG_EPORT, SEG_EPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 4) & 1)) << 12);
    4770:	8f 81       	ldd	r24, Y+7	; 0x07
    4772:	88 2f       	mov	r24, r24
    4774:	90 e0       	ldi	r25, 0x00	; 0
    4776:	fc 01       	movw	r30, r24
    4778:	ef 54       	subi	r30, 0x4F	; 79
    477a:	fe 4f       	sbci	r31, 0xFE	; 254
    477c:	80 81       	ld	r24, Z
    477e:	82 95       	swap	r24
    4780:	8f 70       	andi	r24, 0x0F	; 15
    4782:	98 2f       	mov	r25, r24
    4784:	91 70       	andi	r25, 0x01	; 1
    4786:	81 e0       	ldi	r24, 0x01	; 1
    4788:	61 e0       	ldi	r22, 0x01	; 1
    478a:	49 2f       	mov	r20, r25
    478c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4790:	88 2f       	mov	r24, r24
    4792:	90 e0       	ldi	r25, 0x00	; 0
    4794:	98 2f       	mov	r25, r24
    4796:	88 27       	eor	r24, r24
    4798:	92 95       	swap	r25
    479a:	90 7f       	andi	r25, 0xF0	; 240
    479c:	9c 01       	movw	r18, r24
    479e:	44 27       	eor	r20, r20
    47a0:	37 fd       	sbrc	r19, 7
    47a2:	40 95       	com	r20
    47a4:	54 2f       	mov	r21, r20
    47a6:	8a 81       	ldd	r24, Y+2	; 0x02
    47a8:	9b 81       	ldd	r25, Y+3	; 0x03
    47aa:	ac 81       	ldd	r26, Y+4	; 0x04
    47ac:	bd 81       	ldd	r27, Y+5	; 0x05
    47ae:	82 2b       	or	r24, r18
    47b0:	93 2b       	or	r25, r19
    47b2:	a4 2b       	or	r26, r20
    47b4:	b5 2b       	or	r27, r21
    47b6:	8a 83       	std	Y+2, r24	; 0x02
    47b8:	9b 83       	std	Y+3, r25	; 0x03
    47ba:	ac 83       	std	Y+4, r26	; 0x04
    47bc:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_FPORT, SEG_FPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 5) & 1))) << 15);
    47be:	8f 81       	ldd	r24, Y+7	; 0x07
    47c0:	88 2f       	mov	r24, r24
    47c2:	90 e0       	ldi	r25, 0x00	; 0
    47c4:	fc 01       	movw	r30, r24
    47c6:	ef 54       	subi	r30, 0x4F	; 79
    47c8:	fe 4f       	sbci	r31, 0xFE	; 254
    47ca:	80 81       	ld	r24, Z
    47cc:	82 95       	swap	r24
    47ce:	86 95       	lsr	r24
    47d0:	87 70       	andi	r24, 0x07	; 7
    47d2:	98 2f       	mov	r25, r24
    47d4:	91 70       	andi	r25, 0x01	; 1
    47d6:	81 e0       	ldi	r24, 0x01	; 1
    47d8:	62 e0       	ldi	r22, 0x02	; 2
    47da:	49 2f       	mov	r20, r25
    47dc:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    47e0:	88 2f       	mov	r24, r24
    47e2:	90 e0       	ldi	r25, 0x00	; 0
    47e4:	a0 e0       	ldi	r26, 0x00	; 0
    47e6:	b0 e0       	ldi	r27, 0x00	; 0
    47e8:	9c 01       	movw	r18, r24
    47ea:	ad 01       	movw	r20, r26
    47ec:	01 2e       	mov	r0, r17
    47ee:	1f e0       	ldi	r17, 0x0F	; 15
    47f0:	22 0f       	add	r18, r18
    47f2:	33 1f       	adc	r19, r19
    47f4:	44 1f       	adc	r20, r20
    47f6:	55 1f       	adc	r21, r21
    47f8:	1a 95       	dec	r17
    47fa:	d1 f7       	brne	.-12     	; 0x47f0 <SSD_enuDisplayNum+0x1dc>
    47fc:	10 2d       	mov	r17, r0
    47fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4800:	9b 81       	ldd	r25, Y+3	; 0x03
    4802:	ac 81       	ldd	r26, Y+4	; 0x04
    4804:	bd 81       	ldd	r27, Y+5	; 0x05
    4806:	82 2b       	or	r24, r18
    4808:	93 2b       	or	r25, r19
    480a:	a4 2b       	or	r26, r20
    480c:	b5 2b       	or	r27, r21
    480e:	8a 83       	std	Y+2, r24	; 0x02
    4810:	9b 83       	std	Y+3, r25	; 0x03
    4812:	ac 83       	std	Y+4, r26	; 0x04
    4814:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_GPORT, SEG_GPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 6) & 1))) << 18);
    4816:	8f 81       	ldd	r24, Y+7	; 0x07
    4818:	88 2f       	mov	r24, r24
    481a:	90 e0       	ldi	r25, 0x00	; 0
    481c:	fc 01       	movw	r30, r24
    481e:	ef 54       	subi	r30, 0x4F	; 79
    4820:	fe 4f       	sbci	r31, 0xFE	; 254
    4822:	80 81       	ld	r24, Z
    4824:	82 95       	swap	r24
    4826:	86 95       	lsr	r24
    4828:	86 95       	lsr	r24
    482a:	83 70       	andi	r24, 0x03	; 3
    482c:	98 2f       	mov	r25, r24
    482e:	91 70       	andi	r25, 0x01	; 1
    4830:	81 e0       	ldi	r24, 0x01	; 1
    4832:	63 e0       	ldi	r22, 0x03	; 3
    4834:	49 2f       	mov	r20, r25
    4836:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    483a:	88 2f       	mov	r24, r24
    483c:	90 e0       	ldi	r25, 0x00	; 0
    483e:	a0 e0       	ldi	r26, 0x00	; 0
    4840:	b0 e0       	ldi	r27, 0x00	; 0
    4842:	9c 01       	movw	r18, r24
    4844:	ad 01       	movw	r20, r26
    4846:	01 2e       	mov	r0, r17
    4848:	12 e1       	ldi	r17, 0x12	; 18
    484a:	22 0f       	add	r18, r18
    484c:	33 1f       	adc	r19, r19
    484e:	44 1f       	adc	r20, r20
    4850:	55 1f       	adc	r21, r21
    4852:	1a 95       	dec	r17
    4854:	d1 f7       	brne	.-12     	; 0x484a <SSD_enuDisplayNum+0x236>
    4856:	10 2d       	mov	r17, r0
    4858:	8a 81       	ldd	r24, Y+2	; 0x02
    485a:	9b 81       	ldd	r25, Y+3	; 0x03
    485c:	ac 81       	ldd	r26, Y+4	; 0x04
    485e:	bd 81       	ldd	r27, Y+5	; 0x05
    4860:	82 2b       	or	r24, r18
    4862:	93 2b       	or	r25, r19
    4864:	a4 2b       	or	r26, r20
    4866:	b5 2b       	or	r27, r21
    4868:	8a 83       	std	Y+2, r24	; 0x02
    486a:	9b 83       	std	Y+3, r25	; 0x03
    486c:	ac 83       	std	Y+4, r26	; 0x04
    486e:	bd 83       	std	Y+5, r27	; 0x05
	else
	{
		return ES_OUT_OF_RANGE;
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    4870:	19 82       	std	Y+1, r1	; 0x01
    4872:	21 c0       	rjmp	.+66     	; 0x48b6 <SSD_enuDisplayNum+0x2a2>
			#error "Your type selection is invalid!"
		#endif
	}
	else
	{
		return ES_OUT_OF_RANGE;
    4874:	83 e0       	ldi	r24, 0x03	; 3
    4876:	88 87       	std	Y+8, r24	; 0x08
    4878:	25 c0       	rjmp	.+74     	; 0x48c4 <SSD_enuDisplayNum+0x2b0>
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
    487a:	89 81       	ldd	r24, Y+1	; 0x01
    487c:	28 2f       	mov	r18, r24
    487e:	30 e0       	ldi	r19, 0x00	; 0
    4880:	8a 81       	ldd	r24, Y+2	; 0x02
    4882:	9b 81       	ldd	r25, Y+3	; 0x03
    4884:	ac 81       	ldd	r26, Y+4	; 0x04
    4886:	bd 81       	ldd	r27, Y+5	; 0x05
    4888:	02 2e       	mov	r0, r18
    488a:	04 c0       	rjmp	.+8      	; 0x4894 <SSD_enuDisplayNum+0x280>
    488c:	b6 95       	lsr	r27
    488e:	a7 95       	ror	r26
    4890:	97 95       	ror	r25
    4892:	87 95       	ror	r24
    4894:	0a 94       	dec	r0
    4896:	d2 f7       	brpl	.-12     	; 0x488c <SSD_enuDisplayNum+0x278>
    4898:	87 70       	andi	r24, 0x07	; 7
    489a:	90 70       	andi	r25, 0x00	; 0
    489c:	a0 70       	andi	r26, 0x00	; 0
    489e:	b0 70       	andi	r27, 0x00	; 0
    48a0:	81 30       	cpi	r24, 0x01	; 1
    48a2:	91 05       	cpc	r25, r1
    48a4:	a1 05       	cpc	r26, r1
    48a6:	b1 05       	cpc	r27, r1
    48a8:	19 f0       	breq	.+6      	; 0x48b0 <SSD_enuDisplayNum+0x29c>
		{
			return Local_enuErrorState;
    48aa:	8e 81       	ldd	r24, Y+6	; 0x06
    48ac:	88 87       	std	Y+8, r24	; 0x08
    48ae:	0a c0       	rjmp	.+20     	; 0x48c4 <SSD_enuDisplayNum+0x2b0>
	else
	{
		return ES_OUT_OF_RANGE;
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    48b0:	89 81       	ldd	r24, Y+1	; 0x01
    48b2:	8d 5f       	subi	r24, 0xFD	; 253
    48b4:	89 83       	std	Y+1, r24	; 0x01
    48b6:	89 81       	ldd	r24, Y+1	; 0x01
    48b8:	85 31       	cpi	r24, 0x15	; 21
    48ba:	f8 f2       	brcs	.-66     	; 0x487a <SSD_enuDisplayNum+0x266>
		{
			return Local_enuErrorState;
		}
	}

	Local_enuErrorState = ES_OK;
    48bc:	81 e0       	ldi	r24, 0x01	; 1
    48be:	8e 83       	std	Y+6, r24	; 0x06

	return Local_enuErrorState;
    48c0:	8e 81       	ldd	r24, Y+6	; 0x06
    48c2:	88 87       	std	Y+8, r24	; 0x08
    48c4:	88 85       	ldd	r24, Y+8	; 0x08
}
    48c6:	28 96       	adiw	r28, 0x08	; 8
    48c8:	0f b6       	in	r0, 0x3f	; 63
    48ca:	f8 94       	cli
    48cc:	de bf       	out	0x3e, r29	; 62
    48ce:	0f be       	out	0x3f, r0	; 63
    48d0:	cd bf       	out	0x3d, r28	; 61
    48d2:	cf 91       	pop	r28
    48d4:	df 91       	pop	r29
    48d6:	08 95       	ret

000048d8 <SSD_enuEnableCommon>:

ES_t SSD_enuEnableCommon(void)
{
    48d8:	df 93       	push	r29
    48da:	cf 93       	push	r28
    48dc:	0f 92       	push	r0
    48de:	cd b7       	in	r28, 0x3d	; 61
    48e0:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    48e2:	19 82       	std	Y+1, r1	; 0x01

	#if SEG_CMN_PIN <= DIO_u8PIN7 && SEG_CMN_PORT <= DIO_u8PORTD
		#if SEG_TYPE == COMMON_CATHODE
			Local_enuErrorState = DIO_enuSetPinValue(SEG_CMN_PORT, SEG_CMN_PIN, DIO_u8LOW);
    48e4:	82 e0       	ldi	r24, 0x02	; 2
    48e6:	62 e0       	ldi	r22, 0x02	; 2
    48e8:	40 e0       	ldi	r20, 0x00	; 0
    48ea:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    48ee:	89 83       	std	Y+1, r24	; 0x01

	#else
		#error "Your Common pin has a wrong selection!"
	#endif

	return Local_enuErrorState;
    48f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    48f2:	0f 90       	pop	r0
    48f4:	cf 91       	pop	r28
    48f6:	df 91       	pop	r29
    48f8:	08 95       	ret

000048fa <SSD_enuDisableCommon>:

ES_t SSD_enuDisableCommon(void)
{
    48fa:	df 93       	push	r29
    48fc:	cf 93       	push	r28
    48fe:	0f 92       	push	r0
    4900:	cd b7       	in	r28, 0x3d	; 61
    4902:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    4904:	19 82       	std	Y+1, r1	; 0x01

	#if SEG_CMN_PIN <= DIO_u8PIN7 && SEG_CMN_PORT <= DIO_u8PORTD
		#if SEG_TYPE == COMMON_CATHODE
			Local_enuErrorState = DIO_enuSetPinValue(SEG_CMN_PORT, SEG_CMN_PIN, DIO_u8HIGH);
    4906:	82 e0       	ldi	r24, 0x02	; 2
    4908:	62 e0       	ldi	r22, 0x02	; 2
    490a:	41 e0       	ldi	r20, 0x01	; 1
    490c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4910:	89 83       	std	Y+1, r24	; 0x01

	#else
		#error "Your Common pin has a wrong selection!"
	#endif

	return Local_enuErrorState;
    4912:	89 81       	ldd	r24, Y+1	; 0x01
}
    4914:	0f 90       	pop	r0
    4916:	cf 91       	pop	r28
    4918:	df 91       	pop	r29
    491a:	08 95       	ret

0000491c <SSD_enuEnableDot>:

ES_t SSD_enuEnableDot(void)
{
    491c:	df 93       	push	r29
    491e:	cf 93       	push	r28
    4920:	0f 92       	push	r0
    4922:	cd b7       	in	r28, 0x3d	; 61
    4924:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    4926:	19 82       	std	Y+1, r1	; 0x01

	#if SEG_DOT_PIN <= DIO_u8PIN7 && SEG_DOT_PORT <= DIO_u8PORTD
		#if SEG_TYPE == COMMON_CATHODE
			Local_enuErrorState = DIO_enuSetPinValue(SEG_DOT_PORT, SEG_DOT_PIN, DIO_u8HIGH);
    4928:	82 e0       	ldi	r24, 0x02	; 2
    492a:	62 e0       	ldi	r22, 0x02	; 2
    492c:	41 e0       	ldi	r20, 0x01	; 1
    492e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4932:	89 83       	std	Y+1, r24	; 0x01

	#else
		#error "Your DOT pin has a wrong selection!"
	#endif

	return Local_enuErrorState;
    4934:	89 81       	ldd	r24, Y+1	; 0x01
}
    4936:	0f 90       	pop	r0
    4938:	cf 91       	pop	r28
    493a:	df 91       	pop	r29
    493c:	08 95       	ret

0000493e <SSD_enuDisableDot>:

ES_t SSD_enuDisableDot(void)
{
    493e:	df 93       	push	r29
    4940:	cf 93       	push	r28
    4942:	0f 92       	push	r0
    4944:	cd b7       	in	r28, 0x3d	; 61
    4946:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    4948:	19 82       	std	Y+1, r1	; 0x01

	#if SEG_DOT_PIN <= DIO_u8PIN7 && SEG_DOT_PORT <= DIO_u8PORTD
		#if SEG_TYPE == COMMON_CATHODE
			Local_enuErrorState = DIO_enuSetPinValue(SEG_DOT_PORT, SEG_DOT_PIN, DIO_u8LOW);
    494a:	82 e0       	ldi	r24, 0x02	; 2
    494c:	62 e0       	ldi	r22, 0x02	; 2
    494e:	40 e0       	ldi	r20, 0x00	; 0
    4950:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4954:	89 83       	std	Y+1, r24	; 0x01

	#else
		#error "Your DOT pin has a wrong selection!"
	#endif

	return Local_enuErrorState;
    4956:	89 81       	ldd	r24, Y+1	; 0x01
}
    4958:	0f 90       	pop	r0
    495a:	cf 91       	pop	r28
    495c:	df 91       	pop	r29
    495e:	08 95       	ret

00004960 <SSD_enuClearDisplay>:

ES_t SSD_enuClearDisplay(void)
{
    4960:	df 93       	push	r29
    4962:	cf 93       	push	r28
    4964:	cd b7       	in	r28, 0x3d	; 61
    4966:	de b7       	in	r29, 0x3e	; 62
    4968:	27 97       	sbiw	r28, 0x07	; 7
    496a:	0f b6       	in	r0, 0x3f	; 63
    496c:	f8 94       	cli
    496e:	de bf       	out	0x3e, r29	; 62
    4970:	0f be       	out	0x3f, r0	; 63
    4972:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    4974:	1e 82       	std	Y+6, r1	; 0x06

	u32 Local_u32Check = 0;
    4976:	1a 82       	std	Y+2, r1	; 0x02
    4978:	1b 82       	std	Y+3, r1	; 0x03
    497a:	1c 82       	std	Y+4, r1	; 0x04
    497c:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8Iterator = 0;
    497e:	19 82       	std	Y+1, r1	; 0x01

	#if SEG_TYPE == COMMON_CATHODE
		Local_u32Check |= (DIO_enuSetPinValue(SEG_APORT, SEG_APIN,DIO_u8LOW) << 0);
    4980:	80 e0       	ldi	r24, 0x00	; 0
    4982:	60 e0       	ldi	r22, 0x00	; 0
    4984:	40 e0       	ldi	r20, 0x00	; 0
    4986:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    498a:	28 2f       	mov	r18, r24
    498c:	30 e0       	ldi	r19, 0x00	; 0
    498e:	40 e0       	ldi	r20, 0x00	; 0
    4990:	50 e0       	ldi	r21, 0x00	; 0
    4992:	8a 81       	ldd	r24, Y+2	; 0x02
    4994:	9b 81       	ldd	r25, Y+3	; 0x03
    4996:	ac 81       	ldd	r26, Y+4	; 0x04
    4998:	bd 81       	ldd	r27, Y+5	; 0x05
    499a:	82 2b       	or	r24, r18
    499c:	93 2b       	or	r25, r19
    499e:	a4 2b       	or	r26, r20
    49a0:	b5 2b       	or	r27, r21
    49a2:	8a 83       	std	Y+2, r24	; 0x02
    49a4:	9b 83       	std	Y+3, r25	; 0x03
    49a6:	ac 83       	std	Y+4, r26	; 0x04
    49a8:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (DIO_enuSetPinValue(SEG_BPORT, SEG_BPIN,DIO_u8LOW) << 3);
    49aa:	80 e0       	ldi	r24, 0x00	; 0
    49ac:	61 e0       	ldi	r22, 0x01	; 1
    49ae:	40 e0       	ldi	r20, 0x00	; 0
    49b0:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    49b4:	88 2f       	mov	r24, r24
    49b6:	90 e0       	ldi	r25, 0x00	; 0
    49b8:	88 0f       	add	r24, r24
    49ba:	99 1f       	adc	r25, r25
    49bc:	88 0f       	add	r24, r24
    49be:	99 1f       	adc	r25, r25
    49c0:	88 0f       	add	r24, r24
    49c2:	99 1f       	adc	r25, r25
    49c4:	9c 01       	movw	r18, r24
    49c6:	44 27       	eor	r20, r20
    49c8:	37 fd       	sbrc	r19, 7
    49ca:	40 95       	com	r20
    49cc:	54 2f       	mov	r21, r20
    49ce:	8a 81       	ldd	r24, Y+2	; 0x02
    49d0:	9b 81       	ldd	r25, Y+3	; 0x03
    49d2:	ac 81       	ldd	r26, Y+4	; 0x04
    49d4:	bd 81       	ldd	r27, Y+5	; 0x05
    49d6:	82 2b       	or	r24, r18
    49d8:	93 2b       	or	r25, r19
    49da:	a4 2b       	or	r26, r20
    49dc:	b5 2b       	or	r27, r21
    49de:	8a 83       	std	Y+2, r24	; 0x02
    49e0:	9b 83       	std	Y+3, r25	; 0x03
    49e2:	ac 83       	std	Y+4, r26	; 0x04
    49e4:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (DIO_enuSetPinValue(SEG_CPORT, SEG_CPIN,DIO_u8LOW) << 6);
    49e6:	80 e0       	ldi	r24, 0x00	; 0
    49e8:	62 e0       	ldi	r22, 0x02	; 2
    49ea:	40 e0       	ldi	r20, 0x00	; 0
    49ec:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    49f0:	88 2f       	mov	r24, r24
    49f2:	90 e0       	ldi	r25, 0x00	; 0
    49f4:	00 24       	eor	r0, r0
    49f6:	96 95       	lsr	r25
    49f8:	87 95       	ror	r24
    49fa:	07 94       	ror	r0
    49fc:	96 95       	lsr	r25
    49fe:	87 95       	ror	r24
    4a00:	07 94       	ror	r0
    4a02:	98 2f       	mov	r25, r24
    4a04:	80 2d       	mov	r24, r0
    4a06:	9c 01       	movw	r18, r24
    4a08:	44 27       	eor	r20, r20
    4a0a:	37 fd       	sbrc	r19, 7
    4a0c:	40 95       	com	r20
    4a0e:	54 2f       	mov	r21, r20
    4a10:	8a 81       	ldd	r24, Y+2	; 0x02
    4a12:	9b 81       	ldd	r25, Y+3	; 0x03
    4a14:	ac 81       	ldd	r26, Y+4	; 0x04
    4a16:	bd 81       	ldd	r27, Y+5	; 0x05
    4a18:	82 2b       	or	r24, r18
    4a1a:	93 2b       	or	r25, r19
    4a1c:	a4 2b       	or	r26, r20
    4a1e:	b5 2b       	or	r27, r21
    4a20:	8a 83       	std	Y+2, r24	; 0x02
    4a22:	9b 83       	std	Y+3, r25	; 0x03
    4a24:	ac 83       	std	Y+4, r26	; 0x04
    4a26:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (DIO_enuSetPinValue(SEG_DPORT, SEG_DPIN,DIO_u8LOW) << 9);
    4a28:	81 e0       	ldi	r24, 0x01	; 1
    4a2a:	60 e0       	ldi	r22, 0x00	; 0
    4a2c:	40 e0       	ldi	r20, 0x00	; 0
    4a2e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4a32:	88 2f       	mov	r24, r24
    4a34:	90 e0       	ldi	r25, 0x00	; 0
    4a36:	98 2f       	mov	r25, r24
    4a38:	88 27       	eor	r24, r24
    4a3a:	99 0f       	add	r25, r25
    4a3c:	9c 01       	movw	r18, r24
    4a3e:	44 27       	eor	r20, r20
    4a40:	37 fd       	sbrc	r19, 7
    4a42:	40 95       	com	r20
    4a44:	54 2f       	mov	r21, r20
    4a46:	8a 81       	ldd	r24, Y+2	; 0x02
    4a48:	9b 81       	ldd	r25, Y+3	; 0x03
    4a4a:	ac 81       	ldd	r26, Y+4	; 0x04
    4a4c:	bd 81       	ldd	r27, Y+5	; 0x05
    4a4e:	82 2b       	or	r24, r18
    4a50:	93 2b       	or	r25, r19
    4a52:	a4 2b       	or	r26, r20
    4a54:	b5 2b       	or	r27, r21
    4a56:	8a 83       	std	Y+2, r24	; 0x02
    4a58:	9b 83       	std	Y+3, r25	; 0x03
    4a5a:	ac 83       	std	Y+4, r26	; 0x04
    4a5c:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (DIO_enuSetPinValue(SEG_EPORT, SEG_EPIN,DIO_u8LOW) << 12);
    4a5e:	81 e0       	ldi	r24, 0x01	; 1
    4a60:	61 e0       	ldi	r22, 0x01	; 1
    4a62:	40 e0       	ldi	r20, 0x00	; 0
    4a64:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4a68:	88 2f       	mov	r24, r24
    4a6a:	90 e0       	ldi	r25, 0x00	; 0
    4a6c:	98 2f       	mov	r25, r24
    4a6e:	88 27       	eor	r24, r24
    4a70:	92 95       	swap	r25
    4a72:	90 7f       	andi	r25, 0xF0	; 240
    4a74:	9c 01       	movw	r18, r24
    4a76:	44 27       	eor	r20, r20
    4a78:	37 fd       	sbrc	r19, 7
    4a7a:	40 95       	com	r20
    4a7c:	54 2f       	mov	r21, r20
    4a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a80:	9b 81       	ldd	r25, Y+3	; 0x03
    4a82:	ac 81       	ldd	r26, Y+4	; 0x04
    4a84:	bd 81       	ldd	r27, Y+5	; 0x05
    4a86:	82 2b       	or	r24, r18
    4a88:	93 2b       	or	r25, r19
    4a8a:	a4 2b       	or	r26, r20
    4a8c:	b5 2b       	or	r27, r21
    4a8e:	8a 83       	std	Y+2, r24	; 0x02
    4a90:	9b 83       	std	Y+3, r25	; 0x03
    4a92:	ac 83       	std	Y+4, r26	; 0x04
    4a94:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_FPORT, SEG_FPIN,DIO_u8LOW)) << 15);
    4a96:	81 e0       	ldi	r24, 0x01	; 1
    4a98:	62 e0       	ldi	r22, 0x02	; 2
    4a9a:	40 e0       	ldi	r20, 0x00	; 0
    4a9c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4aa0:	88 2f       	mov	r24, r24
    4aa2:	90 e0       	ldi	r25, 0x00	; 0
    4aa4:	a0 e0       	ldi	r26, 0x00	; 0
    4aa6:	b0 e0       	ldi	r27, 0x00	; 0
    4aa8:	9c 01       	movw	r18, r24
    4aaa:	ad 01       	movw	r20, r26
    4aac:	01 2e       	mov	r0, r17
    4aae:	1f e0       	ldi	r17, 0x0F	; 15
    4ab0:	22 0f       	add	r18, r18
    4ab2:	33 1f       	adc	r19, r19
    4ab4:	44 1f       	adc	r20, r20
    4ab6:	55 1f       	adc	r21, r21
    4ab8:	1a 95       	dec	r17
    4aba:	d1 f7       	brne	.-12     	; 0x4ab0 <SSD_enuClearDisplay+0x150>
    4abc:	10 2d       	mov	r17, r0
    4abe:	8a 81       	ldd	r24, Y+2	; 0x02
    4ac0:	9b 81       	ldd	r25, Y+3	; 0x03
    4ac2:	ac 81       	ldd	r26, Y+4	; 0x04
    4ac4:	bd 81       	ldd	r27, Y+5	; 0x05
    4ac6:	82 2b       	or	r24, r18
    4ac8:	93 2b       	or	r25, r19
    4aca:	a4 2b       	or	r26, r20
    4acc:	b5 2b       	or	r27, r21
    4ace:	8a 83       	std	Y+2, r24	; 0x02
    4ad0:	9b 83       	std	Y+3, r25	; 0x03
    4ad2:	ac 83       	std	Y+4, r26	; 0x04
    4ad4:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_GPORT, SEG_GPIN,DIO_u8LOW)) << 18);
    4ad6:	81 e0       	ldi	r24, 0x01	; 1
    4ad8:	63 e0       	ldi	r22, 0x03	; 3
    4ada:	40 e0       	ldi	r20, 0x00	; 0
    4adc:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4ae0:	88 2f       	mov	r24, r24
    4ae2:	90 e0       	ldi	r25, 0x00	; 0
    4ae4:	a0 e0       	ldi	r26, 0x00	; 0
    4ae6:	b0 e0       	ldi	r27, 0x00	; 0
    4ae8:	9c 01       	movw	r18, r24
    4aea:	ad 01       	movw	r20, r26
    4aec:	01 2e       	mov	r0, r17
    4aee:	12 e1       	ldi	r17, 0x12	; 18
    4af0:	22 0f       	add	r18, r18
    4af2:	33 1f       	adc	r19, r19
    4af4:	44 1f       	adc	r20, r20
    4af6:	55 1f       	adc	r21, r21
    4af8:	1a 95       	dec	r17
    4afa:	d1 f7       	brne	.-12     	; 0x4af0 <SSD_enuClearDisplay+0x190>
    4afc:	10 2d       	mov	r17, r0
    4afe:	8a 81       	ldd	r24, Y+2	; 0x02
    4b00:	9b 81       	ldd	r25, Y+3	; 0x03
    4b02:	ac 81       	ldd	r26, Y+4	; 0x04
    4b04:	bd 81       	ldd	r27, Y+5	; 0x05
    4b06:	82 2b       	or	r24, r18
    4b08:	93 2b       	or	r25, r19
    4b0a:	a4 2b       	or	r26, r20
    4b0c:	b5 2b       	or	r27, r21
    4b0e:	8a 83       	std	Y+2, r24	; 0x02
    4b10:	9b 83       	std	Y+3, r25	; 0x03
    4b12:	ac 83       	std	Y+4, r26	; 0x04
    4b14:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_GPORT, SEG_GPIN,DIO_u8HIGH)) << 18);
	#else
		#error "Your type selection is invalid!"
	#endif

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    4b16:	19 82       	std	Y+1, r1	; 0x01
    4b18:	1e c0       	rjmp	.+60     	; 0x4b56 <SSD_enuClearDisplay+0x1f6>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
    4b1a:	89 81       	ldd	r24, Y+1	; 0x01
    4b1c:	28 2f       	mov	r18, r24
    4b1e:	30 e0       	ldi	r19, 0x00	; 0
    4b20:	8a 81       	ldd	r24, Y+2	; 0x02
    4b22:	9b 81       	ldd	r25, Y+3	; 0x03
    4b24:	ac 81       	ldd	r26, Y+4	; 0x04
    4b26:	bd 81       	ldd	r27, Y+5	; 0x05
    4b28:	02 2e       	mov	r0, r18
    4b2a:	04 c0       	rjmp	.+8      	; 0x4b34 <SSD_enuClearDisplay+0x1d4>
    4b2c:	b6 95       	lsr	r27
    4b2e:	a7 95       	ror	r26
    4b30:	97 95       	ror	r25
    4b32:	87 95       	ror	r24
    4b34:	0a 94       	dec	r0
    4b36:	d2 f7       	brpl	.-12     	; 0x4b2c <SSD_enuClearDisplay+0x1cc>
    4b38:	87 70       	andi	r24, 0x07	; 7
    4b3a:	90 70       	andi	r25, 0x00	; 0
    4b3c:	a0 70       	andi	r26, 0x00	; 0
    4b3e:	b0 70       	andi	r27, 0x00	; 0
    4b40:	81 30       	cpi	r24, 0x01	; 1
    4b42:	91 05       	cpc	r25, r1
    4b44:	a1 05       	cpc	r26, r1
    4b46:	b1 05       	cpc	r27, r1
    4b48:	19 f0       	breq	.+6      	; 0x4b50 <SSD_enuClearDisplay+0x1f0>
		{
			return Local_enuErrorState;
    4b4a:	8e 81       	ldd	r24, Y+6	; 0x06
    4b4c:	8f 83       	std	Y+7, r24	; 0x07
    4b4e:	0a c0       	rjmp	.+20     	; 0x4b64 <SSD_enuClearDisplay+0x204>
		Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_GPORT, SEG_GPIN,DIO_u8HIGH)) << 18);
	#else
		#error "Your type selection is invalid!"
	#endif

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    4b50:	89 81       	ldd	r24, Y+1	; 0x01
    4b52:	8d 5f       	subi	r24, 0xFD	; 253
    4b54:	89 83       	std	Y+1, r24	; 0x01
    4b56:	89 81       	ldd	r24, Y+1	; 0x01
    4b58:	85 31       	cpi	r24, 0x15	; 21
    4b5a:	f8 f2       	brcs	.-66     	; 0x4b1a <SSD_enuClearDisplay+0x1ba>
		{
			return Local_enuErrorState;
		}
	}

	Local_enuErrorState = ES_OK;
    4b5c:	81 e0       	ldi	r24, 0x01	; 1
    4b5e:	8e 83       	std	Y+6, r24	; 0x06
	return Local_enuErrorState;
    4b60:	8e 81       	ldd	r24, Y+6	; 0x06
    4b62:	8f 83       	std	Y+7, r24	; 0x07
    4b64:	8f 81       	ldd	r24, Y+7	; 0x07
}
    4b66:	27 96       	adiw	r28, 0x07	; 7
    4b68:	0f b6       	in	r0, 0x3f	; 63
    4b6a:	f8 94       	cli
    4b6c:	de bf       	out	0x3e, r29	; 62
    4b6e:	0f be       	out	0x3f, r0	; 63
    4b70:	cd bf       	out	0x3d, r28	; 61
    4b72:	cf 91       	pop	r28
    4b74:	df 91       	pop	r29
    4b76:	08 95       	ret

00004b78 <LED_enuInit>:

extern u8 LED_num;
/***********************	Includes Section End	***********************/

ES_t LED_enuInit(LED_t * Copy_pstrLedConfiguration)
{
    4b78:	df 93       	push	r29
    4b7a:	cf 93       	push	r28
    4b7c:	00 d0       	rcall	.+0      	; 0x4b7e <LED_enuInit+0x6>
    4b7e:	00 d0       	rcall	.+0      	; 0x4b80 <LED_enuInit+0x8>
    4b80:	0f 92       	push	r0
    4b82:	cd b7       	in	r28, 0x3d	; 61
    4b84:	de b7       	in	r29, 0x3e	; 62
    4b86:	9c 83       	std	Y+4, r25	; 0x04
    4b88:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    4b8a:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_pstrLedConfiguration != NULL)
    4b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b8e:	9c 81       	ldd	r25, Y+4	; 0x04
    4b90:	00 97       	sbiw	r24, 0x00	; 0
    4b92:	09 f4       	brne	.+2      	; 0x4b96 <LED_enuInit+0x1e>
    4b94:	26 c1       	rjmp	.+588    	; 0x4de2 <LED_enuInit+0x26a>
	{
		u8 Local_u8Iterator = 0;
    4b96:	19 82       	std	Y+1, r1	; 0x01

		for(Local_u8Iterator = 0; Local_u8Iterator < LED_num; Local_u8Iterator++)
    4b98:	19 82       	std	Y+1, r1	; 0x01
    4b9a:	1c c1       	rjmp	.+568    	; 0x4dd4 <LED_enuInit+0x25c>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PortID,
    4b9c:	89 81       	ldd	r24, Y+1	; 0x01
    4b9e:	88 2f       	mov	r24, r24
    4ba0:	90 e0       	ldi	r25, 0x00	; 0
    4ba2:	9c 01       	movw	r18, r24
    4ba4:	22 0f       	add	r18, r18
    4ba6:	33 1f       	adc	r19, r19
    4ba8:	22 0f       	add	r18, r18
    4baa:	33 1f       	adc	r19, r19
    4bac:	8b 81       	ldd	r24, Y+3	; 0x03
    4bae:	9c 81       	ldd	r25, Y+4	; 0x04
    4bb0:	fc 01       	movw	r30, r24
    4bb2:	e2 0f       	add	r30, r18
    4bb4:	f3 1f       	adc	r31, r19
    4bb6:	40 81       	ld	r20, Z
    4bb8:	89 81       	ldd	r24, Y+1	; 0x01
    4bba:	88 2f       	mov	r24, r24
    4bbc:	90 e0       	ldi	r25, 0x00	; 0
    4bbe:	9c 01       	movw	r18, r24
    4bc0:	22 0f       	add	r18, r18
    4bc2:	33 1f       	adc	r19, r19
    4bc4:	22 0f       	add	r18, r18
    4bc6:	33 1f       	adc	r19, r19
    4bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    4bca:	9c 81       	ldd	r25, Y+4	; 0x04
    4bcc:	fc 01       	movw	r30, r24
    4bce:	e2 0f       	add	r30, r18
    4bd0:	f3 1f       	adc	r31, r19
    4bd2:	91 81       	ldd	r25, Z+1	; 0x01
    4bd4:	84 2f       	mov	r24, r20
    4bd6:	69 2f       	mov	r22, r25
    4bd8:	41 e0       	ldi	r20, 0x01	; 1
    4bda:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    4bde:	8a 83       	std	Y+2, r24	; 0x02
														 Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PinID,
														 DIO_u8OUTPUT
														);

			if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8Connection == LED_u8SINK)
    4be0:	89 81       	ldd	r24, Y+1	; 0x01
    4be2:	88 2f       	mov	r24, r24
    4be4:	90 e0       	ldi	r25, 0x00	; 0
    4be6:	9c 01       	movw	r18, r24
    4be8:	22 0f       	add	r18, r18
    4bea:	33 1f       	adc	r19, r19
    4bec:	22 0f       	add	r18, r18
    4bee:	33 1f       	adc	r19, r19
    4bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    4bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    4bf4:	fc 01       	movw	r30, r24
    4bf6:	e2 0f       	add	r30, r18
    4bf8:	f3 1f       	adc	r31, r19
    4bfa:	82 81       	ldd	r24, Z+2	; 0x02
    4bfc:	88 30       	cpi	r24, 0x08	; 8
    4bfe:	09 f0       	breq	.+2      	; 0x4c02 <LED_enuInit+0x8a>
    4c00:	69 c0       	rjmp	.+210    	; 0x4cd4 <LED_enuInit+0x15c>
			{
				if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8InitState == LED_u8ON)
    4c02:	89 81       	ldd	r24, Y+1	; 0x01
    4c04:	88 2f       	mov	r24, r24
    4c06:	90 e0       	ldi	r25, 0x00	; 0
    4c08:	9c 01       	movw	r18, r24
    4c0a:	22 0f       	add	r18, r18
    4c0c:	33 1f       	adc	r19, r19
    4c0e:	22 0f       	add	r18, r18
    4c10:	33 1f       	adc	r19, r19
    4c12:	8b 81       	ldd	r24, Y+3	; 0x03
    4c14:	9c 81       	ldd	r25, Y+4	; 0x04
    4c16:	fc 01       	movw	r30, r24
    4c18:	e2 0f       	add	r30, r18
    4c1a:	f3 1f       	adc	r31, r19
    4c1c:	83 81       	ldd	r24, Z+3	; 0x03
    4c1e:	8a 30       	cpi	r24, 0x0A	; 10
    4c20:	19 f5       	brne	.+70     	; 0x4c68 <LED_enuInit+0xf0>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PortID,
    4c22:	89 81       	ldd	r24, Y+1	; 0x01
    4c24:	88 2f       	mov	r24, r24
    4c26:	90 e0       	ldi	r25, 0x00	; 0
    4c28:	9c 01       	movw	r18, r24
    4c2a:	22 0f       	add	r18, r18
    4c2c:	33 1f       	adc	r19, r19
    4c2e:	22 0f       	add	r18, r18
    4c30:	33 1f       	adc	r19, r19
    4c32:	8b 81       	ldd	r24, Y+3	; 0x03
    4c34:	9c 81       	ldd	r25, Y+4	; 0x04
    4c36:	fc 01       	movw	r30, r24
    4c38:	e2 0f       	add	r30, r18
    4c3a:	f3 1f       	adc	r31, r19
    4c3c:	40 81       	ld	r20, Z
    4c3e:	89 81       	ldd	r24, Y+1	; 0x01
    4c40:	88 2f       	mov	r24, r24
    4c42:	90 e0       	ldi	r25, 0x00	; 0
    4c44:	9c 01       	movw	r18, r24
    4c46:	22 0f       	add	r18, r18
    4c48:	33 1f       	adc	r19, r19
    4c4a:	22 0f       	add	r18, r18
    4c4c:	33 1f       	adc	r19, r19
    4c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    4c50:	9c 81       	ldd	r25, Y+4	; 0x04
    4c52:	fc 01       	movw	r30, r24
    4c54:	e2 0f       	add	r30, r18
    4c56:	f3 1f       	adc	r31, r19
    4c58:	91 81       	ldd	r25, Z+1	; 0x01
    4c5a:	84 2f       	mov	r24, r20
    4c5c:	69 2f       	mov	r22, r25
    4c5e:	40 e0       	ldi	r20, 0x00	; 0
    4c60:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4c64:	8a 83       	std	Y+2, r24	; 0x02
    4c66:	b3 c0       	rjmp	.+358    	; 0x4dce <LED_enuInit+0x256>
							           	   	   	   	   	     Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PinID,
															 DIO_u8LOW);

				}
				else if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8InitState == LED_u8OFF)
    4c68:	89 81       	ldd	r24, Y+1	; 0x01
    4c6a:	88 2f       	mov	r24, r24
    4c6c:	90 e0       	ldi	r25, 0x00	; 0
    4c6e:	9c 01       	movw	r18, r24
    4c70:	22 0f       	add	r18, r18
    4c72:	33 1f       	adc	r19, r19
    4c74:	22 0f       	add	r18, r18
    4c76:	33 1f       	adc	r19, r19
    4c78:	8b 81       	ldd	r24, Y+3	; 0x03
    4c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    4c7c:	fc 01       	movw	r30, r24
    4c7e:	e2 0f       	add	r30, r18
    4c80:	f3 1f       	adc	r31, r19
    4c82:	83 81       	ldd	r24, Z+3	; 0x03
    4c84:	8b 30       	cpi	r24, 0x0B	; 11
    4c86:	19 f5       	brne	.+70     	; 0x4cce <LED_enuInit+0x156>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PortID,
    4c88:	89 81       	ldd	r24, Y+1	; 0x01
    4c8a:	88 2f       	mov	r24, r24
    4c8c:	90 e0       	ldi	r25, 0x00	; 0
    4c8e:	9c 01       	movw	r18, r24
    4c90:	22 0f       	add	r18, r18
    4c92:	33 1f       	adc	r19, r19
    4c94:	22 0f       	add	r18, r18
    4c96:	33 1f       	adc	r19, r19
    4c98:	8b 81       	ldd	r24, Y+3	; 0x03
    4c9a:	9c 81       	ldd	r25, Y+4	; 0x04
    4c9c:	fc 01       	movw	r30, r24
    4c9e:	e2 0f       	add	r30, r18
    4ca0:	f3 1f       	adc	r31, r19
    4ca2:	40 81       	ld	r20, Z
    4ca4:	89 81       	ldd	r24, Y+1	; 0x01
    4ca6:	88 2f       	mov	r24, r24
    4ca8:	90 e0       	ldi	r25, 0x00	; 0
    4caa:	9c 01       	movw	r18, r24
    4cac:	22 0f       	add	r18, r18
    4cae:	33 1f       	adc	r19, r19
    4cb0:	22 0f       	add	r18, r18
    4cb2:	33 1f       	adc	r19, r19
    4cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    4cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    4cb8:	fc 01       	movw	r30, r24
    4cba:	e2 0f       	add	r30, r18
    4cbc:	f3 1f       	adc	r31, r19
    4cbe:	91 81       	ldd	r25, Z+1	; 0x01
    4cc0:	84 2f       	mov	r24, r20
    4cc2:	69 2f       	mov	r22, r25
    4cc4:	41 e0       	ldi	r20, 0x01	; 1
    4cc6:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4cca:	8a 83       	std	Y+2, r24	; 0x02
    4ccc:	80 c0       	rjmp	.+256    	; 0x4dce <LED_enuInit+0x256>
							           	   	   	   	   	   	 Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PinID,
															 DIO_u8HIGH);
				}
				else
				{
					return ES_OUT_OF_RANGE;
    4cce:	83 e0       	ldi	r24, 0x03	; 3
    4cd0:	8d 83       	std	Y+5, r24	; 0x05
    4cd2:	8b c0       	rjmp	.+278    	; 0x4dea <LED_enuInit+0x272>
				}
			}
			else if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8Connection == LED_u8SOURCE)
    4cd4:	89 81       	ldd	r24, Y+1	; 0x01
    4cd6:	88 2f       	mov	r24, r24
    4cd8:	90 e0       	ldi	r25, 0x00	; 0
    4cda:	9c 01       	movw	r18, r24
    4cdc:	22 0f       	add	r18, r18
    4cde:	33 1f       	adc	r19, r19
    4ce0:	22 0f       	add	r18, r18
    4ce2:	33 1f       	adc	r19, r19
    4ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    4ce8:	fc 01       	movw	r30, r24
    4cea:	e2 0f       	add	r30, r18
    4cec:	f3 1f       	adc	r31, r19
    4cee:	82 81       	ldd	r24, Z+2	; 0x02
    4cf0:	89 30       	cpi	r24, 0x09	; 9
    4cf2:	09 f0       	breq	.+2      	; 0x4cf6 <LED_enuInit+0x17e>
    4cf4:	69 c0       	rjmp	.+210    	; 0x4dc8 <LED_enuInit+0x250>
			{
				if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8InitState == LED_u8ON)
    4cf6:	89 81       	ldd	r24, Y+1	; 0x01
    4cf8:	88 2f       	mov	r24, r24
    4cfa:	90 e0       	ldi	r25, 0x00	; 0
    4cfc:	9c 01       	movw	r18, r24
    4cfe:	22 0f       	add	r18, r18
    4d00:	33 1f       	adc	r19, r19
    4d02:	22 0f       	add	r18, r18
    4d04:	33 1f       	adc	r19, r19
    4d06:	8b 81       	ldd	r24, Y+3	; 0x03
    4d08:	9c 81       	ldd	r25, Y+4	; 0x04
    4d0a:	fc 01       	movw	r30, r24
    4d0c:	e2 0f       	add	r30, r18
    4d0e:	f3 1f       	adc	r31, r19
    4d10:	83 81       	ldd	r24, Z+3	; 0x03
    4d12:	8a 30       	cpi	r24, 0x0A	; 10
    4d14:	19 f5       	brne	.+70     	; 0x4d5c <LED_enuInit+0x1e4>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PortID,
    4d16:	89 81       	ldd	r24, Y+1	; 0x01
    4d18:	88 2f       	mov	r24, r24
    4d1a:	90 e0       	ldi	r25, 0x00	; 0
    4d1c:	9c 01       	movw	r18, r24
    4d1e:	22 0f       	add	r18, r18
    4d20:	33 1f       	adc	r19, r19
    4d22:	22 0f       	add	r18, r18
    4d24:	33 1f       	adc	r19, r19
    4d26:	8b 81       	ldd	r24, Y+3	; 0x03
    4d28:	9c 81       	ldd	r25, Y+4	; 0x04
    4d2a:	fc 01       	movw	r30, r24
    4d2c:	e2 0f       	add	r30, r18
    4d2e:	f3 1f       	adc	r31, r19
    4d30:	40 81       	ld	r20, Z
    4d32:	89 81       	ldd	r24, Y+1	; 0x01
    4d34:	88 2f       	mov	r24, r24
    4d36:	90 e0       	ldi	r25, 0x00	; 0
    4d38:	9c 01       	movw	r18, r24
    4d3a:	22 0f       	add	r18, r18
    4d3c:	33 1f       	adc	r19, r19
    4d3e:	22 0f       	add	r18, r18
    4d40:	33 1f       	adc	r19, r19
    4d42:	8b 81       	ldd	r24, Y+3	; 0x03
    4d44:	9c 81       	ldd	r25, Y+4	; 0x04
    4d46:	fc 01       	movw	r30, r24
    4d48:	e2 0f       	add	r30, r18
    4d4a:	f3 1f       	adc	r31, r19
    4d4c:	91 81       	ldd	r25, Z+1	; 0x01
    4d4e:	84 2f       	mov	r24, r20
    4d50:	69 2f       	mov	r22, r25
    4d52:	41 e0       	ldi	r20, 0x01	; 1
    4d54:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4d58:	8a 83       	std	Y+2, r24	; 0x02
    4d5a:	39 c0       	rjmp	.+114    	; 0x4dce <LED_enuInit+0x256>
							           	   	   	   	   	     Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PinID,
															 DIO_u8HIGH);

				}
				else if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8InitState == LED_u8OFF)
    4d5c:	89 81       	ldd	r24, Y+1	; 0x01
    4d5e:	88 2f       	mov	r24, r24
    4d60:	90 e0       	ldi	r25, 0x00	; 0
    4d62:	9c 01       	movw	r18, r24
    4d64:	22 0f       	add	r18, r18
    4d66:	33 1f       	adc	r19, r19
    4d68:	22 0f       	add	r18, r18
    4d6a:	33 1f       	adc	r19, r19
    4d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    4d70:	fc 01       	movw	r30, r24
    4d72:	e2 0f       	add	r30, r18
    4d74:	f3 1f       	adc	r31, r19
    4d76:	83 81       	ldd	r24, Z+3	; 0x03
    4d78:	8b 30       	cpi	r24, 0x0B	; 11
    4d7a:	19 f5       	brne	.+70     	; 0x4dc2 <LED_enuInit+0x24a>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PortID,
    4d7c:	89 81       	ldd	r24, Y+1	; 0x01
    4d7e:	88 2f       	mov	r24, r24
    4d80:	90 e0       	ldi	r25, 0x00	; 0
    4d82:	9c 01       	movw	r18, r24
    4d84:	22 0f       	add	r18, r18
    4d86:	33 1f       	adc	r19, r19
    4d88:	22 0f       	add	r18, r18
    4d8a:	33 1f       	adc	r19, r19
    4d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d8e:	9c 81       	ldd	r25, Y+4	; 0x04
    4d90:	fc 01       	movw	r30, r24
    4d92:	e2 0f       	add	r30, r18
    4d94:	f3 1f       	adc	r31, r19
    4d96:	40 81       	ld	r20, Z
    4d98:	89 81       	ldd	r24, Y+1	; 0x01
    4d9a:	88 2f       	mov	r24, r24
    4d9c:	90 e0       	ldi	r25, 0x00	; 0
    4d9e:	9c 01       	movw	r18, r24
    4da0:	22 0f       	add	r18, r18
    4da2:	33 1f       	adc	r19, r19
    4da4:	22 0f       	add	r18, r18
    4da6:	33 1f       	adc	r19, r19
    4da8:	8b 81       	ldd	r24, Y+3	; 0x03
    4daa:	9c 81       	ldd	r25, Y+4	; 0x04
    4dac:	fc 01       	movw	r30, r24
    4dae:	e2 0f       	add	r30, r18
    4db0:	f3 1f       	adc	r31, r19
    4db2:	91 81       	ldd	r25, Z+1	; 0x01
    4db4:	84 2f       	mov	r24, r20
    4db6:	69 2f       	mov	r22, r25
    4db8:	40 e0       	ldi	r20, 0x00	; 0
    4dba:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4dbe:	8a 83       	std	Y+2, r24	; 0x02
    4dc0:	06 c0       	rjmp	.+12     	; 0x4dce <LED_enuInit+0x256>
							           	   	   	   	   	   	 Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PinID,
															 DIO_u8LOW);
				}
				else
				{
					return ES_OUT_OF_RANGE;
    4dc2:	83 e0       	ldi	r24, 0x03	; 3
    4dc4:	8d 83       	std	Y+5, r24	; 0x05
    4dc6:	11 c0       	rjmp	.+34     	; 0x4dea <LED_enuInit+0x272>
				}
			}
			else
			{
				return ES_OUT_OF_RANGE;
    4dc8:	83 e0       	ldi	r24, 0x03	; 3
    4dca:	8d 83       	std	Y+5, r24	; 0x05
    4dcc:	0e c0       	rjmp	.+28     	; 0x4dea <LED_enuInit+0x272>

	if(Copy_pstrLedConfiguration != NULL)
	{
		u8 Local_u8Iterator = 0;

		for(Local_u8Iterator = 0; Local_u8Iterator < LED_num; Local_u8Iterator++)
    4dce:	89 81       	ldd	r24, Y+1	; 0x01
    4dd0:	8f 5f       	subi	r24, 0xFF	; 255
    4dd2:	89 83       	std	Y+1, r24	; 0x01
    4dd4:	90 91 bb 01 	lds	r25, 0x01BB
    4dd8:	89 81       	ldd	r24, Y+1	; 0x01
    4dda:	89 17       	cp	r24, r25
    4ddc:	08 f4       	brcc	.+2      	; 0x4de0 <LED_enuInit+0x268>
    4dde:	de ce       	rjmp	.-580    	; 0x4b9c <LED_enuInit+0x24>
    4de0:	02 c0       	rjmp	.+4      	; 0x4de6 <LED_enuInit+0x26e>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    4de2:	82 e0       	ldi	r24, 0x02	; 2
    4de4:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    4de6:	8a 81       	ldd	r24, Y+2	; 0x02
    4de8:	8d 83       	std	Y+5, r24	; 0x05
    4dea:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4dec:	0f 90       	pop	r0
    4dee:	0f 90       	pop	r0
    4df0:	0f 90       	pop	r0
    4df2:	0f 90       	pop	r0
    4df4:	0f 90       	pop	r0
    4df6:	cf 91       	pop	r28
    4df8:	df 91       	pop	r29
    4dfa:	08 95       	ret

00004dfc <LED_enuTurnON>:

ES_t LED_enuTurnON(LED_t * Copy_pstrLedID)
{
    4dfc:	df 93       	push	r29
    4dfe:	cf 93       	push	r28
    4e00:	00 d0       	rcall	.+0      	; 0x4e02 <LED_enuTurnON+0x6>
    4e02:	00 d0       	rcall	.+0      	; 0x4e04 <LED_enuTurnON+0x8>
    4e04:	cd b7       	in	r28, 0x3d	; 61
    4e06:	de b7       	in	r29, 0x3e	; 62
    4e08:	9b 83       	std	Y+3, r25	; 0x03
    4e0a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4e0c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pstrLedID != NULL)
    4e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e10:	9b 81       	ldd	r25, Y+3	; 0x03
    4e12:	00 97       	sbiw	r24, 0x00	; 0
    4e14:	41 f1       	breq	.+80     	; 0x4e66 <LED_enuTurnON+0x6a>
	{
		if(Copy_pstrLedID->LED_u8Connection == LED_u8SINK)
    4e16:	ea 81       	ldd	r30, Y+2	; 0x02
    4e18:	fb 81       	ldd	r31, Y+3	; 0x03
    4e1a:	82 81       	ldd	r24, Z+2	; 0x02
    4e1c:	88 30       	cpi	r24, 0x08	; 8
    4e1e:	61 f4       	brne	.+24     	; 0x4e38 <LED_enuTurnON+0x3c>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8LOW);
    4e20:	ea 81       	ldd	r30, Y+2	; 0x02
    4e22:	fb 81       	ldd	r31, Y+3	; 0x03
    4e24:	80 81       	ld	r24, Z
    4e26:	ea 81       	ldd	r30, Y+2	; 0x02
    4e28:	fb 81       	ldd	r31, Y+3	; 0x03
    4e2a:	91 81       	ldd	r25, Z+1	; 0x01
    4e2c:	69 2f       	mov	r22, r25
    4e2e:	40 e0       	ldi	r20, 0x00	; 0
    4e30:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4e34:	89 83       	std	Y+1, r24	; 0x01
    4e36:	14 c0       	rjmp	.+40     	; 0x4e60 <LED_enuTurnON+0x64>
		}
		else if(Copy_pstrLedID->LED_u8Connection == LED_u8SOURCE)
    4e38:	ea 81       	ldd	r30, Y+2	; 0x02
    4e3a:	fb 81       	ldd	r31, Y+3	; 0x03
    4e3c:	82 81       	ldd	r24, Z+2	; 0x02
    4e3e:	89 30       	cpi	r24, 0x09	; 9
    4e40:	61 f4       	brne	.+24     	; 0x4e5a <LED_enuTurnON+0x5e>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8HIGH);
    4e42:	ea 81       	ldd	r30, Y+2	; 0x02
    4e44:	fb 81       	ldd	r31, Y+3	; 0x03
    4e46:	80 81       	ld	r24, Z
    4e48:	ea 81       	ldd	r30, Y+2	; 0x02
    4e4a:	fb 81       	ldd	r31, Y+3	; 0x03
    4e4c:	91 81       	ldd	r25, Z+1	; 0x01
    4e4e:	69 2f       	mov	r22, r25
    4e50:	41 e0       	ldi	r20, 0x01	; 1
    4e52:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4e56:	89 83       	std	Y+1, r24	; 0x01
    4e58:	03 c0       	rjmp	.+6      	; 0x4e60 <LED_enuTurnON+0x64>
		}
		else
		{
			return ES_OUT_OF_RANGE;
    4e5a:	83 e0       	ldi	r24, 0x03	; 3
    4e5c:	8c 83       	std	Y+4, r24	; 0x04
    4e5e:	05 c0       	rjmp	.+10     	; 0x4e6a <LED_enuTurnON+0x6e>
	else
	{
		return ES_NULL_POINTER;
	}

	return Local_enuErrorState;
    4e60:	89 81       	ldd	r24, Y+1	; 0x01
    4e62:	8c 83       	std	Y+4, r24	; 0x04
    4e64:	02 c0       	rjmp	.+4      	; 0x4e6a <LED_enuTurnON+0x6e>
			return ES_OUT_OF_RANGE;
		}
	}
	else
	{
		return ES_NULL_POINTER;
    4e66:	82 e0       	ldi	r24, 0x02	; 2
    4e68:	8c 83       	std	Y+4, r24	; 0x04
    4e6a:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return Local_enuErrorState;
}
    4e6c:	0f 90       	pop	r0
    4e6e:	0f 90       	pop	r0
    4e70:	0f 90       	pop	r0
    4e72:	0f 90       	pop	r0
    4e74:	cf 91       	pop	r28
    4e76:	df 91       	pop	r29
    4e78:	08 95       	ret

00004e7a <LED_enuTurnOFF>:

ES_t LED_enuTurnOFF(LED_t * Copy_pstrLedID)
{
    4e7a:	df 93       	push	r29
    4e7c:	cf 93       	push	r28
    4e7e:	00 d0       	rcall	.+0      	; 0x4e80 <LED_enuTurnOFF+0x6>
    4e80:	00 d0       	rcall	.+0      	; 0x4e82 <LED_enuTurnOFF+0x8>
    4e82:	cd b7       	in	r28, 0x3d	; 61
    4e84:	de b7       	in	r29, 0x3e	; 62
    4e86:	9b 83       	std	Y+3, r25	; 0x03
    4e88:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4e8a:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pstrLedID != NULL)
    4e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e8e:	9b 81       	ldd	r25, Y+3	; 0x03
    4e90:	00 97       	sbiw	r24, 0x00	; 0
    4e92:	41 f1       	breq	.+80     	; 0x4ee4 <LED_enuTurnOFF+0x6a>
	{
		if(Copy_pstrLedID->LED_u8Connection == LED_u8SINK)
    4e94:	ea 81       	ldd	r30, Y+2	; 0x02
    4e96:	fb 81       	ldd	r31, Y+3	; 0x03
    4e98:	82 81       	ldd	r24, Z+2	; 0x02
    4e9a:	88 30       	cpi	r24, 0x08	; 8
    4e9c:	61 f4       	brne	.+24     	; 0x4eb6 <LED_enuTurnOFF+0x3c>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8HIGH);
    4e9e:	ea 81       	ldd	r30, Y+2	; 0x02
    4ea0:	fb 81       	ldd	r31, Y+3	; 0x03
    4ea2:	80 81       	ld	r24, Z
    4ea4:	ea 81       	ldd	r30, Y+2	; 0x02
    4ea6:	fb 81       	ldd	r31, Y+3	; 0x03
    4ea8:	91 81       	ldd	r25, Z+1	; 0x01
    4eaa:	69 2f       	mov	r22, r25
    4eac:	41 e0       	ldi	r20, 0x01	; 1
    4eae:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4eb2:	89 83       	std	Y+1, r24	; 0x01
    4eb4:	14 c0       	rjmp	.+40     	; 0x4ede <LED_enuTurnOFF+0x64>
		}
		else if(Copy_pstrLedID->LED_u8Connection == LED_u8SOURCE)
    4eb6:	ea 81       	ldd	r30, Y+2	; 0x02
    4eb8:	fb 81       	ldd	r31, Y+3	; 0x03
    4eba:	82 81       	ldd	r24, Z+2	; 0x02
    4ebc:	89 30       	cpi	r24, 0x09	; 9
    4ebe:	61 f4       	brne	.+24     	; 0x4ed8 <LED_enuTurnOFF+0x5e>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8LOW);
    4ec0:	ea 81       	ldd	r30, Y+2	; 0x02
    4ec2:	fb 81       	ldd	r31, Y+3	; 0x03
    4ec4:	80 81       	ld	r24, Z
    4ec6:	ea 81       	ldd	r30, Y+2	; 0x02
    4ec8:	fb 81       	ldd	r31, Y+3	; 0x03
    4eca:	91 81       	ldd	r25, Z+1	; 0x01
    4ecc:	69 2f       	mov	r22, r25
    4ece:	40 e0       	ldi	r20, 0x00	; 0
    4ed0:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4ed4:	89 83       	std	Y+1, r24	; 0x01
    4ed6:	03 c0       	rjmp	.+6      	; 0x4ede <LED_enuTurnOFF+0x64>
		}
		else
		{
			return ES_OUT_OF_RANGE;
    4ed8:	83 e0       	ldi	r24, 0x03	; 3
    4eda:	8c 83       	std	Y+4, r24	; 0x04
    4edc:	05 c0       	rjmp	.+10     	; 0x4ee8 <LED_enuTurnOFF+0x6e>
	else
	{
		return ES_NULL_POINTER;
	}

	return Local_enuErrorState;
    4ede:	89 81       	ldd	r24, Y+1	; 0x01
    4ee0:	8c 83       	std	Y+4, r24	; 0x04
    4ee2:	02 c0       	rjmp	.+4      	; 0x4ee8 <LED_enuTurnOFF+0x6e>
			return ES_OUT_OF_RANGE;
		}
	}
	else
	{
		return ES_NULL_POINTER;
    4ee4:	82 e0       	ldi	r24, 0x02	; 2
    4ee6:	8c 83       	std	Y+4, r24	; 0x04
    4ee8:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return Local_enuErrorState;
}
    4eea:	0f 90       	pop	r0
    4eec:	0f 90       	pop	r0
    4eee:	0f 90       	pop	r0
    4ef0:	0f 90       	pop	r0
    4ef2:	cf 91       	pop	r28
    4ef4:	df 91       	pop	r29
    4ef6:	08 95       	ret

00004ef8 <LCD_enuInit>:
#include "LCD_private.h"
#include <util/delay.h>
/***********************	Includes Section End	***********************/

ES_t LCD_enuInit(void)
{
    4ef8:	df 93       	push	r29
    4efa:	cf 93       	push	r28
    4efc:	cd b7       	in	r28, 0x3d	; 61
    4efe:	de b7       	in	r29, 0x3e	; 62
    4f00:	e9 97       	sbiw	r28, 0x39	; 57
    4f02:	0f b6       	in	r0, 0x3f	; 63
    4f04:	f8 94       	cli
    4f06:	de bf       	out	0x3e, r29	; 62
    4f08:	0f be       	out	0x3f, r0	; 63
    4f0a:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    4f0c:	19 ae       	std	Y+57, r1	; 0x39

	/* Shared configuration in two LCD modes */
	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    4f0e:	80 e0       	ldi	r24, 0x00	; 0
    4f10:	60 e0       	ldi	r22, 0x00	; 0
    4f12:	41 e0       	ldi	r20, 0x01	; 1
    4f14:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    4f18:	80 e0       	ldi	r24, 0x00	; 0
    4f1a:	61 e0       	ldi	r22, 0x01	; 1
    4f1c:	41 e0       	ldi	r20, 0x01	; 1
    4f1e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    4f22:	80 e0       	ldi	r24, 0x00	; 0
    4f24:	62 e0       	ldi	r22, 0x02	; 2
    4f26:	41 e0       	ldi	r20, 0x01	; 1
    4f28:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    4f2c:	81 e0       	ldi	r24, 0x01	; 1
    4f2e:	67 e0       	ldi	r22, 0x07	; 7
    4f30:	41 e0       	ldi	r20, 0x01	; 1
    4f32:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    4f36:	81 e0       	ldi	r24, 0x01	; 1
    4f38:	66 e0       	ldi	r22, 0x06	; 6
    4f3a:	41 e0       	ldi	r20, 0x01	; 1
    4f3c:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    4f40:	81 e0       	ldi	r24, 0x01	; 1
    4f42:	65 e0       	ldi	r22, 0x05	; 5
    4f44:	41 e0       	ldi	r20, 0x01	; 1
    4f46:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    4f4a:	81 e0       	ldi	r24, 0x01	; 1
    4f4c:	64 e0       	ldi	r22, 0x04	; 4
    4f4e:	41 e0       	ldi	r20, 0x01	; 1
    4f50:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    4f54:	80 e0       	ldi	r24, 0x00	; 0
    4f56:	90 e0       	ldi	r25, 0x00	; 0
    4f58:	ac e0       	ldi	r26, 0x0C	; 12
    4f5a:	b2 e4       	ldi	r27, 0x42	; 66
    4f5c:	8d ab       	std	Y+53, r24	; 0x35
    4f5e:	9e ab       	std	Y+54, r25	; 0x36
    4f60:	af ab       	std	Y+55, r26	; 0x37
    4f62:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f64:	6d a9       	ldd	r22, Y+53	; 0x35
    4f66:	7e a9       	ldd	r23, Y+54	; 0x36
    4f68:	8f a9       	ldd	r24, Y+55	; 0x37
    4f6a:	98 ad       	ldd	r25, Y+56	; 0x38
    4f6c:	20 e0       	ldi	r18, 0x00	; 0
    4f6e:	30 e0       	ldi	r19, 0x00	; 0
    4f70:	4a e7       	ldi	r20, 0x7A	; 122
    4f72:	53 e4       	ldi	r21, 0x43	; 67
    4f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f78:	dc 01       	movw	r26, r24
    4f7a:	cb 01       	movw	r24, r22
    4f7c:	89 ab       	std	Y+49, r24	; 0x31
    4f7e:	9a ab       	std	Y+50, r25	; 0x32
    4f80:	ab ab       	std	Y+51, r26	; 0x33
    4f82:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4f84:	69 a9       	ldd	r22, Y+49	; 0x31
    4f86:	7a a9       	ldd	r23, Y+50	; 0x32
    4f88:	8b a9       	ldd	r24, Y+51	; 0x33
    4f8a:	9c a9       	ldd	r25, Y+52	; 0x34
    4f8c:	20 e0       	ldi	r18, 0x00	; 0
    4f8e:	30 e0       	ldi	r19, 0x00	; 0
    4f90:	40 e8       	ldi	r20, 0x80	; 128
    4f92:	5f e3       	ldi	r21, 0x3F	; 63
    4f94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f98:	88 23       	and	r24, r24
    4f9a:	2c f4       	brge	.+10     	; 0x4fa6 <LCD_enuInit+0xae>
		__ticks = 1;
    4f9c:	81 e0       	ldi	r24, 0x01	; 1
    4f9e:	90 e0       	ldi	r25, 0x00	; 0
    4fa0:	98 ab       	std	Y+48, r25	; 0x30
    4fa2:	8f a7       	std	Y+47, r24	; 0x2f
    4fa4:	3f c0       	rjmp	.+126    	; 0x5024 <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    4fa6:	69 a9       	ldd	r22, Y+49	; 0x31
    4fa8:	7a a9       	ldd	r23, Y+50	; 0x32
    4faa:	8b a9       	ldd	r24, Y+51	; 0x33
    4fac:	9c a9       	ldd	r25, Y+52	; 0x34
    4fae:	20 e0       	ldi	r18, 0x00	; 0
    4fb0:	3f ef       	ldi	r19, 0xFF	; 255
    4fb2:	4f e7       	ldi	r20, 0x7F	; 127
    4fb4:	57 e4       	ldi	r21, 0x47	; 71
    4fb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4fba:	18 16       	cp	r1, r24
    4fbc:	4c f5       	brge	.+82     	; 0x5010 <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fbe:	6d a9       	ldd	r22, Y+53	; 0x35
    4fc0:	7e a9       	ldd	r23, Y+54	; 0x36
    4fc2:	8f a9       	ldd	r24, Y+55	; 0x37
    4fc4:	98 ad       	ldd	r25, Y+56	; 0x38
    4fc6:	20 e0       	ldi	r18, 0x00	; 0
    4fc8:	30 e0       	ldi	r19, 0x00	; 0
    4fca:	40 e2       	ldi	r20, 0x20	; 32
    4fcc:	51 e4       	ldi	r21, 0x41	; 65
    4fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fd2:	dc 01       	movw	r26, r24
    4fd4:	cb 01       	movw	r24, r22
    4fd6:	bc 01       	movw	r22, r24
    4fd8:	cd 01       	movw	r24, r26
    4fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fde:	dc 01       	movw	r26, r24
    4fe0:	cb 01       	movw	r24, r22
    4fe2:	98 ab       	std	Y+48, r25	; 0x30
    4fe4:	8f a7       	std	Y+47, r24	; 0x2f
    4fe6:	0f c0       	rjmp	.+30     	; 0x5006 <LCD_enuInit+0x10e>
    4fe8:	89 e1       	ldi	r24, 0x19	; 25
    4fea:	90 e0       	ldi	r25, 0x00	; 0
    4fec:	9e a7       	std	Y+46, r25	; 0x2e
    4fee:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4ff0:	8d a5       	ldd	r24, Y+45	; 0x2d
    4ff2:	9e a5       	ldd	r25, Y+46	; 0x2e
    4ff4:	01 97       	sbiw	r24, 0x01	; 1
    4ff6:	f1 f7       	brne	.-4      	; 0x4ff4 <LCD_enuInit+0xfc>
    4ff8:	9e a7       	std	Y+46, r25	; 0x2e
    4ffa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ffc:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ffe:	98 a9       	ldd	r25, Y+48	; 0x30
    5000:	01 97       	sbiw	r24, 0x01	; 1
    5002:	98 ab       	std	Y+48, r25	; 0x30
    5004:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5006:	8f a5       	ldd	r24, Y+47	; 0x2f
    5008:	98 a9       	ldd	r25, Y+48	; 0x30
    500a:	00 97       	sbiw	r24, 0x00	; 0
    500c:	69 f7       	brne	.-38     	; 0x4fe8 <LCD_enuInit+0xf0>
    500e:	14 c0       	rjmp	.+40     	; 0x5038 <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5010:	69 a9       	ldd	r22, Y+49	; 0x31
    5012:	7a a9       	ldd	r23, Y+50	; 0x32
    5014:	8b a9       	ldd	r24, Y+51	; 0x33
    5016:	9c a9       	ldd	r25, Y+52	; 0x34
    5018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    501c:	dc 01       	movw	r26, r24
    501e:	cb 01       	movw	r24, r22
    5020:	98 ab       	std	Y+48, r25	; 0x30
    5022:	8f a7       	std	Y+47, r24	; 0x2f
    5024:	8f a5       	ldd	r24, Y+47	; 0x2f
    5026:	98 a9       	ldd	r25, Y+48	; 0x30
    5028:	9c a7       	std	Y+44, r25	; 0x2c
    502a:	8b a7       	std	Y+43, r24	; 0x2b
    502c:	8b a5       	ldd	r24, Y+43	; 0x2b
    502e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5030:	01 97       	sbiw	r24, 0x01	; 1
    5032:	f1 f7       	brne	.-4      	; 0x5030 <LCD_enuInit+0x138>
    5034:	9c a7       	std	Y+44, r25	; 0x2c
    5036:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);


	#if LCD_MODE == EIGHT_BIT
		DIO_enuSetPinDirection(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    5038:	82 e0       	ldi	r24, 0x02	; 2
    503a:	63 e0       	ldi	r22, 0x03	; 3
    503c:	41 e0       	ldi	r20, 0x01	; 1
    503e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    5042:	82 e0       	ldi	r24, 0x02	; 2
    5044:	62 e0       	ldi	r22, 0x02	; 2
    5046:	41 e0       	ldi	r20, 0x01	; 1
    5048:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    504c:	82 e0       	ldi	r24, 0x02	; 2
    504e:	61 e0       	ldi	r22, 0x01	; 1
    5050:	41 e0       	ldi	r20, 0x01	; 1
    5052:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    5056:	82 e0       	ldi	r24, 0x02	; 2
    5058:	60 e0       	ldi	r22, 0x00	; 0
    505a:	41 e0       	ldi	r20, 0x01	; 1
    505c:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>

		/* Function Set */
		LCD_invoidSendCommand(0x38);
    5060:	88 e3       	ldi	r24, 0x38	; 56
    5062:	0e 94 b2 2c 	call	0x5964	; 0x5964 <LCD_invoidSendCommand>
    5066:	80 e0       	ldi	r24, 0x00	; 0
    5068:	90 e0       	ldi	r25, 0x00	; 0
    506a:	a0 e8       	ldi	r26, 0x80	; 128
    506c:	bf e3       	ldi	r27, 0x3F	; 63
    506e:	8f a3       	std	Y+39, r24	; 0x27
    5070:	98 a7       	std	Y+40, r25	; 0x28
    5072:	a9 a7       	std	Y+41, r26	; 0x29
    5074:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5076:	6f a1       	ldd	r22, Y+39	; 0x27
    5078:	78 a5       	ldd	r23, Y+40	; 0x28
    507a:	89 a5       	ldd	r24, Y+41	; 0x29
    507c:	9a a5       	ldd	r25, Y+42	; 0x2a
    507e:	20 e0       	ldi	r18, 0x00	; 0
    5080:	30 e0       	ldi	r19, 0x00	; 0
    5082:	4a e7       	ldi	r20, 0x7A	; 122
    5084:	53 e4       	ldi	r21, 0x43	; 67
    5086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    508a:	dc 01       	movw	r26, r24
    508c:	cb 01       	movw	r24, r22
    508e:	8b a3       	std	Y+35, r24	; 0x23
    5090:	9c a3       	std	Y+36, r25	; 0x24
    5092:	ad a3       	std	Y+37, r26	; 0x25
    5094:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5096:	6b a1       	ldd	r22, Y+35	; 0x23
    5098:	7c a1       	ldd	r23, Y+36	; 0x24
    509a:	8d a1       	ldd	r24, Y+37	; 0x25
    509c:	9e a1       	ldd	r25, Y+38	; 0x26
    509e:	20 e0       	ldi	r18, 0x00	; 0
    50a0:	30 e0       	ldi	r19, 0x00	; 0
    50a2:	40 e8       	ldi	r20, 0x80	; 128
    50a4:	5f e3       	ldi	r21, 0x3F	; 63
    50a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    50aa:	88 23       	and	r24, r24
    50ac:	2c f4       	brge	.+10     	; 0x50b8 <LCD_enuInit+0x1c0>
		__ticks = 1;
    50ae:	81 e0       	ldi	r24, 0x01	; 1
    50b0:	90 e0       	ldi	r25, 0x00	; 0
    50b2:	9a a3       	std	Y+34, r25	; 0x22
    50b4:	89 a3       	std	Y+33, r24	; 0x21
    50b6:	3f c0       	rjmp	.+126    	; 0x5136 <LCD_enuInit+0x23e>
	else if (__tmp > 65535)
    50b8:	6b a1       	ldd	r22, Y+35	; 0x23
    50ba:	7c a1       	ldd	r23, Y+36	; 0x24
    50bc:	8d a1       	ldd	r24, Y+37	; 0x25
    50be:	9e a1       	ldd	r25, Y+38	; 0x26
    50c0:	20 e0       	ldi	r18, 0x00	; 0
    50c2:	3f ef       	ldi	r19, 0xFF	; 255
    50c4:	4f e7       	ldi	r20, 0x7F	; 127
    50c6:	57 e4       	ldi	r21, 0x47	; 71
    50c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    50cc:	18 16       	cp	r1, r24
    50ce:	4c f5       	brge	.+82     	; 0x5122 <LCD_enuInit+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50d0:	6f a1       	ldd	r22, Y+39	; 0x27
    50d2:	78 a5       	ldd	r23, Y+40	; 0x28
    50d4:	89 a5       	ldd	r24, Y+41	; 0x29
    50d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    50d8:	20 e0       	ldi	r18, 0x00	; 0
    50da:	30 e0       	ldi	r19, 0x00	; 0
    50dc:	40 e2       	ldi	r20, 0x20	; 32
    50de:	51 e4       	ldi	r21, 0x41	; 65
    50e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50e4:	dc 01       	movw	r26, r24
    50e6:	cb 01       	movw	r24, r22
    50e8:	bc 01       	movw	r22, r24
    50ea:	cd 01       	movw	r24, r26
    50ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50f0:	dc 01       	movw	r26, r24
    50f2:	cb 01       	movw	r24, r22
    50f4:	9a a3       	std	Y+34, r25	; 0x22
    50f6:	89 a3       	std	Y+33, r24	; 0x21
    50f8:	0f c0       	rjmp	.+30     	; 0x5118 <LCD_enuInit+0x220>
    50fa:	89 e1       	ldi	r24, 0x19	; 25
    50fc:	90 e0       	ldi	r25, 0x00	; 0
    50fe:	98 a3       	std	Y+32, r25	; 0x20
    5100:	8f 8f       	std	Y+31, r24	; 0x1f
    5102:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5104:	98 a1       	ldd	r25, Y+32	; 0x20
    5106:	01 97       	sbiw	r24, 0x01	; 1
    5108:	f1 f7       	brne	.-4      	; 0x5106 <LCD_enuInit+0x20e>
    510a:	98 a3       	std	Y+32, r25	; 0x20
    510c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    510e:	89 a1       	ldd	r24, Y+33	; 0x21
    5110:	9a a1       	ldd	r25, Y+34	; 0x22
    5112:	01 97       	sbiw	r24, 0x01	; 1
    5114:	9a a3       	std	Y+34, r25	; 0x22
    5116:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5118:	89 a1       	ldd	r24, Y+33	; 0x21
    511a:	9a a1       	ldd	r25, Y+34	; 0x22
    511c:	00 97       	sbiw	r24, 0x00	; 0
    511e:	69 f7       	brne	.-38     	; 0x50fa <LCD_enuInit+0x202>
    5120:	14 c0       	rjmp	.+40     	; 0x514a <LCD_enuInit+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5122:	6b a1       	ldd	r22, Y+35	; 0x23
    5124:	7c a1       	ldd	r23, Y+36	; 0x24
    5126:	8d a1       	ldd	r24, Y+37	; 0x25
    5128:	9e a1       	ldd	r25, Y+38	; 0x26
    512a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    512e:	dc 01       	movw	r26, r24
    5130:	cb 01       	movw	r24, r22
    5132:	9a a3       	std	Y+34, r25	; 0x22
    5134:	89 a3       	std	Y+33, r24	; 0x21
    5136:	89 a1       	ldd	r24, Y+33	; 0x21
    5138:	9a a1       	ldd	r25, Y+34	; 0x22
    513a:	9e 8f       	std	Y+30, r25	; 0x1e
    513c:	8d 8f       	std	Y+29, r24	; 0x1d
    513e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5140:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5142:	01 97       	sbiw	r24, 0x01	; 1
    5144:	f1 f7       	brne	.-4      	; 0x5142 <LCD_enuInit+0x24a>
    5146:	9e 8f       	std	Y+30, r25	; 0x1e
    5148:	8d 8f       	std	Y+29, r24	; 0x1d
		#error "Invalid LCD Mode"
	#endif

		_delay_ms(1);
		/* Display ON Cursor Blink*/
		LCD_invoidSendCommand(0x0F);
    514a:	8f e0       	ldi	r24, 0x0F	; 15
    514c:	0e 94 b2 2c 	call	0x5964	; 0x5964 <LCD_invoidSendCommand>
    5150:	80 e0       	ldi	r24, 0x00	; 0
    5152:	90 e0       	ldi	r25, 0x00	; 0
    5154:	a0 e8       	ldi	r26, 0x80	; 128
    5156:	bf e3       	ldi	r27, 0x3F	; 63
    5158:	89 8f       	std	Y+25, r24	; 0x19
    515a:	9a 8f       	std	Y+26, r25	; 0x1a
    515c:	ab 8f       	std	Y+27, r26	; 0x1b
    515e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5160:	69 8d       	ldd	r22, Y+25	; 0x19
    5162:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5164:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5166:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5168:	20 e0       	ldi	r18, 0x00	; 0
    516a:	30 e0       	ldi	r19, 0x00	; 0
    516c:	4a e7       	ldi	r20, 0x7A	; 122
    516e:	53 e4       	ldi	r21, 0x43	; 67
    5170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5174:	dc 01       	movw	r26, r24
    5176:	cb 01       	movw	r24, r22
    5178:	8d 8b       	std	Y+21, r24	; 0x15
    517a:	9e 8b       	std	Y+22, r25	; 0x16
    517c:	af 8b       	std	Y+23, r26	; 0x17
    517e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5180:	6d 89       	ldd	r22, Y+21	; 0x15
    5182:	7e 89       	ldd	r23, Y+22	; 0x16
    5184:	8f 89       	ldd	r24, Y+23	; 0x17
    5186:	98 8d       	ldd	r25, Y+24	; 0x18
    5188:	20 e0       	ldi	r18, 0x00	; 0
    518a:	30 e0       	ldi	r19, 0x00	; 0
    518c:	40 e8       	ldi	r20, 0x80	; 128
    518e:	5f e3       	ldi	r21, 0x3F	; 63
    5190:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5194:	88 23       	and	r24, r24
    5196:	2c f4       	brge	.+10     	; 0x51a2 <LCD_enuInit+0x2aa>
		__ticks = 1;
    5198:	81 e0       	ldi	r24, 0x01	; 1
    519a:	90 e0       	ldi	r25, 0x00	; 0
    519c:	9c 8b       	std	Y+20, r25	; 0x14
    519e:	8b 8b       	std	Y+19, r24	; 0x13
    51a0:	3f c0       	rjmp	.+126    	; 0x5220 <LCD_enuInit+0x328>
	else if (__tmp > 65535)
    51a2:	6d 89       	ldd	r22, Y+21	; 0x15
    51a4:	7e 89       	ldd	r23, Y+22	; 0x16
    51a6:	8f 89       	ldd	r24, Y+23	; 0x17
    51a8:	98 8d       	ldd	r25, Y+24	; 0x18
    51aa:	20 e0       	ldi	r18, 0x00	; 0
    51ac:	3f ef       	ldi	r19, 0xFF	; 255
    51ae:	4f e7       	ldi	r20, 0x7F	; 127
    51b0:	57 e4       	ldi	r21, 0x47	; 71
    51b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    51b6:	18 16       	cp	r1, r24
    51b8:	4c f5       	brge	.+82     	; 0x520c <LCD_enuInit+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51ba:	69 8d       	ldd	r22, Y+25	; 0x19
    51bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    51be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    51c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    51c2:	20 e0       	ldi	r18, 0x00	; 0
    51c4:	30 e0       	ldi	r19, 0x00	; 0
    51c6:	40 e2       	ldi	r20, 0x20	; 32
    51c8:	51 e4       	ldi	r21, 0x41	; 65
    51ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51ce:	dc 01       	movw	r26, r24
    51d0:	cb 01       	movw	r24, r22
    51d2:	bc 01       	movw	r22, r24
    51d4:	cd 01       	movw	r24, r26
    51d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51da:	dc 01       	movw	r26, r24
    51dc:	cb 01       	movw	r24, r22
    51de:	9c 8b       	std	Y+20, r25	; 0x14
    51e0:	8b 8b       	std	Y+19, r24	; 0x13
    51e2:	0f c0       	rjmp	.+30     	; 0x5202 <LCD_enuInit+0x30a>
    51e4:	89 e1       	ldi	r24, 0x19	; 25
    51e6:	90 e0       	ldi	r25, 0x00	; 0
    51e8:	9a 8b       	std	Y+18, r25	; 0x12
    51ea:	89 8b       	std	Y+17, r24	; 0x11
    51ec:	89 89       	ldd	r24, Y+17	; 0x11
    51ee:	9a 89       	ldd	r25, Y+18	; 0x12
    51f0:	01 97       	sbiw	r24, 0x01	; 1
    51f2:	f1 f7       	brne	.-4      	; 0x51f0 <LCD_enuInit+0x2f8>
    51f4:	9a 8b       	std	Y+18, r25	; 0x12
    51f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51f8:	8b 89       	ldd	r24, Y+19	; 0x13
    51fa:	9c 89       	ldd	r25, Y+20	; 0x14
    51fc:	01 97       	sbiw	r24, 0x01	; 1
    51fe:	9c 8b       	std	Y+20, r25	; 0x14
    5200:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5202:	8b 89       	ldd	r24, Y+19	; 0x13
    5204:	9c 89       	ldd	r25, Y+20	; 0x14
    5206:	00 97       	sbiw	r24, 0x00	; 0
    5208:	69 f7       	brne	.-38     	; 0x51e4 <LCD_enuInit+0x2ec>
    520a:	14 c0       	rjmp	.+40     	; 0x5234 <LCD_enuInit+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    520c:	6d 89       	ldd	r22, Y+21	; 0x15
    520e:	7e 89       	ldd	r23, Y+22	; 0x16
    5210:	8f 89       	ldd	r24, Y+23	; 0x17
    5212:	98 8d       	ldd	r25, Y+24	; 0x18
    5214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5218:	dc 01       	movw	r26, r24
    521a:	cb 01       	movw	r24, r22
    521c:	9c 8b       	std	Y+20, r25	; 0x14
    521e:	8b 8b       	std	Y+19, r24	; 0x13
    5220:	8b 89       	ldd	r24, Y+19	; 0x13
    5222:	9c 89       	ldd	r25, Y+20	; 0x14
    5224:	98 8b       	std	Y+16, r25	; 0x10
    5226:	8f 87       	std	Y+15, r24	; 0x0f
    5228:	8f 85       	ldd	r24, Y+15	; 0x0f
    522a:	98 89       	ldd	r25, Y+16	; 0x10
    522c:	01 97       	sbiw	r24, 0x01	; 1
    522e:	f1 f7       	brne	.-4      	; 0x522c <LCD_enuInit+0x334>
    5230:	98 8b       	std	Y+16, r25	; 0x10
    5232:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		/* Clear Display */
		LCD_invoidSendCommand(0x01);
    5234:	81 e0       	ldi	r24, 0x01	; 1
    5236:	0e 94 b2 2c 	call	0x5964	; 0x5964 <LCD_invoidSendCommand>
    523a:	80 e0       	ldi	r24, 0x00	; 0
    523c:	90 e0       	ldi	r25, 0x00	; 0
    523e:	a0 e0       	ldi	r26, 0x00	; 0
    5240:	b0 e4       	ldi	r27, 0x40	; 64
    5242:	8b 87       	std	Y+11, r24	; 0x0b
    5244:	9c 87       	std	Y+12, r25	; 0x0c
    5246:	ad 87       	std	Y+13, r26	; 0x0d
    5248:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    524a:	6b 85       	ldd	r22, Y+11	; 0x0b
    524c:	7c 85       	ldd	r23, Y+12	; 0x0c
    524e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5250:	9e 85       	ldd	r25, Y+14	; 0x0e
    5252:	20 e0       	ldi	r18, 0x00	; 0
    5254:	30 e0       	ldi	r19, 0x00	; 0
    5256:	4a e7       	ldi	r20, 0x7A	; 122
    5258:	53 e4       	ldi	r21, 0x43	; 67
    525a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    525e:	dc 01       	movw	r26, r24
    5260:	cb 01       	movw	r24, r22
    5262:	8f 83       	std	Y+7, r24	; 0x07
    5264:	98 87       	std	Y+8, r25	; 0x08
    5266:	a9 87       	std	Y+9, r26	; 0x09
    5268:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    526a:	6f 81       	ldd	r22, Y+7	; 0x07
    526c:	78 85       	ldd	r23, Y+8	; 0x08
    526e:	89 85       	ldd	r24, Y+9	; 0x09
    5270:	9a 85       	ldd	r25, Y+10	; 0x0a
    5272:	20 e0       	ldi	r18, 0x00	; 0
    5274:	30 e0       	ldi	r19, 0x00	; 0
    5276:	40 e8       	ldi	r20, 0x80	; 128
    5278:	5f e3       	ldi	r21, 0x3F	; 63
    527a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    527e:	88 23       	and	r24, r24
    5280:	2c f4       	brge	.+10     	; 0x528c <LCD_enuInit+0x394>
		__ticks = 1;
    5282:	81 e0       	ldi	r24, 0x01	; 1
    5284:	90 e0       	ldi	r25, 0x00	; 0
    5286:	9e 83       	std	Y+6, r25	; 0x06
    5288:	8d 83       	std	Y+5, r24	; 0x05
    528a:	3f c0       	rjmp	.+126    	; 0x530a <LCD_enuInit+0x412>
	else if (__tmp > 65535)
    528c:	6f 81       	ldd	r22, Y+7	; 0x07
    528e:	78 85       	ldd	r23, Y+8	; 0x08
    5290:	89 85       	ldd	r24, Y+9	; 0x09
    5292:	9a 85       	ldd	r25, Y+10	; 0x0a
    5294:	20 e0       	ldi	r18, 0x00	; 0
    5296:	3f ef       	ldi	r19, 0xFF	; 255
    5298:	4f e7       	ldi	r20, 0x7F	; 127
    529a:	57 e4       	ldi	r21, 0x47	; 71
    529c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    52a0:	18 16       	cp	r1, r24
    52a2:	4c f5       	brge	.+82     	; 0x52f6 <LCD_enuInit+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    52a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    52a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    52aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    52ac:	20 e0       	ldi	r18, 0x00	; 0
    52ae:	30 e0       	ldi	r19, 0x00	; 0
    52b0:	40 e2       	ldi	r20, 0x20	; 32
    52b2:	51 e4       	ldi	r21, 0x41	; 65
    52b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52b8:	dc 01       	movw	r26, r24
    52ba:	cb 01       	movw	r24, r22
    52bc:	bc 01       	movw	r22, r24
    52be:	cd 01       	movw	r24, r26
    52c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52c4:	dc 01       	movw	r26, r24
    52c6:	cb 01       	movw	r24, r22
    52c8:	9e 83       	std	Y+6, r25	; 0x06
    52ca:	8d 83       	std	Y+5, r24	; 0x05
    52cc:	0f c0       	rjmp	.+30     	; 0x52ec <LCD_enuInit+0x3f4>
    52ce:	89 e1       	ldi	r24, 0x19	; 25
    52d0:	90 e0       	ldi	r25, 0x00	; 0
    52d2:	9c 83       	std	Y+4, r25	; 0x04
    52d4:	8b 83       	std	Y+3, r24	; 0x03
    52d6:	8b 81       	ldd	r24, Y+3	; 0x03
    52d8:	9c 81       	ldd	r25, Y+4	; 0x04
    52da:	01 97       	sbiw	r24, 0x01	; 1
    52dc:	f1 f7       	brne	.-4      	; 0x52da <LCD_enuInit+0x3e2>
    52de:	9c 83       	std	Y+4, r25	; 0x04
    52e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52e2:	8d 81       	ldd	r24, Y+5	; 0x05
    52e4:	9e 81       	ldd	r25, Y+6	; 0x06
    52e6:	01 97       	sbiw	r24, 0x01	; 1
    52e8:	9e 83       	std	Y+6, r25	; 0x06
    52ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52ec:	8d 81       	ldd	r24, Y+5	; 0x05
    52ee:	9e 81       	ldd	r25, Y+6	; 0x06
    52f0:	00 97       	sbiw	r24, 0x00	; 0
    52f2:	69 f7       	brne	.-38     	; 0x52ce <LCD_enuInit+0x3d6>
    52f4:	14 c0       	rjmp	.+40     	; 0x531e <LCD_enuInit+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52f6:	6f 81       	ldd	r22, Y+7	; 0x07
    52f8:	78 85       	ldd	r23, Y+8	; 0x08
    52fa:	89 85       	ldd	r24, Y+9	; 0x09
    52fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    52fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5302:	dc 01       	movw	r26, r24
    5304:	cb 01       	movw	r24, r22
    5306:	9e 83       	std	Y+6, r25	; 0x06
    5308:	8d 83       	std	Y+5, r24	; 0x05
    530a:	8d 81       	ldd	r24, Y+5	; 0x05
    530c:	9e 81       	ldd	r25, Y+6	; 0x06
    530e:	9a 83       	std	Y+2, r25	; 0x02
    5310:	89 83       	std	Y+1, r24	; 0x01
    5312:	89 81       	ldd	r24, Y+1	; 0x01
    5314:	9a 81       	ldd	r25, Y+2	; 0x02
    5316:	01 97       	sbiw	r24, 0x01	; 1
    5318:	f1 f7       	brne	.-4      	; 0x5316 <LCD_enuInit+0x41e>
    531a:	9a 83       	std	Y+2, r25	; 0x02
    531c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		/* Entry Mode */
		LCD_invoidSendCommand(0x06);
    531e:	86 e0       	ldi	r24, 0x06	; 6
    5320:	0e 94 b2 2c 	call	0x5964	; 0x5964 <LCD_invoidSendCommand>

	return Local_enuErrorState;
    5324:	89 ad       	ldd	r24, Y+57	; 0x39
}
    5326:	e9 96       	adiw	r28, 0x39	; 57
    5328:	0f b6       	in	r0, 0x3f	; 63
    532a:	f8 94       	cli
    532c:	de bf       	out	0x3e, r29	; 62
    532e:	0f be       	out	0x3f, r0	; 63
    5330:	cd bf       	out	0x3d, r28	; 61
    5332:	cf 91       	pop	r28
    5334:	df 91       	pop	r29
    5336:	08 95       	ret

00005338 <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    5338:	df 93       	push	r29
    533a:	cf 93       	push	r28
    533c:	00 d0       	rcall	.+0      	; 0x533e <LCD_enuSendCommand+0x6>
    533e:	cd b7       	in	r28, 0x3d	; 61
    5340:	de b7       	in	r29, 0x3e	; 62
    5342:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    5344:	19 82       	std	Y+1, r1	; 0x01

	/* Set RS as Command */
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    5346:	80 e0       	ldi	r24, 0x00	; 0
    5348:	60 e0       	ldi	r22, 0x00	; 0
    534a:	40 e0       	ldi	r20, 0x00	; 0
    534c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>

	LCD_voidLatch(Copy_u8Command);
    5350:	8a 81       	ldd	r24, Y+2	; 0x02
    5352:	0e 94 5a 2b 	call	0x56b4	; 0x56b4 <LCD_voidLatch>

	return Local_enuErrorState;
    5356:	89 81       	ldd	r24, Y+1	; 0x01
}
    5358:	0f 90       	pop	r0
    535a:	0f 90       	pop	r0
    535c:	cf 91       	pop	r28
    535e:	df 91       	pop	r29
    5360:	08 95       	ret

00005362 <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Char)
{
    5362:	df 93       	push	r29
    5364:	cf 93       	push	r28
    5366:	00 d0       	rcall	.+0      	; 0x5368 <LCD_enuDisplayChar+0x6>
    5368:	cd b7       	in	r28, 0x3d	; 61
    536a:	de b7       	in	r29, 0x3e	; 62
    536c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    536e:	19 82       	std	Y+1, r1	; 0x01

	/* Set RS as DATA */
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    5370:	80 e0       	ldi	r24, 0x00	; 0
    5372:	60 e0       	ldi	r22, 0x00	; 0
    5374:	41 e0       	ldi	r20, 0x01	; 1
    5376:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>

	LCD_voidLatch(Copy_u8Char);
    537a:	8a 81       	ldd	r24, Y+2	; 0x02
    537c:	0e 94 5a 2b 	call	0x56b4	; 0x56b4 <LCD_voidLatch>

	return Local_enuErrorState;
    5380:	89 81       	ldd	r24, Y+1	; 0x01
}
    5382:	0f 90       	pop	r0
    5384:	0f 90       	pop	r0
    5386:	cf 91       	pop	r28
    5388:	df 91       	pop	r29
    538a:	08 95       	ret

0000538c <LCD_enuDisplayNumber>:

ES_t LCD_enuDisplayNumber(u32 Copy_u8Number)
{
    538c:	df 93       	push	r29
    538e:	cf 93       	push	r28
    5390:	cd b7       	in	r28, 0x3d	; 61
    5392:	de b7       	in	r29, 0x3e	; 62
    5394:	2a 97       	sbiw	r28, 0x0a	; 10
    5396:	0f b6       	in	r0, 0x3f	; 63
    5398:	f8 94       	cli
    539a:	de bf       	out	0x3e, r29	; 62
    539c:	0f be       	out	0x3f, r0	; 63
    539e:	cd bf       	out	0x3d, r28	; 61
    53a0:	6f 83       	std	Y+7, r22	; 0x07
    53a2:	78 87       	std	Y+8, r23	; 0x08
    53a4:	89 87       	std	Y+9, r24	; 0x09
    53a6:	9a 87       	std	Y+10, r25	; 0x0a
	ES_t Local_enuErrorState = ES_NOK;
    53a8:	1e 82       	std	Y+6, r1	; 0x06

	u8 Local_u8Digit = 0;
    53aa:	1d 82       	std	Y+5, r1	; 0x05
	f64 Local_f64NumberOfDigits = 1;
    53ac:	80 e0       	ldi	r24, 0x00	; 0
    53ae:	90 e0       	ldi	r25, 0x00	; 0
    53b0:	a0 e8       	ldi	r26, 0x80	; 128
    53b2:	bf e3       	ldi	r27, 0x3F	; 63
    53b4:	89 83       	std	Y+1, r24	; 0x01
    53b6:	9a 83       	std	Y+2, r25	; 0x02
    53b8:	ab 83       	std	Y+3, r26	; 0x03
    53ba:	bc 83       	std	Y+4, r27	; 0x04

	/* Set RS as DATA */
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    53bc:	80 e0       	ldi	r24, 0x00	; 0
    53be:	60 e0       	ldi	r22, 0x00	; 0
    53c0:	41 e0       	ldi	r20, 0x01	; 1
    53c2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>

	if(Copy_u8Number < 10)
    53c6:	8f 81       	ldd	r24, Y+7	; 0x07
    53c8:	98 85       	ldd	r25, Y+8	; 0x08
    53ca:	a9 85       	ldd	r26, Y+9	; 0x09
    53cc:	ba 85       	ldd	r27, Y+10	; 0x0a
    53ce:	8a 30       	cpi	r24, 0x0A	; 10
    53d0:	91 05       	cpc	r25, r1
    53d2:	a1 05       	cpc	r26, r1
    53d4:	b1 05       	cpc	r27, r1
    53d6:	08 f5       	brcc	.+66     	; 0x541a <LCD_enuDisplayNumber+0x8e>
	{
		Copy_u8Number += 48;
    53d8:	8f 81       	ldd	r24, Y+7	; 0x07
    53da:	98 85       	ldd	r25, Y+8	; 0x08
    53dc:	a9 85       	ldd	r26, Y+9	; 0x09
    53de:	ba 85       	ldd	r27, Y+10	; 0x0a
    53e0:	c0 96       	adiw	r24, 0x30	; 48
    53e2:	a1 1d       	adc	r26, r1
    53e4:	b1 1d       	adc	r27, r1
    53e6:	8f 83       	std	Y+7, r24	; 0x07
    53e8:	98 87       	std	Y+8, r25	; 0x08
    53ea:	a9 87       	std	Y+9, r26	; 0x09
    53ec:	ba 87       	std	Y+10, r27	; 0x0a
		LCD_voidLatch(Copy_u8Number);
    53ee:	8f 81       	ldd	r24, Y+7	; 0x07
    53f0:	0e 94 5a 2b 	call	0x56b4	; 0x56b4 <LCD_voidLatch>
		Local_enuErrorState = ES_OK;
    53f4:	81 e0       	ldi	r24, 0x01	; 1
    53f6:	8e 83       	std	Y+6, r24	; 0x06
    53f8:	9a c0       	rjmp	.+308    	; 0x552e <LCD_enuDisplayNumber+0x1a2>
	else
	{
		/* Count digits of number log10 */
		while(Local_f64NumberOfDigits < Copy_u8Number)
		{
			Local_f64NumberOfDigits *= 10;
    53fa:	69 81       	ldd	r22, Y+1	; 0x01
    53fc:	7a 81       	ldd	r23, Y+2	; 0x02
    53fe:	8b 81       	ldd	r24, Y+3	; 0x03
    5400:	9c 81       	ldd	r25, Y+4	; 0x04
    5402:	20 e0       	ldi	r18, 0x00	; 0
    5404:	30 e0       	ldi	r19, 0x00	; 0
    5406:	40 e2       	ldi	r20, 0x20	; 32
    5408:	51 e4       	ldi	r21, 0x41	; 65
    540a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    540e:	dc 01       	movw	r26, r24
    5410:	cb 01       	movw	r24, r22
    5412:	89 83       	std	Y+1, r24	; 0x01
    5414:	9a 83       	std	Y+2, r25	; 0x02
    5416:	ab 83       	std	Y+3, r26	; 0x03
    5418:	bc 83       	std	Y+4, r27	; 0x04
		Local_enuErrorState = ES_OK;
	}
	else
	{
		/* Count digits of number log10 */
		while(Local_f64NumberOfDigits < Copy_u8Number)
    541a:	6f 81       	ldd	r22, Y+7	; 0x07
    541c:	78 85       	ldd	r23, Y+8	; 0x08
    541e:	89 85       	ldd	r24, Y+9	; 0x09
    5420:	9a 85       	ldd	r25, Y+10	; 0x0a
    5422:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    5426:	dc 01       	movw	r26, r24
    5428:	cb 01       	movw	r24, r22
    542a:	bc 01       	movw	r22, r24
    542c:	cd 01       	movw	r24, r26
    542e:	29 81       	ldd	r18, Y+1	; 0x01
    5430:	3a 81       	ldd	r19, Y+2	; 0x02
    5432:	4b 81       	ldd	r20, Y+3	; 0x03
    5434:	5c 81       	ldd	r21, Y+4	; 0x04
    5436:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    543a:	18 16       	cp	r1, r24
    543c:	f4 f2       	brlt	.-68     	; 0x53fa <LCD_enuDisplayNumber+0x6e>
		{
			Local_f64NumberOfDigits *= 10;
		}
		Local_f64NumberOfDigits /= 10;
    543e:	69 81       	ldd	r22, Y+1	; 0x01
    5440:	7a 81       	ldd	r23, Y+2	; 0x02
    5442:	8b 81       	ldd	r24, Y+3	; 0x03
    5444:	9c 81       	ldd	r25, Y+4	; 0x04
    5446:	20 e0       	ldi	r18, 0x00	; 0
    5448:	30 e0       	ldi	r19, 0x00	; 0
    544a:	40 e2       	ldi	r20, 0x20	; 32
    544c:	51 e4       	ldi	r21, 0x41	; 65
    544e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5452:	dc 01       	movw	r26, r24
    5454:	cb 01       	movw	r24, r22
    5456:	89 83       	std	Y+1, r24	; 0x01
    5458:	9a 83       	std	Y+2, r25	; 0x02
    545a:	ab 83       	std	Y+3, r26	; 0x03
    545c:	bc 83       	std	Y+4, r27	; 0x04
    545e:	58 c0       	rjmp	.+176    	; 0x5510 <LCD_enuDisplayNumber+0x184>

		while(Local_f64NumberOfDigits >= 1)
		{
			Local_u8Digit = (u8)(Copy_u8Number / Local_f64NumberOfDigits);
    5460:	6f 81       	ldd	r22, Y+7	; 0x07
    5462:	78 85       	ldd	r23, Y+8	; 0x08
    5464:	89 85       	ldd	r24, Y+9	; 0x09
    5466:	9a 85       	ldd	r25, Y+10	; 0x0a
    5468:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    546c:	dc 01       	movw	r26, r24
    546e:	cb 01       	movw	r24, r22
    5470:	bc 01       	movw	r22, r24
    5472:	cd 01       	movw	r24, r26
    5474:	29 81       	ldd	r18, Y+1	; 0x01
    5476:	3a 81       	ldd	r19, Y+2	; 0x02
    5478:	4b 81       	ldd	r20, Y+3	; 0x03
    547a:	5c 81       	ldd	r21, Y+4	; 0x04
    547c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5480:	dc 01       	movw	r26, r24
    5482:	cb 01       	movw	r24, r22
    5484:	bc 01       	movw	r22, r24
    5486:	cd 01       	movw	r24, r26
    5488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    548c:	dc 01       	movw	r26, r24
    548e:	cb 01       	movw	r24, r22
    5490:	8d 83       	std	Y+5, r24	; 0x05
			Copy_u8Number -= ((u32)(Local_u8Digit * Local_f64NumberOfDigits));
    5492:	8d 81       	ldd	r24, Y+5	; 0x05
    5494:	88 2f       	mov	r24, r24
    5496:	90 e0       	ldi	r25, 0x00	; 0
    5498:	aa 27       	eor	r26, r26
    549a:	97 fd       	sbrc	r25, 7
    549c:	a0 95       	com	r26
    549e:	ba 2f       	mov	r27, r26
    54a0:	bc 01       	movw	r22, r24
    54a2:	cd 01       	movw	r24, r26
    54a4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    54a8:	dc 01       	movw	r26, r24
    54aa:	cb 01       	movw	r24, r22
    54ac:	bc 01       	movw	r22, r24
    54ae:	cd 01       	movw	r24, r26
    54b0:	29 81       	ldd	r18, Y+1	; 0x01
    54b2:	3a 81       	ldd	r19, Y+2	; 0x02
    54b4:	4b 81       	ldd	r20, Y+3	; 0x03
    54b6:	5c 81       	ldd	r21, Y+4	; 0x04
    54b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54bc:	dc 01       	movw	r26, r24
    54be:	cb 01       	movw	r24, r22
    54c0:	bc 01       	movw	r22, r24
    54c2:	cd 01       	movw	r24, r26
    54c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54c8:	9b 01       	movw	r18, r22
    54ca:	ac 01       	movw	r20, r24
    54cc:	8f 81       	ldd	r24, Y+7	; 0x07
    54ce:	98 85       	ldd	r25, Y+8	; 0x08
    54d0:	a9 85       	ldd	r26, Y+9	; 0x09
    54d2:	ba 85       	ldd	r27, Y+10	; 0x0a
    54d4:	82 1b       	sub	r24, r18
    54d6:	93 0b       	sbc	r25, r19
    54d8:	a4 0b       	sbc	r26, r20
    54da:	b5 0b       	sbc	r27, r21
    54dc:	8f 83       	std	Y+7, r24	; 0x07
    54de:	98 87       	std	Y+8, r25	; 0x08
    54e0:	a9 87       	std	Y+9, r26	; 0x09
    54e2:	ba 87       	std	Y+10, r27	; 0x0a
			Local_u8Digit += 48;
    54e4:	8d 81       	ldd	r24, Y+5	; 0x05
    54e6:	80 5d       	subi	r24, 0xD0	; 208
    54e8:	8d 83       	std	Y+5, r24	; 0x05
			Local_f64NumberOfDigits /= 10;
    54ea:	69 81       	ldd	r22, Y+1	; 0x01
    54ec:	7a 81       	ldd	r23, Y+2	; 0x02
    54ee:	8b 81       	ldd	r24, Y+3	; 0x03
    54f0:	9c 81       	ldd	r25, Y+4	; 0x04
    54f2:	20 e0       	ldi	r18, 0x00	; 0
    54f4:	30 e0       	ldi	r19, 0x00	; 0
    54f6:	40 e2       	ldi	r20, 0x20	; 32
    54f8:	51 e4       	ldi	r21, 0x41	; 65
    54fa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    54fe:	dc 01       	movw	r26, r24
    5500:	cb 01       	movw	r24, r22
    5502:	89 83       	std	Y+1, r24	; 0x01
    5504:	9a 83       	std	Y+2, r25	; 0x02
    5506:	ab 83       	std	Y+3, r26	; 0x03
    5508:	bc 83       	std	Y+4, r27	; 0x04

			LCD_voidLatch(Local_u8Digit);
    550a:	8d 81       	ldd	r24, Y+5	; 0x05
    550c:	0e 94 5a 2b 	call	0x56b4	; 0x56b4 <LCD_voidLatch>
		{
			Local_f64NumberOfDigits *= 10;
		}
		Local_f64NumberOfDigits /= 10;

		while(Local_f64NumberOfDigits >= 1)
    5510:	69 81       	ldd	r22, Y+1	; 0x01
    5512:	7a 81       	ldd	r23, Y+2	; 0x02
    5514:	8b 81       	ldd	r24, Y+3	; 0x03
    5516:	9c 81       	ldd	r25, Y+4	; 0x04
    5518:	20 e0       	ldi	r18, 0x00	; 0
    551a:	30 e0       	ldi	r19, 0x00	; 0
    551c:	40 e8       	ldi	r20, 0x80	; 128
    551e:	5f e3       	ldi	r21, 0x3F	; 63
    5520:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    5524:	88 23       	and	r24, r24
    5526:	0c f0       	brlt	.+2      	; 0x552a <LCD_enuDisplayNumber+0x19e>
    5528:	9b cf       	rjmp	.-202    	; 0x5460 <LCD_enuDisplayNumber+0xd4>
			Local_u8Digit += 48;
			Local_f64NumberOfDigits /= 10;

			LCD_voidLatch(Local_u8Digit);
		}
		Local_enuErrorState = ES_OK;
    552a:	81 e0       	ldi	r24, 0x01	; 1
    552c:	8e 83       	std	Y+6, r24	; 0x06
	}


	return Local_enuErrorState;
    552e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    5530:	2a 96       	adiw	r28, 0x0a	; 10
    5532:	0f b6       	in	r0, 0x3f	; 63
    5534:	f8 94       	cli
    5536:	de bf       	out	0x3e, r29	; 62
    5538:	0f be       	out	0x3f, r0	; 63
    553a:	cd bf       	out	0x3d, r28	; 61
    553c:	cf 91       	pop	r28
    553e:	df 91       	pop	r29
    5540:	08 95       	ret

00005542 <LCD_enuDisplaySpecialChar>:

ES_t LCD_enuDisplaySpecialChar(u8 Copy_u8RowPosition , u8 Copy_u8ColPosition, u8 *Copy_pu8ExtraChar)
{
    5542:	df 93       	push	r29
    5544:	cf 93       	push	r28
    5546:	00 d0       	rcall	.+0      	; 0x5548 <LCD_enuDisplaySpecialChar+0x6>
    5548:	00 d0       	rcall	.+0      	; 0x554a <LCD_enuDisplaySpecialChar+0x8>
    554a:	00 d0       	rcall	.+0      	; 0x554c <LCD_enuDisplaySpecialChar+0xa>
    554c:	cd b7       	in	r28, 0x3d	; 61
    554e:	de b7       	in	r29, 0x3e	; 62
    5550:	8b 83       	std	Y+3, r24	; 0x03
    5552:	6c 83       	std	Y+4, r22	; 0x04
    5554:	5e 83       	std	Y+6, r21	; 0x06
    5556:	4d 83       	std	Y+5, r20	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    5558:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8Iterator = 0;
    555a:	19 82       	std	Y+1, r1	; 0x01

		LCD_invoidSendCommand(0x40);
    555c:	80 e4       	ldi	r24, 0x40	; 64
    555e:	0e 94 b2 2c 	call	0x5964	; 0x5964 <LCD_invoidSendCommand>

		/* Set RS as DATA */
		DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    5562:	80 e0       	ldi	r24, 0x00	; 0
    5564:	60 e0       	ldi	r22, 0x00	; 0
    5566:	41 e0       	ldi	r20, 0x01	; 1
    5568:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>

		for(Local_u8Iterator = 0; Local_u8Iterator < 8; Local_u8Iterator++)
    556c:	19 82       	std	Y+1, r1	; 0x01
    556e:	0e c0       	rjmp	.+28     	; 0x558c <LCD_enuDisplaySpecialChar+0x4a>
		{
			LCD_voidLatch(Copy_pu8ExtraChar[Local_u8Iterator]);
    5570:	89 81       	ldd	r24, Y+1	; 0x01
    5572:	28 2f       	mov	r18, r24
    5574:	30 e0       	ldi	r19, 0x00	; 0
    5576:	8d 81       	ldd	r24, Y+5	; 0x05
    5578:	9e 81       	ldd	r25, Y+6	; 0x06
    557a:	fc 01       	movw	r30, r24
    557c:	e2 0f       	add	r30, r18
    557e:	f3 1f       	adc	r31, r19
    5580:	80 81       	ld	r24, Z
    5582:	0e 94 5a 2b 	call	0x56b4	; 0x56b4 <LCD_voidLatch>
		LCD_invoidSendCommand(0x40);

		/* Set RS as DATA */
		DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);

		for(Local_u8Iterator = 0; Local_u8Iterator < 8; Local_u8Iterator++)
    5586:	89 81       	ldd	r24, Y+1	; 0x01
    5588:	8f 5f       	subi	r24, 0xFF	; 255
    558a:	89 83       	std	Y+1, r24	; 0x01
    558c:	89 81       	ldd	r24, Y+1	; 0x01
    558e:	88 30       	cpi	r24, 0x08	; 8
    5590:	78 f3       	brcs	.-34     	; 0x5570 <LCD_enuDisplaySpecialChar+0x2e>
		{
			LCD_voidLatch(Copy_pu8ExtraChar[Local_u8Iterator]);
		}

		LCD_enuLocalGoToXY(Copy_u8RowPosition, Copy_u8ColPosition);
    5592:	8b 81       	ldd	r24, Y+3	; 0x03
    5594:	6c 81       	ldd	r22, Y+4	; 0x04
    5596:	0e 94 32 2b 	call	0x5664	; 0x5664 <LCD_enuLocalGoToXY>

		DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    559a:	80 e0       	ldi	r24, 0x00	; 0
    559c:	60 e0       	ldi	r22, 0x00	; 0
    559e:	41 e0       	ldi	r20, 0x01	; 1
    55a0:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
		LCD_voidLatch(0);
    55a4:	80 e0       	ldi	r24, 0x00	; 0
    55a6:	0e 94 5a 2b 	call	0x56b4	; 0x56b4 <LCD_voidLatch>

	return Local_enuErrorState;
    55aa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    55ac:	26 96       	adiw	r28, 0x06	; 6
    55ae:	0f b6       	in	r0, 0x3f	; 63
    55b0:	f8 94       	cli
    55b2:	de bf       	out	0x3e, r29	; 62
    55b4:	0f be       	out	0x3f, r0	; 63
    55b6:	cd bf       	out	0x3d, r28	; 61
    55b8:	cf 91       	pop	r28
    55ba:	df 91       	pop	r29
    55bc:	08 95       	ret

000055be <LCD_enuSendString>:



ES_t LCD_enuSendString(u8 *Copy_pu8string)
{
    55be:	df 93       	push	r29
    55c0:	cf 93       	push	r28
    55c2:	00 d0       	rcall	.+0      	; 0x55c4 <LCD_enuSendString+0x6>
    55c4:	00 d0       	rcall	.+0      	; 0x55c6 <LCD_enuSendString+0x8>
    55c6:	cd b7       	in	r28, 0x3d	; 61
    55c8:	de b7       	in	r29, 0x3e	; 62
    55ca:	9c 83       	std	Y+4, r25	; 0x04
    55cc:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    55ce:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8Counter = 0;
    55d0:	19 82       	std	Y+1, r1	; 0x01
	/* Set RS as DATA */
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    55d2:	80 e0       	ldi	r24, 0x00	; 0
    55d4:	60 e0       	ldi	r22, 0x00	; 0
    55d6:	41 e0       	ldi	r20, 0x01	; 1
    55d8:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>

	if(Copy_pu8string != NULL)
    55dc:	8b 81       	ldd	r24, Y+3	; 0x03
    55de:	9c 81       	ldd	r25, Y+4	; 0x04
    55e0:	00 97       	sbiw	r24, 0x00	; 0
    55e2:	09 f1       	breq	.+66     	; 0x5626 <LCD_enuSendString+0x68>
    55e4:	18 c0       	rjmp	.+48     	; 0x5616 <LCD_enuSendString+0x58>
	{
		while(*Copy_pu8string)
		{
			LCD_voidLatch(*Copy_pu8string);
    55e6:	eb 81       	ldd	r30, Y+3	; 0x03
    55e8:	fc 81       	ldd	r31, Y+4	; 0x04
    55ea:	80 81       	ld	r24, Z
    55ec:	0e 94 5a 2b 	call	0x56b4	; 0x56b4 <LCD_voidLatch>
			Copy_pu8string++;
    55f0:	8b 81       	ldd	r24, Y+3	; 0x03
    55f2:	9c 81       	ldd	r25, Y+4	; 0x04
    55f4:	01 96       	adiw	r24, 0x01	; 1
    55f6:	9c 83       	std	Y+4, r25	; 0x04
    55f8:	8b 83       	std	Y+3, r24	; 0x03
			Local_u8Counter++;
    55fa:	89 81       	ldd	r24, Y+1	; 0x01
    55fc:	8f 5f       	subi	r24, 0xFF	; 255
    55fe:	89 83       	std	Y+1, r24	; 0x01

			/* Go to Second Line */
			if(Local_u8Counter == 16)
    5600:	89 81       	ldd	r24, Y+1	; 0x01
    5602:	80 31       	cpi	r24, 0x10	; 16
    5604:	41 f4       	brne	.+16     	; 0x5616 <LCD_enuSendString+0x58>
			{
				LCD_invoidSendCommand(0xC0);
    5606:	80 ec       	ldi	r24, 0xC0	; 192
    5608:	0e 94 b2 2c 	call	0x5964	; 0x5964 <LCD_invoidSendCommand>
				DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    560c:	80 e0       	ldi	r24, 0x00	; 0
    560e:	60 e0       	ldi	r22, 0x00	; 0
    5610:	41 e0       	ldi	r20, 0x01	; 1
    5612:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
	/* Set RS as DATA */
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);

	if(Copy_pu8string != NULL)
	{
		while(*Copy_pu8string)
    5616:	eb 81       	ldd	r30, Y+3	; 0x03
    5618:	fc 81       	ldd	r31, Y+4	; 0x04
    561a:	80 81       	ld	r24, Z
    561c:	88 23       	and	r24, r24
    561e:	19 f7       	brne	.-58     	; 0x55e6 <LCD_enuSendString+0x28>
			{
				LCD_invoidSendCommand(0xC0);
				DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
			}
		}
		Local_enuErrorState = ES_OK;
    5620:	81 e0       	ldi	r24, 0x01	; 1
    5622:	8a 83       	std	Y+2, r24	; 0x02
    5624:	02 c0       	rjmp	.+4      	; 0x562a <LCD_enuSendString+0x6c>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    5626:	82 e0       	ldi	r24, 0x02	; 2
    5628:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    562a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    562c:	0f 90       	pop	r0
    562e:	0f 90       	pop	r0
    5630:	0f 90       	pop	r0
    5632:	0f 90       	pop	r0
    5634:	cf 91       	pop	r28
    5636:	df 91       	pop	r29
    5638:	08 95       	ret

0000563a <LCD_enuSetPosition>:

ES_t LCD_enuSetPosition(u8 Copy_u8Row, u8 Copy_u8Column)
{
    563a:	df 93       	push	r29
    563c:	cf 93       	push	r28
    563e:	00 d0       	rcall	.+0      	; 0x5640 <LCD_enuSetPosition+0x6>
    5640:	0f 92       	push	r0
    5642:	cd b7       	in	r28, 0x3d	; 61
    5644:	de b7       	in	r29, 0x3e	; 62
    5646:	8a 83       	std	Y+2, r24	; 0x02
    5648:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    564a:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorState = LCD_enuLocalGoToXY(Copy_u8Row, Copy_u8Column);
    564c:	8a 81       	ldd	r24, Y+2	; 0x02
    564e:	6b 81       	ldd	r22, Y+3	; 0x03
    5650:	0e 94 32 2b 	call	0x5664	; 0x5664 <LCD_enuLocalGoToXY>
    5654:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    5656:	89 81       	ldd	r24, Y+1	; 0x01
}
    5658:	0f 90       	pop	r0
    565a:	0f 90       	pop	r0
    565c:	0f 90       	pop	r0
    565e:	cf 91       	pop	r28
    5660:	df 91       	pop	r29
    5662:	08 95       	ret

00005664 <LCD_enuLocalGoToXY>:

static ES_t LCD_enuLocalGoToXY(u8 Copy_u8Row, u8 Copy_u8Column)
{
    5664:	df 93       	push	r29
    5666:	cf 93       	push	r28
    5668:	00 d0       	rcall	.+0      	; 0x566a <LCD_enuLocalGoToXY+0x6>
    566a:	00 d0       	rcall	.+0      	; 0x566c <LCD_enuLocalGoToXY+0x8>
    566c:	0f 92       	push	r0
    566e:	cd b7       	in	r28, 0x3d	; 61
    5670:	de b7       	in	r29, 0x3e	; 62
    5672:	8c 83       	std	Y+4, r24	; 0x04
    5674:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    5676:	19 82       	std	Y+1, r1	; 0x01

	u8 Local_u8RowLocation [] = {0x80 , 0xC0};
    5678:	80 e8       	ldi	r24, 0x80	; 128
    567a:	8a 83       	std	Y+2, r24	; 0x02
    567c:	80 ec       	ldi	r24, 0xC0	; 192
    567e:	8b 83       	std	Y+3, r24	; 0x03
	LCD_enuSendCommand(Local_u8RowLocation [Copy_u8Row-1]+(Copy_u8Column-1));
    5680:	8c 81       	ldd	r24, Y+4	; 0x04
    5682:	88 2f       	mov	r24, r24
    5684:	90 e0       	ldi	r25, 0x00	; 0
    5686:	9c 01       	movw	r18, r24
    5688:	21 50       	subi	r18, 0x01	; 1
    568a:	30 40       	sbci	r19, 0x00	; 0
    568c:	ce 01       	movw	r24, r28
    568e:	02 96       	adiw	r24, 0x02	; 2
    5690:	fc 01       	movw	r30, r24
    5692:	e2 0f       	add	r30, r18
    5694:	f3 1f       	adc	r31, r19
    5696:	90 81       	ld	r25, Z
    5698:	8d 81       	ldd	r24, Y+5	; 0x05
    569a:	89 0f       	add	r24, r25
    569c:	81 50       	subi	r24, 0x01	; 1
    569e:	0e 94 9c 29 	call	0x5338	; 0x5338 <LCD_enuSendCommand>

	return Local_enuErrorState;
    56a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    56a4:	0f 90       	pop	r0
    56a6:	0f 90       	pop	r0
    56a8:	0f 90       	pop	r0
    56aa:	0f 90       	pop	r0
    56ac:	0f 90       	pop	r0
    56ae:	cf 91       	pop	r28
    56b0:	df 91       	pop	r29
    56b2:	08 95       	ret

000056b4 <LCD_voidLatch>:
static void LCD_voidLatch(u8 Copy_u8Data)
{
    56b4:	df 93       	push	r29
    56b6:	cf 93       	push	r28
    56b8:	cd b7       	in	r28, 0x3d	; 61
    56ba:	de b7       	in	r29, 0x3e	; 62
    56bc:	6d 97       	sbiw	r28, 0x1d	; 29
    56be:	0f b6       	in	r0, 0x3f	; 63
    56c0:	f8 94       	cli
    56c2:	de bf       	out	0x3e, r29	; 62
    56c4:	0f be       	out	0x3f, r0	; 63
    56c6:	cd bf       	out	0x3d, r28	; 61
    56c8:	8d 8f       	std	Y+29, r24	; 0x1d

	// Set RW as write operation, EN is Low
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    56ca:	80 e0       	ldi	r24, 0x00	; 0
    56cc:	61 e0       	ldi	r22, 0x01	; 1
    56ce:	40 e0       	ldi	r20, 0x00	; 0
    56d0:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
	//DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
	// Write Command or Data
	DIO_enuSetPinValue(D7_PORT, D7_PIN, ((Copy_u8Data >> 7) & 1));
    56d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    56d6:	98 2f       	mov	r25, r24
    56d8:	99 1f       	adc	r25, r25
    56da:	99 27       	eor	r25, r25
    56dc:	99 1f       	adc	r25, r25
    56de:	81 e0       	ldi	r24, 0x01	; 1
    56e0:	67 e0       	ldi	r22, 0x07	; 7
    56e2:	49 2f       	mov	r20, r25
    56e4:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT, D6_PIN, ((Copy_u8Data >> 6) & 1));
    56e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    56ea:	82 95       	swap	r24
    56ec:	86 95       	lsr	r24
    56ee:	86 95       	lsr	r24
    56f0:	83 70       	andi	r24, 0x03	; 3
    56f2:	98 2f       	mov	r25, r24
    56f4:	91 70       	andi	r25, 0x01	; 1
    56f6:	81 e0       	ldi	r24, 0x01	; 1
    56f8:	66 e0       	ldi	r22, 0x06	; 6
    56fa:	49 2f       	mov	r20, r25
    56fc:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT, D5_PIN, ((Copy_u8Data >> 5) & 1));
    5700:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5702:	82 95       	swap	r24
    5704:	86 95       	lsr	r24
    5706:	87 70       	andi	r24, 0x07	; 7
    5708:	98 2f       	mov	r25, r24
    570a:	91 70       	andi	r25, 0x01	; 1
    570c:	81 e0       	ldi	r24, 0x01	; 1
    570e:	65 e0       	ldi	r22, 0x05	; 5
    5710:	49 2f       	mov	r20, r25
    5712:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT, D4_PIN, ((Copy_u8Data >> 4) & 1));
    5716:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5718:	82 95       	swap	r24
    571a:	8f 70       	andi	r24, 0x0F	; 15
    571c:	98 2f       	mov	r25, r24
    571e:	91 70       	andi	r25, 0x01	; 1
    5720:	81 e0       	ldi	r24, 0x01	; 1
    5722:	64 e0       	ldi	r22, 0x04	; 4
    5724:	49 2f       	mov	r20, r25
    5726:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
	#if LCD_MODE == EIGHT_BIT
		DIO_enuSetPinValue(D3_PORT, D3_PIN, ((Copy_u8Data >> 3) & 1));
    572a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    572c:	86 95       	lsr	r24
    572e:	86 95       	lsr	r24
    5730:	86 95       	lsr	r24
    5732:	98 2f       	mov	r25, r24
    5734:	91 70       	andi	r25, 0x01	; 1
    5736:	82 e0       	ldi	r24, 0x02	; 2
    5738:	63 e0       	ldi	r22, 0x03	; 3
    573a:	49 2f       	mov	r20, r25
    573c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D2_PORT, D2_PIN, ((Copy_u8Data >> 2) & 1));
    5740:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5742:	86 95       	lsr	r24
    5744:	86 95       	lsr	r24
    5746:	98 2f       	mov	r25, r24
    5748:	91 70       	andi	r25, 0x01	; 1
    574a:	82 e0       	ldi	r24, 0x02	; 2
    574c:	62 e0       	ldi	r22, 0x02	; 2
    574e:	49 2f       	mov	r20, r25
    5750:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D1_PORT, D1_PIN, ((Copy_u8Data >> 1) & 1));
    5754:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5756:	86 95       	lsr	r24
    5758:	98 2f       	mov	r25, r24
    575a:	91 70       	andi	r25, 0x01	; 1
    575c:	82 e0       	ldi	r24, 0x02	; 2
    575e:	61 e0       	ldi	r22, 0x01	; 1
    5760:	49 2f       	mov	r20, r25
    5762:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D0_PORT, D0_PIN, ((Copy_u8Data >> 0) & 1));
    5766:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5768:	98 2f       	mov	r25, r24
    576a:	91 70       	andi	r25, 0x01	; 1
    576c:	82 e0       	ldi	r24, 0x02	; 2
    576e:	60 e0       	ldi	r22, 0x00	; 0
    5770:	49 2f       	mov	r20, r25
    5772:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT, D6_PIN, ((Copy_u8Data >> 2) & 1));
		DIO_enuSetPinValue(D5_PORT, D5_PIN, ((Copy_u8Data >> 1) & 1));
		DIO_enuSetPinValue(D4_PORT, D4_PIN, ((Copy_u8Data >> 0) & 1));
	#endif
	//Enable Latch "EN is High" because latch happen in rising edge
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8HIGH);
    5776:	80 e0       	ldi	r24, 0x00	; 0
    5778:	62 e0       	ldi	r22, 0x02	; 2
    577a:	41 e0       	ldi	r20, 0x01	; 1
    577c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    5780:	80 e0       	ldi	r24, 0x00	; 0
    5782:	90 e0       	ldi	r25, 0x00	; 0
    5784:	a0 e2       	ldi	r26, 0x20	; 32
    5786:	b1 e4       	ldi	r27, 0x41	; 65
    5788:	89 8f       	std	Y+25, r24	; 0x19
    578a:	9a 8f       	std	Y+26, r25	; 0x1a
    578c:	ab 8f       	std	Y+27, r26	; 0x1b
    578e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5790:	69 8d       	ldd	r22, Y+25	; 0x19
    5792:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5794:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5796:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5798:	20 e0       	ldi	r18, 0x00	; 0
    579a:	30 e0       	ldi	r19, 0x00	; 0
    579c:	4a e7       	ldi	r20, 0x7A	; 122
    579e:	53 e4       	ldi	r21, 0x43	; 67
    57a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57a4:	dc 01       	movw	r26, r24
    57a6:	cb 01       	movw	r24, r22
    57a8:	8d 8b       	std	Y+21, r24	; 0x15
    57aa:	9e 8b       	std	Y+22, r25	; 0x16
    57ac:	af 8b       	std	Y+23, r26	; 0x17
    57ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    57b0:	6d 89       	ldd	r22, Y+21	; 0x15
    57b2:	7e 89       	ldd	r23, Y+22	; 0x16
    57b4:	8f 89       	ldd	r24, Y+23	; 0x17
    57b6:	98 8d       	ldd	r25, Y+24	; 0x18
    57b8:	20 e0       	ldi	r18, 0x00	; 0
    57ba:	30 e0       	ldi	r19, 0x00	; 0
    57bc:	40 e8       	ldi	r20, 0x80	; 128
    57be:	5f e3       	ldi	r21, 0x3F	; 63
    57c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    57c4:	88 23       	and	r24, r24
    57c6:	2c f4       	brge	.+10     	; 0x57d2 <LCD_voidLatch+0x11e>
		__ticks = 1;
    57c8:	81 e0       	ldi	r24, 0x01	; 1
    57ca:	90 e0       	ldi	r25, 0x00	; 0
    57cc:	9c 8b       	std	Y+20, r25	; 0x14
    57ce:	8b 8b       	std	Y+19, r24	; 0x13
    57d0:	3f c0       	rjmp	.+126    	; 0x5850 <LCD_voidLatch+0x19c>
	else if (__tmp > 65535)
    57d2:	6d 89       	ldd	r22, Y+21	; 0x15
    57d4:	7e 89       	ldd	r23, Y+22	; 0x16
    57d6:	8f 89       	ldd	r24, Y+23	; 0x17
    57d8:	98 8d       	ldd	r25, Y+24	; 0x18
    57da:	20 e0       	ldi	r18, 0x00	; 0
    57dc:	3f ef       	ldi	r19, 0xFF	; 255
    57de:	4f e7       	ldi	r20, 0x7F	; 127
    57e0:	57 e4       	ldi	r21, 0x47	; 71
    57e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    57e6:	18 16       	cp	r1, r24
    57e8:	4c f5       	brge	.+82     	; 0x583c <LCD_voidLatch+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57ea:	69 8d       	ldd	r22, Y+25	; 0x19
    57ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    57ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    57f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    57f2:	20 e0       	ldi	r18, 0x00	; 0
    57f4:	30 e0       	ldi	r19, 0x00	; 0
    57f6:	40 e2       	ldi	r20, 0x20	; 32
    57f8:	51 e4       	ldi	r21, 0x41	; 65
    57fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57fe:	dc 01       	movw	r26, r24
    5800:	cb 01       	movw	r24, r22
    5802:	bc 01       	movw	r22, r24
    5804:	cd 01       	movw	r24, r26
    5806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    580a:	dc 01       	movw	r26, r24
    580c:	cb 01       	movw	r24, r22
    580e:	9c 8b       	std	Y+20, r25	; 0x14
    5810:	8b 8b       	std	Y+19, r24	; 0x13
    5812:	0f c0       	rjmp	.+30     	; 0x5832 <LCD_voidLatch+0x17e>
    5814:	89 e1       	ldi	r24, 0x19	; 25
    5816:	90 e0       	ldi	r25, 0x00	; 0
    5818:	9a 8b       	std	Y+18, r25	; 0x12
    581a:	89 8b       	std	Y+17, r24	; 0x11
    581c:	89 89       	ldd	r24, Y+17	; 0x11
    581e:	9a 89       	ldd	r25, Y+18	; 0x12
    5820:	01 97       	sbiw	r24, 0x01	; 1
    5822:	f1 f7       	brne	.-4      	; 0x5820 <LCD_voidLatch+0x16c>
    5824:	9a 8b       	std	Y+18, r25	; 0x12
    5826:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5828:	8b 89       	ldd	r24, Y+19	; 0x13
    582a:	9c 89       	ldd	r25, Y+20	; 0x14
    582c:	01 97       	sbiw	r24, 0x01	; 1
    582e:	9c 8b       	std	Y+20, r25	; 0x14
    5830:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5832:	8b 89       	ldd	r24, Y+19	; 0x13
    5834:	9c 89       	ldd	r25, Y+20	; 0x14
    5836:	00 97       	sbiw	r24, 0x00	; 0
    5838:	69 f7       	brne	.-38     	; 0x5814 <LCD_voidLatch+0x160>
    583a:	14 c0       	rjmp	.+40     	; 0x5864 <LCD_voidLatch+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    583c:	6d 89       	ldd	r22, Y+21	; 0x15
    583e:	7e 89       	ldd	r23, Y+22	; 0x16
    5840:	8f 89       	ldd	r24, Y+23	; 0x17
    5842:	98 8d       	ldd	r25, Y+24	; 0x18
    5844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5848:	dc 01       	movw	r26, r24
    584a:	cb 01       	movw	r24, r22
    584c:	9c 8b       	std	Y+20, r25	; 0x14
    584e:	8b 8b       	std	Y+19, r24	; 0x13
    5850:	8b 89       	ldd	r24, Y+19	; 0x13
    5852:	9c 89       	ldd	r25, Y+20	; 0x14
    5854:	98 8b       	std	Y+16, r25	; 0x10
    5856:	8f 87       	std	Y+15, r24	; 0x0f
    5858:	8f 85       	ldd	r24, Y+15	; 0x0f
    585a:	98 89       	ldd	r25, Y+16	; 0x10
    585c:	01 97       	sbiw	r24, 0x01	; 1
    585e:	f1 f7       	brne	.-4      	; 0x585c <LCD_voidLatch+0x1a8>
    5860:	98 8b       	std	Y+16, r25	; 0x10
    5862:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10); // Garbage Number
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    5864:	80 e0       	ldi	r24, 0x00	; 0
    5866:	62 e0       	ldi	r22, 0x02	; 2
    5868:	40 e0       	ldi	r20, 0x00	; 0
    586a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    586e:	80 e0       	ldi	r24, 0x00	; 0
    5870:	90 e0       	ldi	r25, 0x00	; 0
    5872:	a0 e2       	ldi	r26, 0x20	; 32
    5874:	b1 e4       	ldi	r27, 0x41	; 65
    5876:	8b 87       	std	Y+11, r24	; 0x0b
    5878:	9c 87       	std	Y+12, r25	; 0x0c
    587a:	ad 87       	std	Y+13, r26	; 0x0d
    587c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    587e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5880:	7c 85       	ldd	r23, Y+12	; 0x0c
    5882:	8d 85       	ldd	r24, Y+13	; 0x0d
    5884:	9e 85       	ldd	r25, Y+14	; 0x0e
    5886:	20 e0       	ldi	r18, 0x00	; 0
    5888:	30 e0       	ldi	r19, 0x00	; 0
    588a:	4a e7       	ldi	r20, 0x7A	; 122
    588c:	53 e4       	ldi	r21, 0x43	; 67
    588e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5892:	dc 01       	movw	r26, r24
    5894:	cb 01       	movw	r24, r22
    5896:	8f 83       	std	Y+7, r24	; 0x07
    5898:	98 87       	std	Y+8, r25	; 0x08
    589a:	a9 87       	std	Y+9, r26	; 0x09
    589c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    589e:	6f 81       	ldd	r22, Y+7	; 0x07
    58a0:	78 85       	ldd	r23, Y+8	; 0x08
    58a2:	89 85       	ldd	r24, Y+9	; 0x09
    58a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    58a6:	20 e0       	ldi	r18, 0x00	; 0
    58a8:	30 e0       	ldi	r19, 0x00	; 0
    58aa:	40 e8       	ldi	r20, 0x80	; 128
    58ac:	5f e3       	ldi	r21, 0x3F	; 63
    58ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    58b2:	88 23       	and	r24, r24
    58b4:	2c f4       	brge	.+10     	; 0x58c0 <LCD_voidLatch+0x20c>
		__ticks = 1;
    58b6:	81 e0       	ldi	r24, 0x01	; 1
    58b8:	90 e0       	ldi	r25, 0x00	; 0
    58ba:	9e 83       	std	Y+6, r25	; 0x06
    58bc:	8d 83       	std	Y+5, r24	; 0x05
    58be:	3f c0       	rjmp	.+126    	; 0x593e <LCD_voidLatch+0x28a>
	else if (__tmp > 65535)
    58c0:	6f 81       	ldd	r22, Y+7	; 0x07
    58c2:	78 85       	ldd	r23, Y+8	; 0x08
    58c4:	89 85       	ldd	r24, Y+9	; 0x09
    58c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    58c8:	20 e0       	ldi	r18, 0x00	; 0
    58ca:	3f ef       	ldi	r19, 0xFF	; 255
    58cc:	4f e7       	ldi	r20, 0x7F	; 127
    58ce:	57 e4       	ldi	r21, 0x47	; 71
    58d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    58d4:	18 16       	cp	r1, r24
    58d6:	4c f5       	brge	.+82     	; 0x592a <LCD_voidLatch+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    58da:	7c 85       	ldd	r23, Y+12	; 0x0c
    58dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    58de:	9e 85       	ldd	r25, Y+14	; 0x0e
    58e0:	20 e0       	ldi	r18, 0x00	; 0
    58e2:	30 e0       	ldi	r19, 0x00	; 0
    58e4:	40 e2       	ldi	r20, 0x20	; 32
    58e6:	51 e4       	ldi	r21, 0x41	; 65
    58e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58ec:	dc 01       	movw	r26, r24
    58ee:	cb 01       	movw	r24, r22
    58f0:	bc 01       	movw	r22, r24
    58f2:	cd 01       	movw	r24, r26
    58f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58f8:	dc 01       	movw	r26, r24
    58fa:	cb 01       	movw	r24, r22
    58fc:	9e 83       	std	Y+6, r25	; 0x06
    58fe:	8d 83       	std	Y+5, r24	; 0x05
    5900:	0f c0       	rjmp	.+30     	; 0x5920 <LCD_voidLatch+0x26c>
    5902:	89 e1       	ldi	r24, 0x19	; 25
    5904:	90 e0       	ldi	r25, 0x00	; 0
    5906:	9c 83       	std	Y+4, r25	; 0x04
    5908:	8b 83       	std	Y+3, r24	; 0x03
    590a:	8b 81       	ldd	r24, Y+3	; 0x03
    590c:	9c 81       	ldd	r25, Y+4	; 0x04
    590e:	01 97       	sbiw	r24, 0x01	; 1
    5910:	f1 f7       	brne	.-4      	; 0x590e <LCD_voidLatch+0x25a>
    5912:	9c 83       	std	Y+4, r25	; 0x04
    5914:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5916:	8d 81       	ldd	r24, Y+5	; 0x05
    5918:	9e 81       	ldd	r25, Y+6	; 0x06
    591a:	01 97       	sbiw	r24, 0x01	; 1
    591c:	9e 83       	std	Y+6, r25	; 0x06
    591e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5920:	8d 81       	ldd	r24, Y+5	; 0x05
    5922:	9e 81       	ldd	r25, Y+6	; 0x06
    5924:	00 97       	sbiw	r24, 0x00	; 0
    5926:	69 f7       	brne	.-38     	; 0x5902 <LCD_voidLatch+0x24e>
    5928:	14 c0       	rjmp	.+40     	; 0x5952 <LCD_voidLatch+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    592a:	6f 81       	ldd	r22, Y+7	; 0x07
    592c:	78 85       	ldd	r23, Y+8	; 0x08
    592e:	89 85       	ldd	r24, Y+9	; 0x09
    5930:	9a 85       	ldd	r25, Y+10	; 0x0a
    5932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5936:	dc 01       	movw	r26, r24
    5938:	cb 01       	movw	r24, r22
    593a:	9e 83       	std	Y+6, r25	; 0x06
    593c:	8d 83       	std	Y+5, r24	; 0x05
    593e:	8d 81       	ldd	r24, Y+5	; 0x05
    5940:	9e 81       	ldd	r25, Y+6	; 0x06
    5942:	9a 83       	std	Y+2, r25	; 0x02
    5944:	89 83       	std	Y+1, r24	; 0x01
    5946:	89 81       	ldd	r24, Y+1	; 0x01
    5948:	9a 81       	ldd	r25, Y+2	; 0x02
    594a:	01 97       	sbiw	r24, 0x01	; 1
    594c:	f1 f7       	brne	.-4      	; 0x594a <LCD_voidLatch+0x296>
    594e:	9a 83       	std	Y+2, r25	; 0x02
    5950:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(10); //For speed difference between MC and LCD.

}
    5952:	6d 96       	adiw	r28, 0x1d	; 29
    5954:	0f b6       	in	r0, 0x3f	; 63
    5956:	f8 94       	cli
    5958:	de bf       	out	0x3e, r29	; 62
    595a:	0f be       	out	0x3f, r0	; 63
    595c:	cd bf       	out	0x3d, r28	; 61
    595e:	cf 91       	pop	r28
    5960:	df 91       	pop	r29
    5962:	08 95       	ret

00005964 <LCD_invoidSendCommand>:
static inline void LCD_invoidSendCommand(u8 Copy_u8Command)
{
    5964:	df 93       	push	r29
    5966:	cf 93       	push	r28
    5968:	cd b7       	in	r28, 0x3d	; 61
    596a:	de b7       	in	r29, 0x3e	; 62
    596c:	6d 97       	sbiw	r28, 0x1d	; 29
    596e:	0f b6       	in	r0, 0x3f	; 63
    5970:	f8 94       	cli
    5972:	de bf       	out	0x3e, r29	; 62
    5974:	0f be       	out	0x3f, r0	; 63
    5976:	cd bf       	out	0x3d, r28	; 61
    5978:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Set RS as Command, EN is Low */
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    597a:	80 e0       	ldi	r24, 0x00	; 0
    597c:	60 e0       	ldi	r22, 0x00	; 0
    597e:	40 e0       	ldi	r20, 0x00	; 0
    5980:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    5984:	80 e0       	ldi	r24, 0x00	; 0
    5986:	62 e0       	ldi	r22, 0x02	; 2
    5988:	40 e0       	ldi	r20, 0x00	; 0
    598a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>

	if(Copy_u8Command == 0x28)
    598e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5990:	88 32       	cpi	r24, 0x28	; 40
    5992:	09 f0       	breq	.+2      	; 0x5996 <LCD_invoidSendCommand+0x32>
    5994:	19 c1       	rjmp	.+562    	; 0x5bc8 <LCD_invoidSendCommand+0x264>
	{
		DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command >> 7) & 1));
    5996:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5998:	98 2f       	mov	r25, r24
    599a:	99 1f       	adc	r25, r25
    599c:	99 27       	eor	r25, r25
    599e:	99 1f       	adc	r25, r25
    59a0:	81 e0       	ldi	r24, 0x01	; 1
    59a2:	67 e0       	ldi	r22, 0x07	; 7
    59a4:	49 2f       	mov	r20, r25
    59a6:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command >> 6) & 1));
    59aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    59ac:	82 95       	swap	r24
    59ae:	86 95       	lsr	r24
    59b0:	86 95       	lsr	r24
    59b2:	83 70       	andi	r24, 0x03	; 3
    59b4:	98 2f       	mov	r25, r24
    59b6:	91 70       	andi	r25, 0x01	; 1
    59b8:	81 e0       	ldi	r24, 0x01	; 1
    59ba:	66 e0       	ldi	r22, 0x06	; 6
    59bc:	49 2f       	mov	r20, r25
    59be:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command >> 5) & 1));
    59c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    59c4:	82 95       	swap	r24
    59c6:	86 95       	lsr	r24
    59c8:	87 70       	andi	r24, 0x07	; 7
    59ca:	98 2f       	mov	r25, r24
    59cc:	91 70       	andi	r25, 0x01	; 1
    59ce:	81 e0       	ldi	r24, 0x01	; 1
    59d0:	65 e0       	ldi	r22, 0x05	; 5
    59d2:	49 2f       	mov	r20, r25
    59d4:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command >> 4) & 1));
    59d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    59da:	82 95       	swap	r24
    59dc:	8f 70       	andi	r24, 0x0F	; 15
    59de:	98 2f       	mov	r25, r24
    59e0:	91 70       	andi	r25, 0x01	; 1
    59e2:	81 e0       	ldi	r24, 0x01	; 1
    59e4:	64 e0       	ldi	r22, 0x04	; 4
    59e6:	49 2f       	mov	r20, r25
    59e8:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>

		// Enable Latch "EN is High" because latch happen in rising edge
		DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8HIGH);
    59ec:	80 e0       	ldi	r24, 0x00	; 0
    59ee:	62 e0       	ldi	r22, 0x02	; 2
    59f0:	41 e0       	ldi	r20, 0x01	; 1
    59f2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    59f6:	80 e0       	ldi	r24, 0x00	; 0
    59f8:	90 e0       	ldi	r25, 0x00	; 0
    59fa:	a0 e2       	ldi	r26, 0x20	; 32
    59fc:	b1 e4       	ldi	r27, 0x41	; 65
    59fe:	89 8f       	std	Y+25, r24	; 0x19
    5a00:	9a 8f       	std	Y+26, r25	; 0x1a
    5a02:	ab 8f       	std	Y+27, r26	; 0x1b
    5a04:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a06:	69 8d       	ldd	r22, Y+25	; 0x19
    5a08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5a0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a0e:	20 e0       	ldi	r18, 0x00	; 0
    5a10:	30 e0       	ldi	r19, 0x00	; 0
    5a12:	4a e7       	ldi	r20, 0x7A	; 122
    5a14:	53 e4       	ldi	r21, 0x43	; 67
    5a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a1a:	dc 01       	movw	r26, r24
    5a1c:	cb 01       	movw	r24, r22
    5a1e:	8d 8b       	std	Y+21, r24	; 0x15
    5a20:	9e 8b       	std	Y+22, r25	; 0x16
    5a22:	af 8b       	std	Y+23, r26	; 0x17
    5a24:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5a26:	6d 89       	ldd	r22, Y+21	; 0x15
    5a28:	7e 89       	ldd	r23, Y+22	; 0x16
    5a2a:	8f 89       	ldd	r24, Y+23	; 0x17
    5a2c:	98 8d       	ldd	r25, Y+24	; 0x18
    5a2e:	20 e0       	ldi	r18, 0x00	; 0
    5a30:	30 e0       	ldi	r19, 0x00	; 0
    5a32:	40 e8       	ldi	r20, 0x80	; 128
    5a34:	5f e3       	ldi	r21, 0x3F	; 63
    5a36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5a3a:	88 23       	and	r24, r24
    5a3c:	2c f4       	brge	.+10     	; 0x5a48 <LCD_invoidSendCommand+0xe4>
		__ticks = 1;
    5a3e:	81 e0       	ldi	r24, 0x01	; 1
    5a40:	90 e0       	ldi	r25, 0x00	; 0
    5a42:	9c 8b       	std	Y+20, r25	; 0x14
    5a44:	8b 8b       	std	Y+19, r24	; 0x13
    5a46:	3f c0       	rjmp	.+126    	; 0x5ac6 <LCD_invoidSendCommand+0x162>
	else if (__tmp > 65535)
    5a48:	6d 89       	ldd	r22, Y+21	; 0x15
    5a4a:	7e 89       	ldd	r23, Y+22	; 0x16
    5a4c:	8f 89       	ldd	r24, Y+23	; 0x17
    5a4e:	98 8d       	ldd	r25, Y+24	; 0x18
    5a50:	20 e0       	ldi	r18, 0x00	; 0
    5a52:	3f ef       	ldi	r19, 0xFF	; 255
    5a54:	4f e7       	ldi	r20, 0x7F	; 127
    5a56:	57 e4       	ldi	r21, 0x47	; 71
    5a58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5a5c:	18 16       	cp	r1, r24
    5a5e:	4c f5       	brge	.+82     	; 0x5ab2 <LCD_invoidSendCommand+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a60:	69 8d       	ldd	r22, Y+25	; 0x19
    5a62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5a64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a68:	20 e0       	ldi	r18, 0x00	; 0
    5a6a:	30 e0       	ldi	r19, 0x00	; 0
    5a6c:	40 e2       	ldi	r20, 0x20	; 32
    5a6e:	51 e4       	ldi	r21, 0x41	; 65
    5a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a74:	dc 01       	movw	r26, r24
    5a76:	cb 01       	movw	r24, r22
    5a78:	bc 01       	movw	r22, r24
    5a7a:	cd 01       	movw	r24, r26
    5a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a80:	dc 01       	movw	r26, r24
    5a82:	cb 01       	movw	r24, r22
    5a84:	9c 8b       	std	Y+20, r25	; 0x14
    5a86:	8b 8b       	std	Y+19, r24	; 0x13
    5a88:	0f c0       	rjmp	.+30     	; 0x5aa8 <LCD_invoidSendCommand+0x144>
    5a8a:	89 e1       	ldi	r24, 0x19	; 25
    5a8c:	90 e0       	ldi	r25, 0x00	; 0
    5a8e:	9a 8b       	std	Y+18, r25	; 0x12
    5a90:	89 8b       	std	Y+17, r24	; 0x11
    5a92:	89 89       	ldd	r24, Y+17	; 0x11
    5a94:	9a 89       	ldd	r25, Y+18	; 0x12
    5a96:	01 97       	sbiw	r24, 0x01	; 1
    5a98:	f1 f7       	brne	.-4      	; 0x5a96 <LCD_invoidSendCommand+0x132>
    5a9a:	9a 8b       	std	Y+18, r25	; 0x12
    5a9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a9e:	8b 89       	ldd	r24, Y+19	; 0x13
    5aa0:	9c 89       	ldd	r25, Y+20	; 0x14
    5aa2:	01 97       	sbiw	r24, 0x01	; 1
    5aa4:	9c 8b       	std	Y+20, r25	; 0x14
    5aa6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5aa8:	8b 89       	ldd	r24, Y+19	; 0x13
    5aaa:	9c 89       	ldd	r25, Y+20	; 0x14
    5aac:	00 97       	sbiw	r24, 0x00	; 0
    5aae:	69 f7       	brne	.-38     	; 0x5a8a <LCD_invoidSendCommand+0x126>
    5ab0:	14 c0       	rjmp	.+40     	; 0x5ada <LCD_invoidSendCommand+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ab2:	6d 89       	ldd	r22, Y+21	; 0x15
    5ab4:	7e 89       	ldd	r23, Y+22	; 0x16
    5ab6:	8f 89       	ldd	r24, Y+23	; 0x17
    5ab8:	98 8d       	ldd	r25, Y+24	; 0x18
    5aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5abe:	dc 01       	movw	r26, r24
    5ac0:	cb 01       	movw	r24, r22
    5ac2:	9c 8b       	std	Y+20, r25	; 0x14
    5ac4:	8b 8b       	std	Y+19, r24	; 0x13
    5ac6:	8b 89       	ldd	r24, Y+19	; 0x13
    5ac8:	9c 89       	ldd	r25, Y+20	; 0x14
    5aca:	98 8b       	std	Y+16, r25	; 0x10
    5acc:	8f 87       	std	Y+15, r24	; 0x0f
    5ace:	8f 85       	ldd	r24, Y+15	; 0x0f
    5ad0:	98 89       	ldd	r25, Y+16	; 0x10
    5ad2:	01 97       	sbiw	r24, 0x01	; 1
    5ad4:	f1 f7       	brne	.-4      	; 0x5ad2 <LCD_invoidSendCommand+0x16e>
    5ad6:	98 8b       	std	Y+16, r25	; 0x10
    5ad8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10); // Garbage Number
		DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    5ada:	80 e0       	ldi	r24, 0x00	; 0
    5adc:	62 e0       	ldi	r22, 0x02	; 2
    5ade:	40 e0       	ldi	r20, 0x00	; 0
    5ae0:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    5ae4:	80 e0       	ldi	r24, 0x00	; 0
    5ae6:	90 e0       	ldi	r25, 0x00	; 0
    5ae8:	a8 e4       	ldi	r26, 0x48	; 72
    5aea:	b2 e4       	ldi	r27, 0x42	; 66
    5aec:	8b 87       	std	Y+11, r24	; 0x0b
    5aee:	9c 87       	std	Y+12, r25	; 0x0c
    5af0:	ad 87       	std	Y+13, r26	; 0x0d
    5af2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5af4:	6b 85       	ldd	r22, Y+11	; 0x0b
    5af6:	7c 85       	ldd	r23, Y+12	; 0x0c
    5af8:	8d 85       	ldd	r24, Y+13	; 0x0d
    5afa:	9e 85       	ldd	r25, Y+14	; 0x0e
    5afc:	20 e0       	ldi	r18, 0x00	; 0
    5afe:	30 e0       	ldi	r19, 0x00	; 0
    5b00:	4a e7       	ldi	r20, 0x7A	; 122
    5b02:	53 e4       	ldi	r21, 0x43	; 67
    5b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b08:	dc 01       	movw	r26, r24
    5b0a:	cb 01       	movw	r24, r22
    5b0c:	8f 83       	std	Y+7, r24	; 0x07
    5b0e:	98 87       	std	Y+8, r25	; 0x08
    5b10:	a9 87       	std	Y+9, r26	; 0x09
    5b12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5b14:	6f 81       	ldd	r22, Y+7	; 0x07
    5b16:	78 85       	ldd	r23, Y+8	; 0x08
    5b18:	89 85       	ldd	r24, Y+9	; 0x09
    5b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b1c:	20 e0       	ldi	r18, 0x00	; 0
    5b1e:	30 e0       	ldi	r19, 0x00	; 0
    5b20:	40 e8       	ldi	r20, 0x80	; 128
    5b22:	5f e3       	ldi	r21, 0x3F	; 63
    5b24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b28:	88 23       	and	r24, r24
    5b2a:	2c f4       	brge	.+10     	; 0x5b36 <LCD_invoidSendCommand+0x1d2>
		__ticks = 1;
    5b2c:	81 e0       	ldi	r24, 0x01	; 1
    5b2e:	90 e0       	ldi	r25, 0x00	; 0
    5b30:	9e 83       	std	Y+6, r25	; 0x06
    5b32:	8d 83       	std	Y+5, r24	; 0x05
    5b34:	3f c0       	rjmp	.+126    	; 0x5bb4 <LCD_invoidSendCommand+0x250>
	else if (__tmp > 65535)
    5b36:	6f 81       	ldd	r22, Y+7	; 0x07
    5b38:	78 85       	ldd	r23, Y+8	; 0x08
    5b3a:	89 85       	ldd	r24, Y+9	; 0x09
    5b3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b3e:	20 e0       	ldi	r18, 0x00	; 0
    5b40:	3f ef       	ldi	r19, 0xFF	; 255
    5b42:	4f e7       	ldi	r20, 0x7F	; 127
    5b44:	57 e4       	ldi	r21, 0x47	; 71
    5b46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b4a:	18 16       	cp	r1, r24
    5b4c:	4c f5       	brge	.+82     	; 0x5ba0 <LCD_invoidSendCommand+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b50:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b52:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b54:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b56:	20 e0       	ldi	r18, 0x00	; 0
    5b58:	30 e0       	ldi	r19, 0x00	; 0
    5b5a:	40 e2       	ldi	r20, 0x20	; 32
    5b5c:	51 e4       	ldi	r21, 0x41	; 65
    5b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b62:	dc 01       	movw	r26, r24
    5b64:	cb 01       	movw	r24, r22
    5b66:	bc 01       	movw	r22, r24
    5b68:	cd 01       	movw	r24, r26
    5b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b6e:	dc 01       	movw	r26, r24
    5b70:	cb 01       	movw	r24, r22
    5b72:	9e 83       	std	Y+6, r25	; 0x06
    5b74:	8d 83       	std	Y+5, r24	; 0x05
    5b76:	0f c0       	rjmp	.+30     	; 0x5b96 <LCD_invoidSendCommand+0x232>
    5b78:	89 e1       	ldi	r24, 0x19	; 25
    5b7a:	90 e0       	ldi	r25, 0x00	; 0
    5b7c:	9c 83       	std	Y+4, r25	; 0x04
    5b7e:	8b 83       	std	Y+3, r24	; 0x03
    5b80:	8b 81       	ldd	r24, Y+3	; 0x03
    5b82:	9c 81       	ldd	r25, Y+4	; 0x04
    5b84:	01 97       	sbiw	r24, 0x01	; 1
    5b86:	f1 f7       	brne	.-4      	; 0x5b84 <LCD_invoidSendCommand+0x220>
    5b88:	9c 83       	std	Y+4, r25	; 0x04
    5b8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    5b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    5b90:	01 97       	sbiw	r24, 0x01	; 1
    5b92:	9e 83       	std	Y+6, r25	; 0x06
    5b94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b96:	8d 81       	ldd	r24, Y+5	; 0x05
    5b98:	9e 81       	ldd	r25, Y+6	; 0x06
    5b9a:	00 97       	sbiw	r24, 0x00	; 0
    5b9c:	69 f7       	brne	.-38     	; 0x5b78 <LCD_invoidSendCommand+0x214>
    5b9e:	14 c0       	rjmp	.+40     	; 0x5bc8 <LCD_invoidSendCommand+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ba0:	6f 81       	ldd	r22, Y+7	; 0x07
    5ba2:	78 85       	ldd	r23, Y+8	; 0x08
    5ba4:	89 85       	ldd	r24, Y+9	; 0x09
    5ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bac:	dc 01       	movw	r26, r24
    5bae:	cb 01       	movw	r24, r22
    5bb0:	9e 83       	std	Y+6, r25	; 0x06
    5bb2:	8d 83       	std	Y+5, r24	; 0x05
    5bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    5bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    5bb8:	9a 83       	std	Y+2, r25	; 0x02
    5bba:	89 83       	std	Y+1, r24	; 0x01
    5bbc:	89 81       	ldd	r24, Y+1	; 0x01
    5bbe:	9a 81       	ldd	r25, Y+2	; 0x02
    5bc0:	01 97       	sbiw	r24, 0x01	; 1
    5bc2:	f1 f7       	brne	.-4      	; 0x5bc0 <LCD_invoidSendCommand+0x25c>
    5bc4:	9a 83       	std	Y+2, r25	; 0x02
    5bc6:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(50);
	}

	LCD_voidLatch(Copy_u8Command);
    5bc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5bca:	0e 94 5a 2b 	call	0x56b4	; 0x56b4 <LCD_voidLatch>

}
    5bce:	6d 96       	adiw	r28, 0x1d	; 29
    5bd0:	0f b6       	in	r0, 0x3f	; 63
    5bd2:	f8 94       	cli
    5bd4:	de bf       	out	0x3e, r29	; 62
    5bd6:	0f be       	out	0x3f, r0	; 63
    5bd8:	cd bf       	out	0x3d, r28	; 61
    5bda:	cf 91       	pop	r28
    5bdc:	df 91       	pop	r29
    5bde:	08 95       	ret

00005be0 <KPAD_enuInit>:

#include "Keypad_private.h"
#include "Keypad_config.h"

ES_t KPAD_enuInit(void)
{
    5be0:	df 93       	push	r29
    5be2:	cf 93       	push	r28
    5be4:	cd b7       	in	r28, 0x3d	; 61
    5be6:	de b7       	in	r29, 0x3e	; 62
    5be8:	27 97       	sbiw	r28, 0x07	; 7
    5bea:	0f b6       	in	r0, 0x3f	; 63
    5bec:	f8 94       	cli
    5bee:	de bf       	out	0x3e, r29	; 62
    5bf0:	0f be       	out	0x3f, r0	; 63
    5bf2:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    5bf4:	1e 82       	std	Y+6, r1	; 0x06

	u8 Local_u8Iterator = KPAD_ZERO;
    5bf6:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Check = KPAD_ZERO;
    5bf8:	19 82       	std	Y+1, r1	; 0x01
    5bfa:	1a 82       	std	Y+2, r1	; 0x02
    5bfc:	1b 82       	std	Y+3, r1	; 0x03
    5bfe:	1c 82       	std	Y+4, r1	; 0x04

	Local_u32Check |= (DIO_enuSetPinDirection(ROW1_PORT, ROW1_PIN, DIO_u8INPUT) << KPAD_SHIFTBIT_ZERO);
    5c00:	80 e0       	ldi	r24, 0x00	; 0
    5c02:	64 e0       	ldi	r22, 0x04	; 4
    5c04:	40 e0       	ldi	r20, 0x00	; 0
    5c06:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    5c0a:	28 2f       	mov	r18, r24
    5c0c:	30 e0       	ldi	r19, 0x00	; 0
    5c0e:	40 e0       	ldi	r20, 0x00	; 0
    5c10:	50 e0       	ldi	r21, 0x00	; 0
    5c12:	89 81       	ldd	r24, Y+1	; 0x01
    5c14:	9a 81       	ldd	r25, Y+2	; 0x02
    5c16:	ab 81       	ldd	r26, Y+3	; 0x03
    5c18:	bc 81       	ldd	r27, Y+4	; 0x04
    5c1a:	82 2b       	or	r24, r18
    5c1c:	93 2b       	or	r25, r19
    5c1e:	a4 2b       	or	r26, r20
    5c20:	b5 2b       	or	r27, r21
    5c22:	89 83       	std	Y+1, r24	; 0x01
    5c24:	9a 83       	std	Y+2, r25	; 0x02
    5c26:	ab 83       	std	Y+3, r26	; 0x03
    5c28:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (DIO_enuSetPinDirection(ROW2_PORT, ROW2_PIN, DIO_u8INPUT) << KPAD_SHIFTBIT_THREE);
    5c2a:	80 e0       	ldi	r24, 0x00	; 0
    5c2c:	65 e0       	ldi	r22, 0x05	; 5
    5c2e:	40 e0       	ldi	r20, 0x00	; 0
    5c30:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    5c34:	88 2f       	mov	r24, r24
    5c36:	90 e0       	ldi	r25, 0x00	; 0
    5c38:	88 0f       	add	r24, r24
    5c3a:	99 1f       	adc	r25, r25
    5c3c:	88 0f       	add	r24, r24
    5c3e:	99 1f       	adc	r25, r25
    5c40:	88 0f       	add	r24, r24
    5c42:	99 1f       	adc	r25, r25
    5c44:	9c 01       	movw	r18, r24
    5c46:	44 27       	eor	r20, r20
    5c48:	37 fd       	sbrc	r19, 7
    5c4a:	40 95       	com	r20
    5c4c:	54 2f       	mov	r21, r20
    5c4e:	89 81       	ldd	r24, Y+1	; 0x01
    5c50:	9a 81       	ldd	r25, Y+2	; 0x02
    5c52:	ab 81       	ldd	r26, Y+3	; 0x03
    5c54:	bc 81       	ldd	r27, Y+4	; 0x04
    5c56:	82 2b       	or	r24, r18
    5c58:	93 2b       	or	r25, r19
    5c5a:	a4 2b       	or	r26, r20
    5c5c:	b5 2b       	or	r27, r21
    5c5e:	89 83       	std	Y+1, r24	; 0x01
    5c60:	9a 83       	std	Y+2, r25	; 0x02
    5c62:	ab 83       	std	Y+3, r26	; 0x03
    5c64:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (DIO_enuSetPinDirection(ROW3_PORT, ROW3_PIN, DIO_u8INPUT) << KPAD_SHIFTBIT_SIX);
    5c66:	80 e0       	ldi	r24, 0x00	; 0
    5c68:	66 e0       	ldi	r22, 0x06	; 6
    5c6a:	40 e0       	ldi	r20, 0x00	; 0
    5c6c:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    5c70:	88 2f       	mov	r24, r24
    5c72:	90 e0       	ldi	r25, 0x00	; 0
    5c74:	00 24       	eor	r0, r0
    5c76:	96 95       	lsr	r25
    5c78:	87 95       	ror	r24
    5c7a:	07 94       	ror	r0
    5c7c:	96 95       	lsr	r25
    5c7e:	87 95       	ror	r24
    5c80:	07 94       	ror	r0
    5c82:	98 2f       	mov	r25, r24
    5c84:	80 2d       	mov	r24, r0
    5c86:	9c 01       	movw	r18, r24
    5c88:	44 27       	eor	r20, r20
    5c8a:	37 fd       	sbrc	r19, 7
    5c8c:	40 95       	com	r20
    5c8e:	54 2f       	mov	r21, r20
    5c90:	89 81       	ldd	r24, Y+1	; 0x01
    5c92:	9a 81       	ldd	r25, Y+2	; 0x02
    5c94:	ab 81       	ldd	r26, Y+3	; 0x03
    5c96:	bc 81       	ldd	r27, Y+4	; 0x04
    5c98:	82 2b       	or	r24, r18
    5c9a:	93 2b       	or	r25, r19
    5c9c:	a4 2b       	or	r26, r20
    5c9e:	b5 2b       	or	r27, r21
    5ca0:	89 83       	std	Y+1, r24	; 0x01
    5ca2:	9a 83       	std	Y+2, r25	; 0x02
    5ca4:	ab 83       	std	Y+3, r26	; 0x03
    5ca6:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (DIO_enuSetPinDirection(ROW4_PORT, ROW4_PIN, DIO_u8INPUT) << KPAD_SHIFTBIT_NINE);
    5ca8:	80 e0       	ldi	r24, 0x00	; 0
    5caa:	67 e0       	ldi	r22, 0x07	; 7
    5cac:	40 e0       	ldi	r20, 0x00	; 0
    5cae:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    5cb2:	88 2f       	mov	r24, r24
    5cb4:	90 e0       	ldi	r25, 0x00	; 0
    5cb6:	98 2f       	mov	r25, r24
    5cb8:	88 27       	eor	r24, r24
    5cba:	99 0f       	add	r25, r25
    5cbc:	9c 01       	movw	r18, r24
    5cbe:	44 27       	eor	r20, r20
    5cc0:	37 fd       	sbrc	r19, 7
    5cc2:	40 95       	com	r20
    5cc4:	54 2f       	mov	r21, r20
    5cc6:	89 81       	ldd	r24, Y+1	; 0x01
    5cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    5cca:	ab 81       	ldd	r26, Y+3	; 0x03
    5ccc:	bc 81       	ldd	r27, Y+4	; 0x04
    5cce:	82 2b       	or	r24, r18
    5cd0:	93 2b       	or	r25, r19
    5cd2:	a4 2b       	or	r26, r20
    5cd4:	b5 2b       	or	r27, r21
    5cd6:	89 83       	std	Y+1, r24	; 0x01
    5cd8:	9a 83       	std	Y+2, r25	; 0x02
    5cda:	ab 83       	std	Y+3, r26	; 0x03
    5cdc:	bc 83       	std	Y+4, r27	; 0x04

	Local_u32Check |= (DIO_enuSetPinValue(ROW1_PORT, ROW1_PIN, DIO_u8PULL_UP) << KPAD_SHIFTBIT_TWELVE);
    5cde:	80 e0       	ldi	r24, 0x00	; 0
    5ce0:	64 e0       	ldi	r22, 0x04	; 4
    5ce2:	41 e0       	ldi	r20, 0x01	; 1
    5ce4:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    5ce8:	88 2f       	mov	r24, r24
    5cea:	90 e0       	ldi	r25, 0x00	; 0
    5cec:	98 2f       	mov	r25, r24
    5cee:	88 27       	eor	r24, r24
    5cf0:	92 95       	swap	r25
    5cf2:	90 7f       	andi	r25, 0xF0	; 240
    5cf4:	9c 01       	movw	r18, r24
    5cf6:	44 27       	eor	r20, r20
    5cf8:	37 fd       	sbrc	r19, 7
    5cfa:	40 95       	com	r20
    5cfc:	54 2f       	mov	r21, r20
    5cfe:	89 81       	ldd	r24, Y+1	; 0x01
    5d00:	9a 81       	ldd	r25, Y+2	; 0x02
    5d02:	ab 81       	ldd	r26, Y+3	; 0x03
    5d04:	bc 81       	ldd	r27, Y+4	; 0x04
    5d06:	82 2b       	or	r24, r18
    5d08:	93 2b       	or	r25, r19
    5d0a:	a4 2b       	or	r26, r20
    5d0c:	b5 2b       	or	r27, r21
    5d0e:	89 83       	std	Y+1, r24	; 0x01
    5d10:	9a 83       	std	Y+2, r25	; 0x02
    5d12:	ab 83       	std	Y+3, r26	; 0x03
    5d14:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (((u32)DIO_enuSetPinValue(ROW2_PORT, ROW2_PIN, DIO_u8PULL_UP)) << KPAD_SHIFTBIT_FIFTEEN);
    5d16:	80 e0       	ldi	r24, 0x00	; 0
    5d18:	65 e0       	ldi	r22, 0x05	; 5
    5d1a:	41 e0       	ldi	r20, 0x01	; 1
    5d1c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    5d20:	88 2f       	mov	r24, r24
    5d22:	90 e0       	ldi	r25, 0x00	; 0
    5d24:	a0 e0       	ldi	r26, 0x00	; 0
    5d26:	b0 e0       	ldi	r27, 0x00	; 0
    5d28:	9c 01       	movw	r18, r24
    5d2a:	ad 01       	movw	r20, r26
    5d2c:	01 2e       	mov	r0, r17
    5d2e:	1f e0       	ldi	r17, 0x0F	; 15
    5d30:	22 0f       	add	r18, r18
    5d32:	33 1f       	adc	r19, r19
    5d34:	44 1f       	adc	r20, r20
    5d36:	55 1f       	adc	r21, r21
    5d38:	1a 95       	dec	r17
    5d3a:	d1 f7       	brne	.-12     	; 0x5d30 <KPAD_enuInit+0x150>
    5d3c:	10 2d       	mov	r17, r0
    5d3e:	89 81       	ldd	r24, Y+1	; 0x01
    5d40:	9a 81       	ldd	r25, Y+2	; 0x02
    5d42:	ab 81       	ldd	r26, Y+3	; 0x03
    5d44:	bc 81       	ldd	r27, Y+4	; 0x04
    5d46:	82 2b       	or	r24, r18
    5d48:	93 2b       	or	r25, r19
    5d4a:	a4 2b       	or	r26, r20
    5d4c:	b5 2b       	or	r27, r21
    5d4e:	89 83       	std	Y+1, r24	; 0x01
    5d50:	9a 83       	std	Y+2, r25	; 0x02
    5d52:	ab 83       	std	Y+3, r26	; 0x03
    5d54:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (((u32)DIO_enuSetPinValue(ROW3_PORT, ROW3_PIN, DIO_u8PULL_UP)) << KPAD_SHIFTBIT_EIGHTEEN);
    5d56:	80 e0       	ldi	r24, 0x00	; 0
    5d58:	66 e0       	ldi	r22, 0x06	; 6
    5d5a:	41 e0       	ldi	r20, 0x01	; 1
    5d5c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    5d60:	88 2f       	mov	r24, r24
    5d62:	90 e0       	ldi	r25, 0x00	; 0
    5d64:	a0 e0       	ldi	r26, 0x00	; 0
    5d66:	b0 e0       	ldi	r27, 0x00	; 0
    5d68:	9c 01       	movw	r18, r24
    5d6a:	ad 01       	movw	r20, r26
    5d6c:	01 2e       	mov	r0, r17
    5d6e:	12 e1       	ldi	r17, 0x12	; 18
    5d70:	22 0f       	add	r18, r18
    5d72:	33 1f       	adc	r19, r19
    5d74:	44 1f       	adc	r20, r20
    5d76:	55 1f       	adc	r21, r21
    5d78:	1a 95       	dec	r17
    5d7a:	d1 f7       	brne	.-12     	; 0x5d70 <KPAD_enuInit+0x190>
    5d7c:	10 2d       	mov	r17, r0
    5d7e:	89 81       	ldd	r24, Y+1	; 0x01
    5d80:	9a 81       	ldd	r25, Y+2	; 0x02
    5d82:	ab 81       	ldd	r26, Y+3	; 0x03
    5d84:	bc 81       	ldd	r27, Y+4	; 0x04
    5d86:	82 2b       	or	r24, r18
    5d88:	93 2b       	or	r25, r19
    5d8a:	a4 2b       	or	r26, r20
    5d8c:	b5 2b       	or	r27, r21
    5d8e:	89 83       	std	Y+1, r24	; 0x01
    5d90:	9a 83       	std	Y+2, r25	; 0x02
    5d92:	ab 83       	std	Y+3, r26	; 0x03
    5d94:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (((u32)DIO_enuSetPinValue(ROW4_PORT, ROW4_PIN, DIO_u8PULL_UP)) << KPAD_SHIFTBIT_TWENTYONE);
    5d96:	80 e0       	ldi	r24, 0x00	; 0
    5d98:	67 e0       	ldi	r22, 0x07	; 7
    5d9a:	41 e0       	ldi	r20, 0x01	; 1
    5d9c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    5da0:	88 2f       	mov	r24, r24
    5da2:	90 e0       	ldi	r25, 0x00	; 0
    5da4:	a0 e0       	ldi	r26, 0x00	; 0
    5da6:	b0 e0       	ldi	r27, 0x00	; 0
    5da8:	9c 01       	movw	r18, r24
    5daa:	ad 01       	movw	r20, r26
    5dac:	01 2e       	mov	r0, r17
    5dae:	15 e1       	ldi	r17, 0x15	; 21
    5db0:	22 0f       	add	r18, r18
    5db2:	33 1f       	adc	r19, r19
    5db4:	44 1f       	adc	r20, r20
    5db6:	55 1f       	adc	r21, r21
    5db8:	1a 95       	dec	r17
    5dba:	d1 f7       	brne	.-12     	; 0x5db0 <KPAD_enuInit+0x1d0>
    5dbc:	10 2d       	mov	r17, r0
    5dbe:	89 81       	ldd	r24, Y+1	; 0x01
    5dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    5dc2:	ab 81       	ldd	r26, Y+3	; 0x03
    5dc4:	bc 81       	ldd	r27, Y+4	; 0x04
    5dc6:	82 2b       	or	r24, r18
    5dc8:	93 2b       	or	r25, r19
    5dca:	a4 2b       	or	r26, r20
    5dcc:	b5 2b       	or	r27, r21
    5dce:	89 83       	std	Y+1, r24	; 0x01
    5dd0:	9a 83       	std	Y+2, r25	; 0x02
    5dd2:	ab 83       	std	Y+3, r26	; 0x03
    5dd4:	bc 83       	std	Y+4, r27	; 0x04

	for(Local_u8Iterator = KPAD_ZERO; Local_u8Iterator < KPAD_TWENTYFOUR; Local_u8Iterator += KPAD_THREE)
    5dd6:	1d 82       	std	Y+5, r1	; 0x05
    5dd8:	1e c0       	rjmp	.+60     	; 0x5e16 <KPAD_enuInit+0x236>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & KPAD_SEVEN) != ES_OK)
    5dda:	8d 81       	ldd	r24, Y+5	; 0x05
    5ddc:	28 2f       	mov	r18, r24
    5dde:	30 e0       	ldi	r19, 0x00	; 0
    5de0:	89 81       	ldd	r24, Y+1	; 0x01
    5de2:	9a 81       	ldd	r25, Y+2	; 0x02
    5de4:	ab 81       	ldd	r26, Y+3	; 0x03
    5de6:	bc 81       	ldd	r27, Y+4	; 0x04
    5de8:	02 2e       	mov	r0, r18
    5dea:	04 c0       	rjmp	.+8      	; 0x5df4 <KPAD_enuInit+0x214>
    5dec:	b6 95       	lsr	r27
    5dee:	a7 95       	ror	r26
    5df0:	97 95       	ror	r25
    5df2:	87 95       	ror	r24
    5df4:	0a 94       	dec	r0
    5df6:	d2 f7       	brpl	.-12     	; 0x5dec <KPAD_enuInit+0x20c>
    5df8:	87 70       	andi	r24, 0x07	; 7
    5dfa:	90 70       	andi	r25, 0x00	; 0
    5dfc:	a0 70       	andi	r26, 0x00	; 0
    5dfe:	b0 70       	andi	r27, 0x00	; 0
    5e00:	81 30       	cpi	r24, 0x01	; 1
    5e02:	91 05       	cpc	r25, r1
    5e04:	a1 05       	cpc	r26, r1
    5e06:	b1 05       	cpc	r27, r1
    5e08:	19 f0       	breq	.+6      	; 0x5e10 <KPAD_enuInit+0x230>
		{
			return Local_enuErrorState;
    5e0a:	8e 81       	ldd	r24, Y+6	; 0x06
    5e0c:	8f 83       	std	Y+7, r24	; 0x07
    5e0e:	1c c1       	rjmp	.+568    	; 0x6048 <KPAD_enuInit+0x468>
	Local_u32Check |= (DIO_enuSetPinValue(ROW1_PORT, ROW1_PIN, DIO_u8PULL_UP) << KPAD_SHIFTBIT_TWELVE);
	Local_u32Check |= (((u32)DIO_enuSetPinValue(ROW2_PORT, ROW2_PIN, DIO_u8PULL_UP)) << KPAD_SHIFTBIT_FIFTEEN);
	Local_u32Check |= (((u32)DIO_enuSetPinValue(ROW3_PORT, ROW3_PIN, DIO_u8PULL_UP)) << KPAD_SHIFTBIT_EIGHTEEN);
	Local_u32Check |= (((u32)DIO_enuSetPinValue(ROW4_PORT, ROW4_PIN, DIO_u8PULL_UP)) << KPAD_SHIFTBIT_TWENTYONE);

	for(Local_u8Iterator = KPAD_ZERO; Local_u8Iterator < KPAD_TWENTYFOUR; Local_u8Iterator += KPAD_THREE)
    5e10:	8d 81       	ldd	r24, Y+5	; 0x05
    5e12:	8d 5f       	subi	r24, 0xFD	; 253
    5e14:	8d 83       	std	Y+5, r24	; 0x05
    5e16:	8d 81       	ldd	r24, Y+5	; 0x05
    5e18:	88 31       	cpi	r24, 0x18	; 24
    5e1a:	f8 f2       	brcs	.-66     	; 0x5dda <KPAD_enuInit+0x1fa>
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & KPAD_SEVEN) != ES_OK)
		{
			return Local_enuErrorState;
		}
	}
	Local_u32Check = KPAD_ZERO;
    5e1c:	19 82       	std	Y+1, r1	; 0x01
    5e1e:	1a 82       	std	Y+2, r1	; 0x02
    5e20:	1b 82       	std	Y+3, r1	; 0x03
    5e22:	1c 82       	std	Y+4, r1	; 0x04

	Local_u32Check |= (DIO_enuSetPinDirection(COL1_PORT, COL1_PIN, DIO_u8OUTPUT) << KPAD_SHIFTBIT_ZERO);
    5e24:	81 e0       	ldi	r24, 0x01	; 1
    5e26:	60 e0       	ldi	r22, 0x00	; 0
    5e28:	41 e0       	ldi	r20, 0x01	; 1
    5e2a:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    5e2e:	28 2f       	mov	r18, r24
    5e30:	30 e0       	ldi	r19, 0x00	; 0
    5e32:	40 e0       	ldi	r20, 0x00	; 0
    5e34:	50 e0       	ldi	r21, 0x00	; 0
    5e36:	89 81       	ldd	r24, Y+1	; 0x01
    5e38:	9a 81       	ldd	r25, Y+2	; 0x02
    5e3a:	ab 81       	ldd	r26, Y+3	; 0x03
    5e3c:	bc 81       	ldd	r27, Y+4	; 0x04
    5e3e:	82 2b       	or	r24, r18
    5e40:	93 2b       	or	r25, r19
    5e42:	a4 2b       	or	r26, r20
    5e44:	b5 2b       	or	r27, r21
    5e46:	89 83       	std	Y+1, r24	; 0x01
    5e48:	9a 83       	std	Y+2, r25	; 0x02
    5e4a:	ab 83       	std	Y+3, r26	; 0x03
    5e4c:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (DIO_enuSetPinDirection(COL2_PORT, COL2_PIN, DIO_u8OUTPUT) << KPAD_SHIFTBIT_THREE);
    5e4e:	81 e0       	ldi	r24, 0x01	; 1
    5e50:	61 e0       	ldi	r22, 0x01	; 1
    5e52:	41 e0       	ldi	r20, 0x01	; 1
    5e54:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    5e58:	88 2f       	mov	r24, r24
    5e5a:	90 e0       	ldi	r25, 0x00	; 0
    5e5c:	88 0f       	add	r24, r24
    5e5e:	99 1f       	adc	r25, r25
    5e60:	88 0f       	add	r24, r24
    5e62:	99 1f       	adc	r25, r25
    5e64:	88 0f       	add	r24, r24
    5e66:	99 1f       	adc	r25, r25
    5e68:	9c 01       	movw	r18, r24
    5e6a:	44 27       	eor	r20, r20
    5e6c:	37 fd       	sbrc	r19, 7
    5e6e:	40 95       	com	r20
    5e70:	54 2f       	mov	r21, r20
    5e72:	89 81       	ldd	r24, Y+1	; 0x01
    5e74:	9a 81       	ldd	r25, Y+2	; 0x02
    5e76:	ab 81       	ldd	r26, Y+3	; 0x03
    5e78:	bc 81       	ldd	r27, Y+4	; 0x04
    5e7a:	82 2b       	or	r24, r18
    5e7c:	93 2b       	or	r25, r19
    5e7e:	a4 2b       	or	r26, r20
    5e80:	b5 2b       	or	r27, r21
    5e82:	89 83       	std	Y+1, r24	; 0x01
    5e84:	9a 83       	std	Y+2, r25	; 0x02
    5e86:	ab 83       	std	Y+3, r26	; 0x03
    5e88:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (DIO_enuSetPinDirection(COL3_PORT, COL3_PIN, DIO_u8OUTPUT) << KPAD_SHIFTBIT_SIX);
    5e8a:	81 e0       	ldi	r24, 0x01	; 1
    5e8c:	62 e0       	ldi	r22, 0x02	; 2
    5e8e:	41 e0       	ldi	r20, 0x01	; 1
    5e90:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    5e94:	88 2f       	mov	r24, r24
    5e96:	90 e0       	ldi	r25, 0x00	; 0
    5e98:	00 24       	eor	r0, r0
    5e9a:	96 95       	lsr	r25
    5e9c:	87 95       	ror	r24
    5e9e:	07 94       	ror	r0
    5ea0:	96 95       	lsr	r25
    5ea2:	87 95       	ror	r24
    5ea4:	07 94       	ror	r0
    5ea6:	98 2f       	mov	r25, r24
    5ea8:	80 2d       	mov	r24, r0
    5eaa:	9c 01       	movw	r18, r24
    5eac:	44 27       	eor	r20, r20
    5eae:	37 fd       	sbrc	r19, 7
    5eb0:	40 95       	com	r20
    5eb2:	54 2f       	mov	r21, r20
    5eb4:	89 81       	ldd	r24, Y+1	; 0x01
    5eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    5eb8:	ab 81       	ldd	r26, Y+3	; 0x03
    5eba:	bc 81       	ldd	r27, Y+4	; 0x04
    5ebc:	82 2b       	or	r24, r18
    5ebe:	93 2b       	or	r25, r19
    5ec0:	a4 2b       	or	r26, r20
    5ec2:	b5 2b       	or	r27, r21
    5ec4:	89 83       	std	Y+1, r24	; 0x01
    5ec6:	9a 83       	std	Y+2, r25	; 0x02
    5ec8:	ab 83       	std	Y+3, r26	; 0x03
    5eca:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (DIO_enuSetPinDirection(COL4_PORT, COL4_PIN, DIO_u8OUTPUT) << KPAD_SHIFTBIT_NINE);
    5ecc:	81 e0       	ldi	r24, 0x01	; 1
    5ece:	63 e0       	ldi	r22, 0x03	; 3
    5ed0:	41 e0       	ldi	r20, 0x01	; 1
    5ed2:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    5ed6:	88 2f       	mov	r24, r24
    5ed8:	90 e0       	ldi	r25, 0x00	; 0
    5eda:	98 2f       	mov	r25, r24
    5edc:	88 27       	eor	r24, r24
    5ede:	99 0f       	add	r25, r25
    5ee0:	9c 01       	movw	r18, r24
    5ee2:	44 27       	eor	r20, r20
    5ee4:	37 fd       	sbrc	r19, 7
    5ee6:	40 95       	com	r20
    5ee8:	54 2f       	mov	r21, r20
    5eea:	89 81       	ldd	r24, Y+1	; 0x01
    5eec:	9a 81       	ldd	r25, Y+2	; 0x02
    5eee:	ab 81       	ldd	r26, Y+3	; 0x03
    5ef0:	bc 81       	ldd	r27, Y+4	; 0x04
    5ef2:	82 2b       	or	r24, r18
    5ef4:	93 2b       	or	r25, r19
    5ef6:	a4 2b       	or	r26, r20
    5ef8:	b5 2b       	or	r27, r21
    5efa:	89 83       	std	Y+1, r24	; 0x01
    5efc:	9a 83       	std	Y+2, r25	; 0x02
    5efe:	ab 83       	std	Y+3, r26	; 0x03
    5f00:	bc 83       	std	Y+4, r27	; 0x04

	Local_u32Check |= (DIO_enuSetPinValue(COL1_PORT, COL1_PIN, DIO_u8HIGH) << KPAD_SHIFTBIT_TWELVE);
    5f02:	81 e0       	ldi	r24, 0x01	; 1
    5f04:	60 e0       	ldi	r22, 0x00	; 0
    5f06:	41 e0       	ldi	r20, 0x01	; 1
    5f08:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    5f0c:	88 2f       	mov	r24, r24
    5f0e:	90 e0       	ldi	r25, 0x00	; 0
    5f10:	98 2f       	mov	r25, r24
    5f12:	88 27       	eor	r24, r24
    5f14:	92 95       	swap	r25
    5f16:	90 7f       	andi	r25, 0xF0	; 240
    5f18:	9c 01       	movw	r18, r24
    5f1a:	44 27       	eor	r20, r20
    5f1c:	37 fd       	sbrc	r19, 7
    5f1e:	40 95       	com	r20
    5f20:	54 2f       	mov	r21, r20
    5f22:	89 81       	ldd	r24, Y+1	; 0x01
    5f24:	9a 81       	ldd	r25, Y+2	; 0x02
    5f26:	ab 81       	ldd	r26, Y+3	; 0x03
    5f28:	bc 81       	ldd	r27, Y+4	; 0x04
    5f2a:	82 2b       	or	r24, r18
    5f2c:	93 2b       	or	r25, r19
    5f2e:	a4 2b       	or	r26, r20
    5f30:	b5 2b       	or	r27, r21
    5f32:	89 83       	std	Y+1, r24	; 0x01
    5f34:	9a 83       	std	Y+2, r25	; 0x02
    5f36:	ab 83       	std	Y+3, r26	; 0x03
    5f38:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (((u32)DIO_enuSetPinValue(COL2_PORT, COL2_PIN, DIO_u8HIGH)) << KPAD_SHIFTBIT_FIFTEEN);
    5f3a:	81 e0       	ldi	r24, 0x01	; 1
    5f3c:	61 e0       	ldi	r22, 0x01	; 1
    5f3e:	41 e0       	ldi	r20, 0x01	; 1
    5f40:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    5f44:	88 2f       	mov	r24, r24
    5f46:	90 e0       	ldi	r25, 0x00	; 0
    5f48:	a0 e0       	ldi	r26, 0x00	; 0
    5f4a:	b0 e0       	ldi	r27, 0x00	; 0
    5f4c:	9c 01       	movw	r18, r24
    5f4e:	ad 01       	movw	r20, r26
    5f50:	01 2e       	mov	r0, r17
    5f52:	1f e0       	ldi	r17, 0x0F	; 15
    5f54:	22 0f       	add	r18, r18
    5f56:	33 1f       	adc	r19, r19
    5f58:	44 1f       	adc	r20, r20
    5f5a:	55 1f       	adc	r21, r21
    5f5c:	1a 95       	dec	r17
    5f5e:	d1 f7       	brne	.-12     	; 0x5f54 <KPAD_enuInit+0x374>
    5f60:	10 2d       	mov	r17, r0
    5f62:	89 81       	ldd	r24, Y+1	; 0x01
    5f64:	9a 81       	ldd	r25, Y+2	; 0x02
    5f66:	ab 81       	ldd	r26, Y+3	; 0x03
    5f68:	bc 81       	ldd	r27, Y+4	; 0x04
    5f6a:	82 2b       	or	r24, r18
    5f6c:	93 2b       	or	r25, r19
    5f6e:	a4 2b       	or	r26, r20
    5f70:	b5 2b       	or	r27, r21
    5f72:	89 83       	std	Y+1, r24	; 0x01
    5f74:	9a 83       	std	Y+2, r25	; 0x02
    5f76:	ab 83       	std	Y+3, r26	; 0x03
    5f78:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (((u32)DIO_enuSetPinValue(COL3_PORT, COL3_PIN, DIO_u8HIGH)) << KPAD_SHIFTBIT_EIGHTEEN);
    5f7a:	81 e0       	ldi	r24, 0x01	; 1
    5f7c:	62 e0       	ldi	r22, 0x02	; 2
    5f7e:	41 e0       	ldi	r20, 0x01	; 1
    5f80:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    5f84:	88 2f       	mov	r24, r24
    5f86:	90 e0       	ldi	r25, 0x00	; 0
    5f88:	a0 e0       	ldi	r26, 0x00	; 0
    5f8a:	b0 e0       	ldi	r27, 0x00	; 0
    5f8c:	9c 01       	movw	r18, r24
    5f8e:	ad 01       	movw	r20, r26
    5f90:	01 2e       	mov	r0, r17
    5f92:	12 e1       	ldi	r17, 0x12	; 18
    5f94:	22 0f       	add	r18, r18
    5f96:	33 1f       	adc	r19, r19
    5f98:	44 1f       	adc	r20, r20
    5f9a:	55 1f       	adc	r21, r21
    5f9c:	1a 95       	dec	r17
    5f9e:	d1 f7       	brne	.-12     	; 0x5f94 <KPAD_enuInit+0x3b4>
    5fa0:	10 2d       	mov	r17, r0
    5fa2:	89 81       	ldd	r24, Y+1	; 0x01
    5fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    5fa6:	ab 81       	ldd	r26, Y+3	; 0x03
    5fa8:	bc 81       	ldd	r27, Y+4	; 0x04
    5faa:	82 2b       	or	r24, r18
    5fac:	93 2b       	or	r25, r19
    5fae:	a4 2b       	or	r26, r20
    5fb0:	b5 2b       	or	r27, r21
    5fb2:	89 83       	std	Y+1, r24	; 0x01
    5fb4:	9a 83       	std	Y+2, r25	; 0x02
    5fb6:	ab 83       	std	Y+3, r26	; 0x03
    5fb8:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (((u32)DIO_enuSetPinValue(COL4_PORT, COL4_PIN, DIO_u8HIGH)) << KPAD_SHIFTBIT_TWENTYONE);
    5fba:	81 e0       	ldi	r24, 0x01	; 1
    5fbc:	63 e0       	ldi	r22, 0x03	; 3
    5fbe:	41 e0       	ldi	r20, 0x01	; 1
    5fc0:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    5fc4:	88 2f       	mov	r24, r24
    5fc6:	90 e0       	ldi	r25, 0x00	; 0
    5fc8:	a0 e0       	ldi	r26, 0x00	; 0
    5fca:	b0 e0       	ldi	r27, 0x00	; 0
    5fcc:	9c 01       	movw	r18, r24
    5fce:	ad 01       	movw	r20, r26
    5fd0:	01 2e       	mov	r0, r17
    5fd2:	15 e1       	ldi	r17, 0x15	; 21
    5fd4:	22 0f       	add	r18, r18
    5fd6:	33 1f       	adc	r19, r19
    5fd8:	44 1f       	adc	r20, r20
    5fda:	55 1f       	adc	r21, r21
    5fdc:	1a 95       	dec	r17
    5fde:	d1 f7       	brne	.-12     	; 0x5fd4 <KPAD_enuInit+0x3f4>
    5fe0:	10 2d       	mov	r17, r0
    5fe2:	89 81       	ldd	r24, Y+1	; 0x01
    5fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    5fe6:	ab 81       	ldd	r26, Y+3	; 0x03
    5fe8:	bc 81       	ldd	r27, Y+4	; 0x04
    5fea:	82 2b       	or	r24, r18
    5fec:	93 2b       	or	r25, r19
    5fee:	a4 2b       	or	r26, r20
    5ff0:	b5 2b       	or	r27, r21
    5ff2:	89 83       	std	Y+1, r24	; 0x01
    5ff4:	9a 83       	std	Y+2, r25	; 0x02
    5ff6:	ab 83       	std	Y+3, r26	; 0x03
    5ff8:	bc 83       	std	Y+4, r27	; 0x04

	for(Local_u8Iterator = KPAD_ZERO; Local_u8Iterator < KPAD_TWENTYFOUR; Local_u8Iterator += KPAD_THREE)
    5ffa:	1d 82       	std	Y+5, r1	; 0x05
    5ffc:	1e c0       	rjmp	.+60     	; 0x603a <KPAD_enuInit+0x45a>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & KPAD_SEVEN) != ES_OK)
    5ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    6000:	28 2f       	mov	r18, r24
    6002:	30 e0       	ldi	r19, 0x00	; 0
    6004:	89 81       	ldd	r24, Y+1	; 0x01
    6006:	9a 81       	ldd	r25, Y+2	; 0x02
    6008:	ab 81       	ldd	r26, Y+3	; 0x03
    600a:	bc 81       	ldd	r27, Y+4	; 0x04
    600c:	02 2e       	mov	r0, r18
    600e:	04 c0       	rjmp	.+8      	; 0x6018 <KPAD_enuInit+0x438>
    6010:	b6 95       	lsr	r27
    6012:	a7 95       	ror	r26
    6014:	97 95       	ror	r25
    6016:	87 95       	ror	r24
    6018:	0a 94       	dec	r0
    601a:	d2 f7       	brpl	.-12     	; 0x6010 <KPAD_enuInit+0x430>
    601c:	87 70       	andi	r24, 0x07	; 7
    601e:	90 70       	andi	r25, 0x00	; 0
    6020:	a0 70       	andi	r26, 0x00	; 0
    6022:	b0 70       	andi	r27, 0x00	; 0
    6024:	81 30       	cpi	r24, 0x01	; 1
    6026:	91 05       	cpc	r25, r1
    6028:	a1 05       	cpc	r26, r1
    602a:	b1 05       	cpc	r27, r1
    602c:	19 f0       	breq	.+6      	; 0x6034 <KPAD_enuInit+0x454>
		{
			return Local_enuErrorState;
    602e:	8e 81       	ldd	r24, Y+6	; 0x06
    6030:	8f 83       	std	Y+7, r24	; 0x07
    6032:	0a c0       	rjmp	.+20     	; 0x6048 <KPAD_enuInit+0x468>
	Local_u32Check |= (DIO_enuSetPinValue(COL1_PORT, COL1_PIN, DIO_u8HIGH) << KPAD_SHIFTBIT_TWELVE);
	Local_u32Check |= (((u32)DIO_enuSetPinValue(COL2_PORT, COL2_PIN, DIO_u8HIGH)) << KPAD_SHIFTBIT_FIFTEEN);
	Local_u32Check |= (((u32)DIO_enuSetPinValue(COL3_PORT, COL3_PIN, DIO_u8HIGH)) << KPAD_SHIFTBIT_EIGHTEEN);
	Local_u32Check |= (((u32)DIO_enuSetPinValue(COL4_PORT, COL4_PIN, DIO_u8HIGH)) << KPAD_SHIFTBIT_TWENTYONE);

	for(Local_u8Iterator = KPAD_ZERO; Local_u8Iterator < KPAD_TWENTYFOUR; Local_u8Iterator += KPAD_THREE)
    6034:	8d 81       	ldd	r24, Y+5	; 0x05
    6036:	8d 5f       	subi	r24, 0xFD	; 253
    6038:	8d 83       	std	Y+5, r24	; 0x05
    603a:	8d 81       	ldd	r24, Y+5	; 0x05
    603c:	88 31       	cpi	r24, 0x18	; 24
    603e:	f8 f2       	brcs	.-66     	; 0x5ffe <KPAD_enuInit+0x41e>
		{
			return Local_enuErrorState;
		}
	}

	Local_enuErrorState = ES_OK;
    6040:	81 e0       	ldi	r24, 0x01	; 1
    6042:	8e 83       	std	Y+6, r24	; 0x06

	return Local_enuErrorState;
    6044:	8e 81       	ldd	r24, Y+6	; 0x06
    6046:	8f 83       	std	Y+7, r24	; 0x07
    6048:	8f 81       	ldd	r24, Y+7	; 0x07
}
    604a:	27 96       	adiw	r28, 0x07	; 7
    604c:	0f b6       	in	r0, 0x3f	; 63
    604e:	f8 94       	cli
    6050:	de bf       	out	0x3e, r29	; 62
    6052:	0f be       	out	0x3f, r0	; 63
    6054:	cd bf       	out	0x3d, r28	; 61
    6056:	cf 91       	pop	r28
    6058:	df 91       	pop	r29
    605a:	08 95       	ret

0000605c <KPAD_enuGetPassedKey>:

ES_t KPAD_enuGetPassedKey(u8 *Copy_pu8KeyNumber)
{
    605c:	df 93       	push	r29
    605e:	cf 93       	push	r28
    6060:	cd b7       	in	r28, 0x3d	; 61
    6062:	de b7       	in	r29, 0x3e	; 62
    6064:	2c 97       	sbiw	r28, 0x0c	; 12
    6066:	0f b6       	in	r0, 0x3f	; 63
    6068:	f8 94       	cli
    606a:	de bf       	out	0x3e, r29	; 62
    606c:	0f be       	out	0x3f, r0	; 63
    606e:	cd bf       	out	0x3d, r28	; 61
    6070:	9b 87       	std	Y+11, r25	; 0x0b
    6072:	8a 87       	std	Y+10, r24	; 0x0a
	ES_t Local_enuErrorState = ES_NOK;
    6074:	18 86       	std	Y+8, r1	; 0x08
	u8 Local_u8ColIndex = KPAD_ZERO, Local_u8RowIndex = KPAD_ZERO, Local_u8KeyState = KPAD_ZERO;
    6076:	1f 82       	std	Y+7, r1	; 0x07
    6078:	1e 82       	std	Y+6, r1	; 0x06
    607a:	19 86       	std	Y+9, r1	; 0x09
	u8 Local_u8Iterator = KPAD_ZERO;
    607c:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Check = KPAD_ZERO;
    607e:	19 82       	std	Y+1, r1	; 0x01
    6080:	1a 82       	std	Y+2, r1	; 0x02
    6082:	1b 82       	std	Y+3, r1	; 0x03
    6084:	1c 82       	std	Y+4, r1	; 0x04


	static u8 Local_u8AKPADARR[KPAD_ROWNUM][KPAD_COLNUM] = KPAD_ARR_VAL;

	/* Initial value of key pressed */
	if(Copy_pu8KeyNumber != NULL)
    6086:	8a 85       	ldd	r24, Y+10	; 0x0a
    6088:	9b 85       	ldd	r25, Y+11	; 0x0b
    608a:	00 97       	sbiw	r24, 0x00	; 0
    608c:	31 f0       	breq	.+12     	; 0x609a <KPAD_enuGetPassedKey+0x3e>
	{
		*Copy_pu8KeyNumber = NO_PRESSED_KEY;
    608e:	ea 85       	ldd	r30, Y+10	; 0x0a
    6090:	fb 85       	ldd	r31, Y+11	; 0x0b
    6092:	8f ef       	ldi	r24, 0xFF	; 255
    6094:	80 83       	st	Z, r24
	else
	{
		return ES_NULL_POINTER;
	}

	for(Local_u8ColIndex = KPAD_ZERO; Local_u8ColIndex < KPAD_COLNUM; Local_u8ColIndex++)
    6096:	1f 82       	std	Y+7, r1	; 0x07
    6098:	e9 c0       	rjmp	.+466    	; 0x626c <KPAD_enuGetPassedKey+0x210>
	{
		*Copy_pu8KeyNumber = NO_PRESSED_KEY;
	}
	else
	{
		return ES_NULL_POINTER;
    609a:	82 e0       	ldi	r24, 0x02	; 2
    609c:	8c 87       	std	Y+12, r24	; 0x0c
    609e:	11 c1       	rjmp	.+546    	; 0x62c2 <KPAD_enuGetPassedKey+0x266>
	}

	for(Local_u8ColIndex = KPAD_ZERO; Local_u8ColIndex < KPAD_COLNUM; Local_u8ColIndex++)
	{
		/* Activate Column */
		Local_u32Check |= (DIO_enuSetPinValue(Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ZERO],
    60a0:	8f 81       	ldd	r24, Y+7	; 0x07
    60a2:	88 2f       	mov	r24, r24
    60a4:	90 e0       	ldi	r25, 0x00	; 0
    60a6:	88 0f       	add	r24, r24
    60a8:	99 1f       	adc	r25, r25
    60aa:	fc 01       	movw	r30, r24
    60ac:	e0 52       	subi	r30, 0x20	; 32
    60ae:	fe 4f       	sbci	r31, 0xFE	; 254
    60b0:	20 81       	ld	r18, Z
    60b2:	8f 81       	ldd	r24, Y+7	; 0x07
    60b4:	88 2f       	mov	r24, r24
    60b6:	90 e0       	ldi	r25, 0x00	; 0
    60b8:	88 0f       	add	r24, r24
    60ba:	99 1f       	adc	r25, r25
    60bc:	fc 01       	movw	r30, r24
    60be:	ef 51       	subi	r30, 0x1F	; 31
    60c0:	fe 4f       	sbci	r31, 0xFE	; 254
    60c2:	90 81       	ld	r25, Z
    60c4:	82 2f       	mov	r24, r18
    60c6:	69 2f       	mov	r22, r25
    60c8:	40 e0       	ldi	r20, 0x00	; 0
    60ca:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    60ce:	28 2f       	mov	r18, r24
    60d0:	30 e0       	ldi	r19, 0x00	; 0
    60d2:	40 e0       	ldi	r20, 0x00	; 0
    60d4:	50 e0       	ldi	r21, 0x00	; 0
    60d6:	89 81       	ldd	r24, Y+1	; 0x01
    60d8:	9a 81       	ldd	r25, Y+2	; 0x02
    60da:	ab 81       	ldd	r26, Y+3	; 0x03
    60dc:	bc 81       	ldd	r27, Y+4	; 0x04
    60de:	82 2b       	or	r24, r18
    60e0:	93 2b       	or	r25, r19
    60e2:	a4 2b       	or	r26, r20
    60e4:	b5 2b       	or	r27, r21
    60e6:	89 83       	std	Y+1, r24	; 0x01
    60e8:	9a 83       	std	Y+2, r25	; 0x02
    60ea:	ab 83       	std	Y+3, r26	; 0x03
    60ec:	bc 83       	std	Y+4, r27	; 0x04
						   Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ONE], DIO_u8LOW) << KPAD_SHIFTBIT_ZERO);

		for(Local_u8RowIndex = KPAD_ZERO; Local_u8RowIndex < KPAD_ROWNUM; Local_u8RowIndex++)
    60ee:	1e 82       	std	Y+6, r1	; 0x06
    60f0:	89 c0       	rjmp	.+274    	; 0x6204 <KPAD_enuGetPassedKey+0x1a8>
		{
			/* Read the current row */
			 Local_u32Check |= (DIO_enuGetPinValue(Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ZERO],
    60f2:	8e 81       	ldd	r24, Y+6	; 0x06
    60f4:	88 2f       	mov	r24, r24
    60f6:	90 e0       	ldi	r25, 0x00	; 0
    60f8:	88 0f       	add	r24, r24
    60fa:	99 1f       	adc	r25, r25
    60fc:	fc 01       	movw	r30, r24
    60fe:	e8 52       	subi	r30, 0x28	; 40
    6100:	fe 4f       	sbci	r31, 0xFE	; 254
    6102:	40 81       	ld	r20, Z
    6104:	8e 81       	ldd	r24, Y+6	; 0x06
    6106:	88 2f       	mov	r24, r24
    6108:	90 e0       	ldi	r25, 0x00	; 0
    610a:	88 0f       	add	r24, r24
    610c:	99 1f       	adc	r25, r25
    610e:	fc 01       	movw	r30, r24
    6110:	e7 52       	subi	r30, 0x27	; 39
    6112:	fe 4f       	sbci	r31, 0xFE	; 254
    6114:	90 81       	ld	r25, Z
    6116:	9e 01       	movw	r18, r28
    6118:	27 5f       	subi	r18, 0xF7	; 247
    611a:	3f 4f       	sbci	r19, 0xFF	; 255
    611c:	84 2f       	mov	r24, r20
    611e:	69 2f       	mov	r22, r25
    6120:	a9 01       	movw	r20, r18
    6122:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_enuGetPinValue>
    6126:	88 2f       	mov	r24, r24
    6128:	90 e0       	ldi	r25, 0x00	; 0
    612a:	88 0f       	add	r24, r24
    612c:	99 1f       	adc	r25, r25
    612e:	88 0f       	add	r24, r24
    6130:	99 1f       	adc	r25, r25
    6132:	88 0f       	add	r24, r24
    6134:	99 1f       	adc	r25, r25
    6136:	9c 01       	movw	r18, r24
    6138:	44 27       	eor	r20, r20
    613a:	37 fd       	sbrc	r19, 7
    613c:	40 95       	com	r20
    613e:	54 2f       	mov	r21, r20
    6140:	89 81       	ldd	r24, Y+1	; 0x01
    6142:	9a 81       	ldd	r25, Y+2	; 0x02
    6144:	ab 81       	ldd	r26, Y+3	; 0x03
    6146:	bc 81       	ldd	r27, Y+4	; 0x04
    6148:	82 2b       	or	r24, r18
    614a:	93 2b       	or	r25, r19
    614c:	a4 2b       	or	r26, r20
    614e:	b5 2b       	or	r27, r21
    6150:	89 83       	std	Y+1, r24	; 0x01
    6152:	9a 83       	std	Y+2, r25	; 0x02
    6154:	ab 83       	std	Y+3, r26	; 0x03
    6156:	bc 83       	std	Y+4, r27	; 0x04
													Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ONE], &Local_u8KeyState) << KPAD_SHIFTBIT_THREE);
			 if(DIO_u8LOW == Local_u8KeyState)
    6158:	89 85       	ldd	r24, Y+9	; 0x09
    615a:	88 23       	and	r24, r24
    615c:	09 f0       	breq	.+2      	; 0x6160 <KPAD_enuGetPassedKey+0x104>
    615e:	4f c0       	rjmp	.+158    	; 0x61fe <KPAD_enuGetPassedKey+0x1a2>
    6160:	36 c0       	rjmp	.+108    	; 0x61ce <KPAD_enuGetPassedKey+0x172>
			 {
				 /* Polling (Busy waiting until the key is released) */
				 while(DIO_u8LOW == Local_u8KeyState)
				 {
					 Local_u32Check |= (DIO_enuGetPinValue(Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ZERO],
    6162:	8e 81       	ldd	r24, Y+6	; 0x06
    6164:	88 2f       	mov	r24, r24
    6166:	90 e0       	ldi	r25, 0x00	; 0
    6168:	88 0f       	add	r24, r24
    616a:	99 1f       	adc	r25, r25
    616c:	fc 01       	movw	r30, r24
    616e:	e8 52       	subi	r30, 0x28	; 40
    6170:	fe 4f       	sbci	r31, 0xFE	; 254
    6172:	40 81       	ld	r20, Z
    6174:	8e 81       	ldd	r24, Y+6	; 0x06
    6176:	88 2f       	mov	r24, r24
    6178:	90 e0       	ldi	r25, 0x00	; 0
    617a:	88 0f       	add	r24, r24
    617c:	99 1f       	adc	r25, r25
    617e:	fc 01       	movw	r30, r24
    6180:	e7 52       	subi	r30, 0x27	; 39
    6182:	fe 4f       	sbci	r31, 0xFE	; 254
    6184:	90 81       	ld	r25, Z
    6186:	9e 01       	movw	r18, r28
    6188:	27 5f       	subi	r18, 0xF7	; 247
    618a:	3f 4f       	sbci	r19, 0xFF	; 255
    618c:	84 2f       	mov	r24, r20
    618e:	69 2f       	mov	r22, r25
    6190:	a9 01       	movw	r20, r18
    6192:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DIO_enuGetPinValue>
    6196:	88 2f       	mov	r24, r24
    6198:	90 e0       	ldi	r25, 0x00	; 0
    619a:	00 24       	eor	r0, r0
    619c:	96 95       	lsr	r25
    619e:	87 95       	ror	r24
    61a0:	07 94       	ror	r0
    61a2:	96 95       	lsr	r25
    61a4:	87 95       	ror	r24
    61a6:	07 94       	ror	r0
    61a8:	98 2f       	mov	r25, r24
    61aa:	80 2d       	mov	r24, r0
    61ac:	9c 01       	movw	r18, r24
    61ae:	44 27       	eor	r20, r20
    61b0:	37 fd       	sbrc	r19, 7
    61b2:	40 95       	com	r20
    61b4:	54 2f       	mov	r21, r20
    61b6:	89 81       	ldd	r24, Y+1	; 0x01
    61b8:	9a 81       	ldd	r25, Y+2	; 0x02
    61ba:	ab 81       	ldd	r26, Y+3	; 0x03
    61bc:	bc 81       	ldd	r27, Y+4	; 0x04
    61be:	82 2b       	or	r24, r18
    61c0:	93 2b       	or	r25, r19
    61c2:	a4 2b       	or	r26, r20
    61c4:	b5 2b       	or	r27, r21
    61c6:	89 83       	std	Y+1, r24	; 0x01
    61c8:	9a 83       	std	Y+2, r25	; 0x02
    61ca:	ab 83       	std	Y+3, r26	; 0x03
    61cc:	bc 83       	std	Y+4, r27	; 0x04
			 Local_u32Check |= (DIO_enuGetPinValue(Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ZERO],
													Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ONE], &Local_u8KeyState) << KPAD_SHIFTBIT_THREE);
			 if(DIO_u8LOW == Local_u8KeyState)
			 {
				 /* Polling (Busy waiting until the key is released) */
				 while(DIO_u8LOW == Local_u8KeyState)
    61ce:	89 85       	ldd	r24, Y+9	; 0x09
    61d0:	88 23       	and	r24, r24
    61d2:	39 f2       	breq	.-114    	; 0x6162 <KPAD_enuGetPassedKey+0x106>
				 {
					 Local_u32Check |= (DIO_enuGetPinValue(Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ZERO],
															Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ONE], &Local_u8KeyState) << KPAD_SHIFTBIT_SIX);
				 }

				 *Copy_pu8KeyNumber = Local_u8AKPADARR[Local_u8RowIndex][Local_u8ColIndex];
    61d4:	8e 81       	ldd	r24, Y+6	; 0x06
    61d6:	48 2f       	mov	r20, r24
    61d8:	50 e0       	ldi	r21, 0x00	; 0
    61da:	8f 81       	ldd	r24, Y+7	; 0x07
    61dc:	28 2f       	mov	r18, r24
    61de:	30 e0       	ldi	r19, 0x00	; 0
    61e0:	ca 01       	movw	r24, r20
    61e2:	88 0f       	add	r24, r24
    61e4:	99 1f       	adc	r25, r25
    61e6:	88 0f       	add	r24, r24
    61e8:	99 1f       	adc	r25, r25
    61ea:	82 0f       	add	r24, r18
    61ec:	93 1f       	adc	r25, r19
    61ee:	fc 01       	movw	r30, r24
    61f0:	e8 53       	subi	r30, 0x38	; 56
    61f2:	fe 4f       	sbci	r31, 0xFE	; 254
    61f4:	80 81       	ld	r24, Z
    61f6:	ea 85       	ldd	r30, Y+10	; 0x0a
    61f8:	fb 85       	ldd	r31, Y+11	; 0x0b
    61fa:	80 83       	st	Z, r24
    61fc:	07 c0       	rjmp	.+14     	; 0x620c <KPAD_enuGetPassedKey+0x1b0>
	{
		/* Activate Column */
		Local_u32Check |= (DIO_enuSetPinValue(Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ZERO],
						   Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ONE], DIO_u8LOW) << KPAD_SHIFTBIT_ZERO);

		for(Local_u8RowIndex = KPAD_ZERO; Local_u8RowIndex < KPAD_ROWNUM; Local_u8RowIndex++)
    61fe:	8e 81       	ldd	r24, Y+6	; 0x06
    6200:	8f 5f       	subi	r24, 0xFF	; 255
    6202:	8e 83       	std	Y+6, r24	; 0x06
    6204:	8e 81       	ldd	r24, Y+6	; 0x06
    6206:	84 30       	cpi	r24, 0x04	; 4
    6208:	08 f4       	brcc	.+2      	; 0x620c <KPAD_enuGetPassedKey+0x1b0>
    620a:	73 cf       	rjmp	.-282    	; 0x60f2 <KPAD_enuGetPassedKey+0x96>
				 break;
			 }
		}

		/* Deactivate Column */
		Local_u32Check |= (DIO_enuSetPinValue(Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ZERO],
    620c:	8f 81       	ldd	r24, Y+7	; 0x07
    620e:	88 2f       	mov	r24, r24
    6210:	90 e0       	ldi	r25, 0x00	; 0
    6212:	88 0f       	add	r24, r24
    6214:	99 1f       	adc	r25, r25
    6216:	fc 01       	movw	r30, r24
    6218:	e0 52       	subi	r30, 0x20	; 32
    621a:	fe 4f       	sbci	r31, 0xFE	; 254
    621c:	20 81       	ld	r18, Z
    621e:	8f 81       	ldd	r24, Y+7	; 0x07
    6220:	88 2f       	mov	r24, r24
    6222:	90 e0       	ldi	r25, 0x00	; 0
    6224:	88 0f       	add	r24, r24
    6226:	99 1f       	adc	r25, r25
    6228:	fc 01       	movw	r30, r24
    622a:	ef 51       	subi	r30, 0x1F	; 31
    622c:	fe 4f       	sbci	r31, 0xFE	; 254
    622e:	90 81       	ld	r25, Z
    6230:	82 2f       	mov	r24, r18
    6232:	69 2f       	mov	r22, r25
    6234:	41 e0       	ldi	r20, 0x01	; 1
    6236:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    623a:	88 2f       	mov	r24, r24
    623c:	90 e0       	ldi	r25, 0x00	; 0
    623e:	98 2f       	mov	r25, r24
    6240:	88 27       	eor	r24, r24
    6242:	99 0f       	add	r25, r25
    6244:	9c 01       	movw	r18, r24
    6246:	44 27       	eor	r20, r20
    6248:	37 fd       	sbrc	r19, 7
    624a:	40 95       	com	r20
    624c:	54 2f       	mov	r21, r20
    624e:	89 81       	ldd	r24, Y+1	; 0x01
    6250:	9a 81       	ldd	r25, Y+2	; 0x02
    6252:	ab 81       	ldd	r26, Y+3	; 0x03
    6254:	bc 81       	ldd	r27, Y+4	; 0x04
    6256:	82 2b       	or	r24, r18
    6258:	93 2b       	or	r25, r19
    625a:	a4 2b       	or	r26, r20
    625c:	b5 2b       	or	r27, r21
    625e:	89 83       	std	Y+1, r24	; 0x01
    6260:	9a 83       	std	Y+2, r25	; 0x02
    6262:	ab 83       	std	Y+3, r26	; 0x03
    6264:	bc 83       	std	Y+4, r27	; 0x04
	else
	{
		return ES_NULL_POINTER;
	}

	for(Local_u8ColIndex = KPAD_ZERO; Local_u8ColIndex < KPAD_COLNUM; Local_u8ColIndex++)
    6266:	8f 81       	ldd	r24, Y+7	; 0x07
    6268:	8f 5f       	subi	r24, 0xFF	; 255
    626a:	8f 83       	std	Y+7, r24	; 0x07
    626c:	8f 81       	ldd	r24, Y+7	; 0x07
    626e:	84 30       	cpi	r24, 0x04	; 4
    6270:	08 f4       	brcc	.+2      	; 0x6274 <KPAD_enuGetPassedKey+0x218>
    6272:	16 cf       	rjmp	.-468    	; 0x60a0 <KPAD_enuGetPassedKey+0x44>
		/* Deactivate Column */
		Local_u32Check |= (DIO_enuSetPinValue(Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ZERO],
						   	   	   	   	   	   Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ONE], DIO_u8HIGH) << KPAD_SHIFTBIT_NINE);
	}

	for(Local_u8Iterator = KPAD_ZERO; Local_u8Iterator < KPAD_TWELVE; Local_u8Iterator += KPAD_THREE)
    6274:	1d 82       	std	Y+5, r1	; 0x05
    6276:	1e c0       	rjmp	.+60     	; 0x62b4 <KPAD_enuGetPassedKey+0x258>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & KPAD_SEVEN) != ES_OK)
    6278:	8d 81       	ldd	r24, Y+5	; 0x05
    627a:	28 2f       	mov	r18, r24
    627c:	30 e0       	ldi	r19, 0x00	; 0
    627e:	89 81       	ldd	r24, Y+1	; 0x01
    6280:	9a 81       	ldd	r25, Y+2	; 0x02
    6282:	ab 81       	ldd	r26, Y+3	; 0x03
    6284:	bc 81       	ldd	r27, Y+4	; 0x04
    6286:	02 2e       	mov	r0, r18
    6288:	04 c0       	rjmp	.+8      	; 0x6292 <KPAD_enuGetPassedKey+0x236>
    628a:	b6 95       	lsr	r27
    628c:	a7 95       	ror	r26
    628e:	97 95       	ror	r25
    6290:	87 95       	ror	r24
    6292:	0a 94       	dec	r0
    6294:	d2 f7       	brpl	.-12     	; 0x628a <KPAD_enuGetPassedKey+0x22e>
    6296:	87 70       	andi	r24, 0x07	; 7
    6298:	90 70       	andi	r25, 0x00	; 0
    629a:	a0 70       	andi	r26, 0x00	; 0
    629c:	b0 70       	andi	r27, 0x00	; 0
    629e:	81 30       	cpi	r24, 0x01	; 1
    62a0:	91 05       	cpc	r25, r1
    62a2:	a1 05       	cpc	r26, r1
    62a4:	b1 05       	cpc	r27, r1
    62a6:	19 f0       	breq	.+6      	; 0x62ae <KPAD_enuGetPassedKey+0x252>
		{
			return Local_enuErrorState;
    62a8:	88 85       	ldd	r24, Y+8	; 0x08
    62aa:	8c 87       	std	Y+12, r24	; 0x0c
    62ac:	0a c0       	rjmp	.+20     	; 0x62c2 <KPAD_enuGetPassedKey+0x266>
		/* Deactivate Column */
		Local_u32Check |= (DIO_enuSetPinValue(Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ZERO],
						   	   	   	   	   	   Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ONE], DIO_u8HIGH) << KPAD_SHIFTBIT_NINE);
	}

	for(Local_u8Iterator = KPAD_ZERO; Local_u8Iterator < KPAD_TWELVE; Local_u8Iterator += KPAD_THREE)
    62ae:	8d 81       	ldd	r24, Y+5	; 0x05
    62b0:	8d 5f       	subi	r24, 0xFD	; 253
    62b2:	8d 83       	std	Y+5, r24	; 0x05
    62b4:	8d 81       	ldd	r24, Y+5	; 0x05
    62b6:	8c 30       	cpi	r24, 0x0C	; 12
    62b8:	f8 f2       	brcs	.-66     	; 0x6278 <KPAD_enuGetPassedKey+0x21c>
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & KPAD_SEVEN) != ES_OK)
		{
			return Local_enuErrorState;
		}
	}
	Local_enuErrorState = ES_OK;
    62ba:	81 e0       	ldi	r24, 0x01	; 1
    62bc:	88 87       	std	Y+8, r24	; 0x08

	return Local_enuErrorState;
    62be:	88 85       	ldd	r24, Y+8	; 0x08
    62c0:	8c 87       	std	Y+12, r24	; 0x0c
    62c2:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    62c4:	2c 96       	adiw	r28, 0x0c	; 12
    62c6:	0f b6       	in	r0, 0x3f	; 63
    62c8:	f8 94       	cli
    62ca:	de bf       	out	0x3e, r29	; 62
    62cc:	0f be       	out	0x3f, r0	; 63
    62ce:	cd bf       	out	0x3d, r28	; 61
    62d0:	cf 91       	pop	r28
    62d2:	df 91       	pop	r29
    62d4:	08 95       	ret

000062d6 <main>:
#include <util/delay.h>

extern SW_t Switch_AstrSwitchState[SW_NUM];

int main(void)
{
    62d6:	df 93       	push	r29
    62d8:	cf 93       	push	r28
    62da:	cd b7       	in	r28, 0x3d	; 61
    62dc:	de b7       	in	r29, 0x3e	; 62
    62de:	2f 97       	sbiw	r28, 0x0f	; 15
    62e0:	0f b6       	in	r0, 0x3f	; 63
    62e2:	f8 94       	cli
    62e4:	de bf       	out	0x3e, r29	; 62
    62e6:	0f be       	out	0x3f, r0	; 63
    62e8:	cd bf       	out	0x3d, r28	; 61
	DIO_enuInit();
    62ea:	0e 94 25 0b 	call	0x164a	; 0x164a <DIO_enuInit>
	Switch_enuInit(Switch_AstrSwitchState);
    62ee:	8e e6       	ldi	r24, 0x6E	; 110
    62f0:	91 e0       	ldi	r25, 0x01	; 1
    62f2:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <Switch_enuInit>
	u8 Local_u8pinState = 0;
    62f6:	1f 86       	std	Y+15, r1	; 0x0f

	while(1)
	{
		Switch_enuGetState(&Switch_AstrSwitchState[1], &Local_u8pinState);
    62f8:	81 e7       	ldi	r24, 0x71	; 113
    62fa:	91 e0       	ldi	r25, 0x01	; 1
    62fc:	9e 01       	movw	r18, r28
    62fe:	21 5f       	subi	r18, 0xF1	; 241
    6300:	3f 4f       	sbci	r19, 0xFF	; 255
    6302:	b9 01       	movw	r22, r18
    6304:	0e 94 19 10 	call	0x2032	; 0x2032 <Switch_enuGetState>

		if(Local_u8pinState == 0)
    6308:	8f 85       	ldd	r24, Y+15	; 0x0f
    630a:	88 23       	and	r24, r24
    630c:	a9 f7       	brne	.-22     	; 0x62f8 <main+0x22>
    630e:	80 e0       	ldi	r24, 0x00	; 0
    6310:	90 e0       	ldi	r25, 0x00	; 0
    6312:	a0 ea       	ldi	r26, 0xA0	; 160
    6314:	b0 e4       	ldi	r27, 0x40	; 64
    6316:	8b 87       	std	Y+11, r24	; 0x0b
    6318:	9c 87       	std	Y+12, r25	; 0x0c
    631a:	ad 87       	std	Y+13, r26	; 0x0d
    631c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    631e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6320:	7c 85       	ldd	r23, Y+12	; 0x0c
    6322:	8d 85       	ldd	r24, Y+13	; 0x0d
    6324:	9e 85       	ldd	r25, Y+14	; 0x0e
    6326:	20 e0       	ldi	r18, 0x00	; 0
    6328:	30 e0       	ldi	r19, 0x00	; 0
    632a:	4a e7       	ldi	r20, 0x7A	; 122
    632c:	53 e4       	ldi	r21, 0x43	; 67
    632e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6332:	dc 01       	movw	r26, r24
    6334:	cb 01       	movw	r24, r22
    6336:	8f 83       	std	Y+7, r24	; 0x07
    6338:	98 87       	std	Y+8, r25	; 0x08
    633a:	a9 87       	std	Y+9, r26	; 0x09
    633c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    633e:	6f 81       	ldd	r22, Y+7	; 0x07
    6340:	78 85       	ldd	r23, Y+8	; 0x08
    6342:	89 85       	ldd	r24, Y+9	; 0x09
    6344:	9a 85       	ldd	r25, Y+10	; 0x0a
    6346:	20 e0       	ldi	r18, 0x00	; 0
    6348:	30 e0       	ldi	r19, 0x00	; 0
    634a:	40 e8       	ldi	r20, 0x80	; 128
    634c:	5f e3       	ldi	r21, 0x3F	; 63
    634e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6352:	88 23       	and	r24, r24
    6354:	2c f4       	brge	.+10     	; 0x6360 <main+0x8a>
		__ticks = 1;
    6356:	81 e0       	ldi	r24, 0x01	; 1
    6358:	90 e0       	ldi	r25, 0x00	; 0
    635a:	9e 83       	std	Y+6, r25	; 0x06
    635c:	8d 83       	std	Y+5, r24	; 0x05
    635e:	3f c0       	rjmp	.+126    	; 0x63de <main+0x108>
	else if (__tmp > 65535)
    6360:	6f 81       	ldd	r22, Y+7	; 0x07
    6362:	78 85       	ldd	r23, Y+8	; 0x08
    6364:	89 85       	ldd	r24, Y+9	; 0x09
    6366:	9a 85       	ldd	r25, Y+10	; 0x0a
    6368:	20 e0       	ldi	r18, 0x00	; 0
    636a:	3f ef       	ldi	r19, 0xFF	; 255
    636c:	4f e7       	ldi	r20, 0x7F	; 127
    636e:	57 e4       	ldi	r21, 0x47	; 71
    6370:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6374:	18 16       	cp	r1, r24
    6376:	4c f5       	brge	.+82     	; 0x63ca <main+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6378:	6b 85       	ldd	r22, Y+11	; 0x0b
    637a:	7c 85       	ldd	r23, Y+12	; 0x0c
    637c:	8d 85       	ldd	r24, Y+13	; 0x0d
    637e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6380:	20 e0       	ldi	r18, 0x00	; 0
    6382:	30 e0       	ldi	r19, 0x00	; 0
    6384:	40 e2       	ldi	r20, 0x20	; 32
    6386:	51 e4       	ldi	r21, 0x41	; 65
    6388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    638c:	dc 01       	movw	r26, r24
    638e:	cb 01       	movw	r24, r22
    6390:	bc 01       	movw	r22, r24
    6392:	cd 01       	movw	r24, r26
    6394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6398:	dc 01       	movw	r26, r24
    639a:	cb 01       	movw	r24, r22
    639c:	9e 83       	std	Y+6, r25	; 0x06
    639e:	8d 83       	std	Y+5, r24	; 0x05
    63a0:	0f c0       	rjmp	.+30     	; 0x63c0 <main+0xea>
    63a2:	89 e1       	ldi	r24, 0x19	; 25
    63a4:	90 e0       	ldi	r25, 0x00	; 0
    63a6:	9c 83       	std	Y+4, r25	; 0x04
    63a8:	8b 83       	std	Y+3, r24	; 0x03
    63aa:	8b 81       	ldd	r24, Y+3	; 0x03
    63ac:	9c 81       	ldd	r25, Y+4	; 0x04
    63ae:	01 97       	sbiw	r24, 0x01	; 1
    63b0:	f1 f7       	brne	.-4      	; 0x63ae <main+0xd8>
    63b2:	9c 83       	std	Y+4, r25	; 0x04
    63b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    63b6:	8d 81       	ldd	r24, Y+5	; 0x05
    63b8:	9e 81       	ldd	r25, Y+6	; 0x06
    63ba:	01 97       	sbiw	r24, 0x01	; 1
    63bc:	9e 83       	std	Y+6, r25	; 0x06
    63be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    63c0:	8d 81       	ldd	r24, Y+5	; 0x05
    63c2:	9e 81       	ldd	r25, Y+6	; 0x06
    63c4:	00 97       	sbiw	r24, 0x00	; 0
    63c6:	69 f7       	brne	.-38     	; 0x63a2 <main+0xcc>
    63c8:	14 c0       	rjmp	.+40     	; 0x63f2 <main+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    63ca:	6f 81       	ldd	r22, Y+7	; 0x07
    63cc:	78 85       	ldd	r23, Y+8	; 0x08
    63ce:	89 85       	ldd	r24, Y+9	; 0x09
    63d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    63d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63d6:	dc 01       	movw	r26, r24
    63d8:	cb 01       	movw	r24, r22
    63da:	9e 83       	std	Y+6, r25	; 0x06
    63dc:	8d 83       	std	Y+5, r24	; 0x05
    63de:	8d 81       	ldd	r24, Y+5	; 0x05
    63e0:	9e 81       	ldd	r25, Y+6	; 0x06
    63e2:	9a 83       	std	Y+2, r25	; 0x02
    63e4:	89 83       	std	Y+1, r24	; 0x01
    63e6:	89 81       	ldd	r24, Y+1	; 0x01
    63e8:	9a 81       	ldd	r25, Y+2	; 0x02
    63ea:	01 97       	sbiw	r24, 0x01	; 1
    63ec:	f1 f7       	brne	.-4      	; 0x63ea <main+0x114>
    63ee:	9a 83       	std	Y+2, r25	; 0x02
    63f0:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(5);
			Switch_enuGetState(&Switch_AstrSwitchState[1], &Local_u8pinState);
    63f2:	81 e7       	ldi	r24, 0x71	; 113
    63f4:	91 e0       	ldi	r25, 0x01	; 1
    63f6:	9e 01       	movw	r18, r28
    63f8:	21 5f       	subi	r18, 0xF1	; 241
    63fa:	3f 4f       	sbci	r19, 0xFF	; 255
    63fc:	b9 01       	movw	r22, r18
    63fe:	0e 94 19 10 	call	0x2032	; 0x2032 <Switch_enuGetState>
			if(Local_u8pinState == 0)
    6402:	8f 85       	ldd	r24, Y+15	; 0x0f
    6404:	88 23       	and	r24, r24
    6406:	31 f4       	brne	.+12     	; 0x6414 <main+0x13e>
			{
				DIO_enuSetPinValue(DIO_u8PORTA, DIO_u8PIN0, DIO_u8HIGH);
    6408:	80 e0       	ldi	r24, 0x00	; 0
    640a:	60 e0       	ldi	r22, 0x00	; 0
    640c:	41 e0       	ldi	r20, 0x01	; 1
    640e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    6412:	72 cf       	rjmp	.-284    	; 0x62f8 <main+0x22>
			}
			else
			{
				DIO_enuSetPinValue(DIO_u8PORTA, DIO_u8PIN0, DIO_u8LOW);
    6414:	80 e0       	ldi	r24, 0x00	; 0
    6416:	60 e0       	ldi	r22, 0x00	; 0
    6418:	40 e0       	ldi	r20, 0x00	; 0
    641a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    641e:	6c cf       	rjmp	.-296    	; 0x62f8 <main+0x22>

00006420 <__prologue_saves__>:
    6420:	2f 92       	push	r2
    6422:	3f 92       	push	r3
    6424:	4f 92       	push	r4
    6426:	5f 92       	push	r5
    6428:	6f 92       	push	r6
    642a:	7f 92       	push	r7
    642c:	8f 92       	push	r8
    642e:	9f 92       	push	r9
    6430:	af 92       	push	r10
    6432:	bf 92       	push	r11
    6434:	cf 92       	push	r12
    6436:	df 92       	push	r13
    6438:	ef 92       	push	r14
    643a:	ff 92       	push	r15
    643c:	0f 93       	push	r16
    643e:	1f 93       	push	r17
    6440:	cf 93       	push	r28
    6442:	df 93       	push	r29
    6444:	cd b7       	in	r28, 0x3d	; 61
    6446:	de b7       	in	r29, 0x3e	; 62
    6448:	ca 1b       	sub	r28, r26
    644a:	db 0b       	sbc	r29, r27
    644c:	0f b6       	in	r0, 0x3f	; 63
    644e:	f8 94       	cli
    6450:	de bf       	out	0x3e, r29	; 62
    6452:	0f be       	out	0x3f, r0	; 63
    6454:	cd bf       	out	0x3d, r28	; 61
    6456:	09 94       	ijmp

00006458 <__epilogue_restores__>:
    6458:	2a 88       	ldd	r2, Y+18	; 0x12
    645a:	39 88       	ldd	r3, Y+17	; 0x11
    645c:	48 88       	ldd	r4, Y+16	; 0x10
    645e:	5f 84       	ldd	r5, Y+15	; 0x0f
    6460:	6e 84       	ldd	r6, Y+14	; 0x0e
    6462:	7d 84       	ldd	r7, Y+13	; 0x0d
    6464:	8c 84       	ldd	r8, Y+12	; 0x0c
    6466:	9b 84       	ldd	r9, Y+11	; 0x0b
    6468:	aa 84       	ldd	r10, Y+10	; 0x0a
    646a:	b9 84       	ldd	r11, Y+9	; 0x09
    646c:	c8 84       	ldd	r12, Y+8	; 0x08
    646e:	df 80       	ldd	r13, Y+7	; 0x07
    6470:	ee 80       	ldd	r14, Y+6	; 0x06
    6472:	fd 80       	ldd	r15, Y+5	; 0x05
    6474:	0c 81       	ldd	r16, Y+4	; 0x04
    6476:	1b 81       	ldd	r17, Y+3	; 0x03
    6478:	aa 81       	ldd	r26, Y+2	; 0x02
    647a:	b9 81       	ldd	r27, Y+1	; 0x01
    647c:	ce 0f       	add	r28, r30
    647e:	d1 1d       	adc	r29, r1
    6480:	0f b6       	in	r0, 0x3f	; 63
    6482:	f8 94       	cli
    6484:	de bf       	out	0x3e, r29	; 62
    6486:	0f be       	out	0x3f, r0	; 63
    6488:	cd bf       	out	0x3d, r28	; 61
    648a:	ed 01       	movw	r28, r26
    648c:	08 95       	ret

0000648e <_exit>:
    648e:	f8 94       	cli

00006490 <__stop_program>:
    6490:	ff cf       	rjmp	.-2      	; 0x6490 <__stop_program>
