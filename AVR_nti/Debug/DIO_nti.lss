
DIO_nti.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006348  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000188  00800060  00006348  000063dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008001e8  008001e8  00006564  2**0
                  ALLOC
  3 .stab         000048fc  00000000  00000000  00006564  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c84  00000000  00000000  0000ae60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000cae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000cca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000ceb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000f4ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00010998  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00011ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00011e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0001218b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012ba5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__vector_1>
       8:	0c 94 b7 0a 	jmp	0x156e	; 0x156e <__vector_2>
       c:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	f3 e6       	ldi	r31, 0x63	; 99
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3e       	cpi	r26, 0xE8	; 232
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ee       	ldi	r26, 0xE8	; 232
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3f       	cpi	r26, 0xF4	; 244
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5a 31 	call	0x62b4	; 0x62b4 <main>
      8a:	0c 94 a2 31 	jmp	0x6344	; 0x6344 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6b 31 	jmp	0x62d6	; 0x62d6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 87 31 	jmp	0x630e	; 0x630e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 77 31 	jmp	0x62ee	; 0x62ee <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 93 31 	jmp	0x6326	; 0x6326 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 77 31 	jmp	0x62ee	; 0x62ee <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 93 31 	jmp	0x6326	; 0x6326 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6b 31 	jmp	0x62d6	; 0x62d6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 87 31 	jmp	0x630e	; 0x630e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 73 31 	jmp	0x62e6	; 0x62e6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 8f 31 	jmp	0x631e	; 0x631e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 77 31 	jmp	0x62ee	; 0x62ee <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 93 31 	jmp	0x6326	; 0x6326 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 77 31 	jmp	0x62ee	; 0x62ee <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 93 31 	jmp	0x6326	; 0x6326 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 77 31 	jmp	0x62ee	; 0x62ee <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 93 31 	jmp	0x6326	; 0x6326 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 74 31 	jmp	0x62e8	; 0x62e8 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 90 31 	jmp	0x6320	; 0x6320 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 7b 31 	jmp	0x62f6	; 0x62f6 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 97 31 	jmp	0x632e	; 0x632e <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 73 31 	jmp	0x62e6	; 0x62e6 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 8f 31 	jmp	0x631e	; 0x631e <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <EXTI_enuInit>:

static volatile void (*EXTI_ApfunINTFun[3])(void *) = {NULL, NULL, NULL}; //Volatile because it is call from ISR
void * EXTI_ApvoidGenericparameter[3] = {NULL, NULL, NULL};

ES_t EXTI_enuInit(EXTI_t * Copy_pstrEXTIConfig)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	2d 97       	sbiw	r28, 0x0d	; 13
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	9c 83       	std	Y+4, r25	; 0x04
     f00:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     f02:	1a 82       	std	Y+2, r1	; 0x02


	if(NULL != Copy_pstrEXTIConfig)
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	9c 81       	ldd	r25, Y+4	; 0x04
     f08:	00 97       	sbiw	r24, 0x00	; 0
     f0a:	09 f4       	brne	.+2      	; 0xf0e <EXTI_enuInit+0x24>
     f0c:	24 c1       	rjmp	.+584    	; 0x1156 <EXTI_enuInit+0x26c>
	{
		u8 Local_u8Iter = 0;
     f0e:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8Iter = 0; Local_u8Iter < 3; Local_u8Iter++)
     f10:	19 82       	std	Y+1, r1	; 0x01
     f12:	1a c1       	rjmp	.+564    	; 0x1148 <EXTI_enuInit+0x25e>
		{
			if(Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8State == ACTIVE)
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	88 2f       	mov	r24, r24
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	9c 01       	movw	r18, r24
     f1c:	22 0f       	add	r18, r18
     f1e:	33 1f       	adc	r19, r19
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	9c 81       	ldd	r25, Y+4	; 0x04
     f24:	fc 01       	movw	r30, r24
     f26:	e2 0f       	add	r30, r18
     f28:	f3 1f       	adc	r31, r19
     f2a:	80 81       	ld	r24, Z
     f2c:	85 30       	cpi	r24, 0x05	; 5
     f2e:	09 f0       	breq	.+2      	; 0xf32 <EXTI_enuInit+0x48>
     f30:	08 c1       	rjmp	.+528    	; 0x1142 <EXTI_enuInit+0x258>
			{
				switch(Local_u8Iter)
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	3d 87       	std	Y+13, r19	; 0x0d
     f3a:	2c 87       	std	Y+12, r18	; 0x0c
     f3c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f3e:	9d 85       	ldd	r25, Y+13	; 0x0d
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	91 05       	cpc	r25, r1
     f44:	09 f4       	brne	.+2      	; 0xf48 <EXTI_enuInit+0x5e>
     f46:	68 c0       	rjmp	.+208    	; 0x1018 <EXTI_enuInit+0x12e>
     f48:	2c 85       	ldd	r18, Y+12	; 0x0c
     f4a:	3d 85       	ldd	r19, Y+13	; 0x0d
     f4c:	22 30       	cpi	r18, 0x02	; 2
     f4e:	31 05       	cpc	r19, r1
     f50:	09 f4       	brne	.+2      	; 0xf54 <EXTI_enuInit+0x6a>
     f52:	bf c0       	rjmp	.+382    	; 0x10d2 <EXTI_enuInit+0x1e8>
     f54:	8c 85       	ldd	r24, Y+12	; 0x0c
     f56:	9d 85       	ldd	r25, Y+13	; 0x0d
     f58:	00 97       	sbiw	r24, 0x00	; 0
     f5a:	09 f0       	breq	.+2      	; 0xf5e <EXTI_enuInit+0x74>
     f5c:	f2 c0       	rjmp	.+484    	; 0x1142 <EXTI_enuInit+0x258>
				{
				case 0:
					GICR |= (1<<6);
     f5e:	ab e5       	ldi	r26, 0x5B	; 91
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	eb e5       	ldi	r30, 0x5B	; 91
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	80 64       	ori	r24, 0x40	; 64
     f6a:	8c 93       	st	X, r24
					 *            -> 0000 0011
					 *           -> 1111 1100
					 * MCUCR  &= 1111 1100
					 * */

					MCUCR &= ~(0x03 << 0);
     f6c:	a5 e5       	ldi	r26, 0x55	; 85
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e5 e5       	ldi	r30, 0x55	; 85
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	8c 7f       	andi	r24, 0xFC	; 252
     f78:	8c 93       	st	X, r24

					//Check Sense Mode
					switch(Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenceLevel)
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	88 2f       	mov	r24, r24
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	9c 01       	movw	r18, r24
     f82:	22 0f       	add	r18, r18
     f84:	33 1f       	adc	r19, r19
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	9c 81       	ldd	r25, Y+4	; 0x04
     f8a:	fc 01       	movw	r30, r24
     f8c:	e2 0f       	add	r30, r18
     f8e:	f3 1f       	adc	r31, r19
     f90:	81 81       	ldd	r24, Z+1	; 0x01
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	3b 87       	std	Y+11, r19	; 0x0b
     f98:	2a 87       	std	Y+10, r18	; 0x0a
     f9a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f9c:	9b 85       	ldd	r25, Y+11	; 0x0b
     f9e:	82 30       	cpi	r24, 0x02	; 2
     fa0:	91 05       	cpc	r25, r1
     fa2:	01 f1       	breq	.+64     	; 0xfe4 <EXTI_enuInit+0xfa>
     fa4:	2a 85       	ldd	r18, Y+10	; 0x0a
     fa6:	3b 85       	ldd	r19, Y+11	; 0x0b
     fa8:	23 30       	cpi	r18, 0x03	; 3
     faa:	31 05       	cpc	r19, r1
     fac:	34 f4       	brge	.+12     	; 0xfba <EXTI_enuInit+0xd0>
     fae:	8a 85       	ldd	r24, Y+10	; 0x0a
     fb0:	9b 85       	ldd	r25, Y+11	; 0x0b
     fb2:	81 30       	cpi	r24, 0x01	; 1
     fb4:	91 05       	cpc	r25, r1
     fb6:	61 f0       	breq	.+24     	; 0xfd0 <EXTI_enuInit+0xe6>
     fb8:	2c c0       	rjmp	.+88     	; 0x1012 <EXTI_enuInit+0x128>
     fba:	2a 85       	ldd	r18, Y+10	; 0x0a
     fbc:	3b 85       	ldd	r19, Y+11	; 0x0b
     fbe:	23 30       	cpi	r18, 0x03	; 3
     fc0:	31 05       	cpc	r19, r1
     fc2:	d1 f0       	breq	.+52     	; 0xff8 <EXTI_enuInit+0x10e>
     fc4:	8a 85       	ldd	r24, Y+10	; 0x0a
     fc6:	9b 85       	ldd	r25, Y+11	; 0x0b
     fc8:	84 30       	cpi	r24, 0x04	; 4
     fca:	91 05       	cpc	r25, r1
     fcc:	f9 f0       	breq	.+62     	; 0x100c <EXTI_enuInit+0x122>
     fce:	21 c0       	rjmp	.+66     	; 0x1012 <EXTI_enuInit+0x128>
					{
					case RISING_EDGE:
						MCUCR |= (3 << 0);
     fd0:	a5 e5       	ldi	r26, 0x55	; 85
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e5 e5       	ldi	r30, 0x55	; 85
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	83 60       	ori	r24, 0x03	; 3
     fdc:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	8a 83       	std	Y+2, r24	; 0x02
     fe2:	af c0       	rjmp	.+350    	; 0x1142 <EXTI_enuInit+0x258>
						break;
					case FALLING_EDGE:
						MCUCR |= (1 << 1);
     fe4:	a5 e5       	ldi	r26, 0x55	; 85
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e5 e5       	ldi	r30, 0x55	; 85
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	82 60       	ori	r24, 0x02	; 2
     ff0:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	8a 83       	std	Y+2, r24	; 0x02
     ff6:	a5 c0       	rjmp	.+330    	; 0x1142 <EXTI_enuInit+0x258>
						break;
					case ANY_LOGIC:
						MCUCR |= (1 << 0);
     ff8:	a5 e5       	ldi	r26, 0x55	; 85
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e5 e5       	ldi	r30, 0x55	; 85
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	81 60       	ori	r24, 0x01	; 1
    1004:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	8a 83       	std	Y+2, r24	; 0x02
    100a:	9b c0       	rjmp	.+310    	; 0x1142 <EXTI_enuInit+0x258>
						break;
					case LOW_LEVEL:
						Local_enuErrorState = ES_OK;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	8a 83       	std	Y+2, r24	; 0x02
    1010:	98 c0       	rjmp	.+304    	; 0x1142 <EXTI_enuInit+0x258>
						break;
					default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
    1012:	83 e0       	ldi	r24, 0x03	; 3
    1014:	8a 83       	std	Y+2, r24	; 0x02
    1016:	95 c0       	rjmp	.+298    	; 0x1142 <EXTI_enuInit+0x258>
					}
					break;

				case 1:
					GICR |= (1<<7);
    1018:	ab e5       	ldi	r26, 0x5B	; 91
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	eb e5       	ldi	r30, 0x5B	; 91
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	80 68       	ori	r24, 0x80	; 128
    1024:	8c 93       	st	X, r24
					MCUCR &= ~(3<<2); //Mask second 2 bits
    1026:	a5 e5       	ldi	r26, 0x55	; 85
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e5 e5       	ldi	r30, 0x55	; 85
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	83 7f       	andi	r24, 0xF3	; 243
    1032:	8c 93       	st	X, r24
					switch(Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenceLevel)
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	88 2f       	mov	r24, r24
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	9c 01       	movw	r18, r24
    103c:	22 0f       	add	r18, r18
    103e:	33 1f       	adc	r19, r19
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	9c 81       	ldd	r25, Y+4	; 0x04
    1044:	fc 01       	movw	r30, r24
    1046:	e2 0f       	add	r30, r18
    1048:	f3 1f       	adc	r31, r19
    104a:	81 81       	ldd	r24, Z+1	; 0x01
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	39 87       	std	Y+9, r19	; 0x09
    1052:	28 87       	std	Y+8, r18	; 0x08
    1054:	88 85       	ldd	r24, Y+8	; 0x08
    1056:	99 85       	ldd	r25, Y+9	; 0x09
    1058:	82 30       	cpi	r24, 0x02	; 2
    105a:	91 05       	cpc	r25, r1
    105c:	01 f1       	breq	.+64     	; 0x109e <EXTI_enuInit+0x1b4>
    105e:	28 85       	ldd	r18, Y+8	; 0x08
    1060:	39 85       	ldd	r19, Y+9	; 0x09
    1062:	23 30       	cpi	r18, 0x03	; 3
    1064:	31 05       	cpc	r19, r1
    1066:	34 f4       	brge	.+12     	; 0x1074 <EXTI_enuInit+0x18a>
    1068:	88 85       	ldd	r24, Y+8	; 0x08
    106a:	99 85       	ldd	r25, Y+9	; 0x09
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	91 05       	cpc	r25, r1
    1070:	61 f0       	breq	.+24     	; 0x108a <EXTI_enuInit+0x1a0>
    1072:	2c c0       	rjmp	.+88     	; 0x10cc <EXTI_enuInit+0x1e2>
    1074:	28 85       	ldd	r18, Y+8	; 0x08
    1076:	39 85       	ldd	r19, Y+9	; 0x09
    1078:	23 30       	cpi	r18, 0x03	; 3
    107a:	31 05       	cpc	r19, r1
    107c:	d1 f0       	breq	.+52     	; 0x10b2 <EXTI_enuInit+0x1c8>
    107e:	88 85       	ldd	r24, Y+8	; 0x08
    1080:	99 85       	ldd	r25, Y+9	; 0x09
    1082:	84 30       	cpi	r24, 0x04	; 4
    1084:	91 05       	cpc	r25, r1
    1086:	f9 f0       	breq	.+62     	; 0x10c6 <EXTI_enuInit+0x1dc>
    1088:	21 c0       	rjmp	.+66     	; 0x10cc <EXTI_enuInit+0x1e2>
					{
					case RISING_EDGE:
						MCUCR |= (3 << 2);
    108a:	a5 e5       	ldi	r26, 0x55	; 85
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e5 e5       	ldi	r30, 0x55	; 85
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	8c 60       	ori	r24, 0x0C	; 12
    1096:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	8a 83       	std	Y+2, r24	; 0x02
    109c:	52 c0       	rjmp	.+164    	; 0x1142 <EXTI_enuInit+0x258>
						break;
					case FALLING_EDGE:
						MCUCR |= (1 << 3);
    109e:	a5 e5       	ldi	r26, 0x55	; 85
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e5 e5       	ldi	r30, 0x55	; 85
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	88 60       	ori	r24, 0x08	; 8
    10aa:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	8a 83       	std	Y+2, r24	; 0x02
    10b0:	48 c0       	rjmp	.+144    	; 0x1142 <EXTI_enuInit+0x258>
						break;
					case ANY_LOGIC:
						MCUCR |= (1 << 2);
    10b2:	a5 e5       	ldi	r26, 0x55	; 85
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e5 e5       	ldi	r30, 0x55	; 85
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	84 60       	ori	r24, 0x04	; 4
    10be:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	8a 83       	std	Y+2, r24	; 0x02
    10c4:	3e c0       	rjmp	.+124    	; 0x1142 <EXTI_enuInit+0x258>
						break;
					case LOW_LEVEL:
						Local_enuErrorState = ES_OK;
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	8a 83       	std	Y+2, r24	; 0x02
    10ca:	3b c0       	rjmp	.+118    	; 0x1142 <EXTI_enuInit+0x258>
						break;
					default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
    10cc:	83 e0       	ldi	r24, 0x03	; 3
    10ce:	8a 83       	std	Y+2, r24	; 0x02
    10d0:	38 c0       	rjmp	.+112    	; 0x1142 <EXTI_enuInit+0x258>
					}
					break;

				case 2:
					GICR |= (1<<5);
    10d2:	ab e5       	ldi	r26, 0x5B	; 91
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	eb e5       	ldi	r30, 0x5B	; 91
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	80 62       	ori	r24, 0x20	; 32
    10de:	8c 93       	st	X, r24
					MCUCSR &= ~(1<<6); //Mask its control sense bit
    10e0:	a4 e5       	ldi	r26, 0x54	; 84
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e4 e5       	ldi	r30, 0x54	; 84
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	8f 7b       	andi	r24, 0xBF	; 191
    10ec:	8c 93       	st	X, r24

					switch(Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenceLevel)
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	88 2f       	mov	r24, r24
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	9c 01       	movw	r18, r24
    10f6:	22 0f       	add	r18, r18
    10f8:	33 1f       	adc	r19, r19
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	9c 81       	ldd	r25, Y+4	; 0x04
    10fe:	fc 01       	movw	r30, r24
    1100:	e2 0f       	add	r30, r18
    1102:	f3 1f       	adc	r31, r19
    1104:	81 81       	ldd	r24, Z+1	; 0x01
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	3f 83       	std	Y+7, r19	; 0x07
    110c:	2e 83       	std	Y+6, r18	; 0x06
    110e:	8e 81       	ldd	r24, Y+6	; 0x06
    1110:	9f 81       	ldd	r25, Y+7	; 0x07
    1112:	81 30       	cpi	r24, 0x01	; 1
    1114:	91 05       	cpc	r25, r1
    1116:	31 f0       	breq	.+12     	; 0x1124 <EXTI_enuInit+0x23a>
    1118:	2e 81       	ldd	r18, Y+6	; 0x06
    111a:	3f 81       	ldd	r19, Y+7	; 0x07
    111c:	22 30       	cpi	r18, 0x02	; 2
    111e:	31 05       	cpc	r19, r1
    1120:	59 f0       	breq	.+22     	; 0x1138 <EXTI_enuInit+0x24e>
    1122:	0d c0       	rjmp	.+26     	; 0x113e <EXTI_enuInit+0x254>
					{
					case RISING_EDGE:
						MCUCSR |= (1 << 6);
    1124:	a4 e5       	ldi	r26, 0x54	; 84
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e4 e5       	ldi	r30, 0x54	; 84
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	80 64       	ori	r24, 0x40	; 64
    1130:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	8a 83       	std	Y+2, r24	; 0x02
    1136:	05 c0       	rjmp	.+10     	; 0x1142 <EXTI_enuInit+0x258>
						break;
					case FALLING_EDGE:
						Local_enuErrorState = ES_OK;
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	8a 83       	std	Y+2, r24	; 0x02
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <EXTI_enuInit+0x258>
						break;
					default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
    113e:	83 e0       	ldi	r24, 0x03	; 3
    1140:	8a 83       	std	Y+2, r24	; 0x02


	if(NULL != Copy_pstrEXTIConfig)
	{
		u8 Local_u8Iter = 0;
		for(Local_u8Iter = 0; Local_u8Iter < 3; Local_u8Iter++)
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	8f 5f       	subi	r24, 0xFF	; 255
    1146:	89 83       	std	Y+1, r24	; 0x01
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	83 30       	cpi	r24, 0x03	; 3
    114c:	08 f4       	brcc	.+2      	; 0x1150 <EXTI_enuInit+0x266>
    114e:	e2 ce       	rjmp	.-572    	; 0xf14 <EXTI_enuInit+0x2a>
	{
		return ES_NULL_POINTER;
	}


	return Local_enuErrorState;
    1150:	3a 81       	ldd	r19, Y+2	; 0x02
    1152:	3d 83       	std	Y+5, r19	; 0x05
    1154:	02 c0       	rjmp	.+4      	; 0x115a <EXTI_enuInit+0x270>
			}
		}
	}
	else
	{
		return ES_NULL_POINTER;
    1156:	82 e0       	ldi	r24, 0x02	; 2
    1158:	8d 83       	std	Y+5, r24	; 0x05
    115a:	8d 81       	ldd	r24, Y+5	; 0x05
	}


	return Local_enuErrorState;
}
    115c:	2d 96       	adiw	r28, 0x0d	; 13
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <EXTI_enuSetSenceMode>:

ES_t EXTI_enuSetSenceMode(u8 Copy_u8EXTI_ID, u8 Copy_u8SenceLevel)
{
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	2c 97       	sbiw	r28, 0x0c	; 12
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	8a 83       	std	Y+2, r24	; 0x02
    1184:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1186:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8EXTI_ID < 3)
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	83 30       	cpi	r24, 0x03	; 3
    118c:	08 f0       	brcs	.+2      	; 0x1190 <EXTI_enuSetSenceMode+0x22>
    118e:	d5 c0       	rjmp	.+426    	; 0x133a <EXTI_enuSetSenceMode+0x1cc>
	{
		switch(Copy_u8EXTI_ID)
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	3c 87       	std	Y+12, r19	; 0x0c
    1198:	2b 87       	std	Y+11, r18	; 0x0b
    119a:	8b 85       	ldd	r24, Y+11	; 0x0b
    119c:	9c 85       	ldd	r25, Y+12	; 0x0c
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	91 05       	cpc	r25, r1
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <EXTI_enuSetSenceMode+0x38>
    11a4:	56 c0       	rjmp	.+172    	; 0x1252 <EXTI_enuSetSenceMode+0xe4>
    11a6:	2b 85       	ldd	r18, Y+11	; 0x0b
    11a8:	3c 85       	ldd	r19, Y+12	; 0x0c
    11aa:	22 30       	cpi	r18, 0x02	; 2
    11ac:	31 05       	cpc	r19, r1
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <EXTI_enuSetSenceMode+0x44>
    11b0:	9b c0       	rjmp	.+310    	; 0x12e8 <EXTI_enuSetSenceMode+0x17a>
    11b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    11b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    11b6:	00 97       	sbiw	r24, 0x00	; 0
    11b8:	09 f0       	breq	.+2      	; 0x11bc <EXTI_enuSetSenceMode+0x4e>
    11ba:	bc c0       	rjmp	.+376    	; 0x1334 <EXTI_enuSetSenceMode+0x1c6>
		{
		case 0:
			MCUCR &= ~(0x03 << 0);
    11bc:	a5 e5       	ldi	r26, 0x55	; 85
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e5 e5       	ldi	r30, 0x55	; 85
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	8c 7f       	andi	r24, 0xFC	; 252
    11c8:	8c 93       	st	X, r24
			//Check Sense Mode
			switch(Copy_u8SenceLevel)
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	3a 87       	std	Y+10, r19	; 0x0a
    11d2:	29 87       	std	Y+9, r18	; 0x09
    11d4:	89 85       	ldd	r24, Y+9	; 0x09
    11d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d8:	82 30       	cpi	r24, 0x02	; 2
    11da:	91 05       	cpc	r25, r1
    11dc:	01 f1       	breq	.+64     	; 0x121e <EXTI_enuSetSenceMode+0xb0>
    11de:	29 85       	ldd	r18, Y+9	; 0x09
    11e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    11e2:	23 30       	cpi	r18, 0x03	; 3
    11e4:	31 05       	cpc	r19, r1
    11e6:	34 f4       	brge	.+12     	; 0x11f4 <EXTI_enuSetSenceMode+0x86>
    11e8:	89 85       	ldd	r24, Y+9	; 0x09
    11ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	91 05       	cpc	r25, r1
    11f0:	61 f0       	breq	.+24     	; 0x120a <EXTI_enuSetSenceMode+0x9c>
    11f2:	2c c0       	rjmp	.+88     	; 0x124c <EXTI_enuSetSenceMode+0xde>
    11f4:	29 85       	ldd	r18, Y+9	; 0x09
    11f6:	3a 85       	ldd	r19, Y+10	; 0x0a
    11f8:	23 30       	cpi	r18, 0x03	; 3
    11fa:	31 05       	cpc	r19, r1
    11fc:	d1 f0       	breq	.+52     	; 0x1232 <EXTI_enuSetSenceMode+0xc4>
    11fe:	89 85       	ldd	r24, Y+9	; 0x09
    1200:	9a 85       	ldd	r25, Y+10	; 0x0a
    1202:	84 30       	cpi	r24, 0x04	; 4
    1204:	91 05       	cpc	r25, r1
    1206:	f9 f0       	breq	.+62     	; 0x1246 <EXTI_enuSetSenceMode+0xd8>
    1208:	21 c0       	rjmp	.+66     	; 0x124c <EXTI_enuSetSenceMode+0xde>
			{
			case RISING_EDGE:
				MCUCR |= (3 << 0);
    120a:	a5 e5       	ldi	r26, 0x55	; 85
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e5 e5       	ldi	r30, 0x55	; 85
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	83 60       	ori	r24, 0x03	; 3
    1216:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	89 83       	std	Y+1, r24	; 0x01
    121c:	8b c0       	rjmp	.+278    	; 0x1334 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case FALLING_EDGE:
				MCUCR |= (1 << 1);
    121e:	a5 e5       	ldi	r26, 0x55	; 85
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e5 e5       	ldi	r30, 0x55	; 85
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	82 60       	ori	r24, 0x02	; 2
    122a:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	81 c0       	rjmp	.+258    	; 0x1334 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case ANY_LOGIC:
				MCUCR |= (1 << 0);
    1232:	a5 e5       	ldi	r26, 0x55	; 85
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e5 e5       	ldi	r30, 0x55	; 85
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	81 60       	ori	r24, 0x01	; 1
    123e:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	89 83       	std	Y+1, r24	; 0x01
    1244:	77 c0       	rjmp	.+238    	; 0x1334 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case LOW_LEVEL:
				Local_enuErrorState = ES_OK;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	89 83       	std	Y+1, r24	; 0x01
    124a:	74 c0       	rjmp	.+232    	; 0x1334 <EXTI_enuSetSenceMode+0x1c6>
				break;
			default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    124c:	83 e0       	ldi	r24, 0x03	; 3
    124e:	89 83       	std	Y+1, r24	; 0x01
    1250:	71 c0       	rjmp	.+226    	; 0x1334 <EXTI_enuSetSenceMode+0x1c6>
			}
			break;

		case 1:
			MCUCR &= ~(3<<2); //Mask second 2 bits
    1252:	a5 e5       	ldi	r26, 0x55	; 85
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e5 e5       	ldi	r30, 0x55	; 85
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	83 7f       	andi	r24, 0xF3	; 243
    125e:	8c 93       	st	X, r24
			switch(Copy_u8SenceLevel)
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	38 87       	std	Y+8, r19	; 0x08
    1268:	2f 83       	std	Y+7, r18	; 0x07
    126a:	8f 81       	ldd	r24, Y+7	; 0x07
    126c:	98 85       	ldd	r25, Y+8	; 0x08
    126e:	82 30       	cpi	r24, 0x02	; 2
    1270:	91 05       	cpc	r25, r1
    1272:	01 f1       	breq	.+64     	; 0x12b4 <EXTI_enuSetSenceMode+0x146>
    1274:	2f 81       	ldd	r18, Y+7	; 0x07
    1276:	38 85       	ldd	r19, Y+8	; 0x08
    1278:	23 30       	cpi	r18, 0x03	; 3
    127a:	31 05       	cpc	r19, r1
    127c:	34 f4       	brge	.+12     	; 0x128a <EXTI_enuSetSenceMode+0x11c>
    127e:	8f 81       	ldd	r24, Y+7	; 0x07
    1280:	98 85       	ldd	r25, Y+8	; 0x08
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	91 05       	cpc	r25, r1
    1286:	61 f0       	breq	.+24     	; 0x12a0 <EXTI_enuSetSenceMode+0x132>
    1288:	2c c0       	rjmp	.+88     	; 0x12e2 <EXTI_enuSetSenceMode+0x174>
    128a:	2f 81       	ldd	r18, Y+7	; 0x07
    128c:	38 85       	ldd	r19, Y+8	; 0x08
    128e:	23 30       	cpi	r18, 0x03	; 3
    1290:	31 05       	cpc	r19, r1
    1292:	d1 f0       	breq	.+52     	; 0x12c8 <EXTI_enuSetSenceMode+0x15a>
    1294:	8f 81       	ldd	r24, Y+7	; 0x07
    1296:	98 85       	ldd	r25, Y+8	; 0x08
    1298:	84 30       	cpi	r24, 0x04	; 4
    129a:	91 05       	cpc	r25, r1
    129c:	f9 f0       	breq	.+62     	; 0x12dc <EXTI_enuSetSenceMode+0x16e>
    129e:	21 c0       	rjmp	.+66     	; 0x12e2 <EXTI_enuSetSenceMode+0x174>
			{
			case RISING_EDGE:
				MCUCR |= (3 << 2);
    12a0:	a5 e5       	ldi	r26, 0x55	; 85
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e5 e5       	ldi	r30, 0x55	; 85
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	8c 60       	ori	r24, 0x0C	; 12
    12ac:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	40 c0       	rjmp	.+128    	; 0x1334 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case FALLING_EDGE:
				MCUCR |= (1 << 3);
    12b4:	a5 e5       	ldi	r26, 0x55	; 85
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e5 e5       	ldi	r30, 0x55	; 85
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	88 60       	ori	r24, 0x08	; 8
    12c0:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	89 83       	std	Y+1, r24	; 0x01
    12c6:	36 c0       	rjmp	.+108    	; 0x1334 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case ANY_LOGIC:
				MCUCR |= (1 << 2);
    12c8:	a5 e5       	ldi	r26, 0x55	; 85
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e5 e5       	ldi	r30, 0x55	; 85
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	84 60       	ori	r24, 0x04	; 4
    12d4:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	89 83       	std	Y+1, r24	; 0x01
    12da:	2c c0       	rjmp	.+88     	; 0x1334 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case LOW_LEVEL:
				Local_enuErrorState = ES_OK;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	89 83       	std	Y+1, r24	; 0x01
    12e0:	29 c0       	rjmp	.+82     	; 0x1334 <EXTI_enuSetSenceMode+0x1c6>
				break;
			default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    12e2:	83 e0       	ldi	r24, 0x03	; 3
    12e4:	89 83       	std	Y+1, r24	; 0x01
    12e6:	26 c0       	rjmp	.+76     	; 0x1334 <EXTI_enuSetSenceMode+0x1c6>
			}
			break;

		case 2:
			MCUCSR &= ~(1<<6); //Mask its control sense bit
    12e8:	a4 e5       	ldi	r26, 0x54	; 84
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e4 e5       	ldi	r30, 0x54	; 84
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	8f 7b       	andi	r24, 0xBF	; 191
    12f4:	8c 93       	st	X, r24

			switch(Copy_u8SenceLevel)
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	3e 83       	std	Y+6, r19	; 0x06
    12fe:	2d 83       	std	Y+5, r18	; 0x05
    1300:	8d 81       	ldd	r24, Y+5	; 0x05
    1302:	9e 81       	ldd	r25, Y+6	; 0x06
    1304:	81 30       	cpi	r24, 0x01	; 1
    1306:	91 05       	cpc	r25, r1
    1308:	31 f0       	breq	.+12     	; 0x1316 <EXTI_enuSetSenceMode+0x1a8>
    130a:	2d 81       	ldd	r18, Y+5	; 0x05
    130c:	3e 81       	ldd	r19, Y+6	; 0x06
    130e:	22 30       	cpi	r18, 0x02	; 2
    1310:	31 05       	cpc	r19, r1
    1312:	59 f0       	breq	.+22     	; 0x132a <EXTI_enuSetSenceMode+0x1bc>
    1314:	0d c0       	rjmp	.+26     	; 0x1330 <EXTI_enuSetSenceMode+0x1c2>
			{
			case RISING_EDGE:
				MCUCSR |= (1 << 6);
    1316:	a4 e5       	ldi	r26, 0x54	; 84
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e4 e5       	ldi	r30, 0x54	; 84
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	80 64       	ori	r24, 0x40	; 64
    1322:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	89 83       	std	Y+1, r24	; 0x01
    1328:	05 c0       	rjmp	.+10     	; 0x1334 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case FALLING_EDGE:
				Local_enuErrorState = ES_OK;
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	89 83       	std	Y+1, r24	; 0x01
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <EXTI_enuSetSenceMode+0x1c6>
				break;
			default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    1330:	83 e0       	ldi	r24, 0x03	; 3
    1332:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		return ES_OUT_OF_RANGE;
	}

	return Local_enuErrorState;
    1334:	39 81       	ldd	r19, Y+1	; 0x01
    1336:	3c 83       	std	Y+4, r19	; 0x04
    1338:	02 c0       	rjmp	.+4      	; 0x133e <EXTI_enuSetSenceMode+0x1d0>

		}
	}
	else
	{
		return ES_OUT_OF_RANGE;
    133a:	83 e0       	ldi	r24, 0x03	; 3
    133c:	8c 83       	std	Y+4, r24	; 0x04
    133e:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return Local_enuErrorState;
}
    1340:	2c 96       	adiw	r28, 0x0c	; 12
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	cf 91       	pop	r28
    134e:	df 91       	pop	r29
    1350:	08 95       	ret

00001352 <EXTI_enuEnableINT>:

ES_t EXTI_enuEnableINT(u8 Copy_u8EXTI_ID)
{
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	00 d0       	rcall	.+0      	; 0x1358 <EXTI_enuEnableINT+0x6>
    1358:	00 d0       	rcall	.+0      	; 0x135a <EXTI_enuEnableINT+0x8>
    135a:	0f 92       	push	r0
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1362:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8EXTI_ID < 3)
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	83 30       	cpi	r24, 0x03	; 3
    1368:	98 f5       	brcc	.+102    	; 0x13d0 <EXTI_enuEnableINT+0x7e>
	{
		switch(Copy_u8EXTI_ID)
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	3d 83       	std	Y+5, r19	; 0x05
    1372:	2c 83       	std	Y+4, r18	; 0x04
    1374:	8c 81       	ldd	r24, Y+4	; 0x04
    1376:	9d 81       	ldd	r25, Y+5	; 0x05
    1378:	81 30       	cpi	r24, 0x01	; 1
    137a:	91 05       	cpc	r25, r1
    137c:	99 f0       	breq	.+38     	; 0x13a4 <EXTI_enuEnableINT+0x52>
    137e:	2c 81       	ldd	r18, Y+4	; 0x04
    1380:	3d 81       	ldd	r19, Y+5	; 0x05
    1382:	22 30       	cpi	r18, 0x02	; 2
    1384:	31 05       	cpc	r19, r1
    1386:	c1 f0       	breq	.+48     	; 0x13b8 <EXTI_enuEnableINT+0x66>
    1388:	8c 81       	ldd	r24, Y+4	; 0x04
    138a:	9d 81       	ldd	r25, Y+5	; 0x05
    138c:	00 97       	sbiw	r24, 0x00	; 0
    138e:	e9 f4       	brne	.+58     	; 0x13ca <EXTI_enuEnableINT+0x78>
		{
		case 0:
			GICR |= (1<<6);
    1390:	ab e5       	ldi	r26, 0x5B	; 91
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	eb e5       	ldi	r30, 0x5B	; 91
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	80 64       	ori	r24, 0x40	; 64
    139c:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	13 c0       	rjmp	.+38     	; 0x13ca <EXTI_enuEnableINT+0x78>
			break;

		case 1:
			GICR |= (1<<7);
    13a4:	ab e5       	ldi	r26, 0x5B	; 91
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	eb e5       	ldi	r30, 0x5B	; 91
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	80 68       	ori	r24, 0x80	; 128
    13b0:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	89 83       	std	Y+1, r24	; 0x01
    13b6:	09 c0       	rjmp	.+18     	; 0x13ca <EXTI_enuEnableINT+0x78>
			break;

		case 2:
			GICR |= (1<<5);
    13b8:	ab e5       	ldi	r26, 0x5B	; 91
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	eb e5       	ldi	r30, 0x5B	; 91
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	80 62       	ori	r24, 0x20	; 32
    13c4:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		return ES_OUT_OF_RANGE;
	}

	return Local_enuErrorState;
    13ca:	99 81       	ldd	r25, Y+1	; 0x01
    13cc:	9b 83       	std	Y+3, r25	; 0x03
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <EXTI_enuEnableINT+0x82>
			break;
		}
	}
	else
	{
		return ES_OUT_OF_RANGE;
    13d0:	23 e0       	ldi	r18, 0x03	; 3
    13d2:	2b 83       	std	Y+3, r18	; 0x03
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
	}

	return Local_enuErrorState;
}
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <EXTI_enuDisableINT>:

ES_t EXTI_enuDisableINT(u8 Copy_u8EXTI_ID)
{
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <EXTI_enuDisableINT+0x6>
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <EXTI_enuDisableINT+0x8>
    13ee:	0f 92       	push	r0
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    13f6:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8EXTI_ID < 3)
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	83 30       	cpi	r24, 0x03	; 3
    13fc:	98 f5       	brcc	.+102    	; 0x1464 <EXTI_enuDisableINT+0x7e>
	{
		switch(Copy_u8EXTI_ID)
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	3d 83       	std	Y+5, r19	; 0x05
    1406:	2c 83       	std	Y+4, r18	; 0x04
    1408:	8c 81       	ldd	r24, Y+4	; 0x04
    140a:	9d 81       	ldd	r25, Y+5	; 0x05
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	91 05       	cpc	r25, r1
    1410:	99 f0       	breq	.+38     	; 0x1438 <EXTI_enuDisableINT+0x52>
    1412:	2c 81       	ldd	r18, Y+4	; 0x04
    1414:	3d 81       	ldd	r19, Y+5	; 0x05
    1416:	22 30       	cpi	r18, 0x02	; 2
    1418:	31 05       	cpc	r19, r1
    141a:	c1 f0       	breq	.+48     	; 0x144c <EXTI_enuDisableINT+0x66>
    141c:	8c 81       	ldd	r24, Y+4	; 0x04
    141e:	9d 81       	ldd	r25, Y+5	; 0x05
    1420:	00 97       	sbiw	r24, 0x00	; 0
    1422:	e9 f4       	brne	.+58     	; 0x145e <EXTI_enuDisableINT+0x78>
		{
		case 0:
			GICR &= ~(1<<6);
    1424:	ab e5       	ldi	r26, 0x5B	; 91
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	eb e5       	ldi	r30, 0x5B	; 91
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	8f 7b       	andi	r24, 0xBF	; 191
    1430:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	89 83       	std	Y+1, r24	; 0x01
    1436:	13 c0       	rjmp	.+38     	; 0x145e <EXTI_enuDisableINT+0x78>
			break;

		case 1:
			GICR &= ~(1<<7);
    1438:	ab e5       	ldi	r26, 0x5B	; 91
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	eb e5       	ldi	r30, 0x5B	; 91
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	8f 77       	andi	r24, 0x7F	; 127
    1444:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	89 83       	std	Y+1, r24	; 0x01
    144a:	09 c0       	rjmp	.+18     	; 0x145e <EXTI_enuDisableINT+0x78>
			break;

		case 2:
			GICR &= ~(1<<5);
    144c:	ab e5       	ldi	r26, 0x5B	; 91
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	eb e5       	ldi	r30, 0x5B	; 91
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	8f 7d       	andi	r24, 0xDF	; 223
    1458:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		return ES_OUT_OF_RANGE;
	}

	return Local_enuErrorState;
    145e:	99 81       	ldd	r25, Y+1	; 0x01
    1460:	9b 83       	std	Y+3, r25	; 0x03
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <EXTI_enuDisableINT+0x82>
			break;
		}
	}
	else
	{
		return ES_OUT_OF_RANGE;
    1464:	23 e0       	ldi	r18, 0x03	; 3
    1466:	2b 83       	std	Y+3, r18	; 0x03
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
	}

	return Local_enuErrorState;
}
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	cf 91       	pop	r28
    1476:	df 91       	pop	r29
    1478:	08 95       	ret

0000147a <EXTI_enuCallBack>:

ES_t EXTI_enuCallBack(void (*Copy_pfunAppFun)(void), void * Copy_pvoidParameter, u8 Copy_u8EXTI_ID)
{
    147a:	df 93       	push	r29
    147c:	cf 93       	push	r28
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	27 97       	sbiw	r28, 0x07	; 7
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	de bf       	out	0x3e, r29	; 62
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	cd bf       	out	0x3d, r28	; 61
    148e:	9b 83       	std	Y+3, r25	; 0x03
    1490:	8a 83       	std	Y+2, r24	; 0x02
    1492:	7d 83       	std	Y+5, r23	; 0x05
    1494:	6c 83       	std	Y+4, r22	; 0x04
    1496:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
    1498:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8EXTI_ID < 3)
    149a:	8e 81       	ldd	r24, Y+6	; 0x06
    149c:	83 30       	cpi	r24, 0x03	; 3
    149e:	20 f5       	brcc	.+72     	; 0x14e8 <EXTI_enuCallBack+0x6e>
	{
		if(Copy_pfunAppFun != NULL)
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	9b 81       	ldd	r25, Y+3	; 0x03
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	c9 f0       	breq	.+50     	; 0x14da <EXTI_enuCallBack+0x60>
		{
			EXTI_ApfunINTFun[Copy_u8EXTI_ID] = Copy_pfunAppFun;
    14a8:	8e 81       	ldd	r24, Y+6	; 0x06
    14aa:	88 2f       	mov	r24, r24
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	2a 81       	ldd	r18, Y+2	; 0x02
    14b0:	3b 81       	ldd	r19, Y+3	; 0x03
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	fc 01       	movw	r30, r24
    14b8:	e8 51       	subi	r30, 0x18	; 24
    14ba:	fe 4f       	sbci	r31, 0xFE	; 254
    14bc:	31 83       	std	Z+1, r19	; 0x01
    14be:	20 83       	st	Z, r18
			EXTI_ApvoidGenericparameter[Copy_u8EXTI_ID] = Copy_pvoidParameter;
    14c0:	8e 81       	ldd	r24, Y+6	; 0x06
    14c2:	88 2f       	mov	r24, r24
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	fc 01       	movw	r30, r24
    14cc:	e2 51       	subi	r30, 0x12	; 18
    14ce:	fe 4f       	sbci	r31, 0xFE	; 254
    14d0:	8c 81       	ldd	r24, Y+4	; 0x04
    14d2:	9d 81       	ldd	r25, Y+5	; 0x05
    14d4:	91 83       	std	Z+1, r25	; 0x01
    14d6:	80 83       	st	Z, r24
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <EXTI_enuCallBack+0x64>
		}
		else
		{
			Local_enuErrorState = ES_NULL_POINTER;
    14da:	82 e0       	ldi	r24, 0x02	; 2
    14dc:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		return ES_OUT_OF_RANGE;
	}

	Local_enuErrorState = ES_OK;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	8f 83       	std	Y+7, r24	; 0x07
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <EXTI_enuCallBack+0x72>
			Local_enuErrorState = ES_NULL_POINTER;
		}
	}
	else
	{
		return ES_OUT_OF_RANGE;
    14e8:	83 e0       	ldi	r24, 0x03	; 3
    14ea:	8f 83       	std	Y+7, r24	; 0x07
    14ec:	8f 81       	ldd	r24, Y+7	; 0x07
	}

	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
}
    14ee:	27 96       	adiw	r28, 0x07	; 7
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	f8 94       	cli
    14f4:	de bf       	out	0x3e, r29	; 62
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	cd bf       	out	0x3d, r28	; 61
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	08 95       	ret

00001500 <__vector_1>:

ISR(VECT_INT0)
{
    1500:	1f 92       	push	r1
    1502:	0f 92       	push	r0
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	0f 92       	push	r0
    1508:	11 24       	eor	r1, r1
    150a:	2f 93       	push	r18
    150c:	3f 93       	push	r19
    150e:	4f 93       	push	r20
    1510:	5f 93       	push	r21
    1512:	6f 93       	push	r22
    1514:	7f 93       	push	r23
    1516:	8f 93       	push	r24
    1518:	9f 93       	push	r25
    151a:	af 93       	push	r26
    151c:	bf 93       	push	r27
    151e:	ef 93       	push	r30
    1520:	ff 93       	push	r31
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfunINTFun[0] != NULL)
    152a:	80 91 e8 01 	lds	r24, 0x01E8
    152e:	90 91 e9 01 	lds	r25, 0x01E9
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	49 f0       	breq	.+18     	; 0x1548 <__vector_1+0x48>
	{
		/* Two approaches working well*/
		(*EXTI_ApfunINTFun[0])(EXTI_ApvoidGenericparameter[0]);
    1536:	e0 91 e8 01 	lds	r30, 0x01E8
    153a:	f0 91 e9 01 	lds	r31, 0x01E9
    153e:	80 91 ee 01 	lds	r24, 0x01EE
    1542:	90 91 ef 01 	lds	r25, 0x01EF
    1546:	09 95       	icall
		//(*EXTI_ApfunINTFun[0])(EXTI_ApvoidGenericparameter[0]);
	}
}
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	ff 91       	pop	r31
    154e:	ef 91       	pop	r30
    1550:	bf 91       	pop	r27
    1552:	af 91       	pop	r26
    1554:	9f 91       	pop	r25
    1556:	8f 91       	pop	r24
    1558:	7f 91       	pop	r23
    155a:	6f 91       	pop	r22
    155c:	5f 91       	pop	r21
    155e:	4f 91       	pop	r20
    1560:	3f 91       	pop	r19
    1562:	2f 91       	pop	r18
    1564:	0f 90       	pop	r0
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	0f 90       	pop	r0
    156a:	1f 90       	pop	r1
    156c:	18 95       	reti

0000156e <__vector_2>:

ISR(VECT_INT1)
{
    156e:	1f 92       	push	r1
    1570:	0f 92       	push	r0
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	0f 92       	push	r0
    1576:	11 24       	eor	r1, r1
    1578:	2f 93       	push	r18
    157a:	3f 93       	push	r19
    157c:	4f 93       	push	r20
    157e:	5f 93       	push	r21
    1580:	6f 93       	push	r22
    1582:	7f 93       	push	r23
    1584:	8f 93       	push	r24
    1586:	9f 93       	push	r25
    1588:	af 93       	push	r26
    158a:	bf 93       	push	r27
    158c:	ef 93       	push	r30
    158e:	ff 93       	push	r31
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfunINTFun[1] != NULL)
    1598:	80 91 ea 01 	lds	r24, 0x01EA
    159c:	90 91 eb 01 	lds	r25, 0x01EB
    15a0:	00 97       	sbiw	r24, 0x00	; 0
    15a2:	49 f0       	breq	.+18     	; 0x15b6 <__vector_2+0x48>
	{
		(*EXTI_ApfunINTFun[1])(EXTI_ApvoidGenericparameter[1]);
    15a4:	e0 91 ea 01 	lds	r30, 0x01EA
    15a8:	f0 91 eb 01 	lds	r31, 0x01EB
    15ac:	80 91 f0 01 	lds	r24, 0x01F0
    15b0:	90 91 f1 01 	lds	r25, 0x01F1
    15b4:	09 95       	icall
	}
}
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	ff 91       	pop	r31
    15bc:	ef 91       	pop	r30
    15be:	bf 91       	pop	r27
    15c0:	af 91       	pop	r26
    15c2:	9f 91       	pop	r25
    15c4:	8f 91       	pop	r24
    15c6:	7f 91       	pop	r23
    15c8:	6f 91       	pop	r22
    15ca:	5f 91       	pop	r21
    15cc:	4f 91       	pop	r20
    15ce:	3f 91       	pop	r19
    15d0:	2f 91       	pop	r18
    15d2:	0f 90       	pop	r0
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	0f 90       	pop	r0
    15d8:	1f 90       	pop	r1
    15da:	18 95       	reti

000015dc <__vector_3>:

ISR(VECT_INT2)
{
    15dc:	1f 92       	push	r1
    15de:	0f 92       	push	r0
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	0f 92       	push	r0
    15e4:	11 24       	eor	r1, r1
    15e6:	2f 93       	push	r18
    15e8:	3f 93       	push	r19
    15ea:	4f 93       	push	r20
    15ec:	5f 93       	push	r21
    15ee:	6f 93       	push	r22
    15f0:	7f 93       	push	r23
    15f2:	8f 93       	push	r24
    15f4:	9f 93       	push	r25
    15f6:	af 93       	push	r26
    15f8:	bf 93       	push	r27
    15fa:	ef 93       	push	r30
    15fc:	ff 93       	push	r31
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfunINTFun[2] != NULL)
    1606:	80 91 ec 01 	lds	r24, 0x01EC
    160a:	90 91 ed 01 	lds	r25, 0x01ED
    160e:	00 97       	sbiw	r24, 0x00	; 0
    1610:	49 f0       	breq	.+18     	; 0x1624 <__vector_3+0x48>
	{
		(*EXTI_ApfunINTFun[2])(EXTI_ApvoidGenericparameter[2]);
    1612:	e0 91 ec 01 	lds	r30, 0x01EC
    1616:	f0 91 ed 01 	lds	r31, 0x01ED
    161a:	80 91 f2 01 	lds	r24, 0x01F2
    161e:	90 91 f3 01 	lds	r25, 0x01F3
    1622:	09 95       	icall
	}
}
    1624:	cf 91       	pop	r28
    1626:	df 91       	pop	r29
    1628:	ff 91       	pop	r31
    162a:	ef 91       	pop	r30
    162c:	bf 91       	pop	r27
    162e:	af 91       	pop	r26
    1630:	9f 91       	pop	r25
    1632:	8f 91       	pop	r24
    1634:	7f 91       	pop	r23
    1636:	6f 91       	pop	r22
    1638:	5f 91       	pop	r21
    163a:	4f 91       	pop	r20
    163c:	3f 91       	pop	r19
    163e:	2f 91       	pop	r18
    1640:	0f 90       	pop	r0
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	0f 90       	pop	r0
    1646:	1f 90       	pop	r1
    1648:	18 95       	reti

0000164a <DIO_enuInit>:
#include "DIO_config.h"



ES_t DIO_enuInit(void)
{
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	0f 92       	push	r0
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1654:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR, PA_PIN6_DIR, PA_PIN5_DIR, PA_PIN4_DIR, PA_PIN3_DIR, PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
    1656:	ea e3       	ldi	r30, 0x3A	; 58
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	8f ef       	ldi	r24, 0xFF	; 255
    165c:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR, PB_PIN6_DIR, PB_PIN5_DIR, PB_PIN4_DIR, PB_PIN3_DIR, PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
    165e:	e7 e3       	ldi	r30, 0x37	; 55
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	8f ef       	ldi	r24, 0xFF	; 255
    1664:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR, PC_PIN6_DIR, PC_PIN5_DIR, PC_PIN4_DIR, PC_PIN3_DIR, PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
    1666:	e4 e3       	ldi	r30, 0x34	; 52
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	8a ea       	ldi	r24, 0xAA	; 170
    166c:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR, PD_PIN6_DIR, PD_PIN5_DIR, PD_PIN4_DIR, PD_PIN3_DIR, PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
    166e:	e1 e3       	ldi	r30, 0x31	; 49
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	8a ea       	ldi	r24, 0xAA	; 170
    1674:	80 83       	st	Z, r24

	PORTA = CONC(PA_PIN7_VAL, PA_PIN6_VAL, PA_PIN5_VAL, PA_PIN4_VAL, PA_PIN3_VAL, PA_PIN2_VAL, PA_PIN1_VAL, PA_PIN0_VAL);
    1676:	eb e3       	ldi	r30, 0x3B	; 59
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	10 82       	st	Z, r1
	PORTB = CONC(PB_PIN7_VAL, PB_PIN6_VAL, PB_PIN5_VAL, PB_PIN4_VAL, PB_PIN3_VAL, PB_PIN2_VAL, PB_PIN1_VAL, PB_PIN0_VAL);
    167c:	e8 e3       	ldi	r30, 0x38	; 56
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	10 82       	st	Z, r1
	PORTC = CONC(PC_PIN7_VAL, PC_PIN6_VAL, PC_PIN5_VAL, PC_PIN4_VAL, PC_PIN3_VAL, PC_PIN2_VAL, PC_PIN1_VAL, PC_PIN0_VAL);
    1682:	e5 e3       	ldi	r30, 0x35	; 53
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	86 e6       	ldi	r24, 0x66	; 102
    1688:	80 83       	st	Z, r24
	PORTD = CONC(PD_PIN7_VAL, PD_PIN6_VAL, PD_PIN5_VAL, PD_PIN4_VAL, PD_PIN3_VAL, PD_PIN2_VAL, PD_PIN1_VAL, PD_PIN0_VAL);
    168a:	e2 e3       	ldi	r30, 0x32	; 50
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	86 e6       	ldi	r24, 0x66	; 102
    1690:	80 83       	st	Z, r24

	Local_enuErrorState = ES_OK;
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1696:	89 81       	ldd	r24, Y+1	; 0x01
}
    1698:	0f 90       	pop	r0
    169a:	cf 91       	pop	r28
    169c:	df 91       	pop	r29
    169e:	08 95       	ret

000016a0 <DIO_enuSetPortDirection>:


ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    16a0:	df 93       	push	r29
    16a2:	cf 93       	push	r28
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <DIO_enuSetPortDirection+0x6>
    16a6:	00 d0       	rcall	.+0      	; 0x16a8 <DIO_enuSetPortDirection+0x8>
    16a8:	0f 92       	push	r0
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	8a 83       	std	Y+2, r24	; 0x02
    16b0:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    16b2:	19 82       	std	Y+1, r1	; 0x01

	/*Range Check*/
	if(Copy_u8PortID <= DIO_PORTD)
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	84 30       	cpi	r24, 0x04	; 4
    16b8:	a8 f5       	brcc	.+106    	; 0x1724 <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	3d 83       	std	Y+5, r19	; 0x05
    16c2:	2c 83       	std	Y+4, r18	; 0x04
    16c4:	8c 81       	ldd	r24, Y+4	; 0x04
    16c6:	9d 81       	ldd	r25, Y+5	; 0x05
    16c8:	81 30       	cpi	r24, 0x01	; 1
    16ca:	91 05       	cpc	r25, r1
    16cc:	d1 f0       	breq	.+52     	; 0x1702 <DIO_enuSetPortDirection+0x62>
    16ce:	2c 81       	ldd	r18, Y+4	; 0x04
    16d0:	3d 81       	ldd	r19, Y+5	; 0x05
    16d2:	22 30       	cpi	r18, 0x02	; 2
    16d4:	31 05       	cpc	r19, r1
    16d6:	2c f4       	brge	.+10     	; 0x16e2 <DIO_enuSetPortDirection+0x42>
    16d8:	8c 81       	ldd	r24, Y+4	; 0x04
    16da:	9d 81       	ldd	r25, Y+5	; 0x05
    16dc:	00 97       	sbiw	r24, 0x00	; 0
    16de:	61 f0       	breq	.+24     	; 0x16f8 <DIO_enuSetPortDirection+0x58>
    16e0:	1e c0       	rjmp	.+60     	; 0x171e <DIO_enuSetPortDirection+0x7e>
    16e2:	2c 81       	ldd	r18, Y+4	; 0x04
    16e4:	3d 81       	ldd	r19, Y+5	; 0x05
    16e6:	22 30       	cpi	r18, 0x02	; 2
    16e8:	31 05       	cpc	r19, r1
    16ea:	81 f0       	breq	.+32     	; 0x170c <DIO_enuSetPortDirection+0x6c>
    16ec:	8c 81       	ldd	r24, Y+4	; 0x04
    16ee:	9d 81       	ldd	r25, Y+5	; 0x05
    16f0:	83 30       	cpi	r24, 0x03	; 3
    16f2:	91 05       	cpc	r25, r1
    16f4:	81 f0       	breq	.+32     	; 0x1716 <DIO_enuSetPortDirection+0x76>
    16f6:	13 c0       	rjmp	.+38     	; 0x171e <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
    16f8:	ea e3       	ldi	r30, 0x3A	; 58
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	80 83       	st	Z, r24
    1700:	0e c0       	rjmp	.+28     	; 0x171e <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
    1702:	e7 e3       	ldi	r30, 0x37	; 55
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	80 83       	st	Z, r24
    170a:	09 c0       	rjmp	.+18     	; 0x171e <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
    170c:	e4 e3       	ldi	r30, 0x34	; 52
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	80 83       	st	Z, r24
    1714:	04 c0       	rjmp	.+8      	; 0x171e <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
    1716:	e1 e3       	ldi	r30, 0x31	; 49
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1724:	83 e0       	ldi	r24, 0x03	; 3
    1726:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1728:	89 81       	ldd	r24, Y+1	; 0x01
}
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <DIO_enuSetPortValue>:


ES_t DIO_enuSetPortValue(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	00 d0       	rcall	.+0      	; 0x1740 <DIO_enuSetPortValue+0x6>
    1740:	00 d0       	rcall	.+0      	; 0x1742 <DIO_enuSetPortValue+0x8>
    1742:	0f 92       	push	r0
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	8a 83       	std	Y+2, r24	; 0x02
    174a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    174c:	19 82       	std	Y+1, r1	; 0x01

	/* Range Check */
	if(Copy_u8PortID <= DIO_PORTD)
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	84 30       	cpi	r24, 0x04	; 4
    1752:	a8 f5       	brcc	.+106    	; 0x17be <DIO_enuSetPortValue+0x84>
	{
		switch(Copy_u8PortID)
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	28 2f       	mov	r18, r24
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	3d 83       	std	Y+5, r19	; 0x05
    175c:	2c 83       	std	Y+4, r18	; 0x04
    175e:	8c 81       	ldd	r24, Y+4	; 0x04
    1760:	9d 81       	ldd	r25, Y+5	; 0x05
    1762:	81 30       	cpi	r24, 0x01	; 1
    1764:	91 05       	cpc	r25, r1
    1766:	d1 f0       	breq	.+52     	; 0x179c <DIO_enuSetPortValue+0x62>
    1768:	2c 81       	ldd	r18, Y+4	; 0x04
    176a:	3d 81       	ldd	r19, Y+5	; 0x05
    176c:	22 30       	cpi	r18, 0x02	; 2
    176e:	31 05       	cpc	r19, r1
    1770:	2c f4       	brge	.+10     	; 0x177c <DIO_enuSetPortValue+0x42>
    1772:	8c 81       	ldd	r24, Y+4	; 0x04
    1774:	9d 81       	ldd	r25, Y+5	; 0x05
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	61 f0       	breq	.+24     	; 0x1792 <DIO_enuSetPortValue+0x58>
    177a:	1e c0       	rjmp	.+60     	; 0x17b8 <DIO_enuSetPortValue+0x7e>
    177c:	2c 81       	ldd	r18, Y+4	; 0x04
    177e:	3d 81       	ldd	r19, Y+5	; 0x05
    1780:	22 30       	cpi	r18, 0x02	; 2
    1782:	31 05       	cpc	r19, r1
    1784:	81 f0       	breq	.+32     	; 0x17a6 <DIO_enuSetPortValue+0x6c>
    1786:	8c 81       	ldd	r24, Y+4	; 0x04
    1788:	9d 81       	ldd	r25, Y+5	; 0x05
    178a:	83 30       	cpi	r24, 0x03	; 3
    178c:	91 05       	cpc	r25, r1
    178e:	81 f0       	breq	.+32     	; 0x17b0 <DIO_enuSetPortValue+0x76>
    1790:	13 c0       	rjmp	.+38     	; 0x17b8 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA = Copy_u8Value;
    1792:	eb e3       	ldi	r30, 0x3B	; 59
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	80 83       	st	Z, r24
    179a:	0e c0       	rjmp	.+28     	; 0x17b8 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8Value;
    179c:	e8 e3       	ldi	r30, 0x38	; 56
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	80 83       	st	Z, r24
    17a4:	09 c0       	rjmp	.+18     	; 0x17b8 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8Value;
    17a6:	e5 e3       	ldi	r30, 0x35	; 53
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	80 83       	st	Z, r24
    17ae:	04 c0       	rjmp	.+8      	; 0x17b8 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = Copy_u8Value;
    17b0:	e2 e3       	ldi	r30, 0x32	; 50
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	89 83       	std	Y+1, r24	; 0x01
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    17be:	83 e0       	ldi	r24, 0x03	; 3
    17c0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	08 95       	ret

000017d4 <DIO_enuTogPortValue>:


ES_t DIO_enuTogPortValue(u8 Copy_u8PortID)
{
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	00 d0       	rcall	.+0      	; 0x17da <DIO_enuTogPortValue+0x6>
    17da:	00 d0       	rcall	.+0      	; 0x17dc <DIO_enuTogPortValue+0x8>
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
    17e0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    17e2:	19 82       	std	Y+1, r1	; 0x01

	/* Range Check */
	if(Copy_u8PortID <= DIO_PORTD)
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	84 30       	cpi	r24, 0x04	; 4
    17e8:	08 f0       	brcs	.+2      	; 0x17ec <DIO_enuTogPortValue+0x18>
    17ea:	41 c0       	rjmp	.+130    	; 0x186e <DIO_enuTogPortValue+0x9a>
	{
		switch(Copy_u8PortID)
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	3c 83       	std	Y+4, r19	; 0x04
    17f4:	2b 83       	std	Y+3, r18	; 0x03
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	9c 81       	ldd	r25, Y+4	; 0x04
    17fa:	81 30       	cpi	r24, 0x01	; 1
    17fc:	91 05       	cpc	r25, r1
    17fe:	e9 f0       	breq	.+58     	; 0x183a <DIO_enuTogPortValue+0x66>
    1800:	2b 81       	ldd	r18, Y+3	; 0x03
    1802:	3c 81       	ldd	r19, Y+4	; 0x04
    1804:	22 30       	cpi	r18, 0x02	; 2
    1806:	31 05       	cpc	r19, r1
    1808:	2c f4       	brge	.+10     	; 0x1814 <DIO_enuTogPortValue+0x40>
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	9c 81       	ldd	r25, Y+4	; 0x04
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	61 f0       	breq	.+24     	; 0x182a <DIO_enuTogPortValue+0x56>
    1812:	2a c0       	rjmp	.+84     	; 0x1868 <DIO_enuTogPortValue+0x94>
    1814:	2b 81       	ldd	r18, Y+3	; 0x03
    1816:	3c 81       	ldd	r19, Y+4	; 0x04
    1818:	22 30       	cpi	r18, 0x02	; 2
    181a:	31 05       	cpc	r19, r1
    181c:	b1 f0       	breq	.+44     	; 0x184a <DIO_enuTogPortValue+0x76>
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	9c 81       	ldd	r25, Y+4	; 0x04
    1822:	83 30       	cpi	r24, 0x03	; 3
    1824:	91 05       	cpc	r25, r1
    1826:	c9 f0       	breq	.+50     	; 0x185a <DIO_enuTogPortValue+0x86>
    1828:	1f c0       	rjmp	.+62     	; 0x1868 <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA = ~PORTA;
    182a:	ab e3       	ldi	r26, 0x3B	; 59
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	eb e3       	ldi	r30, 0x3B	; 59
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	80 95       	com	r24
    1836:	8c 93       	st	X, r24
    1838:	17 c0       	rjmp	.+46     	; 0x1868 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB = ~PORTB;
    183a:	a8 e3       	ldi	r26, 0x38	; 56
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e8 e3       	ldi	r30, 0x38	; 56
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	80 95       	com	r24
    1846:	8c 93       	st	X, r24
    1848:	0f c0       	rjmp	.+30     	; 0x1868 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC = ~PORTC;
    184a:	a5 e3       	ldi	r26, 0x35	; 53
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e5 e3       	ldi	r30, 0x35	; 53
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	80 95       	com	r24
    1856:	8c 93       	st	X, r24
    1858:	07 c0       	rjmp	.+14     	; 0x1868 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD = ~PORTD;
    185a:	a2 e3       	ldi	r26, 0x32	; 50
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e2 e3       	ldi	r30, 0x32	; 50
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	80 95       	com	r24
    1866:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	89 83       	std	Y+1, r24	; 0x01
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    186e:	83 e0       	ldi	r24, 0x03	; 3
    1870:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    1872:	89 81       	ldd	r24, Y+1	; 0x01
}
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <DIO_enuGetPortValue>:


ES_t DIO_enuGetPortValue(u8 Copy_u8PortID, u8 * Copy_pu8Value)
{
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	00 d0       	rcall	.+0      	; 0x1888 <DIO_enuGetPortValue+0x6>
    1888:	00 d0       	rcall	.+0      	; 0x188a <DIO_enuGetPortValue+0x8>
    188a:	00 d0       	rcall	.+0      	; 0x188c <DIO_enuGetPortValue+0xa>
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	8a 83       	std	Y+2, r24	; 0x02
    1892:	7c 83       	std	Y+4, r23	; 0x04
    1894:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1896:	19 82       	std	Y+1, r1	; 0x01

	/* Check if wild pointer */
	if(Copy_pu8Value != NULL)
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	9c 81       	ldd	r25, Y+4	; 0x04
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	09 f4       	brne	.+2      	; 0x18a2 <DIO_enuGetPortValue+0x20>
    18a0:	43 c0       	rjmp	.+134    	; 0x1928 <DIO_enuGetPortValue+0xa6>
	{
		/* Change Range */
		if(Copy_u8PortID <= DIO_PORTD)
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	84 30       	cpi	r24, 0x04	; 4
    18a6:	e8 f5       	brcc	.+122    	; 0x1922 <DIO_enuGetPortValue+0xa0>
		{
			switch(Copy_u8PortID)
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	3e 83       	std	Y+6, r19	; 0x06
    18b0:	2d 83       	std	Y+5, r18	; 0x05
    18b2:	8d 81       	ldd	r24, Y+5	; 0x05
    18b4:	9e 81       	ldd	r25, Y+6	; 0x06
    18b6:	81 30       	cpi	r24, 0x01	; 1
    18b8:	91 05       	cpc	r25, r1
    18ba:	e1 f0       	breq	.+56     	; 0x18f4 <DIO_enuGetPortValue+0x72>
    18bc:	2d 81       	ldd	r18, Y+5	; 0x05
    18be:	3e 81       	ldd	r19, Y+6	; 0x06
    18c0:	22 30       	cpi	r18, 0x02	; 2
    18c2:	31 05       	cpc	r19, r1
    18c4:	2c f4       	brge	.+10     	; 0x18d0 <DIO_enuGetPortValue+0x4e>
    18c6:	8d 81       	ldd	r24, Y+5	; 0x05
    18c8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	61 f0       	breq	.+24     	; 0x18e6 <DIO_enuGetPortValue+0x64>
    18ce:	26 c0       	rjmp	.+76     	; 0x191c <DIO_enuGetPortValue+0x9a>
    18d0:	2d 81       	ldd	r18, Y+5	; 0x05
    18d2:	3e 81       	ldd	r19, Y+6	; 0x06
    18d4:	22 30       	cpi	r18, 0x02	; 2
    18d6:	31 05       	cpc	r19, r1
    18d8:	a1 f0       	breq	.+40     	; 0x1902 <DIO_enuGetPortValue+0x80>
    18da:	8d 81       	ldd	r24, Y+5	; 0x05
    18dc:	9e 81       	ldd	r25, Y+6	; 0x06
    18de:	83 30       	cpi	r24, 0x03	; 3
    18e0:	91 05       	cpc	r25, r1
    18e2:	b1 f0       	breq	.+44     	; 0x1910 <DIO_enuGetPortValue+0x8e>
    18e4:	1b c0       	rjmp	.+54     	; 0x191c <DIO_enuGetPortValue+0x9a>
			{
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
    18e6:	e9 e3       	ldi	r30, 0x39	; 57
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	eb 81       	ldd	r30, Y+3	; 0x03
    18ee:	fc 81       	ldd	r31, Y+4	; 0x04
    18f0:	80 83       	st	Z, r24
    18f2:	14 c0       	rjmp	.+40     	; 0x191c <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
    18f4:	e6 e3       	ldi	r30, 0x36	; 54
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	eb 81       	ldd	r30, Y+3	; 0x03
    18fc:	fc 81       	ldd	r31, Y+4	; 0x04
    18fe:	80 83       	st	Z, r24
    1900:	0d c0       	rjmp	.+26     	; 0x191c <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
    1902:	e3 e3       	ldi	r30, 0x33	; 51
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	eb 81       	ldd	r30, Y+3	; 0x03
    190a:	fc 81       	ldd	r31, Y+4	; 0x04
    190c:	80 83       	st	Z, r24
    190e:	06 c0       	rjmp	.+12     	; 0x191c <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
    1910:	e0 e3       	ldi	r30, 0x30	; 48
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	eb 81       	ldd	r30, Y+3	; 0x03
    1918:	fc 81       	ldd	r31, Y+4	; 0x04
    191a:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	89 83       	std	Y+1, r24	; 0x01
    1920:	05 c0       	rjmp	.+10     	; 0x192c <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1922:	83 e0       	ldi	r24, 0x03	; 3
    1924:	89 83       	std	Y+1, r24	; 0x01
    1926:	02 c0       	rjmp	.+4      	; 0x192c <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1928:	82 e0       	ldi	r24, 0x02	; 2
    192a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    192c:	89 81       	ldd	r24, Y+1	; 0x01
}
    192e:	26 96       	adiw	r28, 0x06	; 6
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	00 d0       	rcall	.+0      	; 0x1946 <DIO_enuSetPinDirection+0x6>
    1946:	00 d0       	rcall	.+0      	; 0x1948 <DIO_enuSetPinDirection+0x8>
    1948:	00 d0       	rcall	.+0      	; 0x194a <DIO_enuSetPinDirection+0xa>
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	8a 83       	std	Y+2, r24	; 0x02
    1950:	6b 83       	std	Y+3, r22	; 0x03
    1952:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1954:	19 82       	std	Y+1, r1	; 0x01

	/* Check range */
	if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) && (Copy_u8Value <= OUTPUT))
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	84 30       	cpi	r24, 0x04	; 4
    195a:	08 f0       	brcs	.+2      	; 0x195e <DIO_enuSetPinDirection+0x1e>
    195c:	d1 c0       	rjmp	.+418    	; 0x1b00 <DIO_enuSetPinDirection+0x1c0>
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	88 30       	cpi	r24, 0x08	; 8
    1962:	08 f0       	brcs	.+2      	; 0x1966 <DIO_enuSetPinDirection+0x26>
    1964:	cd c0       	rjmp	.+410    	; 0x1b00 <DIO_enuSetPinDirection+0x1c0>
    1966:	8c 81       	ldd	r24, Y+4	; 0x04
    1968:	82 30       	cpi	r24, 0x02	; 2
    196a:	08 f0       	brcs	.+2      	; 0x196e <DIO_enuSetPinDirection+0x2e>
    196c:	c9 c0       	rjmp	.+402    	; 0x1b00 <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	3e 83       	std	Y+6, r19	; 0x06
    1976:	2d 83       	std	Y+5, r18	; 0x05
    1978:	6d 81       	ldd	r22, Y+5	; 0x05
    197a:	7e 81       	ldd	r23, Y+6	; 0x06
    197c:	61 30       	cpi	r22, 0x01	; 1
    197e:	71 05       	cpc	r23, r1
    1980:	09 f4       	brne	.+2      	; 0x1984 <DIO_enuSetPinDirection+0x44>
    1982:	41 c0       	rjmp	.+130    	; 0x1a06 <DIO_enuSetPinDirection+0xc6>
    1984:	8d 81       	ldd	r24, Y+5	; 0x05
    1986:	9e 81       	ldd	r25, Y+6	; 0x06
    1988:	82 30       	cpi	r24, 0x02	; 2
    198a:	91 05       	cpc	r25, r1
    198c:	34 f4       	brge	.+12     	; 0x199a <DIO_enuSetPinDirection+0x5a>
    198e:	2d 81       	ldd	r18, Y+5	; 0x05
    1990:	3e 81       	ldd	r19, Y+6	; 0x06
    1992:	21 15       	cp	r18, r1
    1994:	31 05       	cpc	r19, r1
    1996:	71 f0       	breq	.+28     	; 0x19b4 <DIO_enuSetPinDirection+0x74>
    1998:	b0 c0       	rjmp	.+352    	; 0x1afa <DIO_enuSetPinDirection+0x1ba>
    199a:	6d 81       	ldd	r22, Y+5	; 0x05
    199c:	7e 81       	ldd	r23, Y+6	; 0x06
    199e:	62 30       	cpi	r22, 0x02	; 2
    19a0:	71 05       	cpc	r23, r1
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <DIO_enuSetPinDirection+0x66>
    19a4:	59 c0       	rjmp	.+178    	; 0x1a58 <DIO_enuSetPinDirection+0x118>
    19a6:	8d 81       	ldd	r24, Y+5	; 0x05
    19a8:	9e 81       	ldd	r25, Y+6	; 0x06
    19aa:	83 30       	cpi	r24, 0x03	; 3
    19ac:	91 05       	cpc	r25, r1
    19ae:	09 f4       	brne	.+2      	; 0x19b2 <DIO_enuSetPinDirection+0x72>
    19b0:	7c c0       	rjmp	.+248    	; 0x1aaa <DIO_enuSetPinDirection+0x16a>
    19b2:	a3 c0       	rjmp	.+326    	; 0x1afa <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);             //Mask bit == Clear Bit
    19b4:	aa e3       	ldi	r26, 0x3A	; 58
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	ea e3       	ldi	r30, 0x3A	; 58
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	48 2f       	mov	r20, r24
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <DIO_enuSetPinDirection+0x90>
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	2a 95       	dec	r18
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <DIO_enuSetPinDirection+0x8c>
    19d4:	80 95       	com	r24
    19d6:	84 23       	and	r24, r20
    19d8:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID); //Write new value
    19da:	aa e3       	ldi	r26, 0x3A	; 58
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	ea e3       	ldi	r30, 0x3A	; 58
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	48 2f       	mov	r20, r24
    19e6:	8c 81       	ldd	r24, Y+4	; 0x04
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	88 2f       	mov	r24, r24
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	b9 01       	movw	r22, r18
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <DIO_enuSetPinDirection+0xba>
    19f6:	66 0f       	add	r22, r22
    19f8:	77 1f       	adc	r23, r23
    19fa:	8a 95       	dec	r24
    19fc:	e2 f7       	brpl	.-8      	; 0x19f6 <DIO_enuSetPinDirection+0xb6>
    19fe:	cb 01       	movw	r24, r22
    1a00:	84 2b       	or	r24, r20
    1a02:	8c 93       	st	X, r24
    1a04:	7a c0       	rjmp	.+244    	; 0x1afa <DIO_enuSetPinDirection+0x1ba>
			 *      -> 101-0-1001 | 000-1-0000 (Write Value)
			 *      -> 101-1-1-1001 (Result)
			 */
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1a06:	a7 e3       	ldi	r26, 0x37	; 55
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e7 e3       	ldi	r30, 0x37	; 55
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	48 2f       	mov	r20, r24
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	28 2f       	mov	r18, r24
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <DIO_enuSetPinDirection+0xe2>
    1a1e:	88 0f       	add	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	2a 95       	dec	r18
    1a24:	e2 f7       	brpl	.-8      	; 0x1a1e <DIO_enuSetPinDirection+0xde>
    1a26:	80 95       	com	r24
    1a28:	84 23       	and	r24, r20
    1a2a:	8c 93       	st	X, r24
			DDRB |= (Copy_u8Value << Copy_u8PinID);
    1a2c:	a7 e3       	ldi	r26, 0x37	; 55
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e7 e3       	ldi	r30, 0x37	; 55
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	48 2f       	mov	r20, r24
    1a38:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3a:	28 2f       	mov	r18, r24
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	88 2f       	mov	r24, r24
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	b9 01       	movw	r22, r18
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <DIO_enuSetPinDirection+0x10c>
    1a48:	66 0f       	add	r22, r22
    1a4a:	77 1f       	adc	r23, r23
    1a4c:	8a 95       	dec	r24
    1a4e:	e2 f7       	brpl	.-8      	; 0x1a48 <DIO_enuSetPinDirection+0x108>
    1a50:	cb 01       	movw	r24, r22
    1a52:	84 2b       	or	r24, r20
    1a54:	8c 93       	st	X, r24
    1a56:	51 c0       	rjmp	.+162    	; 0x1afa <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1a58:	a4 e3       	ldi	r26, 0x34	; 52
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e4 e3       	ldi	r30, 0x34	; 52
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	48 2f       	mov	r20, r24
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <DIO_enuSetPinDirection+0x134>
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	2a 95       	dec	r18
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <DIO_enuSetPinDirection+0x130>
    1a78:	80 95       	com	r24
    1a7a:	84 23       	and	r24, r20
    1a7c:	8c 93       	st	X, r24
			DDRC |= (Copy_u8Value << Copy_u8PinID);
    1a7e:	a4 e3       	ldi	r26, 0x34	; 52
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e4 e3       	ldi	r30, 0x34	; 52
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	48 2f       	mov	r20, r24
    1a8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8c:	28 2f       	mov	r18, r24
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	88 2f       	mov	r24, r24
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	b9 01       	movw	r22, r18
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <DIO_enuSetPinDirection+0x15e>
    1a9a:	66 0f       	add	r22, r22
    1a9c:	77 1f       	adc	r23, r23
    1a9e:	8a 95       	dec	r24
    1aa0:	e2 f7       	brpl	.-8      	; 0x1a9a <DIO_enuSetPinDirection+0x15a>
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	84 2b       	or	r24, r20
    1aa6:	8c 93       	st	X, r24
    1aa8:	28 c0       	rjmp	.+80     	; 0x1afa <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1aaa:	a1 e3       	ldi	r26, 0x31	; 49
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	e1 e3       	ldi	r30, 0x31	; 49
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	48 2f       	mov	r20, r24
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <DIO_enuSetPinDirection+0x186>
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	2a 95       	dec	r18
    1ac8:	e2 f7       	brpl	.-8      	; 0x1ac2 <DIO_enuSetPinDirection+0x182>
    1aca:	80 95       	com	r24
    1acc:	84 23       	and	r24, r20
    1ace:	8c 93       	st	X, r24
			DDRD |= (Copy_u8Value << Copy_u8PinID);
    1ad0:	a1 e3       	ldi	r26, 0x31	; 49
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e1 e3       	ldi	r30, 0x31	; 49
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	48 2f       	mov	r20, r24
    1adc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	88 2f       	mov	r24, r24
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	b9 01       	movw	r22, r18
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <DIO_enuSetPinDirection+0x1b0>
    1aec:	66 0f       	add	r22, r22
    1aee:	77 1f       	adc	r23, r23
    1af0:	8a 95       	dec	r24
    1af2:	e2 f7       	brpl	.-8      	; 0x1aec <DIO_enuSetPinDirection+0x1ac>
    1af4:	cb 01       	movw	r24, r22
    1af6:	84 2b       	or	r24, r20
    1af8:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	89 83       	std	Y+1, r24	; 0x01
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1b00:	83 e0       	ldi	r24, 0x03	; 3
    1b02:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b06:	26 96       	adiw	r28, 0x06	; 6
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	08 95       	ret

00001b18 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    1b18:	df 93       	push	r29
    1b1a:	cf 93       	push	r28
    1b1c:	00 d0       	rcall	.+0      	; 0x1b1e <DIO_enuSetPinValue+0x6>
    1b1e:	00 d0       	rcall	.+0      	; 0x1b20 <DIO_enuSetPinValue+0x8>
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <DIO_enuSetPinValue+0xa>
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	8a 83       	std	Y+2, r24	; 0x02
    1b28:	6b 83       	std	Y+3, r22	; 0x03
    1b2a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1b2c:	19 82       	std	Y+1, r1	; 0x01

	/* Check range */
	if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) && (Copy_u8Value <= HIGH))
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	84 30       	cpi	r24, 0x04	; 4
    1b32:	08 f0       	brcs	.+2      	; 0x1b36 <DIO_enuSetPinValue+0x1e>
    1b34:	bd c0       	rjmp	.+378    	; 0x1cb0 <DIO_enuSetPinValue+0x198>
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	88 30       	cpi	r24, 0x08	; 8
    1b3a:	08 f0       	brcs	.+2      	; 0x1b3e <DIO_enuSetPinValue+0x26>
    1b3c:	b9 c0       	rjmp	.+370    	; 0x1cb0 <DIO_enuSetPinValue+0x198>
    1b3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b40:	82 30       	cpi	r24, 0x02	; 2
    1b42:	08 f0       	brcs	.+2      	; 0x1b46 <DIO_enuSetPinValue+0x2e>
    1b44:	b5 c0       	rjmp	.+362    	; 0x1cb0 <DIO_enuSetPinValue+0x198>
	{
		switch(Copy_u8PortID)
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	3e 83       	std	Y+6, r19	; 0x06
    1b4e:	2d 83       	std	Y+5, r18	; 0x05
    1b50:	6d 81       	ldd	r22, Y+5	; 0x05
    1b52:	7e 81       	ldd	r23, Y+6	; 0x06
    1b54:	61 30       	cpi	r22, 0x01	; 1
    1b56:	71 05       	cpc	r23, r1
    1b58:	71 f1       	breq	.+92     	; 0x1bb6 <DIO_enuSetPinValue+0x9e>
    1b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5e:	82 30       	cpi	r24, 0x02	; 2
    1b60:	91 05       	cpc	r25, r1
    1b62:	34 f4       	brge	.+12     	; 0x1b70 <DIO_enuSetPinValue+0x58>
    1b64:	2d 81       	ldd	r18, Y+5	; 0x05
    1b66:	3e 81       	ldd	r19, Y+6	; 0x06
    1b68:	21 15       	cp	r18, r1
    1b6a:	31 05       	cpc	r19, r1
    1b6c:	71 f0       	breq	.+28     	; 0x1b8a <DIO_enuSetPinValue+0x72>
    1b6e:	9d c0       	rjmp	.+314    	; 0x1caa <DIO_enuSetPinValue+0x192>
    1b70:	6d 81       	ldd	r22, Y+5	; 0x05
    1b72:	7e 81       	ldd	r23, Y+6	; 0x06
    1b74:	62 30       	cpi	r22, 0x02	; 2
    1b76:	71 05       	cpc	r23, r1
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <DIO_enuSetPinValue+0x64>
    1b7a:	46 c0       	rjmp	.+140    	; 0x1c08 <DIO_enuSetPinValue+0xf0>
    1b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b80:	83 30       	cpi	r24, 0x03	; 3
    1b82:	91 05       	cpc	r25, r1
    1b84:	09 f4       	brne	.+2      	; 0x1b88 <DIO_enuSetPinValue+0x70>
    1b86:	69 c0       	rjmp	.+210    	; 0x1c5a <DIO_enuSetPinValue+0x142>
    1b88:	90 c0       	rjmp	.+288    	; 0x1caa <DIO_enuSetPinValue+0x192>
		{
		case DIO_PORTA:
			//PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);             //Mask bit == Clear Bit
			PORTA |=  (Copy_u8Value << Copy_u8PinID); //Write new value
    1b8a:	ab e3       	ldi	r26, 0x3B	; 59
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	eb e3       	ldi	r30, 0x3B	; 59
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	48 2f       	mov	r20, r24
    1b96:	8c 81       	ldd	r24, Y+4	; 0x04
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9e:	88 2f       	mov	r24, r24
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	b9 01       	movw	r22, r18
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <DIO_enuSetPinValue+0x92>
    1ba6:	66 0f       	add	r22, r22
    1ba8:	77 1f       	adc	r23, r23
    1baa:	8a 95       	dec	r24
    1bac:	e2 f7       	brpl	.-8      	; 0x1ba6 <DIO_enuSetPinValue+0x8e>
    1bae:	cb 01       	movw	r24, r22
    1bb0:	84 2b       	or	r24, r20
    1bb2:	8c 93       	st	X, r24
    1bb4:	7a c0       	rjmp	.+244    	; 0x1caa <DIO_enuSetPinValue+0x192>
			break;
		case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1bb6:	a8 e3       	ldi	r26, 0x38	; 56
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e8 e3       	ldi	r30, 0x38	; 56
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	48 2f       	mov	r20, r24
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	28 2f       	mov	r18, r24
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <DIO_enuSetPinValue+0xba>
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	2a 95       	dec	r18
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <DIO_enuSetPinValue+0xb6>
    1bd6:	80 95       	com	r24
    1bd8:	84 23       	and	r24, r20
    1bda:	8c 93       	st	X, r24
			PORTB |= (Copy_u8Value << Copy_u8PinID);
    1bdc:	a8 e3       	ldi	r26, 0x38	; 56
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	e8 e3       	ldi	r30, 0x38	; 56
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	48 2f       	mov	r20, r24
    1be8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	88 2f       	mov	r24, r24
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	b9 01       	movw	r22, r18
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <DIO_enuSetPinValue+0xe4>
    1bf8:	66 0f       	add	r22, r22
    1bfa:	77 1f       	adc	r23, r23
    1bfc:	8a 95       	dec	r24
    1bfe:	e2 f7       	brpl	.-8      	; 0x1bf8 <DIO_enuSetPinValue+0xe0>
    1c00:	cb 01       	movw	r24, r22
    1c02:	84 2b       	or	r24, r20
    1c04:	8c 93       	st	X, r24
    1c06:	51 c0       	rjmp	.+162    	; 0x1caa <DIO_enuSetPinValue+0x192>
			break;
		case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1c08:	a5 e3       	ldi	r26, 0x35	; 53
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e5 e3       	ldi	r30, 0x35	; 53
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	48 2f       	mov	r20, r24
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <DIO_enuSetPinValue+0x10c>
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	2a 95       	dec	r18
    1c26:	e2 f7       	brpl	.-8      	; 0x1c20 <DIO_enuSetPinValue+0x108>
    1c28:	80 95       	com	r24
    1c2a:	84 23       	and	r24, r20
    1c2c:	8c 93       	st	X, r24
			PORTC |= (Copy_u8Value << Copy_u8PinID);
    1c2e:	a5 e3       	ldi	r26, 0x35	; 53
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e5 e3       	ldi	r30, 0x35	; 53
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	48 2f       	mov	r20, r24
    1c3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	88 2f       	mov	r24, r24
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	b9 01       	movw	r22, r18
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <DIO_enuSetPinValue+0x136>
    1c4a:	66 0f       	add	r22, r22
    1c4c:	77 1f       	adc	r23, r23
    1c4e:	8a 95       	dec	r24
    1c50:	e2 f7       	brpl	.-8      	; 0x1c4a <DIO_enuSetPinValue+0x132>
    1c52:	cb 01       	movw	r24, r22
    1c54:	84 2b       	or	r24, r20
    1c56:	8c 93       	st	X, r24
    1c58:	28 c0       	rjmp	.+80     	; 0x1caa <DIO_enuSetPinValue+0x192>
			break;
		case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1c5a:	a2 e3       	ldi	r26, 0x32	; 50
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	e2 e3       	ldi	r30, 0x32	; 50
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	48 2f       	mov	r20, r24
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <DIO_enuSetPinValue+0x15e>
    1c72:	88 0f       	add	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	2a 95       	dec	r18
    1c78:	e2 f7       	brpl	.-8      	; 0x1c72 <DIO_enuSetPinValue+0x15a>
    1c7a:	80 95       	com	r24
    1c7c:	84 23       	and	r24, r20
    1c7e:	8c 93       	st	X, r24
			PORTD |= (Copy_u8Value << Copy_u8PinID);
    1c80:	a2 e3       	ldi	r26, 0x32	; 50
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e2 e3       	ldi	r30, 0x32	; 50
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	48 2f       	mov	r20, r24
    1c8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8e:	28 2f       	mov	r18, r24
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	88 2f       	mov	r24, r24
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	b9 01       	movw	r22, r18
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <DIO_enuSetPinValue+0x188>
    1c9c:	66 0f       	add	r22, r22
    1c9e:	77 1f       	adc	r23, r23
    1ca0:	8a 95       	dec	r24
    1ca2:	e2 f7       	brpl	.-8      	; 0x1c9c <DIO_enuSetPinValue+0x184>
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	84 2b       	or	r24, r20
    1ca8:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	89 83       	std	Y+1, r24	; 0x01
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <DIO_enuSetPinValue+0x19c>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1cb0:	83 e0       	ldi	r24, 0x03	; 3
    1cb2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cb6:	26 96       	adiw	r28, 0x06	; 6
    1cb8:	0f b6       	in	r0, 0x3f	; 63
    1cba:	f8 94       	cli
    1cbc:	de bf       	out	0x3e, r29	; 62
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	cd bf       	out	0x3d, r28	; 61
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	08 95       	ret

00001cc8 <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID)
{
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	00 d0       	rcall	.+0      	; 0x1cce <DIO_enuTogPinValue+0x6>
    1cce:	00 d0       	rcall	.+0      	; 0x1cd0 <DIO_enuTogPinValue+0x8>
    1cd0:	0f 92       	push	r0
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
    1cd6:	8a 83       	std	Y+2, r24	; 0x02
    1cd8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1cda:	19 82       	std	Y+1, r1	; 0x01

	/* Check range */
	if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7))
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	84 30       	cpi	r24, 0x04	; 4
    1ce0:	08 f0       	brcs	.+2      	; 0x1ce4 <DIO_enuTogPinValue+0x1c>
    1ce2:	75 c0       	rjmp	.+234    	; 0x1dce <DIO_enuTogPinValue+0x106>
    1ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce6:	88 30       	cpi	r24, 0x08	; 8
    1ce8:	08 f0       	brcs	.+2      	; 0x1cec <DIO_enuTogPinValue+0x24>
    1cea:	71 c0       	rjmp	.+226    	; 0x1dce <DIO_enuTogPinValue+0x106>
	{
		switch(Copy_u8PortID)
    1cec:	8a 81       	ldd	r24, Y+2	; 0x02
    1cee:	28 2f       	mov	r18, r24
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	3d 83       	std	Y+5, r19	; 0x05
    1cf4:	2c 83       	std	Y+4, r18	; 0x04
    1cf6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfa:	81 30       	cpi	r24, 0x01	; 1
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	49 f1       	breq	.+82     	; 0x1d52 <DIO_enuTogPinValue+0x8a>
    1d00:	2c 81       	ldd	r18, Y+4	; 0x04
    1d02:	3d 81       	ldd	r19, Y+5	; 0x05
    1d04:	22 30       	cpi	r18, 0x02	; 2
    1d06:	31 05       	cpc	r19, r1
    1d08:	2c f4       	brge	.+10     	; 0x1d14 <DIO_enuTogPinValue+0x4c>
    1d0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	61 f0       	breq	.+24     	; 0x1d2a <DIO_enuTogPinValue+0x62>
    1d12:	5a c0       	rjmp	.+180    	; 0x1dc8 <DIO_enuTogPinValue+0x100>
    1d14:	2c 81       	ldd	r18, Y+4	; 0x04
    1d16:	3d 81       	ldd	r19, Y+5	; 0x05
    1d18:	22 30       	cpi	r18, 0x02	; 2
    1d1a:	31 05       	cpc	r19, r1
    1d1c:	71 f1       	breq	.+92     	; 0x1d7a <DIO_enuTogPinValue+0xb2>
    1d1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d20:	9d 81       	ldd	r25, Y+5	; 0x05
    1d22:	83 30       	cpi	r24, 0x03	; 3
    1d24:	91 05       	cpc	r25, r1
    1d26:	e9 f1       	breq	.+122    	; 0x1da2 <DIO_enuTogPinValue+0xda>
    1d28:	4f c0       	rjmp	.+158    	; 0x1dc8 <DIO_enuTogPinValue+0x100>
		{
		case DIO_PORTA:
			PORTA ^=  (DIO_MASK_BIT << Copy_u8PinID);
    1d2a:	ab e3       	ldi	r26, 0x3B	; 59
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	eb e3       	ldi	r30, 0x3B	; 59
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	48 2f       	mov	r20, r24
    1d36:	8b 81       	ldd	r24, Y+3	; 0x03
    1d38:	28 2f       	mov	r18, r24
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	02 2e       	mov	r0, r18
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <DIO_enuTogPinValue+0x80>
    1d44:	88 0f       	add	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	0a 94       	dec	r0
    1d4a:	e2 f7       	brpl	.-8      	; 0x1d44 <DIO_enuTogPinValue+0x7c>
    1d4c:	84 27       	eor	r24, r20
    1d4e:	8c 93       	st	X, r24
    1d50:	3b c0       	rjmp	.+118    	; 0x1dc8 <DIO_enuTogPinValue+0x100>
			 *       -> 000-1-0000
			 *       -> 101-0-1001
			 * */
			break;
		case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT << Copy_u8PinID);
    1d52:	a8 e3       	ldi	r26, 0x38	; 56
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	e8 e3       	ldi	r30, 0x38	; 56
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	48 2f       	mov	r20, r24
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	28 2f       	mov	r18, r24
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	02 2e       	mov	r0, r18
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <DIO_enuTogPinValue+0xa8>
    1d6c:	88 0f       	add	r24, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	0a 94       	dec	r0
    1d72:	e2 f7       	brpl	.-8      	; 0x1d6c <DIO_enuTogPinValue+0xa4>
    1d74:	84 27       	eor	r24, r20
    1d76:	8c 93       	st	X, r24
    1d78:	27 c0       	rjmp	.+78     	; 0x1dc8 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT << Copy_u8PinID);
    1d7a:	a5 e3       	ldi	r26, 0x35	; 53
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	e5 e3       	ldi	r30, 0x35	; 53
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	48 2f       	mov	r20, r24
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	28 2f       	mov	r18, r24
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	02 2e       	mov	r0, r18
    1d92:	02 c0       	rjmp	.+4      	; 0x1d98 <DIO_enuTogPinValue+0xd0>
    1d94:	88 0f       	add	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	0a 94       	dec	r0
    1d9a:	e2 f7       	brpl	.-8      	; 0x1d94 <DIO_enuTogPinValue+0xcc>
    1d9c:	84 27       	eor	r24, r20
    1d9e:	8c 93       	st	X, r24
    1da0:	13 c0       	rjmp	.+38     	; 0x1dc8 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT << Copy_u8PinID);
    1da2:	a2 e3       	ldi	r26, 0x32	; 50
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e2 e3       	ldi	r30, 0x32	; 50
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	48 2f       	mov	r20, r24
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	28 2f       	mov	r18, r24
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	02 2e       	mov	r0, r18
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <DIO_enuTogPinValue+0xf8>
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	0a 94       	dec	r0
    1dc2:	e2 f7       	brpl	.-8      	; 0x1dbc <DIO_enuTogPinValue+0xf4>
    1dc4:	84 27       	eor	r24, r20
    1dc6:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	89 83       	std	Y+1, r24	; 0x01
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <DIO_enuTogPinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1dce:	83 e0       	ldi	r24, 0x03	; 3
    1dd0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 * Copy_pu8Value)
{
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	27 97       	sbiw	r28, 0x07	; 7
    1dee:	0f b6       	in	r0, 0x3f	; 63
    1df0:	f8 94       	cli
    1df2:	de bf       	out	0x3e, r29	; 62
    1df4:	0f be       	out	0x3f, r0	; 63
    1df6:	cd bf       	out	0x3d, r28	; 61
    1df8:	8a 83       	std	Y+2, r24	; 0x02
    1dfa:	6b 83       	std	Y+3, r22	; 0x03
    1dfc:	5d 83       	std	Y+5, r21	; 0x05
    1dfe:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1e00:	19 82       	std	Y+1, r1	; 0x01

	/* Check if wild pointer */
	if(Copy_pu8Value != NULL)
    1e02:	8c 81       	ldd	r24, Y+4	; 0x04
    1e04:	9d 81       	ldd	r25, Y+5	; 0x05
    1e06:	00 97       	sbiw	r24, 0x00	; 0
    1e08:	09 f4       	brne	.+2      	; 0x1e0c <DIO_enuGetPinValue+0x28>
    1e0a:	7e c0       	rjmp	.+252    	; 0x1f08 <DIO_enuGetPinValue+0x124>
	{
		/* Check Range */
		if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7))
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	84 30       	cpi	r24, 0x04	; 4
    1e10:	08 f0       	brcs	.+2      	; 0x1e14 <DIO_enuGetPinValue+0x30>
    1e12:	77 c0       	rjmp	.+238    	; 0x1f02 <DIO_enuGetPinValue+0x11e>
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	88 30       	cpi	r24, 0x08	; 8
    1e18:	08 f0       	brcs	.+2      	; 0x1e1c <DIO_enuGetPinValue+0x38>
    1e1a:	73 c0       	rjmp	.+230    	; 0x1f02 <DIO_enuGetPinValue+0x11e>
		{
			switch(Copy_u8PortID)
    1e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1e:	28 2f       	mov	r18, r24
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	3f 83       	std	Y+7, r19	; 0x07
    1e24:	2e 83       	std	Y+6, r18	; 0x06
    1e26:	4e 81       	ldd	r20, Y+6	; 0x06
    1e28:	5f 81       	ldd	r21, Y+7	; 0x07
    1e2a:	41 30       	cpi	r20, 0x01	; 1
    1e2c:	51 05       	cpc	r21, r1
    1e2e:	59 f1       	breq	.+86     	; 0x1e86 <DIO_enuGetPinValue+0xa2>
    1e30:	8e 81       	ldd	r24, Y+6	; 0x06
    1e32:	9f 81       	ldd	r25, Y+7	; 0x07
    1e34:	82 30       	cpi	r24, 0x02	; 2
    1e36:	91 05       	cpc	r25, r1
    1e38:	34 f4       	brge	.+12     	; 0x1e46 <DIO_enuGetPinValue+0x62>
    1e3a:	2e 81       	ldd	r18, Y+6	; 0x06
    1e3c:	3f 81       	ldd	r19, Y+7	; 0x07
    1e3e:	21 15       	cp	r18, r1
    1e40:	31 05       	cpc	r19, r1
    1e42:	69 f0       	breq	.+26     	; 0x1e5e <DIO_enuGetPinValue+0x7a>
    1e44:	5b c0       	rjmp	.+182    	; 0x1efc <DIO_enuGetPinValue+0x118>
    1e46:	4e 81       	ldd	r20, Y+6	; 0x06
    1e48:	5f 81       	ldd	r21, Y+7	; 0x07
    1e4a:	42 30       	cpi	r20, 0x02	; 2
    1e4c:	51 05       	cpc	r21, r1
    1e4e:	79 f1       	breq	.+94     	; 0x1eae <DIO_enuGetPinValue+0xca>
    1e50:	8e 81       	ldd	r24, Y+6	; 0x06
    1e52:	9f 81       	ldd	r25, Y+7	; 0x07
    1e54:	83 30       	cpi	r24, 0x03	; 3
    1e56:	91 05       	cpc	r25, r1
    1e58:	09 f4       	brne	.+2      	; 0x1e5c <DIO_enuGetPinValue+0x78>
    1e5a:	3d c0       	rjmp	.+122    	; 0x1ed6 <DIO_enuGetPinValue+0xf2>
    1e5c:	4f c0       	rjmp	.+158    	; 0x1efc <DIO_enuGetPinValue+0x118>
			{
			case DIO_PORTA:
				*Copy_pu8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
    1e5e:	e9 e3       	ldi	r30, 0x39	; 57
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	28 2f       	mov	r18, r24
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	88 2f       	mov	r24, r24
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	a9 01       	movw	r20, r18
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <DIO_enuGetPinValue+0x92>
    1e72:	55 95       	asr	r21
    1e74:	47 95       	ror	r20
    1e76:	8a 95       	dec	r24
    1e78:	e2 f7       	brpl	.-8      	; 0x1e72 <DIO_enuGetPinValue+0x8e>
    1e7a:	ca 01       	movw	r24, r20
    1e7c:	81 70       	andi	r24, 0x01	; 1
    1e7e:	ec 81       	ldd	r30, Y+4	; 0x04
    1e80:	fd 81       	ldd	r31, Y+5	; 0x05
    1e82:	80 83       	st	Z, r24
    1e84:	3b c0       	rjmp	.+118    	; 0x1efc <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
    1e86:	e6 e3       	ldi	r30, 0x36	; 54
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	28 2f       	mov	r18, r24
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	88 2f       	mov	r24, r24
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	a9 01       	movw	r20, r18
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <DIO_enuGetPinValue+0xba>
    1e9a:	55 95       	asr	r21
    1e9c:	47 95       	ror	r20
    1e9e:	8a 95       	dec	r24
    1ea0:	e2 f7       	brpl	.-8      	; 0x1e9a <DIO_enuGetPinValue+0xb6>
    1ea2:	ca 01       	movw	r24, r20
    1ea4:	81 70       	andi	r24, 0x01	; 1
    1ea6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ea8:	fd 81       	ldd	r31, Y+5	; 0x05
    1eaa:	80 83       	st	Z, r24
    1eac:	27 c0       	rjmp	.+78     	; 0x1efc <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
    1eae:	e3 e3       	ldi	r30, 0x33	; 51
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	28 2f       	mov	r18, r24
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	88 2f       	mov	r24, r24
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	a9 01       	movw	r20, r18
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <DIO_enuGetPinValue+0xe2>
    1ec2:	55 95       	asr	r21
    1ec4:	47 95       	ror	r20
    1ec6:	8a 95       	dec	r24
    1ec8:	e2 f7       	brpl	.-8      	; 0x1ec2 <DIO_enuGetPinValue+0xde>
    1eca:	ca 01       	movw	r24, r20
    1ecc:	81 70       	andi	r24, 0x01	; 1
    1ece:	ec 81       	ldd	r30, Y+4	; 0x04
    1ed0:	fd 81       	ldd	r31, Y+5	; 0x05
    1ed2:	80 83       	st	Z, r24
    1ed4:	13 c0       	rjmp	.+38     	; 0x1efc <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = ((PIND >> Copy_u8PinID) & DIO_MASK_BIT);
    1ed6:	e0 e3       	ldi	r30, 0x30	; 48
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	28 2f       	mov	r18, r24
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee2:	88 2f       	mov	r24, r24
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	a9 01       	movw	r20, r18
    1ee8:	02 c0       	rjmp	.+4      	; 0x1eee <DIO_enuGetPinValue+0x10a>
    1eea:	55 95       	asr	r21
    1eec:	47 95       	ror	r20
    1eee:	8a 95       	dec	r24
    1ef0:	e2 f7       	brpl	.-8      	; 0x1eea <DIO_enuGetPinValue+0x106>
    1ef2:	ca 01       	movw	r24, r20
    1ef4:	81 70       	andi	r24, 0x01	; 1
    1ef6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ef8:	fd 81       	ldd	r31, Y+5	; 0x05
    1efa:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	05 c0       	rjmp	.+10     	; 0x1f0c <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1f02:	83 e0       	ldi	r24, 0x03	; 3
    1f04:	89 83       	std	Y+1, r24	; 0x01
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1f08:	82 e0       	ldi	r24, 0x02	; 2
    1f0a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f0e:	27 96       	adiw	r28, 0x07	; 7
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	f8 94       	cli
    1f14:	de bf       	out	0x3e, r29	; 62
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	cd bf       	out	0x3d, r28	; 61
    1f1a:	cf 91       	pop	r28
    1f1c:	df 91       	pop	r29
    1f1e:	08 95       	ret

00001f20 <Switch_enuInit>:
#include "Switch_private.h"
#include "Switch_config.h"
/***********************	Includes Section End	***********************/

ES_t Switch_enuInit(SW_t * Copy_pAstrSwitches)
{
    1f20:	df 93       	push	r29
    1f22:	cf 93       	push	r28
    1f24:	00 d0       	rcall	.+0      	; 0x1f26 <Switch_enuInit+0x6>
    1f26:	00 d0       	rcall	.+0      	; 0x1f28 <Switch_enuInit+0x8>
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	9c 83       	std	Y+4, r25	; 0x04
    1f2e:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1f30:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_pAstrSwitches != NULL)
    1f32:	8b 81       	ldd	r24, Y+3	; 0x03
    1f34:	9c 81       	ldd	r25, Y+4	; 0x04
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <Switch_enuInit+0x1c>
    1f3a:	5d c0       	rjmp	.+186    	; 0x1ff6 <Switch_enuInit+0xd6>
	{
		u8 Local_u8Iterator = 0;
    1f3c:	19 82       	std	Y+1, r1	; 0x01

		for(Local_u8Iterator = 0; Local_u8Iterator < SW_NUM; Local_u8Iterator++)
    1f3e:	19 82       	std	Y+1, r1	; 0x01
    1f40:	55 c0       	rjmp	.+170    	; 0x1fec <Switch_enuInit+0xcc>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_pAstrSwitches[Local_u8Iterator].SW_u8PortID,
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	28 2f       	mov	r18, r24
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	c9 01       	movw	r24, r18
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	28 0f       	add	r18, r24
    1f50:	39 1f       	adc	r19, r25
    1f52:	8b 81       	ldd	r24, Y+3	; 0x03
    1f54:	9c 81       	ldd	r25, Y+4	; 0x04
    1f56:	fc 01       	movw	r30, r24
    1f58:	e2 0f       	add	r30, r18
    1f5a:	f3 1f       	adc	r31, r19
    1f5c:	40 81       	ld	r20, Z
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	28 2f       	mov	r18, r24
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	c9 01       	movw	r24, r18
    1f66:	88 0f       	add	r24, r24
    1f68:	99 1f       	adc	r25, r25
    1f6a:	28 0f       	add	r18, r24
    1f6c:	39 1f       	adc	r19, r25
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	9c 81       	ldd	r25, Y+4	; 0x04
    1f72:	fc 01       	movw	r30, r24
    1f74:	e2 0f       	add	r30, r18
    1f76:	f3 1f       	adc	r31, r19
    1f78:	91 81       	ldd	r25, Z+1	; 0x01
    1f7a:	84 2f       	mov	r24, r20
    1f7c:	69 2f       	mov	r22, r25
    1f7e:	40 e0       	ldi	r20, 0x00	; 0
    1f80:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    1f84:	8a 83       	std	Y+2, r24	; 0x02
								   	   	   	   	   	     Copy_pAstrSwitches[Local_u8Iterator].SW_u8PinID,
														 DIO_u8INPUT);
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pAstrSwitches[Local_u8Iterator].SW_u8PortID,
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	c9 01       	movw	r24, r18
    1f8e:	88 0f       	add	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	28 0f       	add	r18, r24
    1f94:	39 1f       	adc	r19, r25
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	e2 0f       	add	r30, r18
    1f9e:	f3 1f       	adc	r31, r19
    1fa0:	50 81       	ld	r21, Z
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	28 2f       	mov	r18, r24
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	c9 01       	movw	r24, r18
    1faa:	88 0f       	add	r24, r24
    1fac:	99 1f       	adc	r25, r25
    1fae:	28 0f       	add	r18, r24
    1fb0:	39 1f       	adc	r19, r25
    1fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb6:	fc 01       	movw	r30, r24
    1fb8:	e2 0f       	add	r30, r18
    1fba:	f3 1f       	adc	r31, r19
    1fbc:	41 81       	ldd	r20, Z+1	; 0x01
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	28 2f       	mov	r18, r24
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	c9 01       	movw	r24, r18
    1fc6:	88 0f       	add	r24, r24
    1fc8:	99 1f       	adc	r25, r25
    1fca:	28 0f       	add	r18, r24
    1fcc:	39 1f       	adc	r19, r25
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	e2 0f       	add	r30, r18
    1fd6:	f3 1f       	adc	r31, r19
    1fd8:	92 81       	ldd	r25, Z+2	; 0x02
    1fda:	85 2f       	mov	r24, r21
    1fdc:	64 2f       	mov	r22, r20
    1fde:	49 2f       	mov	r20, r25
    1fe0:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    1fe4:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_pAstrSwitches != NULL)
	{
		u8 Local_u8Iterator = 0;

		for(Local_u8Iterator = 0; Local_u8Iterator < SW_NUM; Local_u8Iterator++)
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	8f 5f       	subi	r24, 0xFF	; 255
    1fea:	89 83       	std	Y+1, r24	; 0x01
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	83 30       	cpi	r24, 0x03	; 3
    1ff0:	08 f4       	brcc	.+2      	; 0x1ff4 <Switch_enuInit+0xd4>
    1ff2:	a7 cf       	rjmp	.-178    	; 0x1f42 <Switch_enuInit+0x22>
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <Switch_enuInit+0xda>
		}

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1ff6:	82 e0       	ldi	r24, 0x02	; 2
    1ff8:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    1ffa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <Switch_enuGetState>:

ES_t Switch_enuGetState(SW_t * Copy_pstrSwitches, u8 * Copy_pu8SwState)
{
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	00 d0       	rcall	.+0      	; 0x2010 <Switch_enuGetState+0x6>
    2010:	00 d0       	rcall	.+0      	; 0x2012 <Switch_enuGetState+0x8>
    2012:	0f 92       	push	r0
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	9b 83       	std	Y+3, r25	; 0x03
    201a:	8a 83       	std	Y+2, r24	; 0x02
    201c:	7d 83       	std	Y+5, r23	; 0x05
    201e:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    2020:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pstrSwitches != NULL && Copy_pu8SwState != NULL)
    2022:	8a 81       	ldd	r24, Y+2	; 0x02
    2024:	9b 81       	ldd	r25, Y+3	; 0x03
    2026:	00 97       	sbiw	r24, 0x00	; 0
    2028:	91 f0       	breq	.+36     	; 0x204e <Switch_enuGetState+0x44>
    202a:	8c 81       	ldd	r24, Y+4	; 0x04
    202c:	9d 81       	ldd	r25, Y+5	; 0x05
    202e:	00 97       	sbiw	r24, 0x00	; 0
    2030:	71 f0       	breq	.+28     	; 0x204e <Switch_enuGetState+0x44>
	{
		Local_enuErrorState = DIO_enuGetPinValue(Copy_pstrSwitches->SW_u8PortID,
    2032:	ea 81       	ldd	r30, Y+2	; 0x02
    2034:	fb 81       	ldd	r31, Y+3	; 0x03
    2036:	80 81       	ld	r24, Z
    2038:	ea 81       	ldd	r30, Y+2	; 0x02
    203a:	fb 81       	ldd	r31, Y+3	; 0x03
    203c:	91 81       	ldd	r25, Z+1	; 0x01
    203e:	2c 81       	ldd	r18, Y+4	; 0x04
    2040:	3d 81       	ldd	r19, Y+5	; 0x05
    2042:	69 2f       	mov	r22, r25
    2044:	a9 01       	movw	r20, r18
    2046:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DIO_enuGetPinValue>
    204a:	89 83       	std	Y+1, r24	; 0x01
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <Switch_enuGetState+0x48>
												 Copy_pstrSwitches->SW_u8PinID,
												 Copy_pu8SwState);
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    204e:	82 e0       	ldi	r24, 0x02	; 2
    2050:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2052:	89 81       	ldd	r24, Y+1	; 0x01
}
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	cf 91       	pop	r28
    2060:	df 91       	pop	r29
    2062:	08 95       	ret

00002064 <SSDLT_enuInit>:
extern SEG_t SSD_AstrSegConfig[SEG_NUM];
/***********************	Declarations Section End	***********************/


ES_t SSDLT_enuInit(SEG_t * Copy_pstrSegConfig)
{
    2064:	df 93       	push	r29
    2066:	cf 93       	push	r28
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	2a 97       	sbiw	r28, 0x0a	; 10
    206e:	0f b6       	in	r0, 0x3f	; 63
    2070:	f8 94       	cli
    2072:	de bf       	out	0x3e, r29	; 62
    2074:	0f be       	out	0x3f, r0	; 63
    2076:	cd bf       	out	0x3d, r28	; 61
    2078:	99 87       	std	Y+9, r25	; 0x09
    207a:	88 87       	std	Y+8, r24	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    207c:	1f 82       	std	Y+7, r1	; 0x07

	u8 Local_u8Iterator = 0;
    207e:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8LastBit  = 0;
    2080:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Check  = 0;
    2082:	19 82       	std	Y+1, r1	; 0x01
    2084:	1a 82       	std	Y+2, r1	; 0x02
    2086:	1b 82       	std	Y+3, r1	; 0x03
    2088:	1c 82       	std	Y+4, r1	; 0x04

	if(Copy_pstrSegConfig != NULL)
    208a:	88 85       	ldd	r24, Y+8	; 0x08
    208c:	99 85       	ldd	r25, Y+9	; 0x09
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	09 f4       	brne	.+2      	; 0x2094 <SSDLT_enuInit+0x30>
    2092:	35 c3       	rjmp	.+1642   	; 0x26fe <SSDLT_enuInit+0x69a>
	{
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
    2094:	1e 82       	std	Y+6, r1	; 0x06
    2096:	2e c3       	rjmp	.+1628   	; 0x26f4 <SSDLT_enuInit+0x690>
		{
			Local_u32Check |= (DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8APort,
    2098:	8e 81       	ldd	r24, Y+6	; 0x06
    209a:	48 2f       	mov	r20, r24
    209c:	50 e0       	ldi	r21, 0x00	; 0
    209e:	ca 01       	movw	r24, r20
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	9c 01       	movw	r18, r24
    20a6:	22 0f       	add	r18, r18
    20a8:	33 1f       	adc	r19, r19
    20aa:	22 0f       	add	r18, r18
    20ac:	33 1f       	adc	r19, r19
    20ae:	22 0f       	add	r18, r18
    20b0:	33 1f       	adc	r19, r19
    20b2:	82 0f       	add	r24, r18
    20b4:	93 1f       	adc	r25, r19
    20b6:	9c 01       	movw	r18, r24
    20b8:	24 0f       	add	r18, r20
    20ba:	35 1f       	adc	r19, r21
    20bc:	88 85       	ldd	r24, Y+8	; 0x08
    20be:	99 85       	ldd	r25, Y+9	; 0x09
    20c0:	fc 01       	movw	r30, r24
    20c2:	e2 0f       	add	r30, r18
    20c4:	f3 1f       	adc	r31, r19
    20c6:	60 81       	ld	r22, Z
    20c8:	8e 81       	ldd	r24, Y+6	; 0x06
    20ca:	48 2f       	mov	r20, r24
    20cc:	50 e0       	ldi	r21, 0x00	; 0
    20ce:	ca 01       	movw	r24, r20
    20d0:	88 0f       	add	r24, r24
    20d2:	99 1f       	adc	r25, r25
    20d4:	9c 01       	movw	r18, r24
    20d6:	22 0f       	add	r18, r18
    20d8:	33 1f       	adc	r19, r19
    20da:	22 0f       	add	r18, r18
    20dc:	33 1f       	adc	r19, r19
    20de:	22 0f       	add	r18, r18
    20e0:	33 1f       	adc	r19, r19
    20e2:	82 0f       	add	r24, r18
    20e4:	93 1f       	adc	r25, r19
    20e6:	9c 01       	movw	r18, r24
    20e8:	24 0f       	add	r18, r20
    20ea:	35 1f       	adc	r19, r21
    20ec:	88 85       	ldd	r24, Y+8	; 0x08
    20ee:	99 85       	ldd	r25, Y+9	; 0x09
    20f0:	fc 01       	movw	r30, r24
    20f2:	e2 0f       	add	r30, r18
    20f4:	f3 1f       	adc	r31, r19
    20f6:	91 81       	ldd	r25, Z+1	; 0x01
    20f8:	86 2f       	mov	r24, r22
    20fa:	69 2f       	mov	r22, r25
    20fc:	41 e0       	ldi	r20, 0x01	; 1
    20fe:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    2102:	28 2f       	mov	r18, r24
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e0       	ldi	r20, 0x00	; 0
    2108:	50 e0       	ldi	r21, 0x00	; 0
    210a:	89 81       	ldd	r24, Y+1	; 0x01
    210c:	9a 81       	ldd	r25, Y+2	; 0x02
    210e:	ab 81       	ldd	r26, Y+3	; 0x03
    2110:	bc 81       	ldd	r27, Y+4	; 0x04
    2112:	82 2b       	or	r24, r18
    2114:	93 2b       	or	r25, r19
    2116:	a4 2b       	or	r26, r20
    2118:	b5 2b       	or	r27, r21
    211a:	89 83       	std	Y+1, r24	; 0x01
    211c:	9a 83       	std	Y+2, r25	; 0x02
    211e:	ab 83       	std	Y+3, r26	; 0x03
    2120:	bc 83       	std	Y+4, r27	; 0x04
													  Copy_pstrSegConfig[Local_u8Iterator].SEG_u8APin, DIO_u8OUTPUT) << 0);

			Local_u32Check |= (DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8BPort,
    2122:	8e 81       	ldd	r24, Y+6	; 0x06
    2124:	48 2f       	mov	r20, r24
    2126:	50 e0       	ldi	r21, 0x00	; 0
    2128:	ca 01       	movw	r24, r20
    212a:	88 0f       	add	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	9c 01       	movw	r18, r24
    2130:	22 0f       	add	r18, r18
    2132:	33 1f       	adc	r19, r19
    2134:	22 0f       	add	r18, r18
    2136:	33 1f       	adc	r19, r19
    2138:	22 0f       	add	r18, r18
    213a:	33 1f       	adc	r19, r19
    213c:	82 0f       	add	r24, r18
    213e:	93 1f       	adc	r25, r19
    2140:	9c 01       	movw	r18, r24
    2142:	24 0f       	add	r18, r20
    2144:	35 1f       	adc	r19, r21
    2146:	88 85       	ldd	r24, Y+8	; 0x08
    2148:	99 85       	ldd	r25, Y+9	; 0x09
    214a:	fc 01       	movw	r30, r24
    214c:	e2 0f       	add	r30, r18
    214e:	f3 1f       	adc	r31, r19
    2150:	62 81       	ldd	r22, Z+2	; 0x02
    2152:	8e 81       	ldd	r24, Y+6	; 0x06
    2154:	48 2f       	mov	r20, r24
    2156:	50 e0       	ldi	r21, 0x00	; 0
    2158:	ca 01       	movw	r24, r20
    215a:	88 0f       	add	r24, r24
    215c:	99 1f       	adc	r25, r25
    215e:	9c 01       	movw	r18, r24
    2160:	22 0f       	add	r18, r18
    2162:	33 1f       	adc	r19, r19
    2164:	22 0f       	add	r18, r18
    2166:	33 1f       	adc	r19, r19
    2168:	22 0f       	add	r18, r18
    216a:	33 1f       	adc	r19, r19
    216c:	82 0f       	add	r24, r18
    216e:	93 1f       	adc	r25, r19
    2170:	9c 01       	movw	r18, r24
    2172:	24 0f       	add	r18, r20
    2174:	35 1f       	adc	r19, r21
    2176:	88 85       	ldd	r24, Y+8	; 0x08
    2178:	99 85       	ldd	r25, Y+9	; 0x09
    217a:	fc 01       	movw	r30, r24
    217c:	e2 0f       	add	r30, r18
    217e:	f3 1f       	adc	r31, r19
    2180:	93 81       	ldd	r25, Z+3	; 0x03
    2182:	86 2f       	mov	r24, r22
    2184:	69 2f       	mov	r22, r25
    2186:	41 e0       	ldi	r20, 0x01	; 1
    2188:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    218c:	88 2f       	mov	r24, r24
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	88 0f       	add	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	88 0f       	add	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	88 0f       	add	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	9c 01       	movw	r18, r24
    219e:	44 27       	eor	r20, r20
    21a0:	37 fd       	sbrc	r19, 7
    21a2:	40 95       	com	r20
    21a4:	54 2f       	mov	r21, r20
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	9a 81       	ldd	r25, Y+2	; 0x02
    21aa:	ab 81       	ldd	r26, Y+3	; 0x03
    21ac:	bc 81       	ldd	r27, Y+4	; 0x04
    21ae:	82 2b       	or	r24, r18
    21b0:	93 2b       	or	r25, r19
    21b2:	a4 2b       	or	r26, r20
    21b4:	b5 2b       	or	r27, r21
    21b6:	89 83       	std	Y+1, r24	; 0x01
    21b8:	9a 83       	std	Y+2, r25	; 0x02
    21ba:	ab 83       	std	Y+3, r26	; 0x03
    21bc:	bc 83       	std	Y+4, r27	; 0x04
													  Copy_pstrSegConfig[Local_u8Iterator].SEG_u8BPin, DIO_u8OUTPUT) << 3);

			Local_u32Check |= (DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8CPort,
    21be:	8e 81       	ldd	r24, Y+6	; 0x06
    21c0:	48 2f       	mov	r20, r24
    21c2:	50 e0       	ldi	r21, 0x00	; 0
    21c4:	ca 01       	movw	r24, r20
    21c6:	88 0f       	add	r24, r24
    21c8:	99 1f       	adc	r25, r25
    21ca:	9c 01       	movw	r18, r24
    21cc:	22 0f       	add	r18, r18
    21ce:	33 1f       	adc	r19, r19
    21d0:	22 0f       	add	r18, r18
    21d2:	33 1f       	adc	r19, r19
    21d4:	22 0f       	add	r18, r18
    21d6:	33 1f       	adc	r19, r19
    21d8:	82 0f       	add	r24, r18
    21da:	93 1f       	adc	r25, r19
    21dc:	9c 01       	movw	r18, r24
    21de:	24 0f       	add	r18, r20
    21e0:	35 1f       	adc	r19, r21
    21e2:	88 85       	ldd	r24, Y+8	; 0x08
    21e4:	99 85       	ldd	r25, Y+9	; 0x09
    21e6:	fc 01       	movw	r30, r24
    21e8:	e2 0f       	add	r30, r18
    21ea:	f3 1f       	adc	r31, r19
    21ec:	64 81       	ldd	r22, Z+4	; 0x04
    21ee:	8e 81       	ldd	r24, Y+6	; 0x06
    21f0:	48 2f       	mov	r20, r24
    21f2:	50 e0       	ldi	r21, 0x00	; 0
    21f4:	ca 01       	movw	r24, r20
    21f6:	88 0f       	add	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	9c 01       	movw	r18, r24
    21fc:	22 0f       	add	r18, r18
    21fe:	33 1f       	adc	r19, r19
    2200:	22 0f       	add	r18, r18
    2202:	33 1f       	adc	r19, r19
    2204:	22 0f       	add	r18, r18
    2206:	33 1f       	adc	r19, r19
    2208:	82 0f       	add	r24, r18
    220a:	93 1f       	adc	r25, r19
    220c:	9c 01       	movw	r18, r24
    220e:	24 0f       	add	r18, r20
    2210:	35 1f       	adc	r19, r21
    2212:	88 85       	ldd	r24, Y+8	; 0x08
    2214:	99 85       	ldd	r25, Y+9	; 0x09
    2216:	fc 01       	movw	r30, r24
    2218:	e2 0f       	add	r30, r18
    221a:	f3 1f       	adc	r31, r19
    221c:	95 81       	ldd	r25, Z+5	; 0x05
    221e:	86 2f       	mov	r24, r22
    2220:	69 2f       	mov	r22, r25
    2222:	41 e0       	ldi	r20, 0x01	; 1
    2224:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    2228:	88 2f       	mov	r24, r24
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	00 24       	eor	r0, r0
    222e:	96 95       	lsr	r25
    2230:	87 95       	ror	r24
    2232:	07 94       	ror	r0
    2234:	96 95       	lsr	r25
    2236:	87 95       	ror	r24
    2238:	07 94       	ror	r0
    223a:	98 2f       	mov	r25, r24
    223c:	80 2d       	mov	r24, r0
    223e:	9c 01       	movw	r18, r24
    2240:	44 27       	eor	r20, r20
    2242:	37 fd       	sbrc	r19, 7
    2244:	40 95       	com	r20
    2246:	54 2f       	mov	r21, r20
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	9a 81       	ldd	r25, Y+2	; 0x02
    224c:	ab 81       	ldd	r26, Y+3	; 0x03
    224e:	bc 81       	ldd	r27, Y+4	; 0x04
    2250:	82 2b       	or	r24, r18
    2252:	93 2b       	or	r25, r19
    2254:	a4 2b       	or	r26, r20
    2256:	b5 2b       	or	r27, r21
    2258:	89 83       	std	Y+1, r24	; 0x01
    225a:	9a 83       	std	Y+2, r25	; 0x02
    225c:	ab 83       	std	Y+3, r26	; 0x03
    225e:	bc 83       	std	Y+4, r27	; 0x04
													  Copy_pstrSegConfig[Local_u8Iterator].SEG_u8CPin, DIO_u8OUTPUT) << 6);

			Local_u32Check |= (DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8DPort,
    2260:	8e 81       	ldd	r24, Y+6	; 0x06
    2262:	48 2f       	mov	r20, r24
    2264:	50 e0       	ldi	r21, 0x00	; 0
    2266:	ca 01       	movw	r24, r20
    2268:	88 0f       	add	r24, r24
    226a:	99 1f       	adc	r25, r25
    226c:	9c 01       	movw	r18, r24
    226e:	22 0f       	add	r18, r18
    2270:	33 1f       	adc	r19, r19
    2272:	22 0f       	add	r18, r18
    2274:	33 1f       	adc	r19, r19
    2276:	22 0f       	add	r18, r18
    2278:	33 1f       	adc	r19, r19
    227a:	82 0f       	add	r24, r18
    227c:	93 1f       	adc	r25, r19
    227e:	9c 01       	movw	r18, r24
    2280:	24 0f       	add	r18, r20
    2282:	35 1f       	adc	r19, r21
    2284:	88 85       	ldd	r24, Y+8	; 0x08
    2286:	99 85       	ldd	r25, Y+9	; 0x09
    2288:	fc 01       	movw	r30, r24
    228a:	e2 0f       	add	r30, r18
    228c:	f3 1f       	adc	r31, r19
    228e:	66 81       	ldd	r22, Z+6	; 0x06
    2290:	8e 81       	ldd	r24, Y+6	; 0x06
    2292:	48 2f       	mov	r20, r24
    2294:	50 e0       	ldi	r21, 0x00	; 0
    2296:	ca 01       	movw	r24, r20
    2298:	88 0f       	add	r24, r24
    229a:	99 1f       	adc	r25, r25
    229c:	9c 01       	movw	r18, r24
    229e:	22 0f       	add	r18, r18
    22a0:	33 1f       	adc	r19, r19
    22a2:	22 0f       	add	r18, r18
    22a4:	33 1f       	adc	r19, r19
    22a6:	22 0f       	add	r18, r18
    22a8:	33 1f       	adc	r19, r19
    22aa:	82 0f       	add	r24, r18
    22ac:	93 1f       	adc	r25, r19
    22ae:	9c 01       	movw	r18, r24
    22b0:	24 0f       	add	r18, r20
    22b2:	35 1f       	adc	r19, r21
    22b4:	88 85       	ldd	r24, Y+8	; 0x08
    22b6:	99 85       	ldd	r25, Y+9	; 0x09
    22b8:	fc 01       	movw	r30, r24
    22ba:	e2 0f       	add	r30, r18
    22bc:	f3 1f       	adc	r31, r19
    22be:	97 81       	ldd	r25, Z+7	; 0x07
    22c0:	86 2f       	mov	r24, r22
    22c2:	69 2f       	mov	r22, r25
    22c4:	41 e0       	ldi	r20, 0x01	; 1
    22c6:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    22ca:	88 2f       	mov	r24, r24
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	98 2f       	mov	r25, r24
    22d0:	88 27       	eor	r24, r24
    22d2:	99 0f       	add	r25, r25
    22d4:	9c 01       	movw	r18, r24
    22d6:	44 27       	eor	r20, r20
    22d8:	37 fd       	sbrc	r19, 7
    22da:	40 95       	com	r20
    22dc:	54 2f       	mov	r21, r20
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	9a 81       	ldd	r25, Y+2	; 0x02
    22e2:	ab 81       	ldd	r26, Y+3	; 0x03
    22e4:	bc 81       	ldd	r27, Y+4	; 0x04
    22e6:	82 2b       	or	r24, r18
    22e8:	93 2b       	or	r25, r19
    22ea:	a4 2b       	or	r26, r20
    22ec:	b5 2b       	or	r27, r21
    22ee:	89 83       	std	Y+1, r24	; 0x01
    22f0:	9a 83       	std	Y+2, r25	; 0x02
    22f2:	ab 83       	std	Y+3, r26	; 0x03
    22f4:	bc 83       	std	Y+4, r27	; 0x04
													  Copy_pstrSegConfig[Local_u8Iterator].SEG_u8DPin, DIO_u8OUTPUT) << 9);

			Local_u32Check |= (DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8EPort,
    22f6:	8e 81       	ldd	r24, Y+6	; 0x06
    22f8:	48 2f       	mov	r20, r24
    22fa:	50 e0       	ldi	r21, 0x00	; 0
    22fc:	ca 01       	movw	r24, r20
    22fe:	88 0f       	add	r24, r24
    2300:	99 1f       	adc	r25, r25
    2302:	9c 01       	movw	r18, r24
    2304:	22 0f       	add	r18, r18
    2306:	33 1f       	adc	r19, r19
    2308:	22 0f       	add	r18, r18
    230a:	33 1f       	adc	r19, r19
    230c:	22 0f       	add	r18, r18
    230e:	33 1f       	adc	r19, r19
    2310:	82 0f       	add	r24, r18
    2312:	93 1f       	adc	r25, r19
    2314:	9c 01       	movw	r18, r24
    2316:	24 0f       	add	r18, r20
    2318:	35 1f       	adc	r19, r21
    231a:	88 85       	ldd	r24, Y+8	; 0x08
    231c:	99 85       	ldd	r25, Y+9	; 0x09
    231e:	fc 01       	movw	r30, r24
    2320:	e2 0f       	add	r30, r18
    2322:	f3 1f       	adc	r31, r19
    2324:	60 85       	ldd	r22, Z+8	; 0x08
    2326:	8e 81       	ldd	r24, Y+6	; 0x06
    2328:	48 2f       	mov	r20, r24
    232a:	50 e0       	ldi	r21, 0x00	; 0
    232c:	ca 01       	movw	r24, r20
    232e:	88 0f       	add	r24, r24
    2330:	99 1f       	adc	r25, r25
    2332:	9c 01       	movw	r18, r24
    2334:	22 0f       	add	r18, r18
    2336:	33 1f       	adc	r19, r19
    2338:	22 0f       	add	r18, r18
    233a:	33 1f       	adc	r19, r19
    233c:	22 0f       	add	r18, r18
    233e:	33 1f       	adc	r19, r19
    2340:	82 0f       	add	r24, r18
    2342:	93 1f       	adc	r25, r19
    2344:	9c 01       	movw	r18, r24
    2346:	24 0f       	add	r18, r20
    2348:	35 1f       	adc	r19, r21
    234a:	88 85       	ldd	r24, Y+8	; 0x08
    234c:	99 85       	ldd	r25, Y+9	; 0x09
    234e:	fc 01       	movw	r30, r24
    2350:	e2 0f       	add	r30, r18
    2352:	f3 1f       	adc	r31, r19
    2354:	91 85       	ldd	r25, Z+9	; 0x09
    2356:	86 2f       	mov	r24, r22
    2358:	69 2f       	mov	r22, r25
    235a:	41 e0       	ldi	r20, 0x01	; 1
    235c:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    2360:	88 2f       	mov	r24, r24
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	98 2f       	mov	r25, r24
    2366:	88 27       	eor	r24, r24
    2368:	92 95       	swap	r25
    236a:	90 7f       	andi	r25, 0xF0	; 240
    236c:	9c 01       	movw	r18, r24
    236e:	44 27       	eor	r20, r20
    2370:	37 fd       	sbrc	r19, 7
    2372:	40 95       	com	r20
    2374:	54 2f       	mov	r21, r20
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	9a 81       	ldd	r25, Y+2	; 0x02
    237a:	ab 81       	ldd	r26, Y+3	; 0x03
    237c:	bc 81       	ldd	r27, Y+4	; 0x04
    237e:	82 2b       	or	r24, r18
    2380:	93 2b       	or	r25, r19
    2382:	a4 2b       	or	r26, r20
    2384:	b5 2b       	or	r27, r21
    2386:	89 83       	std	Y+1, r24	; 0x01
    2388:	9a 83       	std	Y+2, r25	; 0x02
    238a:	ab 83       	std	Y+3, r26	; 0x03
    238c:	bc 83       	std	Y+4, r27	; 0x04
													  Copy_pstrSegConfig[Local_u8Iterator].SEG_u8EPin, DIO_u8OUTPUT) << 12);

			Local_u32Check |= (((u32)DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8FPort,
    238e:	8e 81       	ldd	r24, Y+6	; 0x06
    2390:	48 2f       	mov	r20, r24
    2392:	50 e0       	ldi	r21, 0x00	; 0
    2394:	ca 01       	movw	r24, r20
    2396:	88 0f       	add	r24, r24
    2398:	99 1f       	adc	r25, r25
    239a:	9c 01       	movw	r18, r24
    239c:	22 0f       	add	r18, r18
    239e:	33 1f       	adc	r19, r19
    23a0:	22 0f       	add	r18, r18
    23a2:	33 1f       	adc	r19, r19
    23a4:	22 0f       	add	r18, r18
    23a6:	33 1f       	adc	r19, r19
    23a8:	82 0f       	add	r24, r18
    23aa:	93 1f       	adc	r25, r19
    23ac:	9c 01       	movw	r18, r24
    23ae:	24 0f       	add	r18, r20
    23b0:	35 1f       	adc	r19, r21
    23b2:	88 85       	ldd	r24, Y+8	; 0x08
    23b4:	99 85       	ldd	r25, Y+9	; 0x09
    23b6:	fc 01       	movw	r30, r24
    23b8:	e2 0f       	add	r30, r18
    23ba:	f3 1f       	adc	r31, r19
    23bc:	62 85       	ldd	r22, Z+10	; 0x0a
    23be:	8e 81       	ldd	r24, Y+6	; 0x06
    23c0:	48 2f       	mov	r20, r24
    23c2:	50 e0       	ldi	r21, 0x00	; 0
    23c4:	ca 01       	movw	r24, r20
    23c6:	88 0f       	add	r24, r24
    23c8:	99 1f       	adc	r25, r25
    23ca:	9c 01       	movw	r18, r24
    23cc:	22 0f       	add	r18, r18
    23ce:	33 1f       	adc	r19, r19
    23d0:	22 0f       	add	r18, r18
    23d2:	33 1f       	adc	r19, r19
    23d4:	22 0f       	add	r18, r18
    23d6:	33 1f       	adc	r19, r19
    23d8:	82 0f       	add	r24, r18
    23da:	93 1f       	adc	r25, r19
    23dc:	9c 01       	movw	r18, r24
    23de:	24 0f       	add	r18, r20
    23e0:	35 1f       	adc	r19, r21
    23e2:	88 85       	ldd	r24, Y+8	; 0x08
    23e4:	99 85       	ldd	r25, Y+9	; 0x09
    23e6:	fc 01       	movw	r30, r24
    23e8:	e2 0f       	add	r30, r18
    23ea:	f3 1f       	adc	r31, r19
    23ec:	93 85       	ldd	r25, Z+11	; 0x0b
    23ee:	86 2f       	mov	r24, r22
    23f0:	69 2f       	mov	r22, r25
    23f2:	41 e0       	ldi	r20, 0x01	; 1
    23f4:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    23f8:	88 2f       	mov	r24, r24
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	a0 e0       	ldi	r26, 0x00	; 0
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	9c 01       	movw	r18, r24
    2402:	ad 01       	movw	r20, r26
    2404:	01 2e       	mov	r0, r17
    2406:	1f e0       	ldi	r17, 0x0F	; 15
    2408:	22 0f       	add	r18, r18
    240a:	33 1f       	adc	r19, r19
    240c:	44 1f       	adc	r20, r20
    240e:	55 1f       	adc	r21, r21
    2410:	1a 95       	dec	r17
    2412:	d1 f7       	brne	.-12     	; 0x2408 <SSDLT_enuInit+0x3a4>
    2414:	10 2d       	mov	r17, r0
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	9a 81       	ldd	r25, Y+2	; 0x02
    241a:	ab 81       	ldd	r26, Y+3	; 0x03
    241c:	bc 81       	ldd	r27, Y+4	; 0x04
    241e:	82 2b       	or	r24, r18
    2420:	93 2b       	or	r25, r19
    2422:	a4 2b       	or	r26, r20
    2424:	b5 2b       	or	r27, r21
    2426:	89 83       	std	Y+1, r24	; 0x01
    2428:	9a 83       	std	Y+2, r25	; 0x02
    242a:	ab 83       	std	Y+3, r26	; 0x03
    242c:	bc 83       	std	Y+4, r27	; 0x04
													 Copy_pstrSegConfig[Local_u8Iterator].SEG_u8FPin, DIO_u8OUTPUT)) << 15);

			Local_u32Check |= (((u32)DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8GPort,
    242e:	8e 81       	ldd	r24, Y+6	; 0x06
    2430:	48 2f       	mov	r20, r24
    2432:	50 e0       	ldi	r21, 0x00	; 0
    2434:	ca 01       	movw	r24, r20
    2436:	88 0f       	add	r24, r24
    2438:	99 1f       	adc	r25, r25
    243a:	9c 01       	movw	r18, r24
    243c:	22 0f       	add	r18, r18
    243e:	33 1f       	adc	r19, r19
    2440:	22 0f       	add	r18, r18
    2442:	33 1f       	adc	r19, r19
    2444:	22 0f       	add	r18, r18
    2446:	33 1f       	adc	r19, r19
    2448:	82 0f       	add	r24, r18
    244a:	93 1f       	adc	r25, r19
    244c:	9c 01       	movw	r18, r24
    244e:	24 0f       	add	r18, r20
    2450:	35 1f       	adc	r19, r21
    2452:	88 85       	ldd	r24, Y+8	; 0x08
    2454:	99 85       	ldd	r25, Y+9	; 0x09
    2456:	fc 01       	movw	r30, r24
    2458:	e2 0f       	add	r30, r18
    245a:	f3 1f       	adc	r31, r19
    245c:	64 85       	ldd	r22, Z+12	; 0x0c
    245e:	8e 81       	ldd	r24, Y+6	; 0x06
    2460:	48 2f       	mov	r20, r24
    2462:	50 e0       	ldi	r21, 0x00	; 0
    2464:	ca 01       	movw	r24, r20
    2466:	88 0f       	add	r24, r24
    2468:	99 1f       	adc	r25, r25
    246a:	9c 01       	movw	r18, r24
    246c:	22 0f       	add	r18, r18
    246e:	33 1f       	adc	r19, r19
    2470:	22 0f       	add	r18, r18
    2472:	33 1f       	adc	r19, r19
    2474:	22 0f       	add	r18, r18
    2476:	33 1f       	adc	r19, r19
    2478:	82 0f       	add	r24, r18
    247a:	93 1f       	adc	r25, r19
    247c:	9c 01       	movw	r18, r24
    247e:	24 0f       	add	r18, r20
    2480:	35 1f       	adc	r19, r21
    2482:	88 85       	ldd	r24, Y+8	; 0x08
    2484:	99 85       	ldd	r25, Y+9	; 0x09
    2486:	fc 01       	movw	r30, r24
    2488:	e2 0f       	add	r30, r18
    248a:	f3 1f       	adc	r31, r19
    248c:	95 85       	ldd	r25, Z+13	; 0x0d
    248e:	86 2f       	mov	r24, r22
    2490:	69 2f       	mov	r22, r25
    2492:	41 e0       	ldi	r20, 0x01	; 1
    2494:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    2498:	88 2f       	mov	r24, r24
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	a0 e0       	ldi	r26, 0x00	; 0
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	9c 01       	movw	r18, r24
    24a2:	ad 01       	movw	r20, r26
    24a4:	01 2e       	mov	r0, r17
    24a6:	12 e1       	ldi	r17, 0x12	; 18
    24a8:	22 0f       	add	r18, r18
    24aa:	33 1f       	adc	r19, r19
    24ac:	44 1f       	adc	r20, r20
    24ae:	55 1f       	adc	r21, r21
    24b0:	1a 95       	dec	r17
    24b2:	d1 f7       	brne	.-12     	; 0x24a8 <SSDLT_enuInit+0x444>
    24b4:	10 2d       	mov	r17, r0
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ba:	ab 81       	ldd	r26, Y+3	; 0x03
    24bc:	bc 81       	ldd	r27, Y+4	; 0x04
    24be:	82 2b       	or	r24, r18
    24c0:	93 2b       	or	r25, r19
    24c2:	a4 2b       	or	r26, r20
    24c4:	b5 2b       	or	r27, r21
    24c6:	89 83       	std	Y+1, r24	; 0x01
    24c8:	9a 83       	std	Y+2, r25	; 0x02
    24ca:	ab 83       	std	Y+3, r26	; 0x03
    24cc:	bc 83       	std	Y+4, r27	; 0x04
													 Copy_pstrSegConfig[Local_u8Iterator].SEG_u8GPin, DIO_u8OUTPUT)) << 18);
			Local_u8LastBit = 21;
    24ce:	85 e1       	ldi	r24, 0x15	; 21
    24d0:	8d 83       	std	Y+5, r24	; 0x05

			if(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8CMN_Port != NOT_CONNECTED ||
    24d2:	8e 81       	ldd	r24, Y+6	; 0x06
    24d4:	48 2f       	mov	r20, r24
    24d6:	50 e0       	ldi	r21, 0x00	; 0
    24d8:	ca 01       	movw	r24, r20
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	9c 01       	movw	r18, r24
    24e0:	22 0f       	add	r18, r18
    24e2:	33 1f       	adc	r19, r19
    24e4:	22 0f       	add	r18, r18
    24e6:	33 1f       	adc	r19, r19
    24e8:	22 0f       	add	r18, r18
    24ea:	33 1f       	adc	r19, r19
    24ec:	82 0f       	add	r24, r18
    24ee:	93 1f       	adc	r25, r19
    24f0:	9c 01       	movw	r18, r24
    24f2:	24 0f       	add	r18, r20
    24f4:	35 1f       	adc	r19, r21
    24f6:	88 85       	ldd	r24, Y+8	; 0x08
    24f8:	99 85       	ldd	r25, Y+9	; 0x09
    24fa:	fc 01       	movw	r30, r24
    24fc:	e2 0f       	add	r30, r18
    24fe:	f3 1f       	adc	r31, r19
    2500:	86 85       	ldd	r24, Z+14	; 0x0e
    2502:	82 30       	cpi	r24, 0x02	; 2
    2504:	d9 f4       	brne	.+54     	; 0x253c <SSDLT_enuInit+0x4d8>
    2506:	8e 81       	ldd	r24, Y+6	; 0x06
    2508:	48 2f       	mov	r20, r24
    250a:	50 e0       	ldi	r21, 0x00	; 0
    250c:	ca 01       	movw	r24, r20
    250e:	88 0f       	add	r24, r24
    2510:	99 1f       	adc	r25, r25
    2512:	9c 01       	movw	r18, r24
    2514:	22 0f       	add	r18, r18
    2516:	33 1f       	adc	r19, r19
    2518:	22 0f       	add	r18, r18
    251a:	33 1f       	adc	r19, r19
    251c:	22 0f       	add	r18, r18
    251e:	33 1f       	adc	r19, r19
    2520:	82 0f       	add	r24, r18
    2522:	93 1f       	adc	r25, r19
    2524:	9c 01       	movw	r18, r24
    2526:	24 0f       	add	r18, r20
    2528:	35 1f       	adc	r19, r21
    252a:	88 85       	ldd	r24, Y+8	; 0x08
    252c:	99 85       	ldd	r25, Y+9	; 0x09
    252e:	fc 01       	movw	r30, r24
    2530:	e2 0f       	add	r30, r18
    2532:	f3 1f       	adc	r31, r19
    2534:	87 85       	ldd	r24, Z+15	; 0x0f
    2536:	82 30       	cpi	r24, 0x02	; 2
    2538:	09 f4       	brne	.+2      	; 0x253c <SSDLT_enuInit+0x4d8>
    253a:	52 c0       	rjmp	.+164    	; 0x25e0 <SSDLT_enuInit+0x57c>
			   Copy_pstrSegConfig[Local_u8Iterator].SEG_u8CMN_Pin != NOT_CONNECTED)
			{
				Local_u32Check |= (((u32)DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8CMN_Port,
    253c:	8e 81       	ldd	r24, Y+6	; 0x06
    253e:	48 2f       	mov	r20, r24
    2540:	50 e0       	ldi	r21, 0x00	; 0
    2542:	ca 01       	movw	r24, r20
    2544:	88 0f       	add	r24, r24
    2546:	99 1f       	adc	r25, r25
    2548:	9c 01       	movw	r18, r24
    254a:	22 0f       	add	r18, r18
    254c:	33 1f       	adc	r19, r19
    254e:	22 0f       	add	r18, r18
    2550:	33 1f       	adc	r19, r19
    2552:	22 0f       	add	r18, r18
    2554:	33 1f       	adc	r19, r19
    2556:	82 0f       	add	r24, r18
    2558:	93 1f       	adc	r25, r19
    255a:	9c 01       	movw	r18, r24
    255c:	24 0f       	add	r18, r20
    255e:	35 1f       	adc	r19, r21
    2560:	88 85       	ldd	r24, Y+8	; 0x08
    2562:	99 85       	ldd	r25, Y+9	; 0x09
    2564:	fc 01       	movw	r30, r24
    2566:	e2 0f       	add	r30, r18
    2568:	f3 1f       	adc	r31, r19
    256a:	66 85       	ldd	r22, Z+14	; 0x0e
    256c:	8e 81       	ldd	r24, Y+6	; 0x06
    256e:	48 2f       	mov	r20, r24
    2570:	50 e0       	ldi	r21, 0x00	; 0
    2572:	ca 01       	movw	r24, r20
    2574:	88 0f       	add	r24, r24
    2576:	99 1f       	adc	r25, r25
    2578:	9c 01       	movw	r18, r24
    257a:	22 0f       	add	r18, r18
    257c:	33 1f       	adc	r19, r19
    257e:	22 0f       	add	r18, r18
    2580:	33 1f       	adc	r19, r19
    2582:	22 0f       	add	r18, r18
    2584:	33 1f       	adc	r19, r19
    2586:	82 0f       	add	r24, r18
    2588:	93 1f       	adc	r25, r19
    258a:	9c 01       	movw	r18, r24
    258c:	24 0f       	add	r18, r20
    258e:	35 1f       	adc	r19, r21
    2590:	88 85       	ldd	r24, Y+8	; 0x08
    2592:	99 85       	ldd	r25, Y+9	; 0x09
    2594:	fc 01       	movw	r30, r24
    2596:	e2 0f       	add	r30, r18
    2598:	f3 1f       	adc	r31, r19
    259a:	97 85       	ldd	r25, Z+15	; 0x0f
    259c:	86 2f       	mov	r24, r22
    259e:	69 2f       	mov	r22, r25
    25a0:	41 e0       	ldi	r20, 0x01	; 1
    25a2:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    25a6:	28 2f       	mov	r18, r24
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	50 e0       	ldi	r21, 0x00	; 0
    25ae:	8d 81       	ldd	r24, Y+5	; 0x05
    25b0:	88 2f       	mov	r24, r24
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	04 c0       	rjmp	.+8      	; 0x25be <SSDLT_enuInit+0x55a>
    25b6:	22 0f       	add	r18, r18
    25b8:	33 1f       	adc	r19, r19
    25ba:	44 1f       	adc	r20, r20
    25bc:	55 1f       	adc	r21, r21
    25be:	8a 95       	dec	r24
    25c0:	d2 f7       	brpl	.-12     	; 0x25b6 <SSDLT_enuInit+0x552>
    25c2:	89 81       	ldd	r24, Y+1	; 0x01
    25c4:	9a 81       	ldd	r25, Y+2	; 0x02
    25c6:	ab 81       	ldd	r26, Y+3	; 0x03
    25c8:	bc 81       	ldd	r27, Y+4	; 0x04
    25ca:	82 2b       	or	r24, r18
    25cc:	93 2b       	or	r25, r19
    25ce:	a4 2b       	or	r26, r20
    25d0:	b5 2b       	or	r27, r21
    25d2:	89 83       	std	Y+1, r24	; 0x01
    25d4:	9a 83       	std	Y+2, r25	; 0x02
    25d6:	ab 83       	std	Y+3, r26	; 0x03
    25d8:	bc 83       	std	Y+4, r27	; 0x04
												   Copy_pstrSegConfig[Local_u8Iterator].SEG_u8CMN_Pin, DIO_u8OUTPUT) << Local_u8LastBit));
				Local_u8LastBit += 3;
    25da:	8d 81       	ldd	r24, Y+5	; 0x05
    25dc:	8d 5f       	subi	r24, 0xFD	; 253
    25de:	8d 83       	std	Y+5, r24	; 0x05
			}

			if(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8DOT_Port != NOT_CONNECTED ||
    25e0:	8e 81       	ldd	r24, Y+6	; 0x06
    25e2:	48 2f       	mov	r20, r24
    25e4:	50 e0       	ldi	r21, 0x00	; 0
    25e6:	ca 01       	movw	r24, r20
    25e8:	88 0f       	add	r24, r24
    25ea:	99 1f       	adc	r25, r25
    25ec:	9c 01       	movw	r18, r24
    25ee:	22 0f       	add	r18, r18
    25f0:	33 1f       	adc	r19, r19
    25f2:	22 0f       	add	r18, r18
    25f4:	33 1f       	adc	r19, r19
    25f6:	22 0f       	add	r18, r18
    25f8:	33 1f       	adc	r19, r19
    25fa:	82 0f       	add	r24, r18
    25fc:	93 1f       	adc	r25, r19
    25fe:	9c 01       	movw	r18, r24
    2600:	24 0f       	add	r18, r20
    2602:	35 1f       	adc	r19, r21
    2604:	88 85       	ldd	r24, Y+8	; 0x08
    2606:	99 85       	ldd	r25, Y+9	; 0x09
    2608:	fc 01       	movw	r30, r24
    260a:	e2 0f       	add	r30, r18
    260c:	f3 1f       	adc	r31, r19
    260e:	80 89       	ldd	r24, Z+16	; 0x10
    2610:	82 30       	cpi	r24, 0x02	; 2
    2612:	d9 f4       	brne	.+54     	; 0x264a <SSDLT_enuInit+0x5e6>
    2614:	8e 81       	ldd	r24, Y+6	; 0x06
    2616:	48 2f       	mov	r20, r24
    2618:	50 e0       	ldi	r21, 0x00	; 0
    261a:	ca 01       	movw	r24, r20
    261c:	88 0f       	add	r24, r24
    261e:	99 1f       	adc	r25, r25
    2620:	9c 01       	movw	r18, r24
    2622:	22 0f       	add	r18, r18
    2624:	33 1f       	adc	r19, r19
    2626:	22 0f       	add	r18, r18
    2628:	33 1f       	adc	r19, r19
    262a:	22 0f       	add	r18, r18
    262c:	33 1f       	adc	r19, r19
    262e:	82 0f       	add	r24, r18
    2630:	93 1f       	adc	r25, r19
    2632:	9c 01       	movw	r18, r24
    2634:	24 0f       	add	r18, r20
    2636:	35 1f       	adc	r19, r21
    2638:	88 85       	ldd	r24, Y+8	; 0x08
    263a:	99 85       	ldd	r25, Y+9	; 0x09
    263c:	fc 01       	movw	r30, r24
    263e:	e2 0f       	add	r30, r18
    2640:	f3 1f       	adc	r31, r19
    2642:	81 89       	ldd	r24, Z+17	; 0x11
    2644:	82 30       	cpi	r24, 0x02	; 2
    2646:	09 f4       	brne	.+2      	; 0x264a <SSDLT_enuInit+0x5e6>
    2648:	52 c0       	rjmp	.+164    	; 0x26ee <SSDLT_enuInit+0x68a>
			   Copy_pstrSegConfig[Local_u8Iterator].SEG_u8DOT_Pin != NOT_CONNECTED)
			{
				Local_u32Check |= (((u32)DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8DOT_Port,
    264a:	8e 81       	ldd	r24, Y+6	; 0x06
    264c:	48 2f       	mov	r20, r24
    264e:	50 e0       	ldi	r21, 0x00	; 0
    2650:	ca 01       	movw	r24, r20
    2652:	88 0f       	add	r24, r24
    2654:	99 1f       	adc	r25, r25
    2656:	9c 01       	movw	r18, r24
    2658:	22 0f       	add	r18, r18
    265a:	33 1f       	adc	r19, r19
    265c:	22 0f       	add	r18, r18
    265e:	33 1f       	adc	r19, r19
    2660:	22 0f       	add	r18, r18
    2662:	33 1f       	adc	r19, r19
    2664:	82 0f       	add	r24, r18
    2666:	93 1f       	adc	r25, r19
    2668:	9c 01       	movw	r18, r24
    266a:	24 0f       	add	r18, r20
    266c:	35 1f       	adc	r19, r21
    266e:	88 85       	ldd	r24, Y+8	; 0x08
    2670:	99 85       	ldd	r25, Y+9	; 0x09
    2672:	fc 01       	movw	r30, r24
    2674:	e2 0f       	add	r30, r18
    2676:	f3 1f       	adc	r31, r19
    2678:	60 89       	ldd	r22, Z+16	; 0x10
    267a:	8e 81       	ldd	r24, Y+6	; 0x06
    267c:	48 2f       	mov	r20, r24
    267e:	50 e0       	ldi	r21, 0x00	; 0
    2680:	ca 01       	movw	r24, r20
    2682:	88 0f       	add	r24, r24
    2684:	99 1f       	adc	r25, r25
    2686:	9c 01       	movw	r18, r24
    2688:	22 0f       	add	r18, r18
    268a:	33 1f       	adc	r19, r19
    268c:	22 0f       	add	r18, r18
    268e:	33 1f       	adc	r19, r19
    2690:	22 0f       	add	r18, r18
    2692:	33 1f       	adc	r19, r19
    2694:	82 0f       	add	r24, r18
    2696:	93 1f       	adc	r25, r19
    2698:	9c 01       	movw	r18, r24
    269a:	24 0f       	add	r18, r20
    269c:	35 1f       	adc	r19, r21
    269e:	88 85       	ldd	r24, Y+8	; 0x08
    26a0:	99 85       	ldd	r25, Y+9	; 0x09
    26a2:	fc 01       	movw	r30, r24
    26a4:	e2 0f       	add	r30, r18
    26a6:	f3 1f       	adc	r31, r19
    26a8:	91 89       	ldd	r25, Z+17	; 0x11
    26aa:	86 2f       	mov	r24, r22
    26ac:	69 2f       	mov	r22, r25
    26ae:	41 e0       	ldi	r20, 0x01	; 1
    26b0:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    26b4:	28 2f       	mov	r18, r24
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	40 e0       	ldi	r20, 0x00	; 0
    26ba:	50 e0       	ldi	r21, 0x00	; 0
    26bc:	8d 81       	ldd	r24, Y+5	; 0x05
    26be:	88 2f       	mov	r24, r24
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	04 c0       	rjmp	.+8      	; 0x26cc <SSDLT_enuInit+0x668>
    26c4:	22 0f       	add	r18, r18
    26c6:	33 1f       	adc	r19, r19
    26c8:	44 1f       	adc	r20, r20
    26ca:	55 1f       	adc	r21, r21
    26cc:	8a 95       	dec	r24
    26ce:	d2 f7       	brpl	.-12     	; 0x26c4 <SSDLT_enuInit+0x660>
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	9a 81       	ldd	r25, Y+2	; 0x02
    26d4:	ab 81       	ldd	r26, Y+3	; 0x03
    26d6:	bc 81       	ldd	r27, Y+4	; 0x04
    26d8:	82 2b       	or	r24, r18
    26da:	93 2b       	or	r25, r19
    26dc:	a4 2b       	or	r26, r20
    26de:	b5 2b       	or	r27, r21
    26e0:	89 83       	std	Y+1, r24	; 0x01
    26e2:	9a 83       	std	Y+2, r25	; 0x02
    26e4:	ab 83       	std	Y+3, r26	; 0x03
    26e6:	bc 83       	std	Y+4, r27	; 0x04
												   Copy_pstrSegConfig[Local_u8Iterator].SEG_u8DOT_Pin, DIO_u8OUTPUT) << Local_u8LastBit));
				Local_u8LastBit += 3;
    26e8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ea:	8d 5f       	subi	r24, 0xFD	; 253
    26ec:	8d 83       	std	Y+5, r24	; 0x05
	u8 Local_u8LastBit  = 0;
	u32 Local_u32Check  = 0;

	if(Copy_pstrSegConfig != NULL)
	{
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
    26ee:	8e 81       	ldd	r24, Y+6	; 0x06
    26f0:	8f 5f       	subi	r24, 0xFF	; 255
    26f2:	8e 83       	std	Y+6, r24	; 0x06
    26f4:	8e 81       	ldd	r24, Y+6	; 0x06
    26f6:	82 30       	cpi	r24, 0x02	; 2
    26f8:	08 f4       	brcc	.+2      	; 0x26fc <SSDLT_enuInit+0x698>
    26fa:	ce cc       	rjmp	.-1636   	; 0x2098 <SSDLT_enuInit+0x34>
    26fc:	02 c0       	rjmp	.+4      	; 0x2702 <SSDLT_enuInit+0x69e>

		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    26fe:	82 e0       	ldi	r24, 0x02	; 2
    2700:	8f 83       	std	Y+7, r24	; 0x07
	}


	for(Local_u8Iterator = 0; Local_u8Iterator < Local_u8LastBit; Local_u8Iterator += 3)
    2702:	1e 82       	std	Y+6, r1	; 0x06
    2704:	1e c0       	rjmp	.+60     	; 0x2742 <SSDLT_enuInit+0x6de>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
    2706:	8e 81       	ldd	r24, Y+6	; 0x06
    2708:	28 2f       	mov	r18, r24
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	9a 81       	ldd	r25, Y+2	; 0x02
    2710:	ab 81       	ldd	r26, Y+3	; 0x03
    2712:	bc 81       	ldd	r27, Y+4	; 0x04
    2714:	02 2e       	mov	r0, r18
    2716:	04 c0       	rjmp	.+8      	; 0x2720 <SSDLT_enuInit+0x6bc>
    2718:	b6 95       	lsr	r27
    271a:	a7 95       	ror	r26
    271c:	97 95       	ror	r25
    271e:	87 95       	ror	r24
    2720:	0a 94       	dec	r0
    2722:	d2 f7       	brpl	.-12     	; 0x2718 <SSDLT_enuInit+0x6b4>
    2724:	87 70       	andi	r24, 0x07	; 7
    2726:	90 70       	andi	r25, 0x00	; 0
    2728:	a0 70       	andi	r26, 0x00	; 0
    272a:	b0 70       	andi	r27, 0x00	; 0
    272c:	81 30       	cpi	r24, 0x01	; 1
    272e:	91 05       	cpc	r25, r1
    2730:	a1 05       	cpc	r26, r1
    2732:	b1 05       	cpc	r27, r1
    2734:	19 f0       	breq	.+6      	; 0x273c <SSDLT_enuInit+0x6d8>
		{
			return Local_enuErrorState;
    2736:	8f 81       	ldd	r24, Y+7	; 0x07
    2738:	8a 87       	std	Y+10, r24	; 0x0a
    273a:	0b c0       	rjmp	.+22     	; 0x2752 <SSDLT_enuInit+0x6ee>
	{
		Local_enuErrorState = ES_NULL_POINTER;
	}


	for(Local_u8Iterator = 0; Local_u8Iterator < Local_u8LastBit; Local_u8Iterator += 3)
    273c:	8e 81       	ldd	r24, Y+6	; 0x06
    273e:	8d 5f       	subi	r24, 0xFD	; 253
    2740:	8e 83       	std	Y+6, r24	; 0x06
    2742:	9e 81       	ldd	r25, Y+6	; 0x06
    2744:	8d 81       	ldd	r24, Y+5	; 0x05
    2746:	98 17       	cp	r25, r24
    2748:	f0 f2       	brcs	.-68     	; 0x2706 <SSDLT_enuInit+0x6a2>
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
		{
			return Local_enuErrorState;
		}
	}
	Local_enuErrorState = ES_OK;
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	8f 83       	std	Y+7, r24	; 0x07

	return Local_enuErrorState;
    274e:	8f 81       	ldd	r24, Y+7	; 0x07
    2750:	8a 87       	std	Y+10, r24	; 0x0a
    2752:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    2754:	2a 96       	adiw	r28, 0x0a	; 10
    2756:	0f b6       	in	r0, 0x3f	; 63
    2758:	f8 94       	cli
    275a:	de bf       	out	0x3e, r29	; 62
    275c:	0f be       	out	0x3f, r0	; 63
    275e:	cd bf       	out	0x3d, r28	; 61
    2760:	cf 91       	pop	r28
    2762:	df 91       	pop	r29
    2764:	08 95       	ret

00002766 <SSDLT_enuDisplayNum>:

ES_t SSDLT_enuDisplayNum(u8 Copy_u8SegID, u8 Copy_u8Number)
{
    2766:	df 93       	push	r29
    2768:	cf 93       	push	r28
    276a:	cd b7       	in	r28, 0x3d	; 61
    276c:	de b7       	in	r29, 0x3e	; 62
    276e:	6e 97       	sbiw	r28, 0x1e	; 30
    2770:	0f b6       	in	r0, 0x3f	; 63
    2772:	f8 94       	cli
    2774:	de bf       	out	0x3e, r29	; 62
    2776:	0f be       	out	0x3f, r0	; 63
    2778:	cd bf       	out	0x3d, r28	; 61
    277a:	8f 83       	std	Y+7, r24	; 0x07
    277c:	68 87       	std	Y+8, r22	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    277e:	1e 82       	std	Y+6, r1	; 0x06

	u8 Local_u8Iterator = 0;
    2780:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Check = 0;
    2782:	19 82       	std	Y+1, r1	; 0x01
    2784:	1a 82       	std	Y+2, r1	; 0x02
    2786:	1b 82       	std	Y+3, r1	; 0x03
    2788:	1c 82       	std	Y+4, r1	; 0x04

	if(Copy_u8Number < 10 && Copy_u8SegID < SEG_NUM)
    278a:	88 85       	ldd	r24, Y+8	; 0x08
    278c:	8a 30       	cpi	r24, 0x0A	; 10
    278e:	08 f0       	brcs	.+2      	; 0x2792 <SSDLT_enuDisplayNum+0x2c>
    2790:	f6 c4       	rjmp	.+2540   	; 0x317e <SSDLT_enuDisplayNum+0xa18>
    2792:	8f 81       	ldd	r24, Y+7	; 0x07
    2794:	82 30       	cpi	r24, 0x02	; 2
    2796:	08 f0       	brcs	.+2      	; 0x279a <SSDLT_enuDisplayNum+0x34>
    2798:	f2 c4       	rjmp	.+2532   	; 0x317e <SSDLT_enuDisplayNum+0xa18>
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    279a:	8f 81       	ldd	r24, Y+7	; 0x07
    279c:	48 2f       	mov	r20, r24
    279e:	50 e0       	ldi	r21, 0x00	; 0
    27a0:	ca 01       	movw	r24, r20
    27a2:	88 0f       	add	r24, r24
    27a4:	99 1f       	adc	r25, r25
    27a6:	9c 01       	movw	r18, r24
    27a8:	22 0f       	add	r18, r18
    27aa:	33 1f       	adc	r19, r19
    27ac:	22 0f       	add	r18, r18
    27ae:	33 1f       	adc	r19, r19
    27b0:	22 0f       	add	r18, r18
    27b2:	33 1f       	adc	r19, r19
    27b4:	82 0f       	add	r24, r18
    27b6:	93 1f       	adc	r25, r19
    27b8:	84 0f       	add	r24, r20
    27ba:	95 1f       	adc	r25, r21
    27bc:	fc 01       	movw	r30, r24
    27be:	ed 56       	subi	r30, 0x6D	; 109
    27c0:	fe 4f       	sbci	r31, 0xFE	; 254
    27c2:	80 81       	ld	r24, Z
    27c4:	81 30       	cpi	r24, 0x01	; 1
    27c6:	09 f0       	breq	.+2      	; 0x27ca <SSDLT_enuDisplayNum+0x64>
    27c8:	40 c2       	rjmp	.+1152   	; 0x2c4a <SSDLT_enuDisplayNum+0x4e4>
		{
			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APort,
    27ca:	8f 81       	ldd	r24, Y+7	; 0x07
    27cc:	48 2f       	mov	r20, r24
    27ce:	50 e0       	ldi	r21, 0x00	; 0
    27d0:	ca 01       	movw	r24, r20
    27d2:	88 0f       	add	r24, r24
    27d4:	99 1f       	adc	r25, r25
    27d6:	9c 01       	movw	r18, r24
    27d8:	22 0f       	add	r18, r18
    27da:	33 1f       	adc	r19, r19
    27dc:	22 0f       	add	r18, r18
    27de:	33 1f       	adc	r19, r19
    27e0:	22 0f       	add	r18, r18
    27e2:	33 1f       	adc	r19, r19
    27e4:	82 0f       	add	r24, r18
    27e6:	93 1f       	adc	r25, r19
    27e8:	84 0f       	add	r24, r20
    27ea:	95 1f       	adc	r25, r21
    27ec:	fc 01       	movw	r30, r24
    27ee:	ef 57       	subi	r30, 0x7F	; 127
    27f0:	fe 4f       	sbci	r31, 0xFE	; 254
    27f2:	60 81       	ld	r22, Z
    27f4:	8f 81       	ldd	r24, Y+7	; 0x07
    27f6:	48 2f       	mov	r20, r24
    27f8:	50 e0       	ldi	r21, 0x00	; 0
    27fa:	ca 01       	movw	r24, r20
    27fc:	88 0f       	add	r24, r24
    27fe:	99 1f       	adc	r25, r25
    2800:	9c 01       	movw	r18, r24
    2802:	22 0f       	add	r18, r18
    2804:	33 1f       	adc	r19, r19
    2806:	22 0f       	add	r18, r18
    2808:	33 1f       	adc	r19, r19
    280a:	22 0f       	add	r18, r18
    280c:	33 1f       	adc	r19, r19
    280e:	82 0f       	add	r24, r18
    2810:	93 1f       	adc	r25, r19
    2812:	84 0f       	add	r24, r20
    2814:	95 1f       	adc	r25, r21
    2816:	fc 01       	movw	r30, r24
    2818:	ee 57       	subi	r30, 0x7E	; 126
    281a:	fe 4f       	sbci	r31, 0xFE	; 254
    281c:	20 81       	ld	r18, Z
    281e:	88 85       	ldd	r24, Y+8	; 0x08
    2820:	88 2f       	mov	r24, r24
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	fc 01       	movw	r30, r24
    2826:	e9 55       	subi	r30, 0x59	; 89
    2828:	fe 4f       	sbci	r31, 0xFE	; 254
    282a:	80 81       	ld	r24, Z
    282c:	98 2f       	mov	r25, r24
    282e:	91 70       	andi	r25, 0x01	; 1
    2830:	86 2f       	mov	r24, r22
    2832:	62 2f       	mov	r22, r18
    2834:	49 2f       	mov	r20, r25
    2836:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    283a:	28 2f       	mov	r18, r24
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	40 e0       	ldi	r20, 0x00	; 0
    2840:	50 e0       	ldi	r21, 0x00	; 0
    2842:	89 81       	ldd	r24, Y+1	; 0x01
    2844:	9a 81       	ldd	r25, Y+2	; 0x02
    2846:	ab 81       	ldd	r26, Y+3	; 0x03
    2848:	bc 81       	ldd	r27, Y+4	; 0x04
    284a:	82 2b       	or	r24, r18
    284c:	93 2b       	or	r25, r19
    284e:	a4 2b       	or	r26, r20
    2850:	b5 2b       	or	r27, r21
    2852:	89 83       	std	Y+1, r24	; 0x01
    2854:	9a 83       	std	Y+2, r25	; 0x02
    2856:	ab 83       	std	Y+3, r26	; 0x03
    2858:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	      SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APin,
											   	  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>0) & 1)) << 0);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPort,
    285a:	8f 81       	ldd	r24, Y+7	; 0x07
    285c:	48 2f       	mov	r20, r24
    285e:	50 e0       	ldi	r21, 0x00	; 0
    2860:	ca 01       	movw	r24, r20
    2862:	88 0f       	add	r24, r24
    2864:	99 1f       	adc	r25, r25
    2866:	9c 01       	movw	r18, r24
    2868:	22 0f       	add	r18, r18
    286a:	33 1f       	adc	r19, r19
    286c:	22 0f       	add	r18, r18
    286e:	33 1f       	adc	r19, r19
    2870:	22 0f       	add	r18, r18
    2872:	33 1f       	adc	r19, r19
    2874:	82 0f       	add	r24, r18
    2876:	93 1f       	adc	r25, r19
    2878:	84 0f       	add	r24, r20
    287a:	95 1f       	adc	r25, r21
    287c:	fc 01       	movw	r30, r24
    287e:	ed 57       	subi	r30, 0x7D	; 125
    2880:	fe 4f       	sbci	r31, 0xFE	; 254
    2882:	60 81       	ld	r22, Z
    2884:	8f 81       	ldd	r24, Y+7	; 0x07
    2886:	48 2f       	mov	r20, r24
    2888:	50 e0       	ldi	r21, 0x00	; 0
    288a:	ca 01       	movw	r24, r20
    288c:	88 0f       	add	r24, r24
    288e:	99 1f       	adc	r25, r25
    2890:	9c 01       	movw	r18, r24
    2892:	22 0f       	add	r18, r18
    2894:	33 1f       	adc	r19, r19
    2896:	22 0f       	add	r18, r18
    2898:	33 1f       	adc	r19, r19
    289a:	22 0f       	add	r18, r18
    289c:	33 1f       	adc	r19, r19
    289e:	82 0f       	add	r24, r18
    28a0:	93 1f       	adc	r25, r19
    28a2:	84 0f       	add	r24, r20
    28a4:	95 1f       	adc	r25, r21
    28a6:	fc 01       	movw	r30, r24
    28a8:	ec 57       	subi	r30, 0x7C	; 124
    28aa:	fe 4f       	sbci	r31, 0xFE	; 254
    28ac:	20 81       	ld	r18, Z
    28ae:	88 85       	ldd	r24, Y+8	; 0x08
    28b0:	88 2f       	mov	r24, r24
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	fc 01       	movw	r30, r24
    28b6:	e9 55       	subi	r30, 0x59	; 89
    28b8:	fe 4f       	sbci	r31, 0xFE	; 254
    28ba:	80 81       	ld	r24, Z
    28bc:	86 95       	lsr	r24
    28be:	98 2f       	mov	r25, r24
    28c0:	91 70       	andi	r25, 0x01	; 1
    28c2:	86 2f       	mov	r24, r22
    28c4:	62 2f       	mov	r22, r18
    28c6:	49 2f       	mov	r20, r25
    28c8:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    28cc:	88 2f       	mov	r24, r24
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	88 0f       	add	r24, r24
    28d2:	99 1f       	adc	r25, r25
    28d4:	88 0f       	add	r24, r24
    28d6:	99 1f       	adc	r25, r25
    28d8:	88 0f       	add	r24, r24
    28da:	99 1f       	adc	r25, r25
    28dc:	9c 01       	movw	r18, r24
    28de:	44 27       	eor	r20, r20
    28e0:	37 fd       	sbrc	r19, 7
    28e2:	40 95       	com	r20
    28e4:	54 2f       	mov	r21, r20
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ea:	ab 81       	ldd	r26, Y+3	; 0x03
    28ec:	bc 81       	ldd	r27, Y+4	; 0x04
    28ee:	82 2b       	or	r24, r18
    28f0:	93 2b       	or	r25, r19
    28f2:	a4 2b       	or	r26, r20
    28f4:	b5 2b       	or	r27, r21
    28f6:	89 83       	std	Y+1, r24	; 0x01
    28f8:	9a 83       	std	Y+2, r25	; 0x02
    28fa:	ab 83       	std	Y+3, r26	; 0x03
    28fc:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPin,
												  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>1) & 1)) << 3);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPort,
    28fe:	8f 81       	ldd	r24, Y+7	; 0x07
    2900:	48 2f       	mov	r20, r24
    2902:	50 e0       	ldi	r21, 0x00	; 0
    2904:	ca 01       	movw	r24, r20
    2906:	88 0f       	add	r24, r24
    2908:	99 1f       	adc	r25, r25
    290a:	9c 01       	movw	r18, r24
    290c:	22 0f       	add	r18, r18
    290e:	33 1f       	adc	r19, r19
    2910:	22 0f       	add	r18, r18
    2912:	33 1f       	adc	r19, r19
    2914:	22 0f       	add	r18, r18
    2916:	33 1f       	adc	r19, r19
    2918:	82 0f       	add	r24, r18
    291a:	93 1f       	adc	r25, r19
    291c:	84 0f       	add	r24, r20
    291e:	95 1f       	adc	r25, r21
    2920:	fc 01       	movw	r30, r24
    2922:	eb 57       	subi	r30, 0x7B	; 123
    2924:	fe 4f       	sbci	r31, 0xFE	; 254
    2926:	60 81       	ld	r22, Z
    2928:	8f 81       	ldd	r24, Y+7	; 0x07
    292a:	48 2f       	mov	r20, r24
    292c:	50 e0       	ldi	r21, 0x00	; 0
    292e:	ca 01       	movw	r24, r20
    2930:	88 0f       	add	r24, r24
    2932:	99 1f       	adc	r25, r25
    2934:	9c 01       	movw	r18, r24
    2936:	22 0f       	add	r18, r18
    2938:	33 1f       	adc	r19, r19
    293a:	22 0f       	add	r18, r18
    293c:	33 1f       	adc	r19, r19
    293e:	22 0f       	add	r18, r18
    2940:	33 1f       	adc	r19, r19
    2942:	82 0f       	add	r24, r18
    2944:	93 1f       	adc	r25, r19
    2946:	84 0f       	add	r24, r20
    2948:	95 1f       	adc	r25, r21
    294a:	fc 01       	movw	r30, r24
    294c:	ea 57       	subi	r30, 0x7A	; 122
    294e:	fe 4f       	sbci	r31, 0xFE	; 254
    2950:	20 81       	ld	r18, Z
    2952:	88 85       	ldd	r24, Y+8	; 0x08
    2954:	88 2f       	mov	r24, r24
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	fc 01       	movw	r30, r24
    295a:	e9 55       	subi	r30, 0x59	; 89
    295c:	fe 4f       	sbci	r31, 0xFE	; 254
    295e:	80 81       	ld	r24, Z
    2960:	86 95       	lsr	r24
    2962:	86 95       	lsr	r24
    2964:	98 2f       	mov	r25, r24
    2966:	91 70       	andi	r25, 0x01	; 1
    2968:	86 2f       	mov	r24, r22
    296a:	62 2f       	mov	r22, r18
    296c:	49 2f       	mov	r20, r25
    296e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    2972:	88 2f       	mov	r24, r24
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	00 24       	eor	r0, r0
    2978:	96 95       	lsr	r25
    297a:	87 95       	ror	r24
    297c:	07 94       	ror	r0
    297e:	96 95       	lsr	r25
    2980:	87 95       	ror	r24
    2982:	07 94       	ror	r0
    2984:	98 2f       	mov	r25, r24
    2986:	80 2d       	mov	r24, r0
    2988:	9c 01       	movw	r18, r24
    298a:	44 27       	eor	r20, r20
    298c:	37 fd       	sbrc	r19, 7
    298e:	40 95       	com	r20
    2990:	54 2f       	mov	r21, r20
    2992:	89 81       	ldd	r24, Y+1	; 0x01
    2994:	9a 81       	ldd	r25, Y+2	; 0x02
    2996:	ab 81       	ldd	r26, Y+3	; 0x03
    2998:	bc 81       	ldd	r27, Y+4	; 0x04
    299a:	82 2b       	or	r24, r18
    299c:	93 2b       	or	r25, r19
    299e:	a4 2b       	or	r26, r20
    29a0:	b5 2b       	or	r27, r21
    29a2:	89 83       	std	Y+1, r24	; 0x01
    29a4:	9a 83       	std	Y+2, r25	; 0x02
    29a6:	ab 83       	std	Y+3, r26	; 0x03
    29a8:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPin,
												  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>2) & 1)) << 6);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPort,
    29aa:	8f 81       	ldd	r24, Y+7	; 0x07
    29ac:	48 2f       	mov	r20, r24
    29ae:	50 e0       	ldi	r21, 0x00	; 0
    29b0:	ca 01       	movw	r24, r20
    29b2:	88 0f       	add	r24, r24
    29b4:	99 1f       	adc	r25, r25
    29b6:	9c 01       	movw	r18, r24
    29b8:	22 0f       	add	r18, r18
    29ba:	33 1f       	adc	r19, r19
    29bc:	22 0f       	add	r18, r18
    29be:	33 1f       	adc	r19, r19
    29c0:	22 0f       	add	r18, r18
    29c2:	33 1f       	adc	r19, r19
    29c4:	82 0f       	add	r24, r18
    29c6:	93 1f       	adc	r25, r19
    29c8:	84 0f       	add	r24, r20
    29ca:	95 1f       	adc	r25, r21
    29cc:	fc 01       	movw	r30, r24
    29ce:	e9 57       	subi	r30, 0x79	; 121
    29d0:	fe 4f       	sbci	r31, 0xFE	; 254
    29d2:	60 81       	ld	r22, Z
    29d4:	8f 81       	ldd	r24, Y+7	; 0x07
    29d6:	48 2f       	mov	r20, r24
    29d8:	50 e0       	ldi	r21, 0x00	; 0
    29da:	ca 01       	movw	r24, r20
    29dc:	88 0f       	add	r24, r24
    29de:	99 1f       	adc	r25, r25
    29e0:	9c 01       	movw	r18, r24
    29e2:	22 0f       	add	r18, r18
    29e4:	33 1f       	adc	r19, r19
    29e6:	22 0f       	add	r18, r18
    29e8:	33 1f       	adc	r19, r19
    29ea:	22 0f       	add	r18, r18
    29ec:	33 1f       	adc	r19, r19
    29ee:	82 0f       	add	r24, r18
    29f0:	93 1f       	adc	r25, r19
    29f2:	84 0f       	add	r24, r20
    29f4:	95 1f       	adc	r25, r21
    29f6:	fc 01       	movw	r30, r24
    29f8:	e8 57       	subi	r30, 0x78	; 120
    29fa:	fe 4f       	sbci	r31, 0xFE	; 254
    29fc:	20 81       	ld	r18, Z
    29fe:	88 85       	ldd	r24, Y+8	; 0x08
    2a00:	88 2f       	mov	r24, r24
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	fc 01       	movw	r30, r24
    2a06:	e9 55       	subi	r30, 0x59	; 89
    2a08:	fe 4f       	sbci	r31, 0xFE	; 254
    2a0a:	80 81       	ld	r24, Z
    2a0c:	86 95       	lsr	r24
    2a0e:	86 95       	lsr	r24
    2a10:	86 95       	lsr	r24
    2a12:	98 2f       	mov	r25, r24
    2a14:	91 70       	andi	r25, 0x01	; 1
    2a16:	86 2f       	mov	r24, r22
    2a18:	62 2f       	mov	r22, r18
    2a1a:	49 2f       	mov	r20, r25
    2a1c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    2a20:	88 2f       	mov	r24, r24
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	98 2f       	mov	r25, r24
    2a26:	88 27       	eor	r24, r24
    2a28:	99 0f       	add	r25, r25
    2a2a:	9c 01       	movw	r18, r24
    2a2c:	44 27       	eor	r20, r20
    2a2e:	37 fd       	sbrc	r19, 7
    2a30:	40 95       	com	r20
    2a32:	54 2f       	mov	r21, r20
    2a34:	89 81       	ldd	r24, Y+1	; 0x01
    2a36:	9a 81       	ldd	r25, Y+2	; 0x02
    2a38:	ab 81       	ldd	r26, Y+3	; 0x03
    2a3a:	bc 81       	ldd	r27, Y+4	; 0x04
    2a3c:	82 2b       	or	r24, r18
    2a3e:	93 2b       	or	r25, r19
    2a40:	a4 2b       	or	r26, r20
    2a42:	b5 2b       	or	r27, r21
    2a44:	89 83       	std	Y+1, r24	; 0x01
    2a46:	9a 83       	std	Y+2, r25	; 0x02
    2a48:	ab 83       	std	Y+3, r26	; 0x03
    2a4a:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPin,
												  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>3) & 1)) << 9) ;

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPort,
    2a4c:	8f 81       	ldd	r24, Y+7	; 0x07
    2a4e:	48 2f       	mov	r20, r24
    2a50:	50 e0       	ldi	r21, 0x00	; 0
    2a52:	ca 01       	movw	r24, r20
    2a54:	88 0f       	add	r24, r24
    2a56:	99 1f       	adc	r25, r25
    2a58:	9c 01       	movw	r18, r24
    2a5a:	22 0f       	add	r18, r18
    2a5c:	33 1f       	adc	r19, r19
    2a5e:	22 0f       	add	r18, r18
    2a60:	33 1f       	adc	r19, r19
    2a62:	22 0f       	add	r18, r18
    2a64:	33 1f       	adc	r19, r19
    2a66:	82 0f       	add	r24, r18
    2a68:	93 1f       	adc	r25, r19
    2a6a:	84 0f       	add	r24, r20
    2a6c:	95 1f       	adc	r25, r21
    2a6e:	fc 01       	movw	r30, r24
    2a70:	e7 57       	subi	r30, 0x77	; 119
    2a72:	fe 4f       	sbci	r31, 0xFE	; 254
    2a74:	60 81       	ld	r22, Z
    2a76:	8f 81       	ldd	r24, Y+7	; 0x07
    2a78:	48 2f       	mov	r20, r24
    2a7a:	50 e0       	ldi	r21, 0x00	; 0
    2a7c:	ca 01       	movw	r24, r20
    2a7e:	88 0f       	add	r24, r24
    2a80:	99 1f       	adc	r25, r25
    2a82:	9c 01       	movw	r18, r24
    2a84:	22 0f       	add	r18, r18
    2a86:	33 1f       	adc	r19, r19
    2a88:	22 0f       	add	r18, r18
    2a8a:	33 1f       	adc	r19, r19
    2a8c:	22 0f       	add	r18, r18
    2a8e:	33 1f       	adc	r19, r19
    2a90:	82 0f       	add	r24, r18
    2a92:	93 1f       	adc	r25, r19
    2a94:	84 0f       	add	r24, r20
    2a96:	95 1f       	adc	r25, r21
    2a98:	fc 01       	movw	r30, r24
    2a9a:	e6 57       	subi	r30, 0x76	; 118
    2a9c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a9e:	20 81       	ld	r18, Z
    2aa0:	88 85       	ldd	r24, Y+8	; 0x08
    2aa2:	88 2f       	mov	r24, r24
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	fc 01       	movw	r30, r24
    2aa8:	e9 55       	subi	r30, 0x59	; 89
    2aaa:	fe 4f       	sbci	r31, 0xFE	; 254
    2aac:	80 81       	ld	r24, Z
    2aae:	82 95       	swap	r24
    2ab0:	8f 70       	andi	r24, 0x0F	; 15
    2ab2:	98 2f       	mov	r25, r24
    2ab4:	91 70       	andi	r25, 0x01	; 1
    2ab6:	86 2f       	mov	r24, r22
    2ab8:	62 2f       	mov	r22, r18
    2aba:	49 2f       	mov	r20, r25
    2abc:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    2ac0:	88 2f       	mov	r24, r24
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	98 2f       	mov	r25, r24
    2ac6:	88 27       	eor	r24, r24
    2ac8:	92 95       	swap	r25
    2aca:	90 7f       	andi	r25, 0xF0	; 240
    2acc:	9c 01       	movw	r18, r24
    2ace:	44 27       	eor	r20, r20
    2ad0:	37 fd       	sbrc	r19, 7
    2ad2:	40 95       	com	r20
    2ad4:	54 2f       	mov	r21, r20
    2ad6:	89 81       	ldd	r24, Y+1	; 0x01
    2ad8:	9a 81       	ldd	r25, Y+2	; 0x02
    2ada:	ab 81       	ldd	r26, Y+3	; 0x03
    2adc:	bc 81       	ldd	r27, Y+4	; 0x04
    2ade:	82 2b       	or	r24, r18
    2ae0:	93 2b       	or	r25, r19
    2ae2:	a4 2b       	or	r26, r20
    2ae4:	b5 2b       	or	r27, r21
    2ae6:	89 83       	std	Y+1, r24	; 0x01
    2ae8:	9a 83       	std	Y+2, r25	; 0x02
    2aea:	ab 83       	std	Y+3, r26	; 0x03
    2aec:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPin,
												  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>4) & 1)) << 12);

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPort,
    2aee:	8f 81       	ldd	r24, Y+7	; 0x07
    2af0:	48 2f       	mov	r20, r24
    2af2:	50 e0       	ldi	r21, 0x00	; 0
    2af4:	ca 01       	movw	r24, r20
    2af6:	88 0f       	add	r24, r24
    2af8:	99 1f       	adc	r25, r25
    2afa:	9c 01       	movw	r18, r24
    2afc:	22 0f       	add	r18, r18
    2afe:	33 1f       	adc	r19, r19
    2b00:	22 0f       	add	r18, r18
    2b02:	33 1f       	adc	r19, r19
    2b04:	22 0f       	add	r18, r18
    2b06:	33 1f       	adc	r19, r19
    2b08:	82 0f       	add	r24, r18
    2b0a:	93 1f       	adc	r25, r19
    2b0c:	84 0f       	add	r24, r20
    2b0e:	95 1f       	adc	r25, r21
    2b10:	fc 01       	movw	r30, r24
    2b12:	e5 57       	subi	r30, 0x75	; 117
    2b14:	fe 4f       	sbci	r31, 0xFE	; 254
    2b16:	60 81       	ld	r22, Z
    2b18:	8f 81       	ldd	r24, Y+7	; 0x07
    2b1a:	48 2f       	mov	r20, r24
    2b1c:	50 e0       	ldi	r21, 0x00	; 0
    2b1e:	ca 01       	movw	r24, r20
    2b20:	88 0f       	add	r24, r24
    2b22:	99 1f       	adc	r25, r25
    2b24:	9c 01       	movw	r18, r24
    2b26:	22 0f       	add	r18, r18
    2b28:	33 1f       	adc	r19, r19
    2b2a:	22 0f       	add	r18, r18
    2b2c:	33 1f       	adc	r19, r19
    2b2e:	22 0f       	add	r18, r18
    2b30:	33 1f       	adc	r19, r19
    2b32:	82 0f       	add	r24, r18
    2b34:	93 1f       	adc	r25, r19
    2b36:	84 0f       	add	r24, r20
    2b38:	95 1f       	adc	r25, r21
    2b3a:	fc 01       	movw	r30, r24
    2b3c:	e4 57       	subi	r30, 0x74	; 116
    2b3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b40:	20 81       	ld	r18, Z
    2b42:	88 85       	ldd	r24, Y+8	; 0x08
    2b44:	88 2f       	mov	r24, r24
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	fc 01       	movw	r30, r24
    2b4a:	e9 55       	subi	r30, 0x59	; 89
    2b4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b4e:	80 81       	ld	r24, Z
    2b50:	82 95       	swap	r24
    2b52:	86 95       	lsr	r24
    2b54:	87 70       	andi	r24, 0x07	; 7
    2b56:	98 2f       	mov	r25, r24
    2b58:	91 70       	andi	r25, 0x01	; 1
    2b5a:	86 2f       	mov	r24, r22
    2b5c:	62 2f       	mov	r22, r18
    2b5e:	49 2f       	mov	r20, r25
    2b60:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    2b64:	88 2f       	mov	r24, r24
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	a0 e0       	ldi	r26, 0x00	; 0
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	9c 01       	movw	r18, r24
    2b6e:	ad 01       	movw	r20, r26
    2b70:	01 2e       	mov	r0, r17
    2b72:	1f e0       	ldi	r17, 0x0F	; 15
    2b74:	22 0f       	add	r18, r18
    2b76:	33 1f       	adc	r19, r19
    2b78:	44 1f       	adc	r20, r20
    2b7a:	55 1f       	adc	r21, r21
    2b7c:	1a 95       	dec	r17
    2b7e:	d1 f7       	brne	.-12     	; 0x2b74 <SSDLT_enuDisplayNum+0x40e>
    2b80:	10 2d       	mov	r17, r0
    2b82:	89 81       	ldd	r24, Y+1	; 0x01
    2b84:	9a 81       	ldd	r25, Y+2	; 0x02
    2b86:	ab 81       	ldd	r26, Y+3	; 0x03
    2b88:	bc 81       	ldd	r27, Y+4	; 0x04
    2b8a:	82 2b       	or	r24, r18
    2b8c:	93 2b       	or	r25, r19
    2b8e:	a4 2b       	or	r26, r20
    2b90:	b5 2b       	or	r27, r21
    2b92:	89 83       	std	Y+1, r24	; 0x01
    2b94:	9a 83       	std	Y+2, r25	; 0x02
    2b96:	ab 83       	std	Y+3, r26	; 0x03
    2b98:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPin,
												  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>5) & 1)) << 15));

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPort,
    2b9a:	8f 81       	ldd	r24, Y+7	; 0x07
    2b9c:	48 2f       	mov	r20, r24
    2b9e:	50 e0       	ldi	r21, 0x00	; 0
    2ba0:	ca 01       	movw	r24, r20
    2ba2:	88 0f       	add	r24, r24
    2ba4:	99 1f       	adc	r25, r25
    2ba6:	9c 01       	movw	r18, r24
    2ba8:	22 0f       	add	r18, r18
    2baa:	33 1f       	adc	r19, r19
    2bac:	22 0f       	add	r18, r18
    2bae:	33 1f       	adc	r19, r19
    2bb0:	22 0f       	add	r18, r18
    2bb2:	33 1f       	adc	r19, r19
    2bb4:	82 0f       	add	r24, r18
    2bb6:	93 1f       	adc	r25, r19
    2bb8:	84 0f       	add	r24, r20
    2bba:	95 1f       	adc	r25, r21
    2bbc:	fc 01       	movw	r30, r24
    2bbe:	e3 57       	subi	r30, 0x73	; 115
    2bc0:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc2:	60 81       	ld	r22, Z
    2bc4:	8f 81       	ldd	r24, Y+7	; 0x07
    2bc6:	48 2f       	mov	r20, r24
    2bc8:	50 e0       	ldi	r21, 0x00	; 0
    2bca:	ca 01       	movw	r24, r20
    2bcc:	88 0f       	add	r24, r24
    2bce:	99 1f       	adc	r25, r25
    2bd0:	9c 01       	movw	r18, r24
    2bd2:	22 0f       	add	r18, r18
    2bd4:	33 1f       	adc	r19, r19
    2bd6:	22 0f       	add	r18, r18
    2bd8:	33 1f       	adc	r19, r19
    2bda:	22 0f       	add	r18, r18
    2bdc:	33 1f       	adc	r19, r19
    2bde:	82 0f       	add	r24, r18
    2be0:	93 1f       	adc	r25, r19
    2be2:	84 0f       	add	r24, r20
    2be4:	95 1f       	adc	r25, r21
    2be6:	fc 01       	movw	r30, r24
    2be8:	e2 57       	subi	r30, 0x72	; 114
    2bea:	fe 4f       	sbci	r31, 0xFE	; 254
    2bec:	20 81       	ld	r18, Z
    2bee:	88 85       	ldd	r24, Y+8	; 0x08
    2bf0:	88 2f       	mov	r24, r24
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	fc 01       	movw	r30, r24
    2bf6:	e9 55       	subi	r30, 0x59	; 89
    2bf8:	fe 4f       	sbci	r31, 0xFE	; 254
    2bfa:	80 81       	ld	r24, Z
    2bfc:	82 95       	swap	r24
    2bfe:	86 95       	lsr	r24
    2c00:	86 95       	lsr	r24
    2c02:	83 70       	andi	r24, 0x03	; 3
    2c04:	98 2f       	mov	r25, r24
    2c06:	91 70       	andi	r25, 0x01	; 1
    2c08:	86 2f       	mov	r24, r22
    2c0a:	62 2f       	mov	r22, r18
    2c0c:	49 2f       	mov	r20, r25
    2c0e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    2c12:	88 2f       	mov	r24, r24
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	a0 e0       	ldi	r26, 0x00	; 0
    2c18:	b0 e0       	ldi	r27, 0x00	; 0
    2c1a:	9c 01       	movw	r18, r24
    2c1c:	ad 01       	movw	r20, r26
    2c1e:	01 2e       	mov	r0, r17
    2c20:	12 e1       	ldi	r17, 0x12	; 18
    2c22:	22 0f       	add	r18, r18
    2c24:	33 1f       	adc	r19, r19
    2c26:	44 1f       	adc	r20, r20
    2c28:	55 1f       	adc	r21, r21
    2c2a:	1a 95       	dec	r17
    2c2c:	d1 f7       	brne	.-12     	; 0x2c22 <SSDLT_enuDisplayNum+0x4bc>
    2c2e:	10 2d       	mov	r17, r0
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	9a 81       	ldd	r25, Y+2	; 0x02
    2c34:	ab 81       	ldd	r26, Y+3	; 0x03
    2c36:	bc 81       	ldd	r27, Y+4	; 0x04
    2c38:	82 2b       	or	r24, r18
    2c3a:	93 2b       	or	r25, r19
    2c3c:	a4 2b       	or	r26, r20
    2c3e:	b5 2b       	or	r27, r21
    2c40:	89 83       	std	Y+1, r24	; 0x01
    2c42:	9a 83       	std	Y+2, r25	; 0x02
    2c44:	ab 83       	std	Y+3, r26	; 0x03
    2c46:	bc 83       	std	Y+4, r27	; 0x04
    2c48:	9c c2       	rjmp	.+1336   	; 0x3182 <SSDLT_enuDisplayNum+0xa1c>
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPin,
												  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>6) & 1)) << 18));

		}
		else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    2c4a:	8f 81       	ldd	r24, Y+7	; 0x07
    2c4c:	48 2f       	mov	r20, r24
    2c4e:	50 e0       	ldi	r21, 0x00	; 0
    2c50:	ca 01       	movw	r24, r20
    2c52:	88 0f       	add	r24, r24
    2c54:	99 1f       	adc	r25, r25
    2c56:	9c 01       	movw	r18, r24
    2c58:	22 0f       	add	r18, r18
    2c5a:	33 1f       	adc	r19, r19
    2c5c:	22 0f       	add	r18, r18
    2c5e:	33 1f       	adc	r19, r19
    2c60:	22 0f       	add	r18, r18
    2c62:	33 1f       	adc	r19, r19
    2c64:	82 0f       	add	r24, r18
    2c66:	93 1f       	adc	r25, r19
    2c68:	84 0f       	add	r24, r20
    2c6a:	95 1f       	adc	r25, r21
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	ed 56       	subi	r30, 0x6D	; 109
    2c70:	fe 4f       	sbci	r31, 0xFE	; 254
    2c72:	80 81       	ld	r24, Z
    2c74:	88 23       	and	r24, r24
    2c76:	09 f0       	breq	.+2      	; 0x2c7a <SSDLT_enuDisplayNum+0x514>
    2c78:	7f c2       	rjmp	.+1278   	; 0x3178 <SSDLT_enuDisplayNum+0xa12>
		{
			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APort,
    2c7a:	8f 81       	ldd	r24, Y+7	; 0x07
    2c7c:	48 2f       	mov	r20, r24
    2c7e:	50 e0       	ldi	r21, 0x00	; 0
    2c80:	ca 01       	movw	r24, r20
    2c82:	88 0f       	add	r24, r24
    2c84:	99 1f       	adc	r25, r25
    2c86:	9c 01       	movw	r18, r24
    2c88:	22 0f       	add	r18, r18
    2c8a:	33 1f       	adc	r19, r19
    2c8c:	22 0f       	add	r18, r18
    2c8e:	33 1f       	adc	r19, r19
    2c90:	22 0f       	add	r18, r18
    2c92:	33 1f       	adc	r19, r19
    2c94:	82 0f       	add	r24, r18
    2c96:	93 1f       	adc	r25, r19
    2c98:	84 0f       	add	r24, r20
    2c9a:	95 1f       	adc	r25, r21
    2c9c:	fc 01       	movw	r30, r24
    2c9e:	ef 57       	subi	r30, 0x7F	; 127
    2ca0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ca2:	80 81       	ld	r24, Z
    2ca4:	8e 8f       	std	Y+30, r24	; 0x1e
    2ca6:	8f 81       	ldd	r24, Y+7	; 0x07
    2ca8:	48 2f       	mov	r20, r24
    2caa:	50 e0       	ldi	r21, 0x00	; 0
    2cac:	ca 01       	movw	r24, r20
    2cae:	88 0f       	add	r24, r24
    2cb0:	99 1f       	adc	r25, r25
    2cb2:	9c 01       	movw	r18, r24
    2cb4:	22 0f       	add	r18, r18
    2cb6:	33 1f       	adc	r19, r19
    2cb8:	22 0f       	add	r18, r18
    2cba:	33 1f       	adc	r19, r19
    2cbc:	22 0f       	add	r18, r18
    2cbe:	33 1f       	adc	r19, r19
    2cc0:	82 0f       	add	r24, r18
    2cc2:	93 1f       	adc	r25, r19
    2cc4:	84 0f       	add	r24, r20
    2cc6:	95 1f       	adc	r25, r21
    2cc8:	fc 01       	movw	r30, r24
    2cca:	ee 57       	subi	r30, 0x7E	; 126
    2ccc:	fe 4f       	sbci	r31, 0xFE	; 254
    2cce:	80 81       	ld	r24, Z
    2cd0:	8d 8f       	std	Y+29, r24	; 0x1d
    2cd2:	88 85       	ldd	r24, Y+8	; 0x08
    2cd4:	88 2f       	mov	r24, r24
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	fc 01       	movw	r30, r24
    2cda:	e9 55       	subi	r30, 0x59	; 89
    2cdc:	fe 4f       	sbci	r31, 0xFE	; 254
    2cde:	80 81       	ld	r24, Z
    2ce0:	88 2f       	mov	r24, r24
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	81 70       	andi	r24, 0x01	; 1
    2ce6:	90 70       	andi	r25, 0x00	; 0
    2ce8:	1c 8e       	std	Y+28, r1	; 0x1c
    2cea:	00 97       	sbiw	r24, 0x00	; 0
    2cec:	11 f4       	brne	.+4      	; 0x2cf2 <SSDLT_enuDisplayNum+0x58c>
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	8c 8f       	std	Y+28, r24	; 0x1c
    2cf2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2cf4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2cf6:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2cf8:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    2cfc:	28 2f       	mov	r18, r24
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	40 e0       	ldi	r20, 0x00	; 0
    2d02:	50 e0       	ldi	r21, 0x00	; 0
    2d04:	89 81       	ldd	r24, Y+1	; 0x01
    2d06:	9a 81       	ldd	r25, Y+2	; 0x02
    2d08:	ab 81       	ldd	r26, Y+3	; 0x03
    2d0a:	bc 81       	ldd	r27, Y+4	; 0x04
    2d0c:	82 2b       	or	r24, r18
    2d0e:	93 2b       	or	r25, r19
    2d10:	a4 2b       	or	r26, r20
    2d12:	b5 2b       	or	r27, r21
    2d14:	89 83       	std	Y+1, r24	; 0x01
    2d16:	9a 83       	std	Y+2, r25	; 0x02
    2d18:	ab 83       	std	Y+3, r26	; 0x03
    2d1a:	bc 83       	std	Y+4, r27	; 0x04
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>0) & 1))) << 0);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPort,
    2d1c:	8f 81       	ldd	r24, Y+7	; 0x07
    2d1e:	48 2f       	mov	r20, r24
    2d20:	50 e0       	ldi	r21, 0x00	; 0
    2d22:	ca 01       	movw	r24, r20
    2d24:	88 0f       	add	r24, r24
    2d26:	99 1f       	adc	r25, r25
    2d28:	9c 01       	movw	r18, r24
    2d2a:	22 0f       	add	r18, r18
    2d2c:	33 1f       	adc	r19, r19
    2d2e:	22 0f       	add	r18, r18
    2d30:	33 1f       	adc	r19, r19
    2d32:	22 0f       	add	r18, r18
    2d34:	33 1f       	adc	r19, r19
    2d36:	82 0f       	add	r24, r18
    2d38:	93 1f       	adc	r25, r19
    2d3a:	84 0f       	add	r24, r20
    2d3c:	95 1f       	adc	r25, r21
    2d3e:	fc 01       	movw	r30, r24
    2d40:	ed 57       	subi	r30, 0x7D	; 125
    2d42:	fe 4f       	sbci	r31, 0xFE	; 254
    2d44:	80 81       	ld	r24, Z
    2d46:	8b 8f       	std	Y+27, r24	; 0x1b
    2d48:	8f 81       	ldd	r24, Y+7	; 0x07
    2d4a:	48 2f       	mov	r20, r24
    2d4c:	50 e0       	ldi	r21, 0x00	; 0
    2d4e:	ca 01       	movw	r24, r20
    2d50:	88 0f       	add	r24, r24
    2d52:	99 1f       	adc	r25, r25
    2d54:	9c 01       	movw	r18, r24
    2d56:	22 0f       	add	r18, r18
    2d58:	33 1f       	adc	r19, r19
    2d5a:	22 0f       	add	r18, r18
    2d5c:	33 1f       	adc	r19, r19
    2d5e:	22 0f       	add	r18, r18
    2d60:	33 1f       	adc	r19, r19
    2d62:	82 0f       	add	r24, r18
    2d64:	93 1f       	adc	r25, r19
    2d66:	84 0f       	add	r24, r20
    2d68:	95 1f       	adc	r25, r21
    2d6a:	fc 01       	movw	r30, r24
    2d6c:	ec 57       	subi	r30, 0x7C	; 124
    2d6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d70:	80 81       	ld	r24, Z
    2d72:	8a 8f       	std	Y+26, r24	; 0x1a
    2d74:	88 85       	ldd	r24, Y+8	; 0x08
    2d76:	88 2f       	mov	r24, r24
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	fc 01       	movw	r30, r24
    2d7c:	e9 55       	subi	r30, 0x59	; 89
    2d7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d80:	80 81       	ld	r24, Z
    2d82:	86 95       	lsr	r24
    2d84:	88 2f       	mov	r24, r24
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	81 70       	andi	r24, 0x01	; 1
    2d8a:	90 70       	andi	r25, 0x00	; 0
    2d8c:	19 8e       	std	Y+25, r1	; 0x19
    2d8e:	00 97       	sbiw	r24, 0x00	; 0
    2d90:	11 f4       	brne	.+4      	; 0x2d96 <SSDLT_enuDisplayNum+0x630>
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	89 8f       	std	Y+25, r24	; 0x19
    2d96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d98:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2d9a:	49 8d       	ldd	r20, Y+25	; 0x19
    2d9c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    2da0:	88 2f       	mov	r24, r24
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	88 0f       	add	r24, r24
    2da6:	99 1f       	adc	r25, r25
    2da8:	88 0f       	add	r24, r24
    2daa:	99 1f       	adc	r25, r25
    2dac:	88 0f       	add	r24, r24
    2dae:	99 1f       	adc	r25, r25
    2db0:	9c 01       	movw	r18, r24
    2db2:	44 27       	eor	r20, r20
    2db4:	37 fd       	sbrc	r19, 7
    2db6:	40 95       	com	r20
    2db8:	54 2f       	mov	r21, r20
    2dba:	89 81       	ldd	r24, Y+1	; 0x01
    2dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dbe:	ab 81       	ldd	r26, Y+3	; 0x03
    2dc0:	bc 81       	ldd	r27, Y+4	; 0x04
    2dc2:	82 2b       	or	r24, r18
    2dc4:	93 2b       	or	r25, r19
    2dc6:	a4 2b       	or	r26, r20
    2dc8:	b5 2b       	or	r27, r21
    2dca:	89 83       	std	Y+1, r24	; 0x01
    2dcc:	9a 83       	std	Y+2, r25	; 0x02
    2dce:	ab 83       	std	Y+3, r26	; 0x03
    2dd0:	bc 83       	std	Y+4, r27	; 0x04
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>1) & 1))) << 3);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPort,
    2dd2:	8f 81       	ldd	r24, Y+7	; 0x07
    2dd4:	48 2f       	mov	r20, r24
    2dd6:	50 e0       	ldi	r21, 0x00	; 0
    2dd8:	ca 01       	movw	r24, r20
    2dda:	88 0f       	add	r24, r24
    2ddc:	99 1f       	adc	r25, r25
    2dde:	9c 01       	movw	r18, r24
    2de0:	22 0f       	add	r18, r18
    2de2:	33 1f       	adc	r19, r19
    2de4:	22 0f       	add	r18, r18
    2de6:	33 1f       	adc	r19, r19
    2de8:	22 0f       	add	r18, r18
    2dea:	33 1f       	adc	r19, r19
    2dec:	82 0f       	add	r24, r18
    2dee:	93 1f       	adc	r25, r19
    2df0:	84 0f       	add	r24, r20
    2df2:	95 1f       	adc	r25, r21
    2df4:	fc 01       	movw	r30, r24
    2df6:	eb 57       	subi	r30, 0x7B	; 123
    2df8:	fe 4f       	sbci	r31, 0xFE	; 254
    2dfa:	80 81       	ld	r24, Z
    2dfc:	88 8f       	std	Y+24, r24	; 0x18
    2dfe:	8f 81       	ldd	r24, Y+7	; 0x07
    2e00:	48 2f       	mov	r20, r24
    2e02:	50 e0       	ldi	r21, 0x00	; 0
    2e04:	ca 01       	movw	r24, r20
    2e06:	88 0f       	add	r24, r24
    2e08:	99 1f       	adc	r25, r25
    2e0a:	9c 01       	movw	r18, r24
    2e0c:	22 0f       	add	r18, r18
    2e0e:	33 1f       	adc	r19, r19
    2e10:	22 0f       	add	r18, r18
    2e12:	33 1f       	adc	r19, r19
    2e14:	22 0f       	add	r18, r18
    2e16:	33 1f       	adc	r19, r19
    2e18:	82 0f       	add	r24, r18
    2e1a:	93 1f       	adc	r25, r19
    2e1c:	84 0f       	add	r24, r20
    2e1e:	95 1f       	adc	r25, r21
    2e20:	fc 01       	movw	r30, r24
    2e22:	ea 57       	subi	r30, 0x7A	; 122
    2e24:	fe 4f       	sbci	r31, 0xFE	; 254
    2e26:	80 81       	ld	r24, Z
    2e28:	8f 8b       	std	Y+23, r24	; 0x17
    2e2a:	88 85       	ldd	r24, Y+8	; 0x08
    2e2c:	88 2f       	mov	r24, r24
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	fc 01       	movw	r30, r24
    2e32:	e9 55       	subi	r30, 0x59	; 89
    2e34:	fe 4f       	sbci	r31, 0xFE	; 254
    2e36:	80 81       	ld	r24, Z
    2e38:	86 95       	lsr	r24
    2e3a:	86 95       	lsr	r24
    2e3c:	88 2f       	mov	r24, r24
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	81 70       	andi	r24, 0x01	; 1
    2e42:	90 70       	andi	r25, 0x00	; 0
    2e44:	1e 8a       	std	Y+22, r1	; 0x16
    2e46:	00 97       	sbiw	r24, 0x00	; 0
    2e48:	11 f4       	brne	.+4      	; 0x2e4e <SSDLT_enuDisplayNum+0x6e8>
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	8e 8b       	std	Y+22, r24	; 0x16
    2e4e:	88 8d       	ldd	r24, Y+24	; 0x18
    2e50:	6f 89       	ldd	r22, Y+23	; 0x17
    2e52:	4e 89       	ldd	r20, Y+22	; 0x16
    2e54:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    2e58:	88 2f       	mov	r24, r24
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	00 24       	eor	r0, r0
    2e5e:	96 95       	lsr	r25
    2e60:	87 95       	ror	r24
    2e62:	07 94       	ror	r0
    2e64:	96 95       	lsr	r25
    2e66:	87 95       	ror	r24
    2e68:	07 94       	ror	r0
    2e6a:	98 2f       	mov	r25, r24
    2e6c:	80 2d       	mov	r24, r0
    2e6e:	9c 01       	movw	r18, r24
    2e70:	44 27       	eor	r20, r20
    2e72:	37 fd       	sbrc	r19, 7
    2e74:	40 95       	com	r20
    2e76:	54 2f       	mov	r21, r20
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
    2e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7c:	ab 81       	ldd	r26, Y+3	; 0x03
    2e7e:	bc 81       	ldd	r27, Y+4	; 0x04
    2e80:	82 2b       	or	r24, r18
    2e82:	93 2b       	or	r25, r19
    2e84:	a4 2b       	or	r26, r20
    2e86:	b5 2b       	or	r27, r21
    2e88:	89 83       	std	Y+1, r24	; 0x01
    2e8a:	9a 83       	std	Y+2, r25	; 0x02
    2e8c:	ab 83       	std	Y+3, r26	; 0x03
    2e8e:	bc 83       	std	Y+4, r27	; 0x04
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>2) & 1))) << 6);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPort,
    2e90:	8f 81       	ldd	r24, Y+7	; 0x07
    2e92:	48 2f       	mov	r20, r24
    2e94:	50 e0       	ldi	r21, 0x00	; 0
    2e96:	ca 01       	movw	r24, r20
    2e98:	88 0f       	add	r24, r24
    2e9a:	99 1f       	adc	r25, r25
    2e9c:	9c 01       	movw	r18, r24
    2e9e:	22 0f       	add	r18, r18
    2ea0:	33 1f       	adc	r19, r19
    2ea2:	22 0f       	add	r18, r18
    2ea4:	33 1f       	adc	r19, r19
    2ea6:	22 0f       	add	r18, r18
    2ea8:	33 1f       	adc	r19, r19
    2eaa:	82 0f       	add	r24, r18
    2eac:	93 1f       	adc	r25, r19
    2eae:	84 0f       	add	r24, r20
    2eb0:	95 1f       	adc	r25, r21
    2eb2:	fc 01       	movw	r30, r24
    2eb4:	e9 57       	subi	r30, 0x79	; 121
    2eb6:	fe 4f       	sbci	r31, 0xFE	; 254
    2eb8:	80 81       	ld	r24, Z
    2eba:	8d 8b       	std	Y+21, r24	; 0x15
    2ebc:	8f 81       	ldd	r24, Y+7	; 0x07
    2ebe:	48 2f       	mov	r20, r24
    2ec0:	50 e0       	ldi	r21, 0x00	; 0
    2ec2:	ca 01       	movw	r24, r20
    2ec4:	88 0f       	add	r24, r24
    2ec6:	99 1f       	adc	r25, r25
    2ec8:	9c 01       	movw	r18, r24
    2eca:	22 0f       	add	r18, r18
    2ecc:	33 1f       	adc	r19, r19
    2ece:	22 0f       	add	r18, r18
    2ed0:	33 1f       	adc	r19, r19
    2ed2:	22 0f       	add	r18, r18
    2ed4:	33 1f       	adc	r19, r19
    2ed6:	82 0f       	add	r24, r18
    2ed8:	93 1f       	adc	r25, r19
    2eda:	84 0f       	add	r24, r20
    2edc:	95 1f       	adc	r25, r21
    2ede:	fc 01       	movw	r30, r24
    2ee0:	e8 57       	subi	r30, 0x78	; 120
    2ee2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ee4:	80 81       	ld	r24, Z
    2ee6:	8c 8b       	std	Y+20, r24	; 0x14
    2ee8:	88 85       	ldd	r24, Y+8	; 0x08
    2eea:	88 2f       	mov	r24, r24
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	fc 01       	movw	r30, r24
    2ef0:	e9 55       	subi	r30, 0x59	; 89
    2ef2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ef4:	80 81       	ld	r24, Z
    2ef6:	86 95       	lsr	r24
    2ef8:	86 95       	lsr	r24
    2efa:	86 95       	lsr	r24
    2efc:	88 2f       	mov	r24, r24
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	81 70       	andi	r24, 0x01	; 1
    2f02:	90 70       	andi	r25, 0x00	; 0
    2f04:	1b 8a       	std	Y+19, r1	; 0x13
    2f06:	00 97       	sbiw	r24, 0x00	; 0
    2f08:	11 f4       	brne	.+4      	; 0x2f0e <SSDLT_enuDisplayNum+0x7a8>
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	8b 8b       	std	Y+19, r24	; 0x13
    2f0e:	8d 89       	ldd	r24, Y+21	; 0x15
    2f10:	6c 89       	ldd	r22, Y+20	; 0x14
    2f12:	4b 89       	ldd	r20, Y+19	; 0x13
    2f14:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    2f18:	88 2f       	mov	r24, r24
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	98 2f       	mov	r25, r24
    2f1e:	88 27       	eor	r24, r24
    2f20:	99 0f       	add	r25, r25
    2f22:	9c 01       	movw	r18, r24
    2f24:	44 27       	eor	r20, r20
    2f26:	37 fd       	sbrc	r19, 7
    2f28:	40 95       	com	r20
    2f2a:	54 2f       	mov	r21, r20
    2f2c:	89 81       	ldd	r24, Y+1	; 0x01
    2f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f30:	ab 81       	ldd	r26, Y+3	; 0x03
    2f32:	bc 81       	ldd	r27, Y+4	; 0x04
    2f34:	82 2b       	or	r24, r18
    2f36:	93 2b       	or	r25, r19
    2f38:	a4 2b       	or	r26, r20
    2f3a:	b5 2b       	or	r27, r21
    2f3c:	89 83       	std	Y+1, r24	; 0x01
    2f3e:	9a 83       	std	Y+2, r25	; 0x02
    2f40:	ab 83       	std	Y+3, r26	; 0x03
    2f42:	bc 83       	std	Y+4, r27	; 0x04
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>3) & 1))) << 9);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPort,
    2f44:	8f 81       	ldd	r24, Y+7	; 0x07
    2f46:	48 2f       	mov	r20, r24
    2f48:	50 e0       	ldi	r21, 0x00	; 0
    2f4a:	ca 01       	movw	r24, r20
    2f4c:	88 0f       	add	r24, r24
    2f4e:	99 1f       	adc	r25, r25
    2f50:	9c 01       	movw	r18, r24
    2f52:	22 0f       	add	r18, r18
    2f54:	33 1f       	adc	r19, r19
    2f56:	22 0f       	add	r18, r18
    2f58:	33 1f       	adc	r19, r19
    2f5a:	22 0f       	add	r18, r18
    2f5c:	33 1f       	adc	r19, r19
    2f5e:	82 0f       	add	r24, r18
    2f60:	93 1f       	adc	r25, r19
    2f62:	84 0f       	add	r24, r20
    2f64:	95 1f       	adc	r25, r21
    2f66:	fc 01       	movw	r30, r24
    2f68:	e7 57       	subi	r30, 0x77	; 119
    2f6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f6c:	80 81       	ld	r24, Z
    2f6e:	8a 8b       	std	Y+18, r24	; 0x12
    2f70:	8f 81       	ldd	r24, Y+7	; 0x07
    2f72:	48 2f       	mov	r20, r24
    2f74:	50 e0       	ldi	r21, 0x00	; 0
    2f76:	ca 01       	movw	r24, r20
    2f78:	88 0f       	add	r24, r24
    2f7a:	99 1f       	adc	r25, r25
    2f7c:	9c 01       	movw	r18, r24
    2f7e:	22 0f       	add	r18, r18
    2f80:	33 1f       	adc	r19, r19
    2f82:	22 0f       	add	r18, r18
    2f84:	33 1f       	adc	r19, r19
    2f86:	22 0f       	add	r18, r18
    2f88:	33 1f       	adc	r19, r19
    2f8a:	82 0f       	add	r24, r18
    2f8c:	93 1f       	adc	r25, r19
    2f8e:	84 0f       	add	r24, r20
    2f90:	95 1f       	adc	r25, r21
    2f92:	fc 01       	movw	r30, r24
    2f94:	e6 57       	subi	r30, 0x76	; 118
    2f96:	fe 4f       	sbci	r31, 0xFE	; 254
    2f98:	80 81       	ld	r24, Z
    2f9a:	89 8b       	std	Y+17, r24	; 0x11
    2f9c:	88 85       	ldd	r24, Y+8	; 0x08
    2f9e:	88 2f       	mov	r24, r24
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	fc 01       	movw	r30, r24
    2fa4:	e9 55       	subi	r30, 0x59	; 89
    2fa6:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa8:	80 81       	ld	r24, Z
    2faa:	82 95       	swap	r24
    2fac:	8f 70       	andi	r24, 0x0F	; 15
    2fae:	88 2f       	mov	r24, r24
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	81 70       	andi	r24, 0x01	; 1
    2fb4:	90 70       	andi	r25, 0x00	; 0
    2fb6:	18 8a       	std	Y+16, r1	; 0x10
    2fb8:	00 97       	sbiw	r24, 0x00	; 0
    2fba:	11 f4       	brne	.+4      	; 0x2fc0 <SSDLT_enuDisplayNum+0x85a>
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	88 8b       	std	Y+16, r24	; 0x10
    2fc0:	8a 89       	ldd	r24, Y+18	; 0x12
    2fc2:	69 89       	ldd	r22, Y+17	; 0x11
    2fc4:	48 89       	ldd	r20, Y+16	; 0x10
    2fc6:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    2fca:	88 2f       	mov	r24, r24
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	98 2f       	mov	r25, r24
    2fd0:	88 27       	eor	r24, r24
    2fd2:	92 95       	swap	r25
    2fd4:	90 7f       	andi	r25, 0xF0	; 240
    2fd6:	9c 01       	movw	r18, r24
    2fd8:	44 27       	eor	r20, r20
    2fda:	37 fd       	sbrc	r19, 7
    2fdc:	40 95       	com	r20
    2fde:	54 2f       	mov	r21, r20
    2fe0:	89 81       	ldd	r24, Y+1	; 0x01
    2fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe4:	ab 81       	ldd	r26, Y+3	; 0x03
    2fe6:	bc 81       	ldd	r27, Y+4	; 0x04
    2fe8:	82 2b       	or	r24, r18
    2fea:	93 2b       	or	r25, r19
    2fec:	a4 2b       	or	r26, r20
    2fee:	b5 2b       	or	r27, r21
    2ff0:	89 83       	std	Y+1, r24	; 0x01
    2ff2:	9a 83       	std	Y+2, r25	; 0x02
    2ff4:	ab 83       	std	Y+3, r26	; 0x03
    2ff6:	bc 83       	std	Y+4, r27	; 0x04
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>4) & 1))) << 12);

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPort,
    2ff8:	8f 81       	ldd	r24, Y+7	; 0x07
    2ffa:	48 2f       	mov	r20, r24
    2ffc:	50 e0       	ldi	r21, 0x00	; 0
    2ffe:	ca 01       	movw	r24, r20
    3000:	88 0f       	add	r24, r24
    3002:	99 1f       	adc	r25, r25
    3004:	9c 01       	movw	r18, r24
    3006:	22 0f       	add	r18, r18
    3008:	33 1f       	adc	r19, r19
    300a:	22 0f       	add	r18, r18
    300c:	33 1f       	adc	r19, r19
    300e:	22 0f       	add	r18, r18
    3010:	33 1f       	adc	r19, r19
    3012:	82 0f       	add	r24, r18
    3014:	93 1f       	adc	r25, r19
    3016:	84 0f       	add	r24, r20
    3018:	95 1f       	adc	r25, r21
    301a:	fc 01       	movw	r30, r24
    301c:	e5 57       	subi	r30, 0x75	; 117
    301e:	fe 4f       	sbci	r31, 0xFE	; 254
    3020:	80 81       	ld	r24, Z
    3022:	8f 87       	std	Y+15, r24	; 0x0f
    3024:	8f 81       	ldd	r24, Y+7	; 0x07
    3026:	48 2f       	mov	r20, r24
    3028:	50 e0       	ldi	r21, 0x00	; 0
    302a:	ca 01       	movw	r24, r20
    302c:	88 0f       	add	r24, r24
    302e:	99 1f       	adc	r25, r25
    3030:	9c 01       	movw	r18, r24
    3032:	22 0f       	add	r18, r18
    3034:	33 1f       	adc	r19, r19
    3036:	22 0f       	add	r18, r18
    3038:	33 1f       	adc	r19, r19
    303a:	22 0f       	add	r18, r18
    303c:	33 1f       	adc	r19, r19
    303e:	82 0f       	add	r24, r18
    3040:	93 1f       	adc	r25, r19
    3042:	84 0f       	add	r24, r20
    3044:	95 1f       	adc	r25, r21
    3046:	fc 01       	movw	r30, r24
    3048:	e4 57       	subi	r30, 0x74	; 116
    304a:	fe 4f       	sbci	r31, 0xFE	; 254
    304c:	80 81       	ld	r24, Z
    304e:	8e 87       	std	Y+14, r24	; 0x0e
    3050:	88 85       	ldd	r24, Y+8	; 0x08
    3052:	88 2f       	mov	r24, r24
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	fc 01       	movw	r30, r24
    3058:	e9 55       	subi	r30, 0x59	; 89
    305a:	fe 4f       	sbci	r31, 0xFE	; 254
    305c:	80 81       	ld	r24, Z
    305e:	82 95       	swap	r24
    3060:	86 95       	lsr	r24
    3062:	87 70       	andi	r24, 0x07	; 7
    3064:	88 2f       	mov	r24, r24
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	81 70       	andi	r24, 0x01	; 1
    306a:	90 70       	andi	r25, 0x00	; 0
    306c:	1d 86       	std	Y+13, r1	; 0x0d
    306e:	00 97       	sbiw	r24, 0x00	; 0
    3070:	11 f4       	brne	.+4      	; 0x3076 <SSDLT_enuDisplayNum+0x910>
    3072:	81 e0       	ldi	r24, 0x01	; 1
    3074:	8d 87       	std	Y+13, r24	; 0x0d
    3076:	8f 85       	ldd	r24, Y+15	; 0x0f
    3078:	6e 85       	ldd	r22, Y+14	; 0x0e
    307a:	4d 85       	ldd	r20, Y+13	; 0x0d
    307c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3080:	88 2f       	mov	r24, r24
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	a0 e0       	ldi	r26, 0x00	; 0
    3086:	b0 e0       	ldi	r27, 0x00	; 0
    3088:	9c 01       	movw	r18, r24
    308a:	ad 01       	movw	r20, r26
    308c:	01 2e       	mov	r0, r17
    308e:	1f e0       	ldi	r17, 0x0F	; 15
    3090:	22 0f       	add	r18, r18
    3092:	33 1f       	adc	r19, r19
    3094:	44 1f       	adc	r20, r20
    3096:	55 1f       	adc	r21, r21
    3098:	1a 95       	dec	r17
    309a:	d1 f7       	brne	.-12     	; 0x3090 <SSDLT_enuDisplayNum+0x92a>
    309c:	10 2d       	mov	r17, r0
    309e:	89 81       	ldd	r24, Y+1	; 0x01
    30a0:	9a 81       	ldd	r25, Y+2	; 0x02
    30a2:	ab 81       	ldd	r26, Y+3	; 0x03
    30a4:	bc 81       	ldd	r27, Y+4	; 0x04
    30a6:	82 2b       	or	r24, r18
    30a8:	93 2b       	or	r25, r19
    30aa:	a4 2b       	or	r26, r20
    30ac:	b5 2b       	or	r27, r21
    30ae:	89 83       	std	Y+1, r24	; 0x01
    30b0:	9a 83       	std	Y+2, r25	; 0x02
    30b2:	ab 83       	std	Y+3, r26	; 0x03
    30b4:	bc 83       	std	Y+4, r27	; 0x04
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>5) & 1))) << 15));

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPort,
    30b6:	8f 81       	ldd	r24, Y+7	; 0x07
    30b8:	48 2f       	mov	r20, r24
    30ba:	50 e0       	ldi	r21, 0x00	; 0
    30bc:	ca 01       	movw	r24, r20
    30be:	88 0f       	add	r24, r24
    30c0:	99 1f       	adc	r25, r25
    30c2:	9c 01       	movw	r18, r24
    30c4:	22 0f       	add	r18, r18
    30c6:	33 1f       	adc	r19, r19
    30c8:	22 0f       	add	r18, r18
    30ca:	33 1f       	adc	r19, r19
    30cc:	22 0f       	add	r18, r18
    30ce:	33 1f       	adc	r19, r19
    30d0:	82 0f       	add	r24, r18
    30d2:	93 1f       	adc	r25, r19
    30d4:	84 0f       	add	r24, r20
    30d6:	95 1f       	adc	r25, r21
    30d8:	fc 01       	movw	r30, r24
    30da:	e3 57       	subi	r30, 0x73	; 115
    30dc:	fe 4f       	sbci	r31, 0xFE	; 254
    30de:	80 81       	ld	r24, Z
    30e0:	8c 87       	std	Y+12, r24	; 0x0c
    30e2:	8f 81       	ldd	r24, Y+7	; 0x07
    30e4:	48 2f       	mov	r20, r24
    30e6:	50 e0       	ldi	r21, 0x00	; 0
    30e8:	ca 01       	movw	r24, r20
    30ea:	88 0f       	add	r24, r24
    30ec:	99 1f       	adc	r25, r25
    30ee:	9c 01       	movw	r18, r24
    30f0:	22 0f       	add	r18, r18
    30f2:	33 1f       	adc	r19, r19
    30f4:	22 0f       	add	r18, r18
    30f6:	33 1f       	adc	r19, r19
    30f8:	22 0f       	add	r18, r18
    30fa:	33 1f       	adc	r19, r19
    30fc:	82 0f       	add	r24, r18
    30fe:	93 1f       	adc	r25, r19
    3100:	84 0f       	add	r24, r20
    3102:	95 1f       	adc	r25, r21
    3104:	fc 01       	movw	r30, r24
    3106:	e2 57       	subi	r30, 0x72	; 114
    3108:	fe 4f       	sbci	r31, 0xFE	; 254
    310a:	80 81       	ld	r24, Z
    310c:	8b 87       	std	Y+11, r24	; 0x0b
    310e:	88 85       	ldd	r24, Y+8	; 0x08
    3110:	88 2f       	mov	r24, r24
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	fc 01       	movw	r30, r24
    3116:	e9 55       	subi	r30, 0x59	; 89
    3118:	fe 4f       	sbci	r31, 0xFE	; 254
    311a:	80 81       	ld	r24, Z
    311c:	82 95       	swap	r24
    311e:	86 95       	lsr	r24
    3120:	86 95       	lsr	r24
    3122:	83 70       	andi	r24, 0x03	; 3
    3124:	88 2f       	mov	r24, r24
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	81 70       	andi	r24, 0x01	; 1
    312a:	90 70       	andi	r25, 0x00	; 0
    312c:	1a 86       	std	Y+10, r1	; 0x0a
    312e:	00 97       	sbiw	r24, 0x00	; 0
    3130:	11 f4       	brne	.+4      	; 0x3136 <SSDLT_enuDisplayNum+0x9d0>
    3132:	81 e0       	ldi	r24, 0x01	; 1
    3134:	8a 87       	std	Y+10, r24	; 0x0a
    3136:	8c 85       	ldd	r24, Y+12	; 0x0c
    3138:	6b 85       	ldd	r22, Y+11	; 0x0b
    313a:	4a 85       	ldd	r20, Y+10	; 0x0a
    313c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3140:	88 2f       	mov	r24, r24
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	a0 e0       	ldi	r26, 0x00	; 0
    3146:	b0 e0       	ldi	r27, 0x00	; 0
    3148:	9c 01       	movw	r18, r24
    314a:	ad 01       	movw	r20, r26
    314c:	01 2e       	mov	r0, r17
    314e:	12 e1       	ldi	r17, 0x12	; 18
    3150:	22 0f       	add	r18, r18
    3152:	33 1f       	adc	r19, r19
    3154:	44 1f       	adc	r20, r20
    3156:	55 1f       	adc	r21, r21
    3158:	1a 95       	dec	r17
    315a:	d1 f7       	brne	.-12     	; 0x3150 <SSDLT_enuDisplayNum+0x9ea>
    315c:	10 2d       	mov	r17, r0
    315e:	89 81       	ldd	r24, Y+1	; 0x01
    3160:	9a 81       	ldd	r25, Y+2	; 0x02
    3162:	ab 81       	ldd	r26, Y+3	; 0x03
    3164:	bc 81       	ldd	r27, Y+4	; 0x04
    3166:	82 2b       	or	r24, r18
    3168:	93 2b       	or	r25, r19
    316a:	a4 2b       	or	r26, r20
    316c:	b5 2b       	or	r27, r21
    316e:	89 83       	std	Y+1, r24	; 0x01
    3170:	9a 83       	std	Y+2, r25	; 0x02
    3172:	ab 83       	std	Y+3, r26	; 0x03
    3174:	bc 83       	std	Y+4, r27	; 0x04
    3176:	05 c0       	rjmp	.+10     	; 0x3182 <SSDLT_enuDisplayNum+0xa1c>
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>6) & 1))) << 18));
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    3178:	83 e0       	ldi	r24, 0x03	; 3
    317a:	8e 83       	std	Y+6, r24	; 0x06
    317c:	02 c0       	rjmp	.+4      	; 0x3182 <SSDLT_enuDisplayNum+0xa1c>
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    317e:	83 e0       	ldi	r24, 0x03	; 3
    3180:	8e 83       	std	Y+6, r24	; 0x06
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    3182:	1d 82       	std	Y+5, r1	; 0x05
    3184:	1e c0       	rjmp	.+60     	; 0x31c2 <SSDLT_enuDisplayNum+0xa5c>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
    3186:	8d 81       	ldd	r24, Y+5	; 0x05
    3188:	28 2f       	mov	r18, r24
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	89 81       	ldd	r24, Y+1	; 0x01
    318e:	9a 81       	ldd	r25, Y+2	; 0x02
    3190:	ab 81       	ldd	r26, Y+3	; 0x03
    3192:	bc 81       	ldd	r27, Y+4	; 0x04
    3194:	02 2e       	mov	r0, r18
    3196:	04 c0       	rjmp	.+8      	; 0x31a0 <SSDLT_enuDisplayNum+0xa3a>
    3198:	b6 95       	lsr	r27
    319a:	a7 95       	ror	r26
    319c:	97 95       	ror	r25
    319e:	87 95       	ror	r24
    31a0:	0a 94       	dec	r0
    31a2:	d2 f7       	brpl	.-12     	; 0x3198 <SSDLT_enuDisplayNum+0xa32>
    31a4:	87 70       	andi	r24, 0x07	; 7
    31a6:	90 70       	andi	r25, 0x00	; 0
    31a8:	a0 70       	andi	r26, 0x00	; 0
    31aa:	b0 70       	andi	r27, 0x00	; 0
    31ac:	81 30       	cpi	r24, 0x01	; 1
    31ae:	91 05       	cpc	r25, r1
    31b0:	a1 05       	cpc	r26, r1
    31b2:	b1 05       	cpc	r27, r1
    31b4:	19 f0       	breq	.+6      	; 0x31bc <SSDLT_enuDisplayNum+0xa56>
		{
			return Local_enuErrorState;
    31b6:	8e 81       	ldd	r24, Y+6	; 0x06
    31b8:	89 87       	std	Y+9, r24	; 0x09
    31ba:	0a c0       	rjmp	.+20     	; 0x31d0 <SSDLT_enuDisplayNum+0xa6a>
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    31bc:	8d 81       	ldd	r24, Y+5	; 0x05
    31be:	8d 5f       	subi	r24, 0xFD	; 253
    31c0:	8d 83       	std	Y+5, r24	; 0x05
    31c2:	8d 81       	ldd	r24, Y+5	; 0x05
    31c4:	85 31       	cpi	r24, 0x15	; 21
    31c6:	f8 f2       	brcs	.-66     	; 0x3186 <SSDLT_enuDisplayNum+0xa20>
		{
			return Local_enuErrorState;
		}
	}

	Local_enuErrorState = ES_OK;
    31c8:	81 e0       	ldi	r24, 0x01	; 1
    31ca:	8e 83       	std	Y+6, r24	; 0x06

	return Local_enuErrorState;
    31cc:	8e 81       	ldd	r24, Y+6	; 0x06
    31ce:	89 87       	std	Y+9, r24	; 0x09
    31d0:	89 85       	ldd	r24, Y+9	; 0x09
}
    31d2:	6e 96       	adiw	r28, 0x1e	; 30
    31d4:	0f b6       	in	r0, 0x3f	; 63
    31d6:	f8 94       	cli
    31d8:	de bf       	out	0x3e, r29	; 62
    31da:	0f be       	out	0x3f, r0	; 63
    31dc:	cd bf       	out	0x3d, r28	; 61
    31de:	cf 91       	pop	r28
    31e0:	df 91       	pop	r29
    31e2:	08 95       	ret

000031e4 <SSDLT_enuEnableCommon>:

ES_t SSDLT_enuEnableCommon(u8 Copy_u8SegID)
{
    31e4:	df 93       	push	r29
    31e6:	cf 93       	push	r28
    31e8:	00 d0       	rcall	.+0      	; 0x31ea <SSDLT_enuEnableCommon+0x6>
    31ea:	cd b7       	in	r28, 0x3d	; 61
    31ec:	de b7       	in	r29, 0x3e	; 62
    31ee:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    31f0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8SegID < SEG_NUM)
    31f2:	8a 81       	ldd	r24, Y+2	; 0x02
    31f4:	82 30       	cpi	r24, 0x02	; 2
    31f6:	08 f0       	brcs	.+2      	; 0x31fa <SSDLT_enuEnableCommon+0x16>
    31f8:	c2 c0       	rjmp	.+388    	; 0x337e <SSDLT_enuEnableCommon+0x19a>
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port != NOT_CONNECTED ||
    31fa:	8a 81       	ldd	r24, Y+2	; 0x02
    31fc:	48 2f       	mov	r20, r24
    31fe:	50 e0       	ldi	r21, 0x00	; 0
    3200:	ca 01       	movw	r24, r20
    3202:	88 0f       	add	r24, r24
    3204:	99 1f       	adc	r25, r25
    3206:	9c 01       	movw	r18, r24
    3208:	22 0f       	add	r18, r18
    320a:	33 1f       	adc	r19, r19
    320c:	22 0f       	add	r18, r18
    320e:	33 1f       	adc	r19, r19
    3210:	22 0f       	add	r18, r18
    3212:	33 1f       	adc	r19, r19
    3214:	82 0f       	add	r24, r18
    3216:	93 1f       	adc	r25, r19
    3218:	84 0f       	add	r24, r20
    321a:	95 1f       	adc	r25, r21
    321c:	fc 01       	movw	r30, r24
    321e:	e1 57       	subi	r30, 0x71	; 113
    3220:	fe 4f       	sbci	r31, 0xFE	; 254
    3222:	80 81       	ld	r24, Z
    3224:	82 30       	cpi	r24, 0x02	; 2
    3226:	c1 f4       	brne	.+48     	; 0x3258 <SSDLT_enuEnableCommon+0x74>
    3228:	8a 81       	ldd	r24, Y+2	; 0x02
    322a:	48 2f       	mov	r20, r24
    322c:	50 e0       	ldi	r21, 0x00	; 0
    322e:	ca 01       	movw	r24, r20
    3230:	88 0f       	add	r24, r24
    3232:	99 1f       	adc	r25, r25
    3234:	9c 01       	movw	r18, r24
    3236:	22 0f       	add	r18, r18
    3238:	33 1f       	adc	r19, r19
    323a:	22 0f       	add	r18, r18
    323c:	33 1f       	adc	r19, r19
    323e:	22 0f       	add	r18, r18
    3240:	33 1f       	adc	r19, r19
    3242:	82 0f       	add	r24, r18
    3244:	93 1f       	adc	r25, r19
    3246:	84 0f       	add	r24, r20
    3248:	95 1f       	adc	r25, r21
    324a:	fc 01       	movw	r30, r24
    324c:	e0 57       	subi	r30, 0x70	; 112
    324e:	fe 4f       	sbci	r31, 0xFE	; 254
    3250:	80 81       	ld	r24, Z
    3252:	82 30       	cpi	r24, 0x02	; 2
    3254:	09 f4       	brne	.+2      	; 0x3258 <SSDLT_enuEnableCommon+0x74>
    3256:	95 c0       	rjmp	.+298    	; 0x3382 <SSDLT_enuEnableCommon+0x19e>
				SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin != NOT_CONNECTED)
		{
			if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    3258:	8a 81       	ldd	r24, Y+2	; 0x02
    325a:	48 2f       	mov	r20, r24
    325c:	50 e0       	ldi	r21, 0x00	; 0
    325e:	ca 01       	movw	r24, r20
    3260:	88 0f       	add	r24, r24
    3262:	99 1f       	adc	r25, r25
    3264:	9c 01       	movw	r18, r24
    3266:	22 0f       	add	r18, r18
    3268:	33 1f       	adc	r19, r19
    326a:	22 0f       	add	r18, r18
    326c:	33 1f       	adc	r19, r19
    326e:	22 0f       	add	r18, r18
    3270:	33 1f       	adc	r19, r19
    3272:	82 0f       	add	r24, r18
    3274:	93 1f       	adc	r25, r19
    3276:	84 0f       	add	r24, r20
    3278:	95 1f       	adc	r25, r21
    327a:	fc 01       	movw	r30, r24
    327c:	ed 56       	subi	r30, 0x6D	; 109
    327e:	fe 4f       	sbci	r31, 0xFE	; 254
    3280:	80 81       	ld	r24, Z
    3282:	81 30       	cpi	r24, 0x01	; 1
    3284:	89 f5       	brne	.+98     	; 0x32e8 <SSDLT_enuEnableCommon+0x104>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port,
    3286:	8a 81       	ldd	r24, Y+2	; 0x02
    3288:	48 2f       	mov	r20, r24
    328a:	50 e0       	ldi	r21, 0x00	; 0
    328c:	ca 01       	movw	r24, r20
    328e:	88 0f       	add	r24, r24
    3290:	99 1f       	adc	r25, r25
    3292:	9c 01       	movw	r18, r24
    3294:	22 0f       	add	r18, r18
    3296:	33 1f       	adc	r19, r19
    3298:	22 0f       	add	r18, r18
    329a:	33 1f       	adc	r19, r19
    329c:	22 0f       	add	r18, r18
    329e:	33 1f       	adc	r19, r19
    32a0:	82 0f       	add	r24, r18
    32a2:	93 1f       	adc	r25, r19
    32a4:	84 0f       	add	r24, r20
    32a6:	95 1f       	adc	r25, r21
    32a8:	fc 01       	movw	r30, r24
    32aa:	e1 57       	subi	r30, 0x71	; 113
    32ac:	fe 4f       	sbci	r31, 0xFE	; 254
    32ae:	60 81       	ld	r22, Z
    32b0:	8a 81       	ldd	r24, Y+2	; 0x02
    32b2:	48 2f       	mov	r20, r24
    32b4:	50 e0       	ldi	r21, 0x00	; 0
    32b6:	ca 01       	movw	r24, r20
    32b8:	88 0f       	add	r24, r24
    32ba:	99 1f       	adc	r25, r25
    32bc:	9c 01       	movw	r18, r24
    32be:	22 0f       	add	r18, r18
    32c0:	33 1f       	adc	r19, r19
    32c2:	22 0f       	add	r18, r18
    32c4:	33 1f       	adc	r19, r19
    32c6:	22 0f       	add	r18, r18
    32c8:	33 1f       	adc	r19, r19
    32ca:	82 0f       	add	r24, r18
    32cc:	93 1f       	adc	r25, r19
    32ce:	84 0f       	add	r24, r20
    32d0:	95 1f       	adc	r25, r21
    32d2:	fc 01       	movw	r30, r24
    32d4:	e0 57       	subi	r30, 0x70	; 112
    32d6:	fe 4f       	sbci	r31, 0xFE	; 254
    32d8:	90 81       	ld	r25, Z
    32da:	86 2f       	mov	r24, r22
    32dc:	69 2f       	mov	r22, r25
    32de:	40 e0       	ldi	r20, 0x00	; 0
    32e0:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    32e4:	89 83       	std	Y+1, r24	; 0x01
    32e6:	4d c0       	rjmp	.+154    	; 0x3382 <SSDLT_enuEnableCommon+0x19e>
														 SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin, DIO_u8LOW);
			}
			else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    32e8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ea:	48 2f       	mov	r20, r24
    32ec:	50 e0       	ldi	r21, 0x00	; 0
    32ee:	ca 01       	movw	r24, r20
    32f0:	88 0f       	add	r24, r24
    32f2:	99 1f       	adc	r25, r25
    32f4:	9c 01       	movw	r18, r24
    32f6:	22 0f       	add	r18, r18
    32f8:	33 1f       	adc	r19, r19
    32fa:	22 0f       	add	r18, r18
    32fc:	33 1f       	adc	r19, r19
    32fe:	22 0f       	add	r18, r18
    3300:	33 1f       	adc	r19, r19
    3302:	82 0f       	add	r24, r18
    3304:	93 1f       	adc	r25, r19
    3306:	84 0f       	add	r24, r20
    3308:	95 1f       	adc	r25, r21
    330a:	fc 01       	movw	r30, r24
    330c:	ed 56       	subi	r30, 0x6D	; 109
    330e:	fe 4f       	sbci	r31, 0xFE	; 254
    3310:	80 81       	ld	r24, Z
    3312:	88 23       	and	r24, r24
    3314:	89 f5       	brne	.+98     	; 0x3378 <SSDLT_enuEnableCommon+0x194>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port,
    3316:	8a 81       	ldd	r24, Y+2	; 0x02
    3318:	48 2f       	mov	r20, r24
    331a:	50 e0       	ldi	r21, 0x00	; 0
    331c:	ca 01       	movw	r24, r20
    331e:	88 0f       	add	r24, r24
    3320:	99 1f       	adc	r25, r25
    3322:	9c 01       	movw	r18, r24
    3324:	22 0f       	add	r18, r18
    3326:	33 1f       	adc	r19, r19
    3328:	22 0f       	add	r18, r18
    332a:	33 1f       	adc	r19, r19
    332c:	22 0f       	add	r18, r18
    332e:	33 1f       	adc	r19, r19
    3330:	82 0f       	add	r24, r18
    3332:	93 1f       	adc	r25, r19
    3334:	84 0f       	add	r24, r20
    3336:	95 1f       	adc	r25, r21
    3338:	fc 01       	movw	r30, r24
    333a:	e1 57       	subi	r30, 0x71	; 113
    333c:	fe 4f       	sbci	r31, 0xFE	; 254
    333e:	60 81       	ld	r22, Z
    3340:	8a 81       	ldd	r24, Y+2	; 0x02
    3342:	48 2f       	mov	r20, r24
    3344:	50 e0       	ldi	r21, 0x00	; 0
    3346:	ca 01       	movw	r24, r20
    3348:	88 0f       	add	r24, r24
    334a:	99 1f       	adc	r25, r25
    334c:	9c 01       	movw	r18, r24
    334e:	22 0f       	add	r18, r18
    3350:	33 1f       	adc	r19, r19
    3352:	22 0f       	add	r18, r18
    3354:	33 1f       	adc	r19, r19
    3356:	22 0f       	add	r18, r18
    3358:	33 1f       	adc	r19, r19
    335a:	82 0f       	add	r24, r18
    335c:	93 1f       	adc	r25, r19
    335e:	84 0f       	add	r24, r20
    3360:	95 1f       	adc	r25, r21
    3362:	fc 01       	movw	r30, r24
    3364:	e0 57       	subi	r30, 0x70	; 112
    3366:	fe 4f       	sbci	r31, 0xFE	; 254
    3368:	90 81       	ld	r25, Z
    336a:	86 2f       	mov	r24, r22
    336c:	69 2f       	mov	r22, r25
    336e:	41 e0       	ldi	r20, 0x01	; 1
    3370:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3374:	89 83       	std	Y+1, r24	; 0x01
    3376:	05 c0       	rjmp	.+10     	; 0x3382 <SSDLT_enuEnableCommon+0x19e>
														SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin, DIO_u8HIGH);
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    3378:	83 e0       	ldi	r24, 0x03	; 3
    337a:	89 83       	std	Y+1, r24	; 0x01
    337c:	02 c0       	rjmp	.+4      	; 0x3382 <SSDLT_enuEnableCommon+0x19e>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    337e:	83 e0       	ldi	r24, 0x03	; 3
    3380:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    3382:	89 81       	ldd	r24, Y+1	; 0x01
}
    3384:	0f 90       	pop	r0
    3386:	0f 90       	pop	r0
    3388:	cf 91       	pop	r28
    338a:	df 91       	pop	r29
    338c:	08 95       	ret

0000338e <SSDLT_enuDisableCommon>:

ES_t SSDLT_enuDisableCommon(u8 Copy_u8SegID)
{
    338e:	df 93       	push	r29
    3390:	cf 93       	push	r28
    3392:	00 d0       	rcall	.+0      	; 0x3394 <SSDLT_enuDisableCommon+0x6>
    3394:	cd b7       	in	r28, 0x3d	; 61
    3396:	de b7       	in	r29, 0x3e	; 62
    3398:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    339a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8SegID < SEG_NUM)
    339c:	8a 81       	ldd	r24, Y+2	; 0x02
    339e:	82 30       	cpi	r24, 0x02	; 2
    33a0:	08 f0       	brcs	.+2      	; 0x33a4 <SSDLT_enuDisableCommon+0x16>
    33a2:	c2 c0       	rjmp	.+388    	; 0x3528 <SSDLT_enuDisableCommon+0x19a>
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port != NOT_CONNECTED ||
    33a4:	8a 81       	ldd	r24, Y+2	; 0x02
    33a6:	48 2f       	mov	r20, r24
    33a8:	50 e0       	ldi	r21, 0x00	; 0
    33aa:	ca 01       	movw	r24, r20
    33ac:	88 0f       	add	r24, r24
    33ae:	99 1f       	adc	r25, r25
    33b0:	9c 01       	movw	r18, r24
    33b2:	22 0f       	add	r18, r18
    33b4:	33 1f       	adc	r19, r19
    33b6:	22 0f       	add	r18, r18
    33b8:	33 1f       	adc	r19, r19
    33ba:	22 0f       	add	r18, r18
    33bc:	33 1f       	adc	r19, r19
    33be:	82 0f       	add	r24, r18
    33c0:	93 1f       	adc	r25, r19
    33c2:	84 0f       	add	r24, r20
    33c4:	95 1f       	adc	r25, r21
    33c6:	fc 01       	movw	r30, r24
    33c8:	e1 57       	subi	r30, 0x71	; 113
    33ca:	fe 4f       	sbci	r31, 0xFE	; 254
    33cc:	80 81       	ld	r24, Z
    33ce:	82 30       	cpi	r24, 0x02	; 2
    33d0:	c1 f4       	brne	.+48     	; 0x3402 <SSDLT_enuDisableCommon+0x74>
    33d2:	8a 81       	ldd	r24, Y+2	; 0x02
    33d4:	48 2f       	mov	r20, r24
    33d6:	50 e0       	ldi	r21, 0x00	; 0
    33d8:	ca 01       	movw	r24, r20
    33da:	88 0f       	add	r24, r24
    33dc:	99 1f       	adc	r25, r25
    33de:	9c 01       	movw	r18, r24
    33e0:	22 0f       	add	r18, r18
    33e2:	33 1f       	adc	r19, r19
    33e4:	22 0f       	add	r18, r18
    33e6:	33 1f       	adc	r19, r19
    33e8:	22 0f       	add	r18, r18
    33ea:	33 1f       	adc	r19, r19
    33ec:	82 0f       	add	r24, r18
    33ee:	93 1f       	adc	r25, r19
    33f0:	84 0f       	add	r24, r20
    33f2:	95 1f       	adc	r25, r21
    33f4:	fc 01       	movw	r30, r24
    33f6:	e0 57       	subi	r30, 0x70	; 112
    33f8:	fe 4f       	sbci	r31, 0xFE	; 254
    33fa:	80 81       	ld	r24, Z
    33fc:	82 30       	cpi	r24, 0x02	; 2
    33fe:	09 f4       	brne	.+2      	; 0x3402 <SSDLT_enuDisableCommon+0x74>
    3400:	95 c0       	rjmp	.+298    	; 0x352c <SSDLT_enuDisableCommon+0x19e>
				SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin != NOT_CONNECTED)
		{
			if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    3402:	8a 81       	ldd	r24, Y+2	; 0x02
    3404:	48 2f       	mov	r20, r24
    3406:	50 e0       	ldi	r21, 0x00	; 0
    3408:	ca 01       	movw	r24, r20
    340a:	88 0f       	add	r24, r24
    340c:	99 1f       	adc	r25, r25
    340e:	9c 01       	movw	r18, r24
    3410:	22 0f       	add	r18, r18
    3412:	33 1f       	adc	r19, r19
    3414:	22 0f       	add	r18, r18
    3416:	33 1f       	adc	r19, r19
    3418:	22 0f       	add	r18, r18
    341a:	33 1f       	adc	r19, r19
    341c:	82 0f       	add	r24, r18
    341e:	93 1f       	adc	r25, r19
    3420:	84 0f       	add	r24, r20
    3422:	95 1f       	adc	r25, r21
    3424:	fc 01       	movw	r30, r24
    3426:	ed 56       	subi	r30, 0x6D	; 109
    3428:	fe 4f       	sbci	r31, 0xFE	; 254
    342a:	80 81       	ld	r24, Z
    342c:	81 30       	cpi	r24, 0x01	; 1
    342e:	89 f5       	brne	.+98     	; 0x3492 <SSDLT_enuDisableCommon+0x104>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port,
    3430:	8a 81       	ldd	r24, Y+2	; 0x02
    3432:	48 2f       	mov	r20, r24
    3434:	50 e0       	ldi	r21, 0x00	; 0
    3436:	ca 01       	movw	r24, r20
    3438:	88 0f       	add	r24, r24
    343a:	99 1f       	adc	r25, r25
    343c:	9c 01       	movw	r18, r24
    343e:	22 0f       	add	r18, r18
    3440:	33 1f       	adc	r19, r19
    3442:	22 0f       	add	r18, r18
    3444:	33 1f       	adc	r19, r19
    3446:	22 0f       	add	r18, r18
    3448:	33 1f       	adc	r19, r19
    344a:	82 0f       	add	r24, r18
    344c:	93 1f       	adc	r25, r19
    344e:	84 0f       	add	r24, r20
    3450:	95 1f       	adc	r25, r21
    3452:	fc 01       	movw	r30, r24
    3454:	e1 57       	subi	r30, 0x71	; 113
    3456:	fe 4f       	sbci	r31, 0xFE	; 254
    3458:	60 81       	ld	r22, Z
    345a:	8a 81       	ldd	r24, Y+2	; 0x02
    345c:	48 2f       	mov	r20, r24
    345e:	50 e0       	ldi	r21, 0x00	; 0
    3460:	ca 01       	movw	r24, r20
    3462:	88 0f       	add	r24, r24
    3464:	99 1f       	adc	r25, r25
    3466:	9c 01       	movw	r18, r24
    3468:	22 0f       	add	r18, r18
    346a:	33 1f       	adc	r19, r19
    346c:	22 0f       	add	r18, r18
    346e:	33 1f       	adc	r19, r19
    3470:	22 0f       	add	r18, r18
    3472:	33 1f       	adc	r19, r19
    3474:	82 0f       	add	r24, r18
    3476:	93 1f       	adc	r25, r19
    3478:	84 0f       	add	r24, r20
    347a:	95 1f       	adc	r25, r21
    347c:	fc 01       	movw	r30, r24
    347e:	e0 57       	subi	r30, 0x70	; 112
    3480:	fe 4f       	sbci	r31, 0xFE	; 254
    3482:	90 81       	ld	r25, Z
    3484:	86 2f       	mov	r24, r22
    3486:	69 2f       	mov	r22, r25
    3488:	41 e0       	ldi	r20, 0x01	; 1
    348a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    348e:	89 83       	std	Y+1, r24	; 0x01
    3490:	4d c0       	rjmp	.+154    	; 0x352c <SSDLT_enuDisableCommon+0x19e>
														 SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin, DIO_u8HIGH);
			}
			else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    3492:	8a 81       	ldd	r24, Y+2	; 0x02
    3494:	48 2f       	mov	r20, r24
    3496:	50 e0       	ldi	r21, 0x00	; 0
    3498:	ca 01       	movw	r24, r20
    349a:	88 0f       	add	r24, r24
    349c:	99 1f       	adc	r25, r25
    349e:	9c 01       	movw	r18, r24
    34a0:	22 0f       	add	r18, r18
    34a2:	33 1f       	adc	r19, r19
    34a4:	22 0f       	add	r18, r18
    34a6:	33 1f       	adc	r19, r19
    34a8:	22 0f       	add	r18, r18
    34aa:	33 1f       	adc	r19, r19
    34ac:	82 0f       	add	r24, r18
    34ae:	93 1f       	adc	r25, r19
    34b0:	84 0f       	add	r24, r20
    34b2:	95 1f       	adc	r25, r21
    34b4:	fc 01       	movw	r30, r24
    34b6:	ed 56       	subi	r30, 0x6D	; 109
    34b8:	fe 4f       	sbci	r31, 0xFE	; 254
    34ba:	80 81       	ld	r24, Z
    34bc:	88 23       	and	r24, r24
    34be:	89 f5       	brne	.+98     	; 0x3522 <SSDLT_enuDisableCommon+0x194>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port,
    34c0:	8a 81       	ldd	r24, Y+2	; 0x02
    34c2:	48 2f       	mov	r20, r24
    34c4:	50 e0       	ldi	r21, 0x00	; 0
    34c6:	ca 01       	movw	r24, r20
    34c8:	88 0f       	add	r24, r24
    34ca:	99 1f       	adc	r25, r25
    34cc:	9c 01       	movw	r18, r24
    34ce:	22 0f       	add	r18, r18
    34d0:	33 1f       	adc	r19, r19
    34d2:	22 0f       	add	r18, r18
    34d4:	33 1f       	adc	r19, r19
    34d6:	22 0f       	add	r18, r18
    34d8:	33 1f       	adc	r19, r19
    34da:	82 0f       	add	r24, r18
    34dc:	93 1f       	adc	r25, r19
    34de:	84 0f       	add	r24, r20
    34e0:	95 1f       	adc	r25, r21
    34e2:	fc 01       	movw	r30, r24
    34e4:	e1 57       	subi	r30, 0x71	; 113
    34e6:	fe 4f       	sbci	r31, 0xFE	; 254
    34e8:	60 81       	ld	r22, Z
    34ea:	8a 81       	ldd	r24, Y+2	; 0x02
    34ec:	48 2f       	mov	r20, r24
    34ee:	50 e0       	ldi	r21, 0x00	; 0
    34f0:	ca 01       	movw	r24, r20
    34f2:	88 0f       	add	r24, r24
    34f4:	99 1f       	adc	r25, r25
    34f6:	9c 01       	movw	r18, r24
    34f8:	22 0f       	add	r18, r18
    34fa:	33 1f       	adc	r19, r19
    34fc:	22 0f       	add	r18, r18
    34fe:	33 1f       	adc	r19, r19
    3500:	22 0f       	add	r18, r18
    3502:	33 1f       	adc	r19, r19
    3504:	82 0f       	add	r24, r18
    3506:	93 1f       	adc	r25, r19
    3508:	84 0f       	add	r24, r20
    350a:	95 1f       	adc	r25, r21
    350c:	fc 01       	movw	r30, r24
    350e:	e0 57       	subi	r30, 0x70	; 112
    3510:	fe 4f       	sbci	r31, 0xFE	; 254
    3512:	90 81       	ld	r25, Z
    3514:	86 2f       	mov	r24, r22
    3516:	69 2f       	mov	r22, r25
    3518:	40 e0       	ldi	r20, 0x00	; 0
    351a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    351e:	89 83       	std	Y+1, r24	; 0x01
    3520:	05 c0       	rjmp	.+10     	; 0x352c <SSDLT_enuDisableCommon+0x19e>
														SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin, DIO_u8LOW);
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    3522:	83 e0       	ldi	r24, 0x03	; 3
    3524:	89 83       	std	Y+1, r24	; 0x01
    3526:	02 c0       	rjmp	.+4      	; 0x352c <SSDLT_enuDisableCommon+0x19e>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    3528:	83 e0       	ldi	r24, 0x03	; 3
    352a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    352c:	89 81       	ldd	r24, Y+1	; 0x01
}
    352e:	0f 90       	pop	r0
    3530:	0f 90       	pop	r0
    3532:	cf 91       	pop	r28
    3534:	df 91       	pop	r29
    3536:	08 95       	ret

00003538 <SSDLT_enuEnableDot>:

ES_t SSDLT_enuEnableDot(u8 Copy_u8SegID)
{
    3538:	df 93       	push	r29
    353a:	cf 93       	push	r28
    353c:	00 d0       	rcall	.+0      	; 0x353e <SSDLT_enuEnableDot+0x6>
    353e:	cd b7       	in	r28, 0x3d	; 61
    3540:	de b7       	in	r29, 0x3e	; 62
    3542:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3544:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8SegID < SEG_NUM)
    3546:	8a 81       	ldd	r24, Y+2	; 0x02
    3548:	82 30       	cpi	r24, 0x02	; 2
    354a:	08 f0       	brcs	.+2      	; 0x354e <SSDLT_enuEnableDot+0x16>
    354c:	c2 c0       	rjmp	.+388    	; 0x36d2 <SSDLT_enuEnableDot+0x19a>
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port != NOT_CONNECTED ||
    354e:	8a 81       	ldd	r24, Y+2	; 0x02
    3550:	48 2f       	mov	r20, r24
    3552:	50 e0       	ldi	r21, 0x00	; 0
    3554:	ca 01       	movw	r24, r20
    3556:	88 0f       	add	r24, r24
    3558:	99 1f       	adc	r25, r25
    355a:	9c 01       	movw	r18, r24
    355c:	22 0f       	add	r18, r18
    355e:	33 1f       	adc	r19, r19
    3560:	22 0f       	add	r18, r18
    3562:	33 1f       	adc	r19, r19
    3564:	22 0f       	add	r18, r18
    3566:	33 1f       	adc	r19, r19
    3568:	82 0f       	add	r24, r18
    356a:	93 1f       	adc	r25, r19
    356c:	84 0f       	add	r24, r20
    356e:	95 1f       	adc	r25, r21
    3570:	fc 01       	movw	r30, r24
    3572:	ef 56       	subi	r30, 0x6F	; 111
    3574:	fe 4f       	sbci	r31, 0xFE	; 254
    3576:	80 81       	ld	r24, Z
    3578:	82 30       	cpi	r24, 0x02	; 2
    357a:	c1 f4       	brne	.+48     	; 0x35ac <SSDLT_enuEnableDot+0x74>
    357c:	8a 81       	ldd	r24, Y+2	; 0x02
    357e:	48 2f       	mov	r20, r24
    3580:	50 e0       	ldi	r21, 0x00	; 0
    3582:	ca 01       	movw	r24, r20
    3584:	88 0f       	add	r24, r24
    3586:	99 1f       	adc	r25, r25
    3588:	9c 01       	movw	r18, r24
    358a:	22 0f       	add	r18, r18
    358c:	33 1f       	adc	r19, r19
    358e:	22 0f       	add	r18, r18
    3590:	33 1f       	adc	r19, r19
    3592:	22 0f       	add	r18, r18
    3594:	33 1f       	adc	r19, r19
    3596:	82 0f       	add	r24, r18
    3598:	93 1f       	adc	r25, r19
    359a:	84 0f       	add	r24, r20
    359c:	95 1f       	adc	r25, r21
    359e:	fc 01       	movw	r30, r24
    35a0:	ee 56       	subi	r30, 0x6E	; 110
    35a2:	fe 4f       	sbci	r31, 0xFE	; 254
    35a4:	80 81       	ld	r24, Z
    35a6:	82 30       	cpi	r24, 0x02	; 2
    35a8:	09 f4       	brne	.+2      	; 0x35ac <SSDLT_enuEnableDot+0x74>
    35aa:	95 c0       	rjmp	.+298    	; 0x36d6 <SSDLT_enuEnableDot+0x19e>
				SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin != NOT_CONNECTED)
		{
			if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    35ac:	8a 81       	ldd	r24, Y+2	; 0x02
    35ae:	48 2f       	mov	r20, r24
    35b0:	50 e0       	ldi	r21, 0x00	; 0
    35b2:	ca 01       	movw	r24, r20
    35b4:	88 0f       	add	r24, r24
    35b6:	99 1f       	adc	r25, r25
    35b8:	9c 01       	movw	r18, r24
    35ba:	22 0f       	add	r18, r18
    35bc:	33 1f       	adc	r19, r19
    35be:	22 0f       	add	r18, r18
    35c0:	33 1f       	adc	r19, r19
    35c2:	22 0f       	add	r18, r18
    35c4:	33 1f       	adc	r19, r19
    35c6:	82 0f       	add	r24, r18
    35c8:	93 1f       	adc	r25, r19
    35ca:	84 0f       	add	r24, r20
    35cc:	95 1f       	adc	r25, r21
    35ce:	fc 01       	movw	r30, r24
    35d0:	ed 56       	subi	r30, 0x6D	; 109
    35d2:	fe 4f       	sbci	r31, 0xFE	; 254
    35d4:	80 81       	ld	r24, Z
    35d6:	81 30       	cpi	r24, 0x01	; 1
    35d8:	89 f5       	brne	.+98     	; 0x363c <SSDLT_enuEnableDot+0x104>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port,
    35da:	8a 81       	ldd	r24, Y+2	; 0x02
    35dc:	48 2f       	mov	r20, r24
    35de:	50 e0       	ldi	r21, 0x00	; 0
    35e0:	ca 01       	movw	r24, r20
    35e2:	88 0f       	add	r24, r24
    35e4:	99 1f       	adc	r25, r25
    35e6:	9c 01       	movw	r18, r24
    35e8:	22 0f       	add	r18, r18
    35ea:	33 1f       	adc	r19, r19
    35ec:	22 0f       	add	r18, r18
    35ee:	33 1f       	adc	r19, r19
    35f0:	22 0f       	add	r18, r18
    35f2:	33 1f       	adc	r19, r19
    35f4:	82 0f       	add	r24, r18
    35f6:	93 1f       	adc	r25, r19
    35f8:	84 0f       	add	r24, r20
    35fa:	95 1f       	adc	r25, r21
    35fc:	fc 01       	movw	r30, r24
    35fe:	ef 56       	subi	r30, 0x6F	; 111
    3600:	fe 4f       	sbci	r31, 0xFE	; 254
    3602:	60 81       	ld	r22, Z
    3604:	8a 81       	ldd	r24, Y+2	; 0x02
    3606:	48 2f       	mov	r20, r24
    3608:	50 e0       	ldi	r21, 0x00	; 0
    360a:	ca 01       	movw	r24, r20
    360c:	88 0f       	add	r24, r24
    360e:	99 1f       	adc	r25, r25
    3610:	9c 01       	movw	r18, r24
    3612:	22 0f       	add	r18, r18
    3614:	33 1f       	adc	r19, r19
    3616:	22 0f       	add	r18, r18
    3618:	33 1f       	adc	r19, r19
    361a:	22 0f       	add	r18, r18
    361c:	33 1f       	adc	r19, r19
    361e:	82 0f       	add	r24, r18
    3620:	93 1f       	adc	r25, r19
    3622:	84 0f       	add	r24, r20
    3624:	95 1f       	adc	r25, r21
    3626:	fc 01       	movw	r30, r24
    3628:	ee 56       	subi	r30, 0x6E	; 110
    362a:	fe 4f       	sbci	r31, 0xFE	; 254
    362c:	90 81       	ld	r25, Z
    362e:	86 2f       	mov	r24, r22
    3630:	69 2f       	mov	r22, r25
    3632:	41 e0       	ldi	r20, 0x01	; 1
    3634:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3638:	89 83       	std	Y+1, r24	; 0x01
    363a:	4d c0       	rjmp	.+154    	; 0x36d6 <SSDLT_enuEnableDot+0x19e>
														 SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin, DIO_u8HIGH);
			}
			else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    363c:	8a 81       	ldd	r24, Y+2	; 0x02
    363e:	48 2f       	mov	r20, r24
    3640:	50 e0       	ldi	r21, 0x00	; 0
    3642:	ca 01       	movw	r24, r20
    3644:	88 0f       	add	r24, r24
    3646:	99 1f       	adc	r25, r25
    3648:	9c 01       	movw	r18, r24
    364a:	22 0f       	add	r18, r18
    364c:	33 1f       	adc	r19, r19
    364e:	22 0f       	add	r18, r18
    3650:	33 1f       	adc	r19, r19
    3652:	22 0f       	add	r18, r18
    3654:	33 1f       	adc	r19, r19
    3656:	82 0f       	add	r24, r18
    3658:	93 1f       	adc	r25, r19
    365a:	84 0f       	add	r24, r20
    365c:	95 1f       	adc	r25, r21
    365e:	fc 01       	movw	r30, r24
    3660:	ed 56       	subi	r30, 0x6D	; 109
    3662:	fe 4f       	sbci	r31, 0xFE	; 254
    3664:	80 81       	ld	r24, Z
    3666:	88 23       	and	r24, r24
    3668:	89 f5       	brne	.+98     	; 0x36cc <SSDLT_enuEnableDot+0x194>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port,
    366a:	8a 81       	ldd	r24, Y+2	; 0x02
    366c:	48 2f       	mov	r20, r24
    366e:	50 e0       	ldi	r21, 0x00	; 0
    3670:	ca 01       	movw	r24, r20
    3672:	88 0f       	add	r24, r24
    3674:	99 1f       	adc	r25, r25
    3676:	9c 01       	movw	r18, r24
    3678:	22 0f       	add	r18, r18
    367a:	33 1f       	adc	r19, r19
    367c:	22 0f       	add	r18, r18
    367e:	33 1f       	adc	r19, r19
    3680:	22 0f       	add	r18, r18
    3682:	33 1f       	adc	r19, r19
    3684:	82 0f       	add	r24, r18
    3686:	93 1f       	adc	r25, r19
    3688:	84 0f       	add	r24, r20
    368a:	95 1f       	adc	r25, r21
    368c:	fc 01       	movw	r30, r24
    368e:	ef 56       	subi	r30, 0x6F	; 111
    3690:	fe 4f       	sbci	r31, 0xFE	; 254
    3692:	60 81       	ld	r22, Z
    3694:	8a 81       	ldd	r24, Y+2	; 0x02
    3696:	48 2f       	mov	r20, r24
    3698:	50 e0       	ldi	r21, 0x00	; 0
    369a:	ca 01       	movw	r24, r20
    369c:	88 0f       	add	r24, r24
    369e:	99 1f       	adc	r25, r25
    36a0:	9c 01       	movw	r18, r24
    36a2:	22 0f       	add	r18, r18
    36a4:	33 1f       	adc	r19, r19
    36a6:	22 0f       	add	r18, r18
    36a8:	33 1f       	adc	r19, r19
    36aa:	22 0f       	add	r18, r18
    36ac:	33 1f       	adc	r19, r19
    36ae:	82 0f       	add	r24, r18
    36b0:	93 1f       	adc	r25, r19
    36b2:	84 0f       	add	r24, r20
    36b4:	95 1f       	adc	r25, r21
    36b6:	fc 01       	movw	r30, r24
    36b8:	ee 56       	subi	r30, 0x6E	; 110
    36ba:	fe 4f       	sbci	r31, 0xFE	; 254
    36bc:	90 81       	ld	r25, Z
    36be:	86 2f       	mov	r24, r22
    36c0:	69 2f       	mov	r22, r25
    36c2:	40 e0       	ldi	r20, 0x00	; 0
    36c4:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    36c8:	89 83       	std	Y+1, r24	; 0x01
    36ca:	05 c0       	rjmp	.+10     	; 0x36d6 <SSDLT_enuEnableDot+0x19e>
														SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin, DIO_u8LOW);
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    36cc:	83 e0       	ldi	r24, 0x03	; 3
    36ce:	89 83       	std	Y+1, r24	; 0x01
    36d0:	02 c0       	rjmp	.+4      	; 0x36d6 <SSDLT_enuEnableDot+0x19e>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    36d2:	83 e0       	ldi	r24, 0x03	; 3
    36d4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    36d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    36d8:	0f 90       	pop	r0
    36da:	0f 90       	pop	r0
    36dc:	cf 91       	pop	r28
    36de:	df 91       	pop	r29
    36e0:	08 95       	ret

000036e2 <SSDLT_enuDisableDot>:

ES_t SSDLT_enuDisableDot(u8 Copy_u8SegID)
{
    36e2:	df 93       	push	r29
    36e4:	cf 93       	push	r28
    36e6:	00 d0       	rcall	.+0      	; 0x36e8 <SSDLT_enuDisableDot+0x6>
    36e8:	0f 92       	push	r0
    36ea:	cd b7       	in	r28, 0x3d	; 61
    36ec:	de b7       	in	r29, 0x3e	; 62
    36ee:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    36f0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8SegID < SEG_NUM)
    36f2:	8a 81       	ldd	r24, Y+2	; 0x02
    36f4:	82 30       	cpi	r24, 0x02	; 2
    36f6:	08 f0       	brcs	.+2      	; 0x36fa <SSDLT_enuDisableDot+0x18>
    36f8:	c5 c0       	rjmp	.+394    	; 0x3884 <SSDLT_enuDisableDot+0x1a2>
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port != NOT_CONNECTED ||
    36fa:	8a 81       	ldd	r24, Y+2	; 0x02
    36fc:	48 2f       	mov	r20, r24
    36fe:	50 e0       	ldi	r21, 0x00	; 0
    3700:	ca 01       	movw	r24, r20
    3702:	88 0f       	add	r24, r24
    3704:	99 1f       	adc	r25, r25
    3706:	9c 01       	movw	r18, r24
    3708:	22 0f       	add	r18, r18
    370a:	33 1f       	adc	r19, r19
    370c:	22 0f       	add	r18, r18
    370e:	33 1f       	adc	r19, r19
    3710:	22 0f       	add	r18, r18
    3712:	33 1f       	adc	r19, r19
    3714:	82 0f       	add	r24, r18
    3716:	93 1f       	adc	r25, r19
    3718:	84 0f       	add	r24, r20
    371a:	95 1f       	adc	r25, r21
    371c:	fc 01       	movw	r30, r24
    371e:	ef 56       	subi	r30, 0x6F	; 111
    3720:	fe 4f       	sbci	r31, 0xFE	; 254
    3722:	80 81       	ld	r24, Z
    3724:	82 30       	cpi	r24, 0x02	; 2
    3726:	c1 f4       	brne	.+48     	; 0x3758 <SSDLT_enuDisableDot+0x76>
    3728:	8a 81       	ldd	r24, Y+2	; 0x02
    372a:	48 2f       	mov	r20, r24
    372c:	50 e0       	ldi	r21, 0x00	; 0
    372e:	ca 01       	movw	r24, r20
    3730:	88 0f       	add	r24, r24
    3732:	99 1f       	adc	r25, r25
    3734:	9c 01       	movw	r18, r24
    3736:	22 0f       	add	r18, r18
    3738:	33 1f       	adc	r19, r19
    373a:	22 0f       	add	r18, r18
    373c:	33 1f       	adc	r19, r19
    373e:	22 0f       	add	r18, r18
    3740:	33 1f       	adc	r19, r19
    3742:	82 0f       	add	r24, r18
    3744:	93 1f       	adc	r25, r19
    3746:	84 0f       	add	r24, r20
    3748:	95 1f       	adc	r25, r21
    374a:	fc 01       	movw	r30, r24
    374c:	ee 56       	subi	r30, 0x6E	; 110
    374e:	fe 4f       	sbci	r31, 0xFE	; 254
    3750:	80 81       	ld	r24, Z
    3752:	82 30       	cpi	r24, 0x02	; 2
    3754:	09 f4       	brne	.+2      	; 0x3758 <SSDLT_enuDisableDot+0x76>
    3756:	93 c0       	rjmp	.+294    	; 0x387e <SSDLT_enuDisableDot+0x19c>
				SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin != NOT_CONNECTED)
		{
			if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    3758:	8a 81       	ldd	r24, Y+2	; 0x02
    375a:	48 2f       	mov	r20, r24
    375c:	50 e0       	ldi	r21, 0x00	; 0
    375e:	ca 01       	movw	r24, r20
    3760:	88 0f       	add	r24, r24
    3762:	99 1f       	adc	r25, r25
    3764:	9c 01       	movw	r18, r24
    3766:	22 0f       	add	r18, r18
    3768:	33 1f       	adc	r19, r19
    376a:	22 0f       	add	r18, r18
    376c:	33 1f       	adc	r19, r19
    376e:	22 0f       	add	r18, r18
    3770:	33 1f       	adc	r19, r19
    3772:	82 0f       	add	r24, r18
    3774:	93 1f       	adc	r25, r19
    3776:	84 0f       	add	r24, r20
    3778:	95 1f       	adc	r25, r21
    377a:	fc 01       	movw	r30, r24
    377c:	ed 56       	subi	r30, 0x6D	; 109
    377e:	fe 4f       	sbci	r31, 0xFE	; 254
    3780:	80 81       	ld	r24, Z
    3782:	81 30       	cpi	r24, 0x01	; 1
    3784:	89 f5       	brne	.+98     	; 0x37e8 <SSDLT_enuDisableDot+0x106>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port,
    3786:	8a 81       	ldd	r24, Y+2	; 0x02
    3788:	48 2f       	mov	r20, r24
    378a:	50 e0       	ldi	r21, 0x00	; 0
    378c:	ca 01       	movw	r24, r20
    378e:	88 0f       	add	r24, r24
    3790:	99 1f       	adc	r25, r25
    3792:	9c 01       	movw	r18, r24
    3794:	22 0f       	add	r18, r18
    3796:	33 1f       	adc	r19, r19
    3798:	22 0f       	add	r18, r18
    379a:	33 1f       	adc	r19, r19
    379c:	22 0f       	add	r18, r18
    379e:	33 1f       	adc	r19, r19
    37a0:	82 0f       	add	r24, r18
    37a2:	93 1f       	adc	r25, r19
    37a4:	84 0f       	add	r24, r20
    37a6:	95 1f       	adc	r25, r21
    37a8:	fc 01       	movw	r30, r24
    37aa:	ef 56       	subi	r30, 0x6F	; 111
    37ac:	fe 4f       	sbci	r31, 0xFE	; 254
    37ae:	60 81       	ld	r22, Z
    37b0:	8a 81       	ldd	r24, Y+2	; 0x02
    37b2:	48 2f       	mov	r20, r24
    37b4:	50 e0       	ldi	r21, 0x00	; 0
    37b6:	ca 01       	movw	r24, r20
    37b8:	88 0f       	add	r24, r24
    37ba:	99 1f       	adc	r25, r25
    37bc:	9c 01       	movw	r18, r24
    37be:	22 0f       	add	r18, r18
    37c0:	33 1f       	adc	r19, r19
    37c2:	22 0f       	add	r18, r18
    37c4:	33 1f       	adc	r19, r19
    37c6:	22 0f       	add	r18, r18
    37c8:	33 1f       	adc	r19, r19
    37ca:	82 0f       	add	r24, r18
    37cc:	93 1f       	adc	r25, r19
    37ce:	84 0f       	add	r24, r20
    37d0:	95 1f       	adc	r25, r21
    37d2:	fc 01       	movw	r30, r24
    37d4:	ee 56       	subi	r30, 0x6E	; 110
    37d6:	fe 4f       	sbci	r31, 0xFE	; 254
    37d8:	90 81       	ld	r25, Z
    37da:	86 2f       	mov	r24, r22
    37dc:	69 2f       	mov	r22, r25
    37de:	40 e0       	ldi	r20, 0x00	; 0
    37e0:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    37e4:	89 83       	std	Y+1, r24	; 0x01
    37e6:	4b c0       	rjmp	.+150    	; 0x387e <SSDLT_enuDisableDot+0x19c>
														 SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin, DIO_u8LOW);
			}
			else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    37e8:	8a 81       	ldd	r24, Y+2	; 0x02
    37ea:	48 2f       	mov	r20, r24
    37ec:	50 e0       	ldi	r21, 0x00	; 0
    37ee:	ca 01       	movw	r24, r20
    37f0:	88 0f       	add	r24, r24
    37f2:	99 1f       	adc	r25, r25
    37f4:	9c 01       	movw	r18, r24
    37f6:	22 0f       	add	r18, r18
    37f8:	33 1f       	adc	r19, r19
    37fa:	22 0f       	add	r18, r18
    37fc:	33 1f       	adc	r19, r19
    37fe:	22 0f       	add	r18, r18
    3800:	33 1f       	adc	r19, r19
    3802:	82 0f       	add	r24, r18
    3804:	93 1f       	adc	r25, r19
    3806:	84 0f       	add	r24, r20
    3808:	95 1f       	adc	r25, r21
    380a:	fc 01       	movw	r30, r24
    380c:	ed 56       	subi	r30, 0x6D	; 109
    380e:	fe 4f       	sbci	r31, 0xFE	; 254
    3810:	80 81       	ld	r24, Z
    3812:	88 23       	and	r24, r24
    3814:	89 f5       	brne	.+98     	; 0x3878 <SSDLT_enuDisableDot+0x196>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port,
    3816:	8a 81       	ldd	r24, Y+2	; 0x02
    3818:	48 2f       	mov	r20, r24
    381a:	50 e0       	ldi	r21, 0x00	; 0
    381c:	ca 01       	movw	r24, r20
    381e:	88 0f       	add	r24, r24
    3820:	99 1f       	adc	r25, r25
    3822:	9c 01       	movw	r18, r24
    3824:	22 0f       	add	r18, r18
    3826:	33 1f       	adc	r19, r19
    3828:	22 0f       	add	r18, r18
    382a:	33 1f       	adc	r19, r19
    382c:	22 0f       	add	r18, r18
    382e:	33 1f       	adc	r19, r19
    3830:	82 0f       	add	r24, r18
    3832:	93 1f       	adc	r25, r19
    3834:	84 0f       	add	r24, r20
    3836:	95 1f       	adc	r25, r21
    3838:	fc 01       	movw	r30, r24
    383a:	ef 56       	subi	r30, 0x6F	; 111
    383c:	fe 4f       	sbci	r31, 0xFE	; 254
    383e:	60 81       	ld	r22, Z
    3840:	8a 81       	ldd	r24, Y+2	; 0x02
    3842:	48 2f       	mov	r20, r24
    3844:	50 e0       	ldi	r21, 0x00	; 0
    3846:	ca 01       	movw	r24, r20
    3848:	88 0f       	add	r24, r24
    384a:	99 1f       	adc	r25, r25
    384c:	9c 01       	movw	r18, r24
    384e:	22 0f       	add	r18, r18
    3850:	33 1f       	adc	r19, r19
    3852:	22 0f       	add	r18, r18
    3854:	33 1f       	adc	r19, r19
    3856:	22 0f       	add	r18, r18
    3858:	33 1f       	adc	r19, r19
    385a:	82 0f       	add	r24, r18
    385c:	93 1f       	adc	r25, r19
    385e:	84 0f       	add	r24, r20
    3860:	95 1f       	adc	r25, r21
    3862:	fc 01       	movw	r30, r24
    3864:	ee 56       	subi	r30, 0x6E	; 110
    3866:	fe 4f       	sbci	r31, 0xFE	; 254
    3868:	90 81       	ld	r25, Z
    386a:	86 2f       	mov	r24, r22
    386c:	69 2f       	mov	r22, r25
    386e:	41 e0       	ldi	r20, 0x01	; 1
    3870:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3874:	89 83       	std	Y+1, r24	; 0x01
    3876:	03 c0       	rjmp	.+6      	; 0x387e <SSDLT_enuDisableDot+0x19c>
														SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin, DIO_u8HIGH);
			}
			else
			{
				return ES_OUT_OF_RANGE;
    3878:	83 e0       	ldi	r24, 0x03	; 3
    387a:	8b 83       	std	Y+3, r24	; 0x03
    387c:	05 c0       	rjmp	.+10     	; 0x3888 <SSDLT_enuDisableDot+0x1a6>
	}
	else
	{
		return ES_OUT_OF_RANGE;
	}
	return Local_enuErrorState;
    387e:	89 81       	ldd	r24, Y+1	; 0x01
    3880:	8b 83       	std	Y+3, r24	; 0x03
    3882:	02 c0       	rjmp	.+4      	; 0x3888 <SSDLT_enuDisableDot+0x1a6>
			}
		}
	}
	else
	{
		return ES_OUT_OF_RANGE;
    3884:	83 e0       	ldi	r24, 0x03	; 3
    3886:	8b 83       	std	Y+3, r24	; 0x03
    3888:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return Local_enuErrorState;
}
    388a:	0f 90       	pop	r0
    388c:	0f 90       	pop	r0
    388e:	0f 90       	pop	r0
    3890:	cf 91       	pop	r28
    3892:	df 91       	pop	r29
    3894:	08 95       	ret

00003896 <SSDLT_enuClearDisplay>:

ES_t SSDLT_enuClearDisplay(u8 Copy_u8SegID)
{
    3896:	ef 92       	push	r14
    3898:	ff 92       	push	r15
    389a:	0f 93       	push	r16
    389c:	1f 93       	push	r17
    389e:	df 93       	push	r29
    38a0:	cf 93       	push	r28
    38a2:	cd b7       	in	r28, 0x3d	; 61
    38a4:	de b7       	in	r29, 0x3e	; 62
    38a6:	29 97       	sbiw	r28, 0x09	; 9
    38a8:	0f b6       	in	r0, 0x3f	; 63
    38aa:	f8 94       	cli
    38ac:	de bf       	out	0x3e, r29	; 62
    38ae:	0f be       	out	0x3f, r0	; 63
    38b0:	cd bf       	out	0x3d, r28	; 61
    38b2:	88 87       	std	Y+8, r24	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    38b4:	1f 82       	std	Y+7, r1	; 0x07

	u8 Local_u8Iterator = 0;
    38b6:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8LastBit = 0;
    38b8:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Check = 0;
    38ba:	19 82       	std	Y+1, r1	; 0x01
    38bc:	1a 82       	std	Y+2, r1	; 0x02
    38be:	1b 82       	std	Y+3, r1	; 0x03
    38c0:	1c 82       	std	Y+4, r1	; 0x04

	if(Copy_u8SegID < SEG_NUM)
    38c2:	88 85       	ldd	r24, Y+8	; 0x08
    38c4:	82 30       	cpi	r24, 0x02	; 2
    38c6:	08 f0       	brcs	.+2      	; 0x38ca <SSDLT_enuClearDisplay+0x34>
    38c8:	33 c4       	rjmp	.+2150   	; 0x4130 <SSDLT_enuClearDisplay+0x89a>
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    38ca:	88 85       	ldd	r24, Y+8	; 0x08
    38cc:	48 2f       	mov	r20, r24
    38ce:	50 e0       	ldi	r21, 0x00	; 0
    38d0:	ca 01       	movw	r24, r20
    38d2:	88 0f       	add	r24, r24
    38d4:	99 1f       	adc	r25, r25
    38d6:	9c 01       	movw	r18, r24
    38d8:	22 0f       	add	r18, r18
    38da:	33 1f       	adc	r19, r19
    38dc:	22 0f       	add	r18, r18
    38de:	33 1f       	adc	r19, r19
    38e0:	22 0f       	add	r18, r18
    38e2:	33 1f       	adc	r19, r19
    38e4:	82 0f       	add	r24, r18
    38e6:	93 1f       	adc	r25, r19
    38e8:	84 0f       	add	r24, r20
    38ea:	95 1f       	adc	r25, r21
    38ec:	fc 01       	movw	r30, r24
    38ee:	ed 56       	subi	r30, 0x6D	; 109
    38f0:	fe 4f       	sbci	r31, 0xFE	; 254
    38f2:	80 81       	ld	r24, Z
    38f4:	81 30       	cpi	r24, 0x01	; 1
    38f6:	09 f0       	breq	.+2      	; 0x38fa <SSDLT_enuClearDisplay+0x64>
    38f8:	f4 c1       	rjmp	.+1000   	; 0x3ce2 <SSDLT_enuClearDisplay+0x44c>
		{
			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APort,
    38fa:	88 85       	ldd	r24, Y+8	; 0x08
    38fc:	48 2f       	mov	r20, r24
    38fe:	50 e0       	ldi	r21, 0x00	; 0
    3900:	ca 01       	movw	r24, r20
    3902:	88 0f       	add	r24, r24
    3904:	99 1f       	adc	r25, r25
    3906:	9c 01       	movw	r18, r24
    3908:	22 0f       	add	r18, r18
    390a:	33 1f       	adc	r19, r19
    390c:	22 0f       	add	r18, r18
    390e:	33 1f       	adc	r19, r19
    3910:	22 0f       	add	r18, r18
    3912:	33 1f       	adc	r19, r19
    3914:	82 0f       	add	r24, r18
    3916:	93 1f       	adc	r25, r19
    3918:	84 0f       	add	r24, r20
    391a:	95 1f       	adc	r25, r21
    391c:	fc 01       	movw	r30, r24
    391e:	ef 57       	subi	r30, 0x7F	; 127
    3920:	fe 4f       	sbci	r31, 0xFE	; 254
    3922:	60 81       	ld	r22, Z
    3924:	88 85       	ldd	r24, Y+8	; 0x08
    3926:	48 2f       	mov	r20, r24
    3928:	50 e0       	ldi	r21, 0x00	; 0
    392a:	ca 01       	movw	r24, r20
    392c:	88 0f       	add	r24, r24
    392e:	99 1f       	adc	r25, r25
    3930:	9c 01       	movw	r18, r24
    3932:	22 0f       	add	r18, r18
    3934:	33 1f       	adc	r19, r19
    3936:	22 0f       	add	r18, r18
    3938:	33 1f       	adc	r19, r19
    393a:	22 0f       	add	r18, r18
    393c:	33 1f       	adc	r19, r19
    393e:	82 0f       	add	r24, r18
    3940:	93 1f       	adc	r25, r19
    3942:	84 0f       	add	r24, r20
    3944:	95 1f       	adc	r25, r21
    3946:	fc 01       	movw	r30, r24
    3948:	ee 57       	subi	r30, 0x7E	; 126
    394a:	fe 4f       	sbci	r31, 0xFE	; 254
    394c:	90 81       	ld	r25, Z
    394e:	86 2f       	mov	r24, r22
    3950:	69 2f       	mov	r22, r25
    3952:	40 e0       	ldi	r20, 0x00	; 0
    3954:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3958:	28 2f       	mov	r18, r24
    395a:	30 e0       	ldi	r19, 0x00	; 0
    395c:	40 e0       	ldi	r20, 0x00	; 0
    395e:	50 e0       	ldi	r21, 0x00	; 0
    3960:	89 81       	ldd	r24, Y+1	; 0x01
    3962:	9a 81       	ldd	r25, Y+2	; 0x02
    3964:	ab 81       	ldd	r26, Y+3	; 0x03
    3966:	bc 81       	ldd	r27, Y+4	; 0x04
    3968:	82 2b       	or	r24, r18
    396a:	93 2b       	or	r25, r19
    396c:	a4 2b       	or	r26, r20
    396e:	b5 2b       	or	r27, r21
    3970:	89 83       	std	Y+1, r24	; 0x01
    3972:	9a 83       	std	Y+2, r25	; 0x02
    3974:	ab 83       	std	Y+3, r26	; 0x03
    3976:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	      SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APin,
											   	  DIO_u8LOW) << 0);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPort,
    3978:	88 85       	ldd	r24, Y+8	; 0x08
    397a:	48 2f       	mov	r20, r24
    397c:	50 e0       	ldi	r21, 0x00	; 0
    397e:	ca 01       	movw	r24, r20
    3980:	88 0f       	add	r24, r24
    3982:	99 1f       	adc	r25, r25
    3984:	9c 01       	movw	r18, r24
    3986:	22 0f       	add	r18, r18
    3988:	33 1f       	adc	r19, r19
    398a:	22 0f       	add	r18, r18
    398c:	33 1f       	adc	r19, r19
    398e:	22 0f       	add	r18, r18
    3990:	33 1f       	adc	r19, r19
    3992:	82 0f       	add	r24, r18
    3994:	93 1f       	adc	r25, r19
    3996:	84 0f       	add	r24, r20
    3998:	95 1f       	adc	r25, r21
    399a:	fc 01       	movw	r30, r24
    399c:	ed 57       	subi	r30, 0x7D	; 125
    399e:	fe 4f       	sbci	r31, 0xFE	; 254
    39a0:	60 81       	ld	r22, Z
    39a2:	88 85       	ldd	r24, Y+8	; 0x08
    39a4:	48 2f       	mov	r20, r24
    39a6:	50 e0       	ldi	r21, 0x00	; 0
    39a8:	ca 01       	movw	r24, r20
    39aa:	88 0f       	add	r24, r24
    39ac:	99 1f       	adc	r25, r25
    39ae:	9c 01       	movw	r18, r24
    39b0:	22 0f       	add	r18, r18
    39b2:	33 1f       	adc	r19, r19
    39b4:	22 0f       	add	r18, r18
    39b6:	33 1f       	adc	r19, r19
    39b8:	22 0f       	add	r18, r18
    39ba:	33 1f       	adc	r19, r19
    39bc:	82 0f       	add	r24, r18
    39be:	93 1f       	adc	r25, r19
    39c0:	84 0f       	add	r24, r20
    39c2:	95 1f       	adc	r25, r21
    39c4:	fc 01       	movw	r30, r24
    39c6:	ec 57       	subi	r30, 0x7C	; 124
    39c8:	fe 4f       	sbci	r31, 0xFE	; 254
    39ca:	90 81       	ld	r25, Z
    39cc:	86 2f       	mov	r24, r22
    39ce:	69 2f       	mov	r22, r25
    39d0:	40 e0       	ldi	r20, 0x00	; 0
    39d2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    39d6:	88 2f       	mov	r24, r24
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	88 0f       	add	r24, r24
    39dc:	99 1f       	adc	r25, r25
    39de:	88 0f       	add	r24, r24
    39e0:	99 1f       	adc	r25, r25
    39e2:	88 0f       	add	r24, r24
    39e4:	99 1f       	adc	r25, r25
    39e6:	9c 01       	movw	r18, r24
    39e8:	44 27       	eor	r20, r20
    39ea:	37 fd       	sbrc	r19, 7
    39ec:	40 95       	com	r20
    39ee:	54 2f       	mov	r21, r20
    39f0:	89 81       	ldd	r24, Y+1	; 0x01
    39f2:	9a 81       	ldd	r25, Y+2	; 0x02
    39f4:	ab 81       	ldd	r26, Y+3	; 0x03
    39f6:	bc 81       	ldd	r27, Y+4	; 0x04
    39f8:	82 2b       	or	r24, r18
    39fa:	93 2b       	or	r25, r19
    39fc:	a4 2b       	or	r26, r20
    39fe:	b5 2b       	or	r27, r21
    3a00:	89 83       	std	Y+1, r24	; 0x01
    3a02:	9a 83       	std	Y+2, r25	; 0x02
    3a04:	ab 83       	std	Y+3, r26	; 0x03
    3a06:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPin,
												  DIO_u8LOW) << 3);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPort,
    3a08:	88 85       	ldd	r24, Y+8	; 0x08
    3a0a:	48 2f       	mov	r20, r24
    3a0c:	50 e0       	ldi	r21, 0x00	; 0
    3a0e:	ca 01       	movw	r24, r20
    3a10:	88 0f       	add	r24, r24
    3a12:	99 1f       	adc	r25, r25
    3a14:	9c 01       	movw	r18, r24
    3a16:	22 0f       	add	r18, r18
    3a18:	33 1f       	adc	r19, r19
    3a1a:	22 0f       	add	r18, r18
    3a1c:	33 1f       	adc	r19, r19
    3a1e:	22 0f       	add	r18, r18
    3a20:	33 1f       	adc	r19, r19
    3a22:	82 0f       	add	r24, r18
    3a24:	93 1f       	adc	r25, r19
    3a26:	84 0f       	add	r24, r20
    3a28:	95 1f       	adc	r25, r21
    3a2a:	fc 01       	movw	r30, r24
    3a2c:	eb 57       	subi	r30, 0x7B	; 123
    3a2e:	fe 4f       	sbci	r31, 0xFE	; 254
    3a30:	60 81       	ld	r22, Z
    3a32:	88 85       	ldd	r24, Y+8	; 0x08
    3a34:	48 2f       	mov	r20, r24
    3a36:	50 e0       	ldi	r21, 0x00	; 0
    3a38:	ca 01       	movw	r24, r20
    3a3a:	88 0f       	add	r24, r24
    3a3c:	99 1f       	adc	r25, r25
    3a3e:	9c 01       	movw	r18, r24
    3a40:	22 0f       	add	r18, r18
    3a42:	33 1f       	adc	r19, r19
    3a44:	22 0f       	add	r18, r18
    3a46:	33 1f       	adc	r19, r19
    3a48:	22 0f       	add	r18, r18
    3a4a:	33 1f       	adc	r19, r19
    3a4c:	82 0f       	add	r24, r18
    3a4e:	93 1f       	adc	r25, r19
    3a50:	84 0f       	add	r24, r20
    3a52:	95 1f       	adc	r25, r21
    3a54:	fc 01       	movw	r30, r24
    3a56:	ea 57       	subi	r30, 0x7A	; 122
    3a58:	fe 4f       	sbci	r31, 0xFE	; 254
    3a5a:	90 81       	ld	r25, Z
    3a5c:	86 2f       	mov	r24, r22
    3a5e:	69 2f       	mov	r22, r25
    3a60:	40 e0       	ldi	r20, 0x00	; 0
    3a62:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3a66:	88 2f       	mov	r24, r24
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	00 24       	eor	r0, r0
    3a6c:	96 95       	lsr	r25
    3a6e:	87 95       	ror	r24
    3a70:	07 94       	ror	r0
    3a72:	96 95       	lsr	r25
    3a74:	87 95       	ror	r24
    3a76:	07 94       	ror	r0
    3a78:	98 2f       	mov	r25, r24
    3a7a:	80 2d       	mov	r24, r0
    3a7c:	9c 01       	movw	r18, r24
    3a7e:	44 27       	eor	r20, r20
    3a80:	37 fd       	sbrc	r19, 7
    3a82:	40 95       	com	r20
    3a84:	54 2f       	mov	r21, r20
    3a86:	89 81       	ldd	r24, Y+1	; 0x01
    3a88:	9a 81       	ldd	r25, Y+2	; 0x02
    3a8a:	ab 81       	ldd	r26, Y+3	; 0x03
    3a8c:	bc 81       	ldd	r27, Y+4	; 0x04
    3a8e:	82 2b       	or	r24, r18
    3a90:	93 2b       	or	r25, r19
    3a92:	a4 2b       	or	r26, r20
    3a94:	b5 2b       	or	r27, r21
    3a96:	89 83       	std	Y+1, r24	; 0x01
    3a98:	9a 83       	std	Y+2, r25	; 0x02
    3a9a:	ab 83       	std	Y+3, r26	; 0x03
    3a9c:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPin,
												  DIO_u8LOW) << 6);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPort,
    3a9e:	88 85       	ldd	r24, Y+8	; 0x08
    3aa0:	48 2f       	mov	r20, r24
    3aa2:	50 e0       	ldi	r21, 0x00	; 0
    3aa4:	ca 01       	movw	r24, r20
    3aa6:	88 0f       	add	r24, r24
    3aa8:	99 1f       	adc	r25, r25
    3aaa:	9c 01       	movw	r18, r24
    3aac:	22 0f       	add	r18, r18
    3aae:	33 1f       	adc	r19, r19
    3ab0:	22 0f       	add	r18, r18
    3ab2:	33 1f       	adc	r19, r19
    3ab4:	22 0f       	add	r18, r18
    3ab6:	33 1f       	adc	r19, r19
    3ab8:	82 0f       	add	r24, r18
    3aba:	93 1f       	adc	r25, r19
    3abc:	84 0f       	add	r24, r20
    3abe:	95 1f       	adc	r25, r21
    3ac0:	fc 01       	movw	r30, r24
    3ac2:	e9 57       	subi	r30, 0x79	; 121
    3ac4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ac6:	60 81       	ld	r22, Z
    3ac8:	88 85       	ldd	r24, Y+8	; 0x08
    3aca:	48 2f       	mov	r20, r24
    3acc:	50 e0       	ldi	r21, 0x00	; 0
    3ace:	ca 01       	movw	r24, r20
    3ad0:	88 0f       	add	r24, r24
    3ad2:	99 1f       	adc	r25, r25
    3ad4:	9c 01       	movw	r18, r24
    3ad6:	22 0f       	add	r18, r18
    3ad8:	33 1f       	adc	r19, r19
    3ada:	22 0f       	add	r18, r18
    3adc:	33 1f       	adc	r19, r19
    3ade:	22 0f       	add	r18, r18
    3ae0:	33 1f       	adc	r19, r19
    3ae2:	82 0f       	add	r24, r18
    3ae4:	93 1f       	adc	r25, r19
    3ae6:	84 0f       	add	r24, r20
    3ae8:	95 1f       	adc	r25, r21
    3aea:	fc 01       	movw	r30, r24
    3aec:	e8 57       	subi	r30, 0x78	; 120
    3aee:	fe 4f       	sbci	r31, 0xFE	; 254
    3af0:	90 81       	ld	r25, Z
    3af2:	86 2f       	mov	r24, r22
    3af4:	69 2f       	mov	r22, r25
    3af6:	40 e0       	ldi	r20, 0x00	; 0
    3af8:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3afc:	88 2f       	mov	r24, r24
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	98 2f       	mov	r25, r24
    3b02:	88 27       	eor	r24, r24
    3b04:	99 0f       	add	r25, r25
    3b06:	9c 01       	movw	r18, r24
    3b08:	44 27       	eor	r20, r20
    3b0a:	37 fd       	sbrc	r19, 7
    3b0c:	40 95       	com	r20
    3b0e:	54 2f       	mov	r21, r20
    3b10:	89 81       	ldd	r24, Y+1	; 0x01
    3b12:	9a 81       	ldd	r25, Y+2	; 0x02
    3b14:	ab 81       	ldd	r26, Y+3	; 0x03
    3b16:	bc 81       	ldd	r27, Y+4	; 0x04
    3b18:	82 2b       	or	r24, r18
    3b1a:	93 2b       	or	r25, r19
    3b1c:	a4 2b       	or	r26, r20
    3b1e:	b5 2b       	or	r27, r21
    3b20:	89 83       	std	Y+1, r24	; 0x01
    3b22:	9a 83       	std	Y+2, r25	; 0x02
    3b24:	ab 83       	std	Y+3, r26	; 0x03
    3b26:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPin,
												  DIO_u8LOW) << 9) ;

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPort,
    3b28:	88 85       	ldd	r24, Y+8	; 0x08
    3b2a:	48 2f       	mov	r20, r24
    3b2c:	50 e0       	ldi	r21, 0x00	; 0
    3b2e:	ca 01       	movw	r24, r20
    3b30:	88 0f       	add	r24, r24
    3b32:	99 1f       	adc	r25, r25
    3b34:	9c 01       	movw	r18, r24
    3b36:	22 0f       	add	r18, r18
    3b38:	33 1f       	adc	r19, r19
    3b3a:	22 0f       	add	r18, r18
    3b3c:	33 1f       	adc	r19, r19
    3b3e:	22 0f       	add	r18, r18
    3b40:	33 1f       	adc	r19, r19
    3b42:	82 0f       	add	r24, r18
    3b44:	93 1f       	adc	r25, r19
    3b46:	84 0f       	add	r24, r20
    3b48:	95 1f       	adc	r25, r21
    3b4a:	fc 01       	movw	r30, r24
    3b4c:	e7 57       	subi	r30, 0x77	; 119
    3b4e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b50:	60 81       	ld	r22, Z
    3b52:	88 85       	ldd	r24, Y+8	; 0x08
    3b54:	48 2f       	mov	r20, r24
    3b56:	50 e0       	ldi	r21, 0x00	; 0
    3b58:	ca 01       	movw	r24, r20
    3b5a:	88 0f       	add	r24, r24
    3b5c:	99 1f       	adc	r25, r25
    3b5e:	9c 01       	movw	r18, r24
    3b60:	22 0f       	add	r18, r18
    3b62:	33 1f       	adc	r19, r19
    3b64:	22 0f       	add	r18, r18
    3b66:	33 1f       	adc	r19, r19
    3b68:	22 0f       	add	r18, r18
    3b6a:	33 1f       	adc	r19, r19
    3b6c:	82 0f       	add	r24, r18
    3b6e:	93 1f       	adc	r25, r19
    3b70:	84 0f       	add	r24, r20
    3b72:	95 1f       	adc	r25, r21
    3b74:	fc 01       	movw	r30, r24
    3b76:	e6 57       	subi	r30, 0x76	; 118
    3b78:	fe 4f       	sbci	r31, 0xFE	; 254
    3b7a:	90 81       	ld	r25, Z
    3b7c:	86 2f       	mov	r24, r22
    3b7e:	69 2f       	mov	r22, r25
    3b80:	40 e0       	ldi	r20, 0x00	; 0
    3b82:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3b86:	88 2f       	mov	r24, r24
    3b88:	90 e0       	ldi	r25, 0x00	; 0
    3b8a:	98 2f       	mov	r25, r24
    3b8c:	88 27       	eor	r24, r24
    3b8e:	92 95       	swap	r25
    3b90:	90 7f       	andi	r25, 0xF0	; 240
    3b92:	9c 01       	movw	r18, r24
    3b94:	44 27       	eor	r20, r20
    3b96:	37 fd       	sbrc	r19, 7
    3b98:	40 95       	com	r20
    3b9a:	54 2f       	mov	r21, r20
    3b9c:	89 81       	ldd	r24, Y+1	; 0x01
    3b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba0:	ab 81       	ldd	r26, Y+3	; 0x03
    3ba2:	bc 81       	ldd	r27, Y+4	; 0x04
    3ba4:	82 2b       	or	r24, r18
    3ba6:	93 2b       	or	r25, r19
    3ba8:	a4 2b       	or	r26, r20
    3baa:	b5 2b       	or	r27, r21
    3bac:	89 83       	std	Y+1, r24	; 0x01
    3bae:	9a 83       	std	Y+2, r25	; 0x02
    3bb0:	ab 83       	std	Y+3, r26	; 0x03
    3bb2:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPin,
												  DIO_u8LOW) << 12);

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPort,
    3bb4:	88 85       	ldd	r24, Y+8	; 0x08
    3bb6:	48 2f       	mov	r20, r24
    3bb8:	50 e0       	ldi	r21, 0x00	; 0
    3bba:	ca 01       	movw	r24, r20
    3bbc:	88 0f       	add	r24, r24
    3bbe:	99 1f       	adc	r25, r25
    3bc0:	9c 01       	movw	r18, r24
    3bc2:	22 0f       	add	r18, r18
    3bc4:	33 1f       	adc	r19, r19
    3bc6:	22 0f       	add	r18, r18
    3bc8:	33 1f       	adc	r19, r19
    3bca:	22 0f       	add	r18, r18
    3bcc:	33 1f       	adc	r19, r19
    3bce:	82 0f       	add	r24, r18
    3bd0:	93 1f       	adc	r25, r19
    3bd2:	84 0f       	add	r24, r20
    3bd4:	95 1f       	adc	r25, r21
    3bd6:	fc 01       	movw	r30, r24
    3bd8:	e5 57       	subi	r30, 0x75	; 117
    3bda:	fe 4f       	sbci	r31, 0xFE	; 254
    3bdc:	60 81       	ld	r22, Z
    3bde:	88 85       	ldd	r24, Y+8	; 0x08
    3be0:	48 2f       	mov	r20, r24
    3be2:	50 e0       	ldi	r21, 0x00	; 0
    3be4:	ca 01       	movw	r24, r20
    3be6:	88 0f       	add	r24, r24
    3be8:	99 1f       	adc	r25, r25
    3bea:	9c 01       	movw	r18, r24
    3bec:	22 0f       	add	r18, r18
    3bee:	33 1f       	adc	r19, r19
    3bf0:	22 0f       	add	r18, r18
    3bf2:	33 1f       	adc	r19, r19
    3bf4:	22 0f       	add	r18, r18
    3bf6:	33 1f       	adc	r19, r19
    3bf8:	82 0f       	add	r24, r18
    3bfa:	93 1f       	adc	r25, r19
    3bfc:	84 0f       	add	r24, r20
    3bfe:	95 1f       	adc	r25, r21
    3c00:	fc 01       	movw	r30, r24
    3c02:	e4 57       	subi	r30, 0x74	; 116
    3c04:	fe 4f       	sbci	r31, 0xFE	; 254
    3c06:	90 81       	ld	r25, Z
    3c08:	86 2f       	mov	r24, r22
    3c0a:	69 2f       	mov	r22, r25
    3c0c:	40 e0       	ldi	r20, 0x00	; 0
    3c0e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3c12:	88 2f       	mov	r24, r24
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    3c16:	a0 e0       	ldi	r26, 0x00	; 0
    3c18:	b0 e0       	ldi	r27, 0x00	; 0
    3c1a:	9c 01       	movw	r18, r24
    3c1c:	ad 01       	movw	r20, r26
    3c1e:	01 2e       	mov	r0, r17
    3c20:	1f e0       	ldi	r17, 0x0F	; 15
    3c22:	22 0f       	add	r18, r18
    3c24:	33 1f       	adc	r19, r19
    3c26:	44 1f       	adc	r20, r20
    3c28:	55 1f       	adc	r21, r21
    3c2a:	1a 95       	dec	r17
    3c2c:	d1 f7       	brne	.-12     	; 0x3c22 <SSDLT_enuClearDisplay+0x38c>
    3c2e:	10 2d       	mov	r17, r0
    3c30:	89 81       	ldd	r24, Y+1	; 0x01
    3c32:	9a 81       	ldd	r25, Y+2	; 0x02
    3c34:	ab 81       	ldd	r26, Y+3	; 0x03
    3c36:	bc 81       	ldd	r27, Y+4	; 0x04
    3c38:	82 2b       	or	r24, r18
    3c3a:	93 2b       	or	r25, r19
    3c3c:	a4 2b       	or	r26, r20
    3c3e:	b5 2b       	or	r27, r21
    3c40:	89 83       	std	Y+1, r24	; 0x01
    3c42:	9a 83       	std	Y+2, r25	; 0x02
    3c44:	ab 83       	std	Y+3, r26	; 0x03
    3c46:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPin,
												  DIO_u8LOW) << 15));

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPort,
    3c48:	88 85       	ldd	r24, Y+8	; 0x08
    3c4a:	48 2f       	mov	r20, r24
    3c4c:	50 e0       	ldi	r21, 0x00	; 0
    3c4e:	ca 01       	movw	r24, r20
    3c50:	88 0f       	add	r24, r24
    3c52:	99 1f       	adc	r25, r25
    3c54:	9c 01       	movw	r18, r24
    3c56:	22 0f       	add	r18, r18
    3c58:	33 1f       	adc	r19, r19
    3c5a:	22 0f       	add	r18, r18
    3c5c:	33 1f       	adc	r19, r19
    3c5e:	22 0f       	add	r18, r18
    3c60:	33 1f       	adc	r19, r19
    3c62:	82 0f       	add	r24, r18
    3c64:	93 1f       	adc	r25, r19
    3c66:	84 0f       	add	r24, r20
    3c68:	95 1f       	adc	r25, r21
    3c6a:	fc 01       	movw	r30, r24
    3c6c:	e3 57       	subi	r30, 0x73	; 115
    3c6e:	fe 4f       	sbci	r31, 0xFE	; 254
    3c70:	60 81       	ld	r22, Z
    3c72:	88 85       	ldd	r24, Y+8	; 0x08
    3c74:	48 2f       	mov	r20, r24
    3c76:	50 e0       	ldi	r21, 0x00	; 0
    3c78:	ca 01       	movw	r24, r20
    3c7a:	88 0f       	add	r24, r24
    3c7c:	99 1f       	adc	r25, r25
    3c7e:	9c 01       	movw	r18, r24
    3c80:	22 0f       	add	r18, r18
    3c82:	33 1f       	adc	r19, r19
    3c84:	22 0f       	add	r18, r18
    3c86:	33 1f       	adc	r19, r19
    3c88:	22 0f       	add	r18, r18
    3c8a:	33 1f       	adc	r19, r19
    3c8c:	82 0f       	add	r24, r18
    3c8e:	93 1f       	adc	r25, r19
    3c90:	84 0f       	add	r24, r20
    3c92:	95 1f       	adc	r25, r21
    3c94:	fc 01       	movw	r30, r24
    3c96:	e2 57       	subi	r30, 0x72	; 114
    3c98:	fe 4f       	sbci	r31, 0xFE	; 254
    3c9a:	90 81       	ld	r25, Z
    3c9c:	86 2f       	mov	r24, r22
    3c9e:	69 2f       	mov	r22, r25
    3ca0:	40 e0       	ldi	r20, 0x00	; 0
    3ca2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3ca6:	88 2f       	mov	r24, r24
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	a0 e0       	ldi	r26, 0x00	; 0
    3cac:	b0 e0       	ldi	r27, 0x00	; 0
    3cae:	9c 01       	movw	r18, r24
    3cb0:	ad 01       	movw	r20, r26
    3cb2:	01 2e       	mov	r0, r17
    3cb4:	12 e1       	ldi	r17, 0x12	; 18
    3cb6:	22 0f       	add	r18, r18
    3cb8:	33 1f       	adc	r19, r19
    3cba:	44 1f       	adc	r20, r20
    3cbc:	55 1f       	adc	r21, r21
    3cbe:	1a 95       	dec	r17
    3cc0:	d1 f7       	brne	.-12     	; 0x3cb6 <SSDLT_enuClearDisplay+0x420>
    3cc2:	10 2d       	mov	r17, r0
    3cc4:	89 81       	ldd	r24, Y+1	; 0x01
    3cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc8:	ab 81       	ldd	r26, Y+3	; 0x03
    3cca:	bc 81       	ldd	r27, Y+4	; 0x04
    3ccc:	82 2b       	or	r24, r18
    3cce:	93 2b       	or	r25, r19
    3cd0:	a4 2b       	or	r26, r20
    3cd2:	b5 2b       	or	r27, r21
    3cd4:	89 83       	std	Y+1, r24	; 0x01
    3cd6:	9a 83       	std	Y+2, r25	; 0x02
    3cd8:	ab 83       	std	Y+3, r26	; 0x03
    3cda:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPin,
												  DIO_u8LOW) << 18));
			Local_u8LastBit = 21;
    3cdc:	85 e1       	ldi	r24, 0x15	; 21
    3cde:	8d 83       	std	Y+5, r24	; 0x05
    3ce0:	0f c2       	rjmp	.+1054   	; 0x4100 <SSDLT_enuClearDisplay+0x86a>
		}
		else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    3ce2:	88 85       	ldd	r24, Y+8	; 0x08
    3ce4:	48 2f       	mov	r20, r24
    3ce6:	50 e0       	ldi	r21, 0x00	; 0
    3ce8:	ca 01       	movw	r24, r20
    3cea:	88 0f       	add	r24, r24
    3cec:	99 1f       	adc	r25, r25
    3cee:	9c 01       	movw	r18, r24
    3cf0:	22 0f       	add	r18, r18
    3cf2:	33 1f       	adc	r19, r19
    3cf4:	22 0f       	add	r18, r18
    3cf6:	33 1f       	adc	r19, r19
    3cf8:	22 0f       	add	r18, r18
    3cfa:	33 1f       	adc	r19, r19
    3cfc:	82 0f       	add	r24, r18
    3cfe:	93 1f       	adc	r25, r19
    3d00:	84 0f       	add	r24, r20
    3d02:	95 1f       	adc	r25, r21
    3d04:	fc 01       	movw	r30, r24
    3d06:	ed 56       	subi	r30, 0x6D	; 109
    3d08:	fe 4f       	sbci	r31, 0xFE	; 254
    3d0a:	80 81       	ld	r24, Z
    3d0c:	88 23       	and	r24, r24
    3d0e:	09 f0       	breq	.+2      	; 0x3d12 <SSDLT_enuClearDisplay+0x47c>
    3d10:	f4 c1       	rjmp	.+1000   	; 0x40fa <SSDLT_enuClearDisplay+0x864>
		{
			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APort,
    3d12:	88 85       	ldd	r24, Y+8	; 0x08
    3d14:	48 2f       	mov	r20, r24
    3d16:	50 e0       	ldi	r21, 0x00	; 0
    3d18:	ca 01       	movw	r24, r20
    3d1a:	88 0f       	add	r24, r24
    3d1c:	99 1f       	adc	r25, r25
    3d1e:	9c 01       	movw	r18, r24
    3d20:	22 0f       	add	r18, r18
    3d22:	33 1f       	adc	r19, r19
    3d24:	22 0f       	add	r18, r18
    3d26:	33 1f       	adc	r19, r19
    3d28:	22 0f       	add	r18, r18
    3d2a:	33 1f       	adc	r19, r19
    3d2c:	82 0f       	add	r24, r18
    3d2e:	93 1f       	adc	r25, r19
    3d30:	84 0f       	add	r24, r20
    3d32:	95 1f       	adc	r25, r21
    3d34:	fc 01       	movw	r30, r24
    3d36:	ef 57       	subi	r30, 0x7F	; 127
    3d38:	fe 4f       	sbci	r31, 0xFE	; 254
    3d3a:	60 81       	ld	r22, Z
    3d3c:	88 85       	ldd	r24, Y+8	; 0x08
    3d3e:	48 2f       	mov	r20, r24
    3d40:	50 e0       	ldi	r21, 0x00	; 0
    3d42:	ca 01       	movw	r24, r20
    3d44:	88 0f       	add	r24, r24
    3d46:	99 1f       	adc	r25, r25
    3d48:	9c 01       	movw	r18, r24
    3d4a:	22 0f       	add	r18, r18
    3d4c:	33 1f       	adc	r19, r19
    3d4e:	22 0f       	add	r18, r18
    3d50:	33 1f       	adc	r19, r19
    3d52:	22 0f       	add	r18, r18
    3d54:	33 1f       	adc	r19, r19
    3d56:	82 0f       	add	r24, r18
    3d58:	93 1f       	adc	r25, r19
    3d5a:	84 0f       	add	r24, r20
    3d5c:	95 1f       	adc	r25, r21
    3d5e:	fc 01       	movw	r30, r24
    3d60:	ee 57       	subi	r30, 0x7E	; 126
    3d62:	fe 4f       	sbci	r31, 0xFE	; 254
    3d64:	90 81       	ld	r25, Z
    3d66:	86 2f       	mov	r24, r22
    3d68:	69 2f       	mov	r22, r25
    3d6a:	41 e0       	ldi	r20, 0x01	; 1
    3d6c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3d70:	28 2f       	mov	r18, r24
    3d72:	30 e0       	ldi	r19, 0x00	; 0
    3d74:	40 e0       	ldi	r20, 0x00	; 0
    3d76:	50 e0       	ldi	r21, 0x00	; 0
    3d78:	89 81       	ldd	r24, Y+1	; 0x01
    3d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d7c:	ab 81       	ldd	r26, Y+3	; 0x03
    3d7e:	bc 81       	ldd	r27, Y+4	; 0x04
    3d80:	82 2b       	or	r24, r18
    3d82:	93 2b       	or	r25, r19
    3d84:	a4 2b       	or	r26, r20
    3d86:	b5 2b       	or	r27, r21
    3d88:	89 83       	std	Y+1, r24	; 0x01
    3d8a:	9a 83       	std	Y+2, r25	; 0x02
    3d8c:	ab 83       	std	Y+3, r26	; 0x03
    3d8e:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	      SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APin,
											   	  DIO_u8HIGH) << 0);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPort,
    3d90:	88 85       	ldd	r24, Y+8	; 0x08
    3d92:	48 2f       	mov	r20, r24
    3d94:	50 e0       	ldi	r21, 0x00	; 0
    3d96:	ca 01       	movw	r24, r20
    3d98:	88 0f       	add	r24, r24
    3d9a:	99 1f       	adc	r25, r25
    3d9c:	9c 01       	movw	r18, r24
    3d9e:	22 0f       	add	r18, r18
    3da0:	33 1f       	adc	r19, r19
    3da2:	22 0f       	add	r18, r18
    3da4:	33 1f       	adc	r19, r19
    3da6:	22 0f       	add	r18, r18
    3da8:	33 1f       	adc	r19, r19
    3daa:	82 0f       	add	r24, r18
    3dac:	93 1f       	adc	r25, r19
    3dae:	84 0f       	add	r24, r20
    3db0:	95 1f       	adc	r25, r21
    3db2:	fc 01       	movw	r30, r24
    3db4:	ed 57       	subi	r30, 0x7D	; 125
    3db6:	fe 4f       	sbci	r31, 0xFE	; 254
    3db8:	60 81       	ld	r22, Z
    3dba:	88 85       	ldd	r24, Y+8	; 0x08
    3dbc:	48 2f       	mov	r20, r24
    3dbe:	50 e0       	ldi	r21, 0x00	; 0
    3dc0:	ca 01       	movw	r24, r20
    3dc2:	88 0f       	add	r24, r24
    3dc4:	99 1f       	adc	r25, r25
    3dc6:	9c 01       	movw	r18, r24
    3dc8:	22 0f       	add	r18, r18
    3dca:	33 1f       	adc	r19, r19
    3dcc:	22 0f       	add	r18, r18
    3dce:	33 1f       	adc	r19, r19
    3dd0:	22 0f       	add	r18, r18
    3dd2:	33 1f       	adc	r19, r19
    3dd4:	82 0f       	add	r24, r18
    3dd6:	93 1f       	adc	r25, r19
    3dd8:	84 0f       	add	r24, r20
    3dda:	95 1f       	adc	r25, r21
    3ddc:	fc 01       	movw	r30, r24
    3dde:	ec 57       	subi	r30, 0x7C	; 124
    3de0:	fe 4f       	sbci	r31, 0xFE	; 254
    3de2:	90 81       	ld	r25, Z
    3de4:	86 2f       	mov	r24, r22
    3de6:	69 2f       	mov	r22, r25
    3de8:	41 e0       	ldi	r20, 0x01	; 1
    3dea:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3dee:	88 2f       	mov	r24, r24
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	88 0f       	add	r24, r24
    3df4:	99 1f       	adc	r25, r25
    3df6:	88 0f       	add	r24, r24
    3df8:	99 1f       	adc	r25, r25
    3dfa:	88 0f       	add	r24, r24
    3dfc:	99 1f       	adc	r25, r25
    3dfe:	9c 01       	movw	r18, r24
    3e00:	44 27       	eor	r20, r20
    3e02:	37 fd       	sbrc	r19, 7
    3e04:	40 95       	com	r20
    3e06:	54 2f       	mov	r21, r20
    3e08:	89 81       	ldd	r24, Y+1	; 0x01
    3e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e0c:	ab 81       	ldd	r26, Y+3	; 0x03
    3e0e:	bc 81       	ldd	r27, Y+4	; 0x04
    3e10:	82 2b       	or	r24, r18
    3e12:	93 2b       	or	r25, r19
    3e14:	a4 2b       	or	r26, r20
    3e16:	b5 2b       	or	r27, r21
    3e18:	89 83       	std	Y+1, r24	; 0x01
    3e1a:	9a 83       	std	Y+2, r25	; 0x02
    3e1c:	ab 83       	std	Y+3, r26	; 0x03
    3e1e:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPin,
												  DIO_u8HIGH) << 3);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPort,
    3e20:	88 85       	ldd	r24, Y+8	; 0x08
    3e22:	48 2f       	mov	r20, r24
    3e24:	50 e0       	ldi	r21, 0x00	; 0
    3e26:	ca 01       	movw	r24, r20
    3e28:	88 0f       	add	r24, r24
    3e2a:	99 1f       	adc	r25, r25
    3e2c:	9c 01       	movw	r18, r24
    3e2e:	22 0f       	add	r18, r18
    3e30:	33 1f       	adc	r19, r19
    3e32:	22 0f       	add	r18, r18
    3e34:	33 1f       	adc	r19, r19
    3e36:	22 0f       	add	r18, r18
    3e38:	33 1f       	adc	r19, r19
    3e3a:	82 0f       	add	r24, r18
    3e3c:	93 1f       	adc	r25, r19
    3e3e:	84 0f       	add	r24, r20
    3e40:	95 1f       	adc	r25, r21
    3e42:	fc 01       	movw	r30, r24
    3e44:	eb 57       	subi	r30, 0x7B	; 123
    3e46:	fe 4f       	sbci	r31, 0xFE	; 254
    3e48:	60 81       	ld	r22, Z
    3e4a:	88 85       	ldd	r24, Y+8	; 0x08
    3e4c:	48 2f       	mov	r20, r24
    3e4e:	50 e0       	ldi	r21, 0x00	; 0
    3e50:	ca 01       	movw	r24, r20
    3e52:	88 0f       	add	r24, r24
    3e54:	99 1f       	adc	r25, r25
    3e56:	9c 01       	movw	r18, r24
    3e58:	22 0f       	add	r18, r18
    3e5a:	33 1f       	adc	r19, r19
    3e5c:	22 0f       	add	r18, r18
    3e5e:	33 1f       	adc	r19, r19
    3e60:	22 0f       	add	r18, r18
    3e62:	33 1f       	adc	r19, r19
    3e64:	82 0f       	add	r24, r18
    3e66:	93 1f       	adc	r25, r19
    3e68:	84 0f       	add	r24, r20
    3e6a:	95 1f       	adc	r25, r21
    3e6c:	fc 01       	movw	r30, r24
    3e6e:	ea 57       	subi	r30, 0x7A	; 122
    3e70:	fe 4f       	sbci	r31, 0xFE	; 254
    3e72:	90 81       	ld	r25, Z
    3e74:	86 2f       	mov	r24, r22
    3e76:	69 2f       	mov	r22, r25
    3e78:	41 e0       	ldi	r20, 0x01	; 1
    3e7a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3e7e:	88 2f       	mov	r24, r24
    3e80:	90 e0       	ldi	r25, 0x00	; 0
    3e82:	00 24       	eor	r0, r0
    3e84:	96 95       	lsr	r25
    3e86:	87 95       	ror	r24
    3e88:	07 94       	ror	r0
    3e8a:	96 95       	lsr	r25
    3e8c:	87 95       	ror	r24
    3e8e:	07 94       	ror	r0
    3e90:	98 2f       	mov	r25, r24
    3e92:	80 2d       	mov	r24, r0
    3e94:	9c 01       	movw	r18, r24
    3e96:	44 27       	eor	r20, r20
    3e98:	37 fd       	sbrc	r19, 7
    3e9a:	40 95       	com	r20
    3e9c:	54 2f       	mov	r21, r20
    3e9e:	89 81       	ldd	r24, Y+1	; 0x01
    3ea0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ea2:	ab 81       	ldd	r26, Y+3	; 0x03
    3ea4:	bc 81       	ldd	r27, Y+4	; 0x04
    3ea6:	82 2b       	or	r24, r18
    3ea8:	93 2b       	or	r25, r19
    3eaa:	a4 2b       	or	r26, r20
    3eac:	b5 2b       	or	r27, r21
    3eae:	89 83       	std	Y+1, r24	; 0x01
    3eb0:	9a 83       	std	Y+2, r25	; 0x02
    3eb2:	ab 83       	std	Y+3, r26	; 0x03
    3eb4:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPin,
												  DIO_u8HIGH) << 6);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPort,
    3eb6:	88 85       	ldd	r24, Y+8	; 0x08
    3eb8:	48 2f       	mov	r20, r24
    3eba:	50 e0       	ldi	r21, 0x00	; 0
    3ebc:	ca 01       	movw	r24, r20
    3ebe:	88 0f       	add	r24, r24
    3ec0:	99 1f       	adc	r25, r25
    3ec2:	9c 01       	movw	r18, r24
    3ec4:	22 0f       	add	r18, r18
    3ec6:	33 1f       	adc	r19, r19
    3ec8:	22 0f       	add	r18, r18
    3eca:	33 1f       	adc	r19, r19
    3ecc:	22 0f       	add	r18, r18
    3ece:	33 1f       	adc	r19, r19
    3ed0:	82 0f       	add	r24, r18
    3ed2:	93 1f       	adc	r25, r19
    3ed4:	84 0f       	add	r24, r20
    3ed6:	95 1f       	adc	r25, r21
    3ed8:	fc 01       	movw	r30, r24
    3eda:	e9 57       	subi	r30, 0x79	; 121
    3edc:	fe 4f       	sbci	r31, 0xFE	; 254
    3ede:	60 81       	ld	r22, Z
    3ee0:	88 85       	ldd	r24, Y+8	; 0x08
    3ee2:	48 2f       	mov	r20, r24
    3ee4:	50 e0       	ldi	r21, 0x00	; 0
    3ee6:	ca 01       	movw	r24, r20
    3ee8:	88 0f       	add	r24, r24
    3eea:	99 1f       	adc	r25, r25
    3eec:	9c 01       	movw	r18, r24
    3eee:	22 0f       	add	r18, r18
    3ef0:	33 1f       	adc	r19, r19
    3ef2:	22 0f       	add	r18, r18
    3ef4:	33 1f       	adc	r19, r19
    3ef6:	22 0f       	add	r18, r18
    3ef8:	33 1f       	adc	r19, r19
    3efa:	82 0f       	add	r24, r18
    3efc:	93 1f       	adc	r25, r19
    3efe:	84 0f       	add	r24, r20
    3f00:	95 1f       	adc	r25, r21
    3f02:	fc 01       	movw	r30, r24
    3f04:	e8 57       	subi	r30, 0x78	; 120
    3f06:	fe 4f       	sbci	r31, 0xFE	; 254
    3f08:	90 81       	ld	r25, Z
    3f0a:	86 2f       	mov	r24, r22
    3f0c:	69 2f       	mov	r22, r25
    3f0e:	41 e0       	ldi	r20, 0x01	; 1
    3f10:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3f14:	88 2f       	mov	r24, r24
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	98 2f       	mov	r25, r24
    3f1a:	88 27       	eor	r24, r24
    3f1c:	99 0f       	add	r25, r25
    3f1e:	9c 01       	movw	r18, r24
    3f20:	44 27       	eor	r20, r20
    3f22:	37 fd       	sbrc	r19, 7
    3f24:	40 95       	com	r20
    3f26:	54 2f       	mov	r21, r20
    3f28:	89 81       	ldd	r24, Y+1	; 0x01
    3f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f2c:	ab 81       	ldd	r26, Y+3	; 0x03
    3f2e:	bc 81       	ldd	r27, Y+4	; 0x04
    3f30:	82 2b       	or	r24, r18
    3f32:	93 2b       	or	r25, r19
    3f34:	a4 2b       	or	r26, r20
    3f36:	b5 2b       	or	r27, r21
    3f38:	89 83       	std	Y+1, r24	; 0x01
    3f3a:	9a 83       	std	Y+2, r25	; 0x02
    3f3c:	ab 83       	std	Y+3, r26	; 0x03
    3f3e:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPin,
												  DIO_u8HIGH) << 9) ;

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPort,
    3f40:	88 85       	ldd	r24, Y+8	; 0x08
    3f42:	48 2f       	mov	r20, r24
    3f44:	50 e0       	ldi	r21, 0x00	; 0
    3f46:	ca 01       	movw	r24, r20
    3f48:	88 0f       	add	r24, r24
    3f4a:	99 1f       	adc	r25, r25
    3f4c:	9c 01       	movw	r18, r24
    3f4e:	22 0f       	add	r18, r18
    3f50:	33 1f       	adc	r19, r19
    3f52:	22 0f       	add	r18, r18
    3f54:	33 1f       	adc	r19, r19
    3f56:	22 0f       	add	r18, r18
    3f58:	33 1f       	adc	r19, r19
    3f5a:	82 0f       	add	r24, r18
    3f5c:	93 1f       	adc	r25, r19
    3f5e:	84 0f       	add	r24, r20
    3f60:	95 1f       	adc	r25, r21
    3f62:	fc 01       	movw	r30, r24
    3f64:	e7 57       	subi	r30, 0x77	; 119
    3f66:	fe 4f       	sbci	r31, 0xFE	; 254
    3f68:	60 81       	ld	r22, Z
    3f6a:	88 85       	ldd	r24, Y+8	; 0x08
    3f6c:	48 2f       	mov	r20, r24
    3f6e:	50 e0       	ldi	r21, 0x00	; 0
    3f70:	ca 01       	movw	r24, r20
    3f72:	88 0f       	add	r24, r24
    3f74:	99 1f       	adc	r25, r25
    3f76:	9c 01       	movw	r18, r24
    3f78:	22 0f       	add	r18, r18
    3f7a:	33 1f       	adc	r19, r19
    3f7c:	22 0f       	add	r18, r18
    3f7e:	33 1f       	adc	r19, r19
    3f80:	22 0f       	add	r18, r18
    3f82:	33 1f       	adc	r19, r19
    3f84:	82 0f       	add	r24, r18
    3f86:	93 1f       	adc	r25, r19
    3f88:	84 0f       	add	r24, r20
    3f8a:	95 1f       	adc	r25, r21
    3f8c:	fc 01       	movw	r30, r24
    3f8e:	e6 57       	subi	r30, 0x76	; 118
    3f90:	fe 4f       	sbci	r31, 0xFE	; 254
    3f92:	90 81       	ld	r25, Z
    3f94:	86 2f       	mov	r24, r22
    3f96:	69 2f       	mov	r22, r25
    3f98:	41 e0       	ldi	r20, 0x01	; 1
    3f9a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    3f9e:	88 2f       	mov	r24, r24
    3fa0:	90 e0       	ldi	r25, 0x00	; 0
    3fa2:	98 2f       	mov	r25, r24
    3fa4:	88 27       	eor	r24, r24
    3fa6:	92 95       	swap	r25
    3fa8:	90 7f       	andi	r25, 0xF0	; 240
    3faa:	9c 01       	movw	r18, r24
    3fac:	44 27       	eor	r20, r20
    3fae:	37 fd       	sbrc	r19, 7
    3fb0:	40 95       	com	r20
    3fb2:	54 2f       	mov	r21, r20
    3fb4:	89 81       	ldd	r24, Y+1	; 0x01
    3fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb8:	ab 81       	ldd	r26, Y+3	; 0x03
    3fba:	bc 81       	ldd	r27, Y+4	; 0x04
    3fbc:	82 2b       	or	r24, r18
    3fbe:	93 2b       	or	r25, r19
    3fc0:	a4 2b       	or	r26, r20
    3fc2:	b5 2b       	or	r27, r21
    3fc4:	89 83       	std	Y+1, r24	; 0x01
    3fc6:	9a 83       	std	Y+2, r25	; 0x02
    3fc8:	ab 83       	std	Y+3, r26	; 0x03
    3fca:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPin,
												  DIO_u8HIGH) << 12);

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPort,
    3fcc:	88 85       	ldd	r24, Y+8	; 0x08
    3fce:	48 2f       	mov	r20, r24
    3fd0:	50 e0       	ldi	r21, 0x00	; 0
    3fd2:	ca 01       	movw	r24, r20
    3fd4:	88 0f       	add	r24, r24
    3fd6:	99 1f       	adc	r25, r25
    3fd8:	9c 01       	movw	r18, r24
    3fda:	22 0f       	add	r18, r18
    3fdc:	33 1f       	adc	r19, r19
    3fde:	22 0f       	add	r18, r18
    3fe0:	33 1f       	adc	r19, r19
    3fe2:	22 0f       	add	r18, r18
    3fe4:	33 1f       	adc	r19, r19
    3fe6:	82 0f       	add	r24, r18
    3fe8:	93 1f       	adc	r25, r19
    3fea:	84 0f       	add	r24, r20
    3fec:	95 1f       	adc	r25, r21
    3fee:	fc 01       	movw	r30, r24
    3ff0:	e5 57       	subi	r30, 0x75	; 117
    3ff2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ff4:	60 81       	ld	r22, Z
    3ff6:	88 85       	ldd	r24, Y+8	; 0x08
    3ff8:	48 2f       	mov	r20, r24
    3ffa:	50 e0       	ldi	r21, 0x00	; 0
    3ffc:	ca 01       	movw	r24, r20
    3ffe:	88 0f       	add	r24, r24
    4000:	99 1f       	adc	r25, r25
    4002:	9c 01       	movw	r18, r24
    4004:	22 0f       	add	r18, r18
    4006:	33 1f       	adc	r19, r19
    4008:	22 0f       	add	r18, r18
    400a:	33 1f       	adc	r19, r19
    400c:	22 0f       	add	r18, r18
    400e:	33 1f       	adc	r19, r19
    4010:	82 0f       	add	r24, r18
    4012:	93 1f       	adc	r25, r19
    4014:	84 0f       	add	r24, r20
    4016:	95 1f       	adc	r25, r21
    4018:	fc 01       	movw	r30, r24
    401a:	e4 57       	subi	r30, 0x74	; 116
    401c:	fe 4f       	sbci	r31, 0xFE	; 254
    401e:	90 81       	ld	r25, Z
    4020:	86 2f       	mov	r24, r22
    4022:	69 2f       	mov	r22, r25
    4024:	41 e0       	ldi	r20, 0x01	; 1
    4026:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    402a:	88 2f       	mov	r24, r24
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	a0 e0       	ldi	r26, 0x00	; 0
    4030:	b0 e0       	ldi	r27, 0x00	; 0
    4032:	9c 01       	movw	r18, r24
    4034:	ad 01       	movw	r20, r26
    4036:	01 2e       	mov	r0, r17
    4038:	1f e0       	ldi	r17, 0x0F	; 15
    403a:	22 0f       	add	r18, r18
    403c:	33 1f       	adc	r19, r19
    403e:	44 1f       	adc	r20, r20
    4040:	55 1f       	adc	r21, r21
    4042:	1a 95       	dec	r17
    4044:	d1 f7       	brne	.-12     	; 0x403a <SSDLT_enuClearDisplay+0x7a4>
    4046:	10 2d       	mov	r17, r0
    4048:	89 81       	ldd	r24, Y+1	; 0x01
    404a:	9a 81       	ldd	r25, Y+2	; 0x02
    404c:	ab 81       	ldd	r26, Y+3	; 0x03
    404e:	bc 81       	ldd	r27, Y+4	; 0x04
    4050:	82 2b       	or	r24, r18
    4052:	93 2b       	or	r25, r19
    4054:	a4 2b       	or	r26, r20
    4056:	b5 2b       	or	r27, r21
    4058:	89 83       	std	Y+1, r24	; 0x01
    405a:	9a 83       	std	Y+2, r25	; 0x02
    405c:	ab 83       	std	Y+3, r26	; 0x03
    405e:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPin,
												  DIO_u8HIGH) << 15));

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPort,
    4060:	88 85       	ldd	r24, Y+8	; 0x08
    4062:	48 2f       	mov	r20, r24
    4064:	50 e0       	ldi	r21, 0x00	; 0
    4066:	ca 01       	movw	r24, r20
    4068:	88 0f       	add	r24, r24
    406a:	99 1f       	adc	r25, r25
    406c:	9c 01       	movw	r18, r24
    406e:	22 0f       	add	r18, r18
    4070:	33 1f       	adc	r19, r19
    4072:	22 0f       	add	r18, r18
    4074:	33 1f       	adc	r19, r19
    4076:	22 0f       	add	r18, r18
    4078:	33 1f       	adc	r19, r19
    407a:	82 0f       	add	r24, r18
    407c:	93 1f       	adc	r25, r19
    407e:	84 0f       	add	r24, r20
    4080:	95 1f       	adc	r25, r21
    4082:	fc 01       	movw	r30, r24
    4084:	e3 57       	subi	r30, 0x73	; 115
    4086:	fe 4f       	sbci	r31, 0xFE	; 254
    4088:	60 81       	ld	r22, Z
    408a:	88 85       	ldd	r24, Y+8	; 0x08
    408c:	48 2f       	mov	r20, r24
    408e:	50 e0       	ldi	r21, 0x00	; 0
    4090:	ca 01       	movw	r24, r20
    4092:	88 0f       	add	r24, r24
    4094:	99 1f       	adc	r25, r25
    4096:	9c 01       	movw	r18, r24
    4098:	22 0f       	add	r18, r18
    409a:	33 1f       	adc	r19, r19
    409c:	22 0f       	add	r18, r18
    409e:	33 1f       	adc	r19, r19
    40a0:	22 0f       	add	r18, r18
    40a2:	33 1f       	adc	r19, r19
    40a4:	82 0f       	add	r24, r18
    40a6:	93 1f       	adc	r25, r19
    40a8:	84 0f       	add	r24, r20
    40aa:	95 1f       	adc	r25, r21
    40ac:	fc 01       	movw	r30, r24
    40ae:	e2 57       	subi	r30, 0x72	; 114
    40b0:	fe 4f       	sbci	r31, 0xFE	; 254
    40b2:	90 81       	ld	r25, Z
    40b4:	86 2f       	mov	r24, r22
    40b6:	69 2f       	mov	r22, r25
    40b8:	41 e0       	ldi	r20, 0x01	; 1
    40ba:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    40be:	88 2f       	mov	r24, r24
    40c0:	90 e0       	ldi	r25, 0x00	; 0
    40c2:	a0 e0       	ldi	r26, 0x00	; 0
    40c4:	b0 e0       	ldi	r27, 0x00	; 0
    40c6:	9c 01       	movw	r18, r24
    40c8:	ad 01       	movw	r20, r26
    40ca:	01 2e       	mov	r0, r17
    40cc:	12 e1       	ldi	r17, 0x12	; 18
    40ce:	22 0f       	add	r18, r18
    40d0:	33 1f       	adc	r19, r19
    40d2:	44 1f       	adc	r20, r20
    40d4:	55 1f       	adc	r21, r21
    40d6:	1a 95       	dec	r17
    40d8:	d1 f7       	brne	.-12     	; 0x40ce <SSDLT_enuClearDisplay+0x838>
    40da:	10 2d       	mov	r17, r0
    40dc:	89 81       	ldd	r24, Y+1	; 0x01
    40de:	9a 81       	ldd	r25, Y+2	; 0x02
    40e0:	ab 81       	ldd	r26, Y+3	; 0x03
    40e2:	bc 81       	ldd	r27, Y+4	; 0x04
    40e4:	82 2b       	or	r24, r18
    40e6:	93 2b       	or	r25, r19
    40e8:	a4 2b       	or	r26, r20
    40ea:	b5 2b       	or	r27, r21
    40ec:	89 83       	std	Y+1, r24	; 0x01
    40ee:	9a 83       	std	Y+2, r25	; 0x02
    40f0:	ab 83       	std	Y+3, r26	; 0x03
    40f2:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPin,
												  DIO_u8HIGH) << 18));
			Local_u8LastBit = 21;
    40f4:	85 e1       	ldi	r24, 0x15	; 21
    40f6:	8d 83       	std	Y+5, r24	; 0x05
    40f8:	03 c0       	rjmp	.+6      	; 0x4100 <SSDLT_enuClearDisplay+0x86a>
		}
		else
		{
			return ES_OUT_OF_RANGE;
    40fa:	03 e0       	ldi	r16, 0x03	; 3
    40fc:	09 87       	std	Y+9, r16	; 0x09
    40fe:	23 c1       	rjmp	.+582    	; 0x4346 <SSDLT_enuClearDisplay+0xab0>
	else
	{
		return ES_OUT_OF_RANGE;
	}

	if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port != NOT_CONNECTED ||
    4100:	88 85       	ldd	r24, Y+8	; 0x08
    4102:	48 2f       	mov	r20, r24
    4104:	50 e0       	ldi	r21, 0x00	; 0
    4106:	ca 01       	movw	r24, r20
    4108:	88 0f       	add	r24, r24
    410a:	99 1f       	adc	r25, r25
    410c:	9c 01       	movw	r18, r24
    410e:	22 0f       	add	r18, r18
    4110:	33 1f       	adc	r19, r19
    4112:	22 0f       	add	r18, r18
    4114:	33 1f       	adc	r19, r19
    4116:	22 0f       	add	r18, r18
    4118:	33 1f       	adc	r19, r19
    411a:	82 0f       	add	r24, r18
    411c:	93 1f       	adc	r25, r19
    411e:	84 0f       	add	r24, r20
    4120:	95 1f       	adc	r25, r21
    4122:	fc 01       	movw	r30, r24
    4124:	ef 56       	subi	r30, 0x6F	; 111
    4126:	fe 4f       	sbci	r31, 0xFE	; 254
    4128:	80 81       	ld	r24, Z
    412a:	82 30       	cpi	r24, 0x02	; 2
    412c:	e1 f4       	brne	.+56     	; 0x4166 <SSDLT_enuClearDisplay+0x8d0>
    412e:	03 c0       	rjmp	.+6      	; 0x4136 <SSDLT_enuClearDisplay+0x8a0>
			return ES_OUT_OF_RANGE;
		}
	}
	else
	{
		return ES_OUT_OF_RANGE;
    4130:	13 e0       	ldi	r17, 0x03	; 3
    4132:	19 87       	std	Y+9, r17	; 0x09
    4134:	08 c1       	rjmp	.+528    	; 0x4346 <SSDLT_enuClearDisplay+0xab0>
	}

	if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port != NOT_CONNECTED ||
    4136:	88 85       	ldd	r24, Y+8	; 0x08
    4138:	48 2f       	mov	r20, r24
    413a:	50 e0       	ldi	r21, 0x00	; 0
    413c:	ca 01       	movw	r24, r20
    413e:	88 0f       	add	r24, r24
    4140:	99 1f       	adc	r25, r25
    4142:	9c 01       	movw	r18, r24
    4144:	22 0f       	add	r18, r18
    4146:	33 1f       	adc	r19, r19
    4148:	22 0f       	add	r18, r18
    414a:	33 1f       	adc	r19, r19
    414c:	22 0f       	add	r18, r18
    414e:	33 1f       	adc	r19, r19
    4150:	82 0f       	add	r24, r18
    4152:	93 1f       	adc	r25, r19
    4154:	84 0f       	add	r24, r20
    4156:	95 1f       	adc	r25, r21
    4158:	fc 01       	movw	r30, r24
    415a:	ee 56       	subi	r30, 0x6E	; 110
    415c:	fe 4f       	sbci	r31, 0xFE	; 254
    415e:	80 81       	ld	r24, Z
    4160:	82 30       	cpi	r24, 0x02	; 2
    4162:	09 f4       	brne	.+2      	; 0x4166 <SSDLT_enuClearDisplay+0x8d0>
    4164:	c7 c0       	rjmp	.+398    	; 0x42f4 <SSDLT_enuClearDisplay+0xa5e>
		SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin != NOT_CONNECTED)
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    4166:	88 85       	ldd	r24, Y+8	; 0x08
    4168:	48 2f       	mov	r20, r24
    416a:	50 e0       	ldi	r21, 0x00	; 0
    416c:	ca 01       	movw	r24, r20
    416e:	88 0f       	add	r24, r24
    4170:	99 1f       	adc	r25, r25
    4172:	9c 01       	movw	r18, r24
    4174:	22 0f       	add	r18, r18
    4176:	33 1f       	adc	r19, r19
    4178:	22 0f       	add	r18, r18
    417a:	33 1f       	adc	r19, r19
    417c:	22 0f       	add	r18, r18
    417e:	33 1f       	adc	r19, r19
    4180:	82 0f       	add	r24, r18
    4182:	93 1f       	adc	r25, r19
    4184:	84 0f       	add	r24, r20
    4186:	95 1f       	adc	r25, r21
    4188:	fc 01       	movw	r30, r24
    418a:	ed 56       	subi	r30, 0x6D	; 109
    418c:	fe 4f       	sbci	r31, 0xFE	; 254
    418e:	80 81       	ld	r24, Z
    4190:	81 30       	cpi	r24, 0x01	; 1
    4192:	09 f0       	breq	.+2      	; 0x4196 <SSDLT_enuClearDisplay+0x900>
    4194:	49 c0       	rjmp	.+146    	; 0x4228 <SSDLT_enuClearDisplay+0x992>
		{
			Local_enuErrorState |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port,
    4196:	88 85       	ldd	r24, Y+8	; 0x08
    4198:	48 2f       	mov	r20, r24
    419a:	50 e0       	ldi	r21, 0x00	; 0
    419c:	ca 01       	movw	r24, r20
    419e:	88 0f       	add	r24, r24
    41a0:	99 1f       	adc	r25, r25
    41a2:	9c 01       	movw	r18, r24
    41a4:	22 0f       	add	r18, r18
    41a6:	33 1f       	adc	r19, r19
    41a8:	22 0f       	add	r18, r18
    41aa:	33 1f       	adc	r19, r19
    41ac:	22 0f       	add	r18, r18
    41ae:	33 1f       	adc	r19, r19
    41b0:	82 0f       	add	r24, r18
    41b2:	93 1f       	adc	r25, r19
    41b4:	84 0f       	add	r24, r20
    41b6:	95 1f       	adc	r25, r21
    41b8:	fc 01       	movw	r30, r24
    41ba:	ef 56       	subi	r30, 0x6F	; 111
    41bc:	fe 4f       	sbci	r31, 0xFE	; 254
    41be:	60 81       	ld	r22, Z
    41c0:	88 85       	ldd	r24, Y+8	; 0x08
    41c2:	48 2f       	mov	r20, r24
    41c4:	50 e0       	ldi	r21, 0x00	; 0
    41c6:	ca 01       	movw	r24, r20
    41c8:	88 0f       	add	r24, r24
    41ca:	99 1f       	adc	r25, r25
    41cc:	9c 01       	movw	r18, r24
    41ce:	22 0f       	add	r18, r18
    41d0:	33 1f       	adc	r19, r19
    41d2:	22 0f       	add	r18, r18
    41d4:	33 1f       	adc	r19, r19
    41d6:	22 0f       	add	r18, r18
    41d8:	33 1f       	adc	r19, r19
    41da:	82 0f       	add	r24, r18
    41dc:	93 1f       	adc	r25, r19
    41de:	84 0f       	add	r24, r20
    41e0:	95 1f       	adc	r25, r21
    41e2:	fc 01       	movw	r30, r24
    41e4:	ee 56       	subi	r30, 0x6E	; 110
    41e6:	fe 4f       	sbci	r31, 0xFE	; 254
    41e8:	90 81       	ld	r25, Z
    41ea:	86 2f       	mov	r24, r22
    41ec:	69 2f       	mov	r22, r25
    41ee:	40 e0       	ldi	r20, 0x00	; 0
    41f0:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    41f4:	28 2f       	mov	r18, r24
    41f6:	30 e0       	ldi	r19, 0x00	; 0
    41f8:	40 e0       	ldi	r20, 0x00	; 0
    41fa:	50 e0       	ldi	r21, 0x00	; 0
    41fc:	8d 81       	ldd	r24, Y+5	; 0x05
    41fe:	88 2f       	mov	r24, r24
    4200:	90 e0       	ldi	r25, 0x00	; 0
    4202:	79 01       	movw	r14, r18
    4204:	8a 01       	movw	r16, r20
    4206:	04 c0       	rjmp	.+8      	; 0x4210 <SSDLT_enuClearDisplay+0x97a>
    4208:	ee 0c       	add	r14, r14
    420a:	ff 1c       	adc	r15, r15
    420c:	00 1f       	adc	r16, r16
    420e:	11 1f       	adc	r17, r17
    4210:	8a 95       	dec	r24
    4212:	d2 f7       	brpl	.-12     	; 0x4208 <SSDLT_enuClearDisplay+0x972>
    4214:	d8 01       	movw	r26, r16
    4216:	c7 01       	movw	r24, r14
    4218:	98 2f       	mov	r25, r24
    421a:	8f 81       	ldd	r24, Y+7	; 0x07
    421c:	89 2b       	or	r24, r25
    421e:	8f 83       	std	Y+7, r24	; 0x07
													 SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin, DIO_u8LOW) << Local_u8LastBit));
			Local_u8LastBit += 3;
    4220:	8d 81       	ldd	r24, Y+5	; 0x05
    4222:	8d 5f       	subi	r24, 0xFD	; 253
    4224:	8d 83       	std	Y+5, r24	; 0x05
    4226:	64 c0       	rjmp	.+200    	; 0x42f0 <SSDLT_enuClearDisplay+0xa5a>
		}
		else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    4228:	88 85       	ldd	r24, Y+8	; 0x08
    422a:	48 2f       	mov	r20, r24
    422c:	50 e0       	ldi	r21, 0x00	; 0
    422e:	ca 01       	movw	r24, r20
    4230:	88 0f       	add	r24, r24
    4232:	99 1f       	adc	r25, r25
    4234:	9c 01       	movw	r18, r24
    4236:	22 0f       	add	r18, r18
    4238:	33 1f       	adc	r19, r19
    423a:	22 0f       	add	r18, r18
    423c:	33 1f       	adc	r19, r19
    423e:	22 0f       	add	r18, r18
    4240:	33 1f       	adc	r19, r19
    4242:	82 0f       	add	r24, r18
    4244:	93 1f       	adc	r25, r19
    4246:	84 0f       	add	r24, r20
    4248:	95 1f       	adc	r25, r21
    424a:	fc 01       	movw	r30, r24
    424c:	ed 56       	subi	r30, 0x6D	; 109
    424e:	fe 4f       	sbci	r31, 0xFE	; 254
    4250:	80 81       	ld	r24, Z
    4252:	88 23       	and	r24, r24
    4254:	09 f0       	breq	.+2      	; 0x4258 <SSDLT_enuClearDisplay+0x9c2>
    4256:	49 c0       	rjmp	.+146    	; 0x42ea <SSDLT_enuClearDisplay+0xa54>
		{
			Local_enuErrorState |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port,
    4258:	88 85       	ldd	r24, Y+8	; 0x08
    425a:	48 2f       	mov	r20, r24
    425c:	50 e0       	ldi	r21, 0x00	; 0
    425e:	ca 01       	movw	r24, r20
    4260:	88 0f       	add	r24, r24
    4262:	99 1f       	adc	r25, r25
    4264:	9c 01       	movw	r18, r24
    4266:	22 0f       	add	r18, r18
    4268:	33 1f       	adc	r19, r19
    426a:	22 0f       	add	r18, r18
    426c:	33 1f       	adc	r19, r19
    426e:	22 0f       	add	r18, r18
    4270:	33 1f       	adc	r19, r19
    4272:	82 0f       	add	r24, r18
    4274:	93 1f       	adc	r25, r19
    4276:	84 0f       	add	r24, r20
    4278:	95 1f       	adc	r25, r21
    427a:	fc 01       	movw	r30, r24
    427c:	ef 56       	subi	r30, 0x6F	; 111
    427e:	fe 4f       	sbci	r31, 0xFE	; 254
    4280:	60 81       	ld	r22, Z
    4282:	88 85       	ldd	r24, Y+8	; 0x08
    4284:	48 2f       	mov	r20, r24
    4286:	50 e0       	ldi	r21, 0x00	; 0
    4288:	ca 01       	movw	r24, r20
    428a:	88 0f       	add	r24, r24
    428c:	99 1f       	adc	r25, r25
    428e:	9c 01       	movw	r18, r24
    4290:	22 0f       	add	r18, r18
    4292:	33 1f       	adc	r19, r19
    4294:	22 0f       	add	r18, r18
    4296:	33 1f       	adc	r19, r19
    4298:	22 0f       	add	r18, r18
    429a:	33 1f       	adc	r19, r19
    429c:	82 0f       	add	r24, r18
    429e:	93 1f       	adc	r25, r19
    42a0:	84 0f       	add	r24, r20
    42a2:	95 1f       	adc	r25, r21
    42a4:	fc 01       	movw	r30, r24
    42a6:	ee 56       	subi	r30, 0x6E	; 110
    42a8:	fe 4f       	sbci	r31, 0xFE	; 254
    42aa:	90 81       	ld	r25, Z
    42ac:	86 2f       	mov	r24, r22
    42ae:	69 2f       	mov	r22, r25
    42b0:	41 e0       	ldi	r20, 0x01	; 1
    42b2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    42b6:	28 2f       	mov	r18, r24
    42b8:	30 e0       	ldi	r19, 0x00	; 0
    42ba:	40 e0       	ldi	r20, 0x00	; 0
    42bc:	50 e0       	ldi	r21, 0x00	; 0
    42be:	8d 81       	ldd	r24, Y+5	; 0x05
    42c0:	88 2f       	mov	r24, r24
    42c2:	90 e0       	ldi	r25, 0x00	; 0
    42c4:	79 01       	movw	r14, r18
    42c6:	8a 01       	movw	r16, r20
    42c8:	04 c0       	rjmp	.+8      	; 0x42d2 <SSDLT_enuClearDisplay+0xa3c>
    42ca:	ee 0c       	add	r14, r14
    42cc:	ff 1c       	adc	r15, r15
    42ce:	00 1f       	adc	r16, r16
    42d0:	11 1f       	adc	r17, r17
    42d2:	8a 95       	dec	r24
    42d4:	d2 f7       	brpl	.-12     	; 0x42ca <SSDLT_enuClearDisplay+0xa34>
    42d6:	d8 01       	movw	r26, r16
    42d8:	c7 01       	movw	r24, r14
    42da:	98 2f       	mov	r25, r24
    42dc:	8f 81       	ldd	r24, Y+7	; 0x07
    42de:	89 2b       	or	r24, r25
    42e0:	8f 83       	std	Y+7, r24	; 0x07
													SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin, DIO_u8HIGH) << Local_u8LastBit));
			Local_u8LastBit += 3;
    42e2:	8d 81       	ldd	r24, Y+5	; 0x05
    42e4:	8d 5f       	subi	r24, 0xFD	; 253
    42e6:	8d 83       	std	Y+5, r24	; 0x05
    42e8:	03 c0       	rjmp	.+6      	; 0x42f0 <SSDLT_enuClearDisplay+0xa5a>
		}
		else
		{
			return ES_OUT_OF_RANGE;
    42ea:	03 e0       	ldi	r16, 0x03	; 3
    42ec:	09 87       	std	Y+9, r16	; 0x09
    42ee:	2b c0       	rjmp	.+86     	; 0x4346 <SSDLT_enuClearDisplay+0xab0>
	else
	{
		return ES_OUT_OF_RANGE;
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < Local_u8LastBit; Local_u8Iterator += 3)
    42f0:	1e 82       	std	Y+6, r1	; 0x06
    42f2:	21 c0       	rjmp	.+66     	; 0x4336 <SSDLT_enuClearDisplay+0xaa0>
		}

	}
	else
	{
		return ES_OUT_OF_RANGE;
    42f4:	13 e0       	ldi	r17, 0x03	; 3
    42f6:	19 87       	std	Y+9, r17	; 0x09
    42f8:	26 c0       	rjmp	.+76     	; 0x4346 <SSDLT_enuClearDisplay+0xab0>
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < Local_u8LastBit; Local_u8Iterator += 3)
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
    42fa:	8e 81       	ldd	r24, Y+6	; 0x06
    42fc:	28 2f       	mov	r18, r24
    42fe:	30 e0       	ldi	r19, 0x00	; 0
    4300:	89 81       	ldd	r24, Y+1	; 0x01
    4302:	9a 81       	ldd	r25, Y+2	; 0x02
    4304:	ab 81       	ldd	r26, Y+3	; 0x03
    4306:	bc 81       	ldd	r27, Y+4	; 0x04
    4308:	02 2e       	mov	r0, r18
    430a:	04 c0       	rjmp	.+8      	; 0x4314 <SSDLT_enuClearDisplay+0xa7e>
    430c:	b6 95       	lsr	r27
    430e:	a7 95       	ror	r26
    4310:	97 95       	ror	r25
    4312:	87 95       	ror	r24
    4314:	0a 94       	dec	r0
    4316:	d2 f7       	brpl	.-12     	; 0x430c <SSDLT_enuClearDisplay+0xa76>
    4318:	87 70       	andi	r24, 0x07	; 7
    431a:	90 70       	andi	r25, 0x00	; 0
    431c:	a0 70       	andi	r26, 0x00	; 0
    431e:	b0 70       	andi	r27, 0x00	; 0
    4320:	81 30       	cpi	r24, 0x01	; 1
    4322:	91 05       	cpc	r25, r1
    4324:	a1 05       	cpc	r26, r1
    4326:	b1 05       	cpc	r27, r1
    4328:	19 f0       	breq	.+6      	; 0x4330 <SSDLT_enuClearDisplay+0xa9a>
		{
			return Local_enuErrorState;
    432a:	8f 81       	ldd	r24, Y+7	; 0x07
    432c:	89 87       	std	Y+9, r24	; 0x09
    432e:	0b c0       	rjmp	.+22     	; 0x4346 <SSDLT_enuClearDisplay+0xab0>
	else
	{
		return ES_OUT_OF_RANGE;
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < Local_u8LastBit; Local_u8Iterator += 3)
    4330:	8e 81       	ldd	r24, Y+6	; 0x06
    4332:	8d 5f       	subi	r24, 0xFD	; 253
    4334:	8e 83       	std	Y+6, r24	; 0x06
    4336:	9e 81       	ldd	r25, Y+6	; 0x06
    4338:	8d 81       	ldd	r24, Y+5	; 0x05
    433a:	98 17       	cp	r25, r24
    433c:	f0 f2       	brcs	.-68     	; 0x42fa <SSDLT_enuClearDisplay+0xa64>
		{
			return Local_enuErrorState;
		}
	}

	Local_enuErrorState = ES_OK;
    433e:	81 e0       	ldi	r24, 0x01	; 1
    4340:	8f 83       	std	Y+7, r24	; 0x07

	return Local_enuErrorState;
    4342:	ef 80       	ldd	r14, Y+7	; 0x07
    4344:	e9 86       	std	Y+9, r14	; 0x09
    4346:	89 85       	ldd	r24, Y+9	; 0x09
}
    4348:	29 96       	adiw	r28, 0x09	; 9
    434a:	0f b6       	in	r0, 0x3f	; 63
    434c:	f8 94       	cli
    434e:	de bf       	out	0x3e, r29	; 62
    4350:	0f be       	out	0x3f, r0	; 63
    4352:	cd bf       	out	0x3d, r28	; 61
    4354:	cf 91       	pop	r28
    4356:	df 91       	pop	r29
    4358:	1f 91       	pop	r17
    435a:	0f 91       	pop	r16
    435c:	ff 90       	pop	r15
    435e:	ef 90       	pop	r14
    4360:	08 95       	ret

00004362 <SSD_enuInit>:
#include "SSD_config.h"
#include "SSD_private.h"
/***********************	Includes Section End	***********************/

ES_t SSD_enuInit(void)
{
    4362:	df 93       	push	r29
    4364:	cf 93       	push	r28
    4366:	cd b7       	in	r28, 0x3d	; 61
    4368:	de b7       	in	r29, 0x3e	; 62
    436a:	27 97       	sbiw	r28, 0x07	; 7
    436c:	0f b6       	in	r0, 0x3f	; 63
    436e:	f8 94       	cli
    4370:	de bf       	out	0x3e, r29	; 62
    4372:	0f be       	out	0x3f, r0	; 63
    4374:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    4376:	1e 82       	std	Y+6, r1	; 0x06

	u32 Local_u32Check = 0;
    4378:	1a 82       	std	Y+2, r1	; 0x02
    437a:	1b 82       	std	Y+3, r1	; 0x03
    437c:	1c 82       	std	Y+4, r1	; 0x04
    437e:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8Iterator = 0;
    4380:	19 82       	std	Y+1, r1	; 0x01

	Local_u32Check |= (DIO_enuSetPinDirection(SEG_APORT, SEG_APIN, DIO_u8OUTPUT) << 0);
    4382:	80 e0       	ldi	r24, 0x00	; 0
    4384:	60 e0       	ldi	r22, 0x00	; 0
    4386:	41 e0       	ldi	r20, 0x01	; 1
    4388:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    438c:	28 2f       	mov	r18, r24
    438e:	30 e0       	ldi	r19, 0x00	; 0
    4390:	40 e0       	ldi	r20, 0x00	; 0
    4392:	50 e0       	ldi	r21, 0x00	; 0
    4394:	8a 81       	ldd	r24, Y+2	; 0x02
    4396:	9b 81       	ldd	r25, Y+3	; 0x03
    4398:	ac 81       	ldd	r26, Y+4	; 0x04
    439a:	bd 81       	ldd	r27, Y+5	; 0x05
    439c:	82 2b       	or	r24, r18
    439e:	93 2b       	or	r25, r19
    43a0:	a4 2b       	or	r26, r20
    43a2:	b5 2b       	or	r27, r21
    43a4:	8a 83       	std	Y+2, r24	; 0x02
    43a6:	9b 83       	std	Y+3, r25	; 0x03
    43a8:	ac 83       	std	Y+4, r26	; 0x04
    43aa:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (DIO_enuSetPinDirection(SEG_BPORT, SEG_BPIN, DIO_u8OUTPUT) << 3);
    43ac:	80 e0       	ldi	r24, 0x00	; 0
    43ae:	61 e0       	ldi	r22, 0x01	; 1
    43b0:	41 e0       	ldi	r20, 0x01	; 1
    43b2:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    43b6:	88 2f       	mov	r24, r24
    43b8:	90 e0       	ldi	r25, 0x00	; 0
    43ba:	88 0f       	add	r24, r24
    43bc:	99 1f       	adc	r25, r25
    43be:	88 0f       	add	r24, r24
    43c0:	99 1f       	adc	r25, r25
    43c2:	88 0f       	add	r24, r24
    43c4:	99 1f       	adc	r25, r25
    43c6:	9c 01       	movw	r18, r24
    43c8:	44 27       	eor	r20, r20
    43ca:	37 fd       	sbrc	r19, 7
    43cc:	40 95       	com	r20
    43ce:	54 2f       	mov	r21, r20
    43d0:	8a 81       	ldd	r24, Y+2	; 0x02
    43d2:	9b 81       	ldd	r25, Y+3	; 0x03
    43d4:	ac 81       	ldd	r26, Y+4	; 0x04
    43d6:	bd 81       	ldd	r27, Y+5	; 0x05
    43d8:	82 2b       	or	r24, r18
    43da:	93 2b       	or	r25, r19
    43dc:	a4 2b       	or	r26, r20
    43de:	b5 2b       	or	r27, r21
    43e0:	8a 83       	std	Y+2, r24	; 0x02
    43e2:	9b 83       	std	Y+3, r25	; 0x03
    43e4:	ac 83       	std	Y+4, r26	; 0x04
    43e6:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (DIO_enuSetPinDirection(SEG_CPORT, SEG_CPIN, DIO_u8OUTPUT) << 6);
    43e8:	80 e0       	ldi	r24, 0x00	; 0
    43ea:	62 e0       	ldi	r22, 0x02	; 2
    43ec:	41 e0       	ldi	r20, 0x01	; 1
    43ee:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    43f2:	88 2f       	mov	r24, r24
    43f4:	90 e0       	ldi	r25, 0x00	; 0
    43f6:	00 24       	eor	r0, r0
    43f8:	96 95       	lsr	r25
    43fa:	87 95       	ror	r24
    43fc:	07 94       	ror	r0
    43fe:	96 95       	lsr	r25
    4400:	87 95       	ror	r24
    4402:	07 94       	ror	r0
    4404:	98 2f       	mov	r25, r24
    4406:	80 2d       	mov	r24, r0
    4408:	9c 01       	movw	r18, r24
    440a:	44 27       	eor	r20, r20
    440c:	37 fd       	sbrc	r19, 7
    440e:	40 95       	com	r20
    4410:	54 2f       	mov	r21, r20
    4412:	8a 81       	ldd	r24, Y+2	; 0x02
    4414:	9b 81       	ldd	r25, Y+3	; 0x03
    4416:	ac 81       	ldd	r26, Y+4	; 0x04
    4418:	bd 81       	ldd	r27, Y+5	; 0x05
    441a:	82 2b       	or	r24, r18
    441c:	93 2b       	or	r25, r19
    441e:	a4 2b       	or	r26, r20
    4420:	b5 2b       	or	r27, r21
    4422:	8a 83       	std	Y+2, r24	; 0x02
    4424:	9b 83       	std	Y+3, r25	; 0x03
    4426:	ac 83       	std	Y+4, r26	; 0x04
    4428:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (DIO_enuSetPinDirection(SEG_DPORT, SEG_DPIN, DIO_u8OUTPUT) << 9);
    442a:	81 e0       	ldi	r24, 0x01	; 1
    442c:	60 e0       	ldi	r22, 0x00	; 0
    442e:	41 e0       	ldi	r20, 0x01	; 1
    4430:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    4434:	88 2f       	mov	r24, r24
    4436:	90 e0       	ldi	r25, 0x00	; 0
    4438:	98 2f       	mov	r25, r24
    443a:	88 27       	eor	r24, r24
    443c:	99 0f       	add	r25, r25
    443e:	9c 01       	movw	r18, r24
    4440:	44 27       	eor	r20, r20
    4442:	37 fd       	sbrc	r19, 7
    4444:	40 95       	com	r20
    4446:	54 2f       	mov	r21, r20
    4448:	8a 81       	ldd	r24, Y+2	; 0x02
    444a:	9b 81       	ldd	r25, Y+3	; 0x03
    444c:	ac 81       	ldd	r26, Y+4	; 0x04
    444e:	bd 81       	ldd	r27, Y+5	; 0x05
    4450:	82 2b       	or	r24, r18
    4452:	93 2b       	or	r25, r19
    4454:	a4 2b       	or	r26, r20
    4456:	b5 2b       	or	r27, r21
    4458:	8a 83       	std	Y+2, r24	; 0x02
    445a:	9b 83       	std	Y+3, r25	; 0x03
    445c:	ac 83       	std	Y+4, r26	; 0x04
    445e:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (DIO_enuSetPinDirection(SEG_EPORT, SEG_EPIN, DIO_u8OUTPUT) << 12);
    4460:	81 e0       	ldi	r24, 0x01	; 1
    4462:	61 e0       	ldi	r22, 0x01	; 1
    4464:	41 e0       	ldi	r20, 0x01	; 1
    4466:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    446a:	88 2f       	mov	r24, r24
    446c:	90 e0       	ldi	r25, 0x00	; 0
    446e:	98 2f       	mov	r25, r24
    4470:	88 27       	eor	r24, r24
    4472:	92 95       	swap	r25
    4474:	90 7f       	andi	r25, 0xF0	; 240
    4476:	9c 01       	movw	r18, r24
    4478:	44 27       	eor	r20, r20
    447a:	37 fd       	sbrc	r19, 7
    447c:	40 95       	com	r20
    447e:	54 2f       	mov	r21, r20
    4480:	8a 81       	ldd	r24, Y+2	; 0x02
    4482:	9b 81       	ldd	r25, Y+3	; 0x03
    4484:	ac 81       	ldd	r26, Y+4	; 0x04
    4486:	bd 81       	ldd	r27, Y+5	; 0x05
    4488:	82 2b       	or	r24, r18
    448a:	93 2b       	or	r25, r19
    448c:	a4 2b       	or	r26, r20
    448e:	b5 2b       	or	r27, r21
    4490:	8a 83       	std	Y+2, r24	; 0x02
    4492:	9b 83       	std	Y+3, r25	; 0x03
    4494:	ac 83       	std	Y+4, r26	; 0x04
    4496:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (((u32)DIO_enuSetPinDirection(SEG_GPORT, SEG_GPIN, DIO_u8OUTPUT)) << 15);
    4498:	81 e0       	ldi	r24, 0x01	; 1
    449a:	63 e0       	ldi	r22, 0x03	; 3
    449c:	41 e0       	ldi	r20, 0x01	; 1
    449e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    44a2:	88 2f       	mov	r24, r24
    44a4:	90 e0       	ldi	r25, 0x00	; 0
    44a6:	a0 e0       	ldi	r26, 0x00	; 0
    44a8:	b0 e0       	ldi	r27, 0x00	; 0
    44aa:	9c 01       	movw	r18, r24
    44ac:	ad 01       	movw	r20, r26
    44ae:	01 2e       	mov	r0, r17
    44b0:	1f e0       	ldi	r17, 0x0F	; 15
    44b2:	22 0f       	add	r18, r18
    44b4:	33 1f       	adc	r19, r19
    44b6:	44 1f       	adc	r20, r20
    44b8:	55 1f       	adc	r21, r21
    44ba:	1a 95       	dec	r17
    44bc:	d1 f7       	brne	.-12     	; 0x44b2 <SSD_enuInit+0x150>
    44be:	10 2d       	mov	r17, r0
    44c0:	8a 81       	ldd	r24, Y+2	; 0x02
    44c2:	9b 81       	ldd	r25, Y+3	; 0x03
    44c4:	ac 81       	ldd	r26, Y+4	; 0x04
    44c6:	bd 81       	ldd	r27, Y+5	; 0x05
    44c8:	82 2b       	or	r24, r18
    44ca:	93 2b       	or	r25, r19
    44cc:	a4 2b       	or	r26, r20
    44ce:	b5 2b       	or	r27, r21
    44d0:	8a 83       	std	Y+2, r24	; 0x02
    44d2:	9b 83       	std	Y+3, r25	; 0x03
    44d4:	ac 83       	std	Y+4, r26	; 0x04
    44d6:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (((u32)DIO_enuSetPinDirection(SEG_GPORT, SEG_GPIN, DIO_u8OUTPUT)) << 18);
    44d8:	81 e0       	ldi	r24, 0x01	; 1
    44da:	63 e0       	ldi	r22, 0x03	; 3
    44dc:	41 e0       	ldi	r20, 0x01	; 1
    44de:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    44e2:	88 2f       	mov	r24, r24
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	a0 e0       	ldi	r26, 0x00	; 0
    44e8:	b0 e0       	ldi	r27, 0x00	; 0
    44ea:	9c 01       	movw	r18, r24
    44ec:	ad 01       	movw	r20, r26
    44ee:	01 2e       	mov	r0, r17
    44f0:	12 e1       	ldi	r17, 0x12	; 18
    44f2:	22 0f       	add	r18, r18
    44f4:	33 1f       	adc	r19, r19
    44f6:	44 1f       	adc	r20, r20
    44f8:	55 1f       	adc	r21, r21
    44fa:	1a 95       	dec	r17
    44fc:	d1 f7       	brne	.-12     	; 0x44f2 <SSD_enuInit+0x190>
    44fe:	10 2d       	mov	r17, r0
    4500:	8a 81       	ldd	r24, Y+2	; 0x02
    4502:	9b 81       	ldd	r25, Y+3	; 0x03
    4504:	ac 81       	ldd	r26, Y+4	; 0x04
    4506:	bd 81       	ldd	r27, Y+5	; 0x05
    4508:	82 2b       	or	r24, r18
    450a:	93 2b       	or	r25, r19
    450c:	a4 2b       	or	r26, r20
    450e:	b5 2b       	or	r27, r21
    4510:	8a 83       	std	Y+2, r24	; 0x02
    4512:	9b 83       	std	Y+3, r25	; 0x03
    4514:	ac 83       	std	Y+4, r26	; 0x04
    4516:	bd 83       	std	Y+5, r27	; 0x05
	 *  	0000 0000 0000 0100 1001 0010 0100 1001
	 * */

	//Because we work as pre compile config we will use #if
	#if SEG_CMN_PIN <= DIO_u8PIN7 && SEG_CMN_PORT <= DIO_u8PORTD
		Local_u32Check |= (((u32)DIO_enuSetPinDirection(SEG_CMN_PORT, SEG_CMN_PIN, DIO_u8OUTPUT)) << 21);
    4518:	82 e0       	ldi	r24, 0x02	; 2
    451a:	62 e0       	ldi	r22, 0x02	; 2
    451c:	41 e0       	ldi	r20, 0x01	; 1
    451e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    4522:	88 2f       	mov	r24, r24
    4524:	90 e0       	ldi	r25, 0x00	; 0
    4526:	a0 e0       	ldi	r26, 0x00	; 0
    4528:	b0 e0       	ldi	r27, 0x00	; 0
    452a:	9c 01       	movw	r18, r24
    452c:	ad 01       	movw	r20, r26
    452e:	01 2e       	mov	r0, r17
    4530:	15 e1       	ldi	r17, 0x15	; 21
    4532:	22 0f       	add	r18, r18
    4534:	33 1f       	adc	r19, r19
    4536:	44 1f       	adc	r20, r20
    4538:	55 1f       	adc	r21, r21
    453a:	1a 95       	dec	r17
    453c:	d1 f7       	brne	.-12     	; 0x4532 <SSD_enuInit+0x1d0>
    453e:	10 2d       	mov	r17, r0
    4540:	8a 81       	ldd	r24, Y+2	; 0x02
    4542:	9b 81       	ldd	r25, Y+3	; 0x03
    4544:	ac 81       	ldd	r26, Y+4	; 0x04
    4546:	bd 81       	ldd	r27, Y+5	; 0x05
    4548:	82 2b       	or	r24, r18
    454a:	93 2b       	or	r25, r19
    454c:	a4 2b       	or	r26, r20
    454e:	b5 2b       	or	r27, r21
    4550:	8a 83       	std	Y+2, r24	; 0x02
    4552:	9b 83       	std	Y+3, r25	; 0x03
    4554:	ac 83       	std	Y+4, r26	; 0x04
    4556:	bd 83       	std	Y+5, r27	; 0x05
	#else
		#error "Your Common pin has a wrong selection!"
	#endif

	#if SEG_DOT_PIN <= DIO_u8PIN7 && SEG_DOT_PORT <= DIO_u8PORTD
		Local_u32Check |= (((u32)DIO_enuSetPinDirection(SEG_DOT_PORT, SEG_DOT_PIN, DIO_u8OUTPUT)) << 24);
    4558:	82 e0       	ldi	r24, 0x02	; 2
    455a:	62 e0       	ldi	r22, 0x02	; 2
    455c:	41 e0       	ldi	r20, 0x01	; 1
    455e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    4562:	88 2f       	mov	r24, r24
    4564:	90 e0       	ldi	r25, 0x00	; 0
    4566:	a0 e0       	ldi	r26, 0x00	; 0
    4568:	b0 e0       	ldi	r27, 0x00	; 0
    456a:	58 2f       	mov	r21, r24
    456c:	44 27       	eor	r20, r20
    456e:	33 27       	eor	r19, r19
    4570:	22 27       	eor	r18, r18
    4572:	8a 81       	ldd	r24, Y+2	; 0x02
    4574:	9b 81       	ldd	r25, Y+3	; 0x03
    4576:	ac 81       	ldd	r26, Y+4	; 0x04
    4578:	bd 81       	ldd	r27, Y+5	; 0x05
    457a:	82 2b       	or	r24, r18
    457c:	93 2b       	or	r25, r19
    457e:	a4 2b       	or	r26, r20
    4580:	b5 2b       	or	r27, r21
    4582:	8a 83       	std	Y+2, r24	; 0x02
    4584:	9b 83       	std	Y+3, r25	; 0x03
    4586:	ac 83       	std	Y+4, r26	; 0x04
    4588:	bd 83       	std	Y+5, r27	; 0x05
	#else
		#error "Your DOT pin has a wrong selection!"
	#endif


	for(Local_u8Iterator = 0; Local_u8Iterator < 27; Local_u8Iterator += 3)
    458a:	19 82       	std	Y+1, r1	; 0x01
    458c:	1e c0       	rjmp	.+60     	; 0x45ca <SSD_enuInit+0x268>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
    458e:	89 81       	ldd	r24, Y+1	; 0x01
    4590:	28 2f       	mov	r18, r24
    4592:	30 e0       	ldi	r19, 0x00	; 0
    4594:	8a 81       	ldd	r24, Y+2	; 0x02
    4596:	9b 81       	ldd	r25, Y+3	; 0x03
    4598:	ac 81       	ldd	r26, Y+4	; 0x04
    459a:	bd 81       	ldd	r27, Y+5	; 0x05
    459c:	02 2e       	mov	r0, r18
    459e:	04 c0       	rjmp	.+8      	; 0x45a8 <SSD_enuInit+0x246>
    45a0:	b6 95       	lsr	r27
    45a2:	a7 95       	ror	r26
    45a4:	97 95       	ror	r25
    45a6:	87 95       	ror	r24
    45a8:	0a 94       	dec	r0
    45aa:	d2 f7       	brpl	.-12     	; 0x45a0 <SSD_enuInit+0x23e>
    45ac:	87 70       	andi	r24, 0x07	; 7
    45ae:	90 70       	andi	r25, 0x00	; 0
    45b0:	a0 70       	andi	r26, 0x00	; 0
    45b2:	b0 70       	andi	r27, 0x00	; 0
    45b4:	81 30       	cpi	r24, 0x01	; 1
    45b6:	91 05       	cpc	r25, r1
    45b8:	a1 05       	cpc	r26, r1
    45ba:	b1 05       	cpc	r27, r1
    45bc:	19 f0       	breq	.+6      	; 0x45c4 <SSD_enuInit+0x262>
		{
			return Local_enuErrorState;
    45be:	8e 81       	ldd	r24, Y+6	; 0x06
    45c0:	8f 83       	std	Y+7, r24	; 0x07
    45c2:	0a c0       	rjmp	.+20     	; 0x45d8 <SSD_enuInit+0x276>
	#else
		#error "Your DOT pin has a wrong selection!"
	#endif


	for(Local_u8Iterator = 0; Local_u8Iterator < 27; Local_u8Iterator += 3)
    45c4:	89 81       	ldd	r24, Y+1	; 0x01
    45c6:	8d 5f       	subi	r24, 0xFD	; 253
    45c8:	89 83       	std	Y+1, r24	; 0x01
    45ca:	89 81       	ldd	r24, Y+1	; 0x01
    45cc:	8b 31       	cpi	r24, 0x1B	; 27
    45ce:	f8 f2       	brcs	.-66     	; 0x458e <SSD_enuInit+0x22c>
		{
			return Local_enuErrorState;
		}
	}

	Local_enuErrorState = ES_OK;
    45d0:	81 e0       	ldi	r24, 0x01	; 1
    45d2:	8e 83       	std	Y+6, r24	; 0x06

	return Local_enuErrorState;
    45d4:	8e 81       	ldd	r24, Y+6	; 0x06
    45d6:	8f 83       	std	Y+7, r24	; 0x07
    45d8:	8f 81       	ldd	r24, Y+7	; 0x07
}
    45da:	27 96       	adiw	r28, 0x07	; 7
    45dc:	0f b6       	in	r0, 0x3f	; 63
    45de:	f8 94       	cli
    45e0:	de bf       	out	0x3e, r29	; 62
    45e2:	0f be       	out	0x3f, r0	; 63
    45e4:	cd bf       	out	0x3d, r28	; 61
    45e6:	cf 91       	pop	r28
    45e8:	df 91       	pop	r29
    45ea:	08 95       	ret

000045ec <SSD_enuDisplayNum>:

ES_t SSD_enuDisplayNum(u8 Copy_u8Number)
{
    45ec:	df 93       	push	r29
    45ee:	cf 93       	push	r28
    45f0:	cd b7       	in	r28, 0x3d	; 61
    45f2:	de b7       	in	r29, 0x3e	; 62
    45f4:	28 97       	sbiw	r28, 0x08	; 8
    45f6:	0f b6       	in	r0, 0x3f	; 63
    45f8:	f8 94       	cli
    45fa:	de bf       	out	0x3e, r29	; 62
    45fc:	0f be       	out	0x3f, r0	; 63
    45fe:	cd bf       	out	0x3d, r28	; 61
    4600:	8f 83       	std	Y+7, r24	; 0x07
	ES_t Local_enuErrorState = ES_NOK;
    4602:	1e 82       	std	Y+6, r1	; 0x06

	u32 Local_u32Check = 0;
    4604:	1a 82       	std	Y+2, r1	; 0x02
    4606:	1b 82       	std	Y+3, r1	; 0x03
    4608:	1c 82       	std	Y+4, r1	; 0x04
    460a:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8Iterator = 0;
    460c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Number < 10)
    460e:	8f 81       	ldd	r24, Y+7	; 0x07
    4610:	8a 30       	cpi	r24, 0x0A	; 10
    4612:	08 f0       	brcs	.+2      	; 0x4616 <SSD_enuDisplayNum+0x2a>
    4614:	1b c1       	rjmp	.+566    	; 0x484c <SSD_enuDisplayNum+0x260>
	{
		#if SEG_TYPE == COMMON_CATHODE
			Local_u32Check |= (DIO_enuSetPinValue(SEG_APORT, SEG_APIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 0) & 1)) << 0);
    4616:	8f 81       	ldd	r24, Y+7	; 0x07
    4618:	88 2f       	mov	r24, r24
    461a:	90 e0       	ldi	r25, 0x00	; 0
    461c:	fc 01       	movw	r30, r24
    461e:	ef 54       	subi	r30, 0x4F	; 79
    4620:	fe 4f       	sbci	r31, 0xFE	; 254
    4622:	80 81       	ld	r24, Z
    4624:	98 2f       	mov	r25, r24
    4626:	91 70       	andi	r25, 0x01	; 1
    4628:	80 e0       	ldi	r24, 0x00	; 0
    462a:	60 e0       	ldi	r22, 0x00	; 0
    462c:	49 2f       	mov	r20, r25
    462e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4632:	28 2f       	mov	r18, r24
    4634:	30 e0       	ldi	r19, 0x00	; 0
    4636:	40 e0       	ldi	r20, 0x00	; 0
    4638:	50 e0       	ldi	r21, 0x00	; 0
    463a:	8a 81       	ldd	r24, Y+2	; 0x02
    463c:	9b 81       	ldd	r25, Y+3	; 0x03
    463e:	ac 81       	ldd	r26, Y+4	; 0x04
    4640:	bd 81       	ldd	r27, Y+5	; 0x05
    4642:	82 2b       	or	r24, r18
    4644:	93 2b       	or	r25, r19
    4646:	a4 2b       	or	r26, r20
    4648:	b5 2b       	or	r27, r21
    464a:	8a 83       	std	Y+2, r24	; 0x02
    464c:	9b 83       	std	Y+3, r25	; 0x03
    464e:	ac 83       	std	Y+4, r26	; 0x04
    4650:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (DIO_enuSetPinValue(SEG_BPORT, SEG_BPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 1) & 1)) << 3);
    4652:	8f 81       	ldd	r24, Y+7	; 0x07
    4654:	88 2f       	mov	r24, r24
    4656:	90 e0       	ldi	r25, 0x00	; 0
    4658:	fc 01       	movw	r30, r24
    465a:	ef 54       	subi	r30, 0x4F	; 79
    465c:	fe 4f       	sbci	r31, 0xFE	; 254
    465e:	80 81       	ld	r24, Z
    4660:	86 95       	lsr	r24
    4662:	98 2f       	mov	r25, r24
    4664:	91 70       	andi	r25, 0x01	; 1
    4666:	80 e0       	ldi	r24, 0x00	; 0
    4668:	61 e0       	ldi	r22, 0x01	; 1
    466a:	49 2f       	mov	r20, r25
    466c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4670:	88 2f       	mov	r24, r24
    4672:	90 e0       	ldi	r25, 0x00	; 0
    4674:	88 0f       	add	r24, r24
    4676:	99 1f       	adc	r25, r25
    4678:	88 0f       	add	r24, r24
    467a:	99 1f       	adc	r25, r25
    467c:	88 0f       	add	r24, r24
    467e:	99 1f       	adc	r25, r25
    4680:	9c 01       	movw	r18, r24
    4682:	44 27       	eor	r20, r20
    4684:	37 fd       	sbrc	r19, 7
    4686:	40 95       	com	r20
    4688:	54 2f       	mov	r21, r20
    468a:	8a 81       	ldd	r24, Y+2	; 0x02
    468c:	9b 81       	ldd	r25, Y+3	; 0x03
    468e:	ac 81       	ldd	r26, Y+4	; 0x04
    4690:	bd 81       	ldd	r27, Y+5	; 0x05
    4692:	82 2b       	or	r24, r18
    4694:	93 2b       	or	r25, r19
    4696:	a4 2b       	or	r26, r20
    4698:	b5 2b       	or	r27, r21
    469a:	8a 83       	std	Y+2, r24	; 0x02
    469c:	9b 83       	std	Y+3, r25	; 0x03
    469e:	ac 83       	std	Y+4, r26	; 0x04
    46a0:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (DIO_enuSetPinValue(SEG_CPORT, SEG_CPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 2) & 1)) << 6);
    46a2:	8f 81       	ldd	r24, Y+7	; 0x07
    46a4:	88 2f       	mov	r24, r24
    46a6:	90 e0       	ldi	r25, 0x00	; 0
    46a8:	fc 01       	movw	r30, r24
    46aa:	ef 54       	subi	r30, 0x4F	; 79
    46ac:	fe 4f       	sbci	r31, 0xFE	; 254
    46ae:	80 81       	ld	r24, Z
    46b0:	86 95       	lsr	r24
    46b2:	86 95       	lsr	r24
    46b4:	98 2f       	mov	r25, r24
    46b6:	91 70       	andi	r25, 0x01	; 1
    46b8:	80 e0       	ldi	r24, 0x00	; 0
    46ba:	62 e0       	ldi	r22, 0x02	; 2
    46bc:	49 2f       	mov	r20, r25
    46be:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    46c2:	88 2f       	mov	r24, r24
    46c4:	90 e0       	ldi	r25, 0x00	; 0
    46c6:	00 24       	eor	r0, r0
    46c8:	96 95       	lsr	r25
    46ca:	87 95       	ror	r24
    46cc:	07 94       	ror	r0
    46ce:	96 95       	lsr	r25
    46d0:	87 95       	ror	r24
    46d2:	07 94       	ror	r0
    46d4:	98 2f       	mov	r25, r24
    46d6:	80 2d       	mov	r24, r0
    46d8:	9c 01       	movw	r18, r24
    46da:	44 27       	eor	r20, r20
    46dc:	37 fd       	sbrc	r19, 7
    46de:	40 95       	com	r20
    46e0:	54 2f       	mov	r21, r20
    46e2:	8a 81       	ldd	r24, Y+2	; 0x02
    46e4:	9b 81       	ldd	r25, Y+3	; 0x03
    46e6:	ac 81       	ldd	r26, Y+4	; 0x04
    46e8:	bd 81       	ldd	r27, Y+5	; 0x05
    46ea:	82 2b       	or	r24, r18
    46ec:	93 2b       	or	r25, r19
    46ee:	a4 2b       	or	r26, r20
    46f0:	b5 2b       	or	r27, r21
    46f2:	8a 83       	std	Y+2, r24	; 0x02
    46f4:	9b 83       	std	Y+3, r25	; 0x03
    46f6:	ac 83       	std	Y+4, r26	; 0x04
    46f8:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (DIO_enuSetPinValue(SEG_DPORT, SEG_DPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 3) & 1)) << 9);
    46fa:	8f 81       	ldd	r24, Y+7	; 0x07
    46fc:	88 2f       	mov	r24, r24
    46fe:	90 e0       	ldi	r25, 0x00	; 0
    4700:	fc 01       	movw	r30, r24
    4702:	ef 54       	subi	r30, 0x4F	; 79
    4704:	fe 4f       	sbci	r31, 0xFE	; 254
    4706:	80 81       	ld	r24, Z
    4708:	86 95       	lsr	r24
    470a:	86 95       	lsr	r24
    470c:	86 95       	lsr	r24
    470e:	98 2f       	mov	r25, r24
    4710:	91 70       	andi	r25, 0x01	; 1
    4712:	81 e0       	ldi	r24, 0x01	; 1
    4714:	60 e0       	ldi	r22, 0x00	; 0
    4716:	49 2f       	mov	r20, r25
    4718:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    471c:	88 2f       	mov	r24, r24
    471e:	90 e0       	ldi	r25, 0x00	; 0
    4720:	98 2f       	mov	r25, r24
    4722:	88 27       	eor	r24, r24
    4724:	99 0f       	add	r25, r25
    4726:	9c 01       	movw	r18, r24
    4728:	44 27       	eor	r20, r20
    472a:	37 fd       	sbrc	r19, 7
    472c:	40 95       	com	r20
    472e:	54 2f       	mov	r21, r20
    4730:	8a 81       	ldd	r24, Y+2	; 0x02
    4732:	9b 81       	ldd	r25, Y+3	; 0x03
    4734:	ac 81       	ldd	r26, Y+4	; 0x04
    4736:	bd 81       	ldd	r27, Y+5	; 0x05
    4738:	82 2b       	or	r24, r18
    473a:	93 2b       	or	r25, r19
    473c:	a4 2b       	or	r26, r20
    473e:	b5 2b       	or	r27, r21
    4740:	8a 83       	std	Y+2, r24	; 0x02
    4742:	9b 83       	std	Y+3, r25	; 0x03
    4744:	ac 83       	std	Y+4, r26	; 0x04
    4746:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (DIO_enuSetPinValue(SEG_EPORT, SEG_EPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 4) & 1)) << 12);
    4748:	8f 81       	ldd	r24, Y+7	; 0x07
    474a:	88 2f       	mov	r24, r24
    474c:	90 e0       	ldi	r25, 0x00	; 0
    474e:	fc 01       	movw	r30, r24
    4750:	ef 54       	subi	r30, 0x4F	; 79
    4752:	fe 4f       	sbci	r31, 0xFE	; 254
    4754:	80 81       	ld	r24, Z
    4756:	82 95       	swap	r24
    4758:	8f 70       	andi	r24, 0x0F	; 15
    475a:	98 2f       	mov	r25, r24
    475c:	91 70       	andi	r25, 0x01	; 1
    475e:	81 e0       	ldi	r24, 0x01	; 1
    4760:	61 e0       	ldi	r22, 0x01	; 1
    4762:	49 2f       	mov	r20, r25
    4764:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4768:	88 2f       	mov	r24, r24
    476a:	90 e0       	ldi	r25, 0x00	; 0
    476c:	98 2f       	mov	r25, r24
    476e:	88 27       	eor	r24, r24
    4770:	92 95       	swap	r25
    4772:	90 7f       	andi	r25, 0xF0	; 240
    4774:	9c 01       	movw	r18, r24
    4776:	44 27       	eor	r20, r20
    4778:	37 fd       	sbrc	r19, 7
    477a:	40 95       	com	r20
    477c:	54 2f       	mov	r21, r20
    477e:	8a 81       	ldd	r24, Y+2	; 0x02
    4780:	9b 81       	ldd	r25, Y+3	; 0x03
    4782:	ac 81       	ldd	r26, Y+4	; 0x04
    4784:	bd 81       	ldd	r27, Y+5	; 0x05
    4786:	82 2b       	or	r24, r18
    4788:	93 2b       	or	r25, r19
    478a:	a4 2b       	or	r26, r20
    478c:	b5 2b       	or	r27, r21
    478e:	8a 83       	std	Y+2, r24	; 0x02
    4790:	9b 83       	std	Y+3, r25	; 0x03
    4792:	ac 83       	std	Y+4, r26	; 0x04
    4794:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_FPORT, SEG_FPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 5) & 1))) << 15);
    4796:	8f 81       	ldd	r24, Y+7	; 0x07
    4798:	88 2f       	mov	r24, r24
    479a:	90 e0       	ldi	r25, 0x00	; 0
    479c:	fc 01       	movw	r30, r24
    479e:	ef 54       	subi	r30, 0x4F	; 79
    47a0:	fe 4f       	sbci	r31, 0xFE	; 254
    47a2:	80 81       	ld	r24, Z
    47a4:	82 95       	swap	r24
    47a6:	86 95       	lsr	r24
    47a8:	87 70       	andi	r24, 0x07	; 7
    47aa:	98 2f       	mov	r25, r24
    47ac:	91 70       	andi	r25, 0x01	; 1
    47ae:	81 e0       	ldi	r24, 0x01	; 1
    47b0:	62 e0       	ldi	r22, 0x02	; 2
    47b2:	49 2f       	mov	r20, r25
    47b4:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    47b8:	88 2f       	mov	r24, r24
    47ba:	90 e0       	ldi	r25, 0x00	; 0
    47bc:	a0 e0       	ldi	r26, 0x00	; 0
    47be:	b0 e0       	ldi	r27, 0x00	; 0
    47c0:	9c 01       	movw	r18, r24
    47c2:	ad 01       	movw	r20, r26
    47c4:	01 2e       	mov	r0, r17
    47c6:	1f e0       	ldi	r17, 0x0F	; 15
    47c8:	22 0f       	add	r18, r18
    47ca:	33 1f       	adc	r19, r19
    47cc:	44 1f       	adc	r20, r20
    47ce:	55 1f       	adc	r21, r21
    47d0:	1a 95       	dec	r17
    47d2:	d1 f7       	brne	.-12     	; 0x47c8 <SSD_enuDisplayNum+0x1dc>
    47d4:	10 2d       	mov	r17, r0
    47d6:	8a 81       	ldd	r24, Y+2	; 0x02
    47d8:	9b 81       	ldd	r25, Y+3	; 0x03
    47da:	ac 81       	ldd	r26, Y+4	; 0x04
    47dc:	bd 81       	ldd	r27, Y+5	; 0x05
    47de:	82 2b       	or	r24, r18
    47e0:	93 2b       	or	r25, r19
    47e2:	a4 2b       	or	r26, r20
    47e4:	b5 2b       	or	r27, r21
    47e6:	8a 83       	std	Y+2, r24	; 0x02
    47e8:	9b 83       	std	Y+3, r25	; 0x03
    47ea:	ac 83       	std	Y+4, r26	; 0x04
    47ec:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_GPORT, SEG_GPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 6) & 1))) << 18);
    47ee:	8f 81       	ldd	r24, Y+7	; 0x07
    47f0:	88 2f       	mov	r24, r24
    47f2:	90 e0       	ldi	r25, 0x00	; 0
    47f4:	fc 01       	movw	r30, r24
    47f6:	ef 54       	subi	r30, 0x4F	; 79
    47f8:	fe 4f       	sbci	r31, 0xFE	; 254
    47fa:	80 81       	ld	r24, Z
    47fc:	82 95       	swap	r24
    47fe:	86 95       	lsr	r24
    4800:	86 95       	lsr	r24
    4802:	83 70       	andi	r24, 0x03	; 3
    4804:	98 2f       	mov	r25, r24
    4806:	91 70       	andi	r25, 0x01	; 1
    4808:	81 e0       	ldi	r24, 0x01	; 1
    480a:	63 e0       	ldi	r22, 0x03	; 3
    480c:	49 2f       	mov	r20, r25
    480e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4812:	88 2f       	mov	r24, r24
    4814:	90 e0       	ldi	r25, 0x00	; 0
    4816:	a0 e0       	ldi	r26, 0x00	; 0
    4818:	b0 e0       	ldi	r27, 0x00	; 0
    481a:	9c 01       	movw	r18, r24
    481c:	ad 01       	movw	r20, r26
    481e:	01 2e       	mov	r0, r17
    4820:	12 e1       	ldi	r17, 0x12	; 18
    4822:	22 0f       	add	r18, r18
    4824:	33 1f       	adc	r19, r19
    4826:	44 1f       	adc	r20, r20
    4828:	55 1f       	adc	r21, r21
    482a:	1a 95       	dec	r17
    482c:	d1 f7       	brne	.-12     	; 0x4822 <SSD_enuDisplayNum+0x236>
    482e:	10 2d       	mov	r17, r0
    4830:	8a 81       	ldd	r24, Y+2	; 0x02
    4832:	9b 81       	ldd	r25, Y+3	; 0x03
    4834:	ac 81       	ldd	r26, Y+4	; 0x04
    4836:	bd 81       	ldd	r27, Y+5	; 0x05
    4838:	82 2b       	or	r24, r18
    483a:	93 2b       	or	r25, r19
    483c:	a4 2b       	or	r26, r20
    483e:	b5 2b       	or	r27, r21
    4840:	8a 83       	std	Y+2, r24	; 0x02
    4842:	9b 83       	std	Y+3, r25	; 0x03
    4844:	ac 83       	std	Y+4, r26	; 0x04
    4846:	bd 83       	std	Y+5, r27	; 0x05
	else
	{
		return ES_OUT_OF_RANGE;
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    4848:	19 82       	std	Y+1, r1	; 0x01
    484a:	21 c0       	rjmp	.+66     	; 0x488e <SSD_enuDisplayNum+0x2a2>
			#error "Your type selection is invalid!"
		#endif
	}
	else
	{
		return ES_OUT_OF_RANGE;
    484c:	83 e0       	ldi	r24, 0x03	; 3
    484e:	88 87       	std	Y+8, r24	; 0x08
    4850:	25 c0       	rjmp	.+74     	; 0x489c <SSD_enuDisplayNum+0x2b0>
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
    4852:	89 81       	ldd	r24, Y+1	; 0x01
    4854:	28 2f       	mov	r18, r24
    4856:	30 e0       	ldi	r19, 0x00	; 0
    4858:	8a 81       	ldd	r24, Y+2	; 0x02
    485a:	9b 81       	ldd	r25, Y+3	; 0x03
    485c:	ac 81       	ldd	r26, Y+4	; 0x04
    485e:	bd 81       	ldd	r27, Y+5	; 0x05
    4860:	02 2e       	mov	r0, r18
    4862:	04 c0       	rjmp	.+8      	; 0x486c <SSD_enuDisplayNum+0x280>
    4864:	b6 95       	lsr	r27
    4866:	a7 95       	ror	r26
    4868:	97 95       	ror	r25
    486a:	87 95       	ror	r24
    486c:	0a 94       	dec	r0
    486e:	d2 f7       	brpl	.-12     	; 0x4864 <SSD_enuDisplayNum+0x278>
    4870:	87 70       	andi	r24, 0x07	; 7
    4872:	90 70       	andi	r25, 0x00	; 0
    4874:	a0 70       	andi	r26, 0x00	; 0
    4876:	b0 70       	andi	r27, 0x00	; 0
    4878:	81 30       	cpi	r24, 0x01	; 1
    487a:	91 05       	cpc	r25, r1
    487c:	a1 05       	cpc	r26, r1
    487e:	b1 05       	cpc	r27, r1
    4880:	19 f0       	breq	.+6      	; 0x4888 <SSD_enuDisplayNum+0x29c>
		{
			return Local_enuErrorState;
    4882:	8e 81       	ldd	r24, Y+6	; 0x06
    4884:	88 87       	std	Y+8, r24	; 0x08
    4886:	0a c0       	rjmp	.+20     	; 0x489c <SSD_enuDisplayNum+0x2b0>
	else
	{
		return ES_OUT_OF_RANGE;
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    4888:	89 81       	ldd	r24, Y+1	; 0x01
    488a:	8d 5f       	subi	r24, 0xFD	; 253
    488c:	89 83       	std	Y+1, r24	; 0x01
    488e:	89 81       	ldd	r24, Y+1	; 0x01
    4890:	85 31       	cpi	r24, 0x15	; 21
    4892:	f8 f2       	brcs	.-66     	; 0x4852 <SSD_enuDisplayNum+0x266>
		{
			return Local_enuErrorState;
		}
	}

	Local_enuErrorState = ES_OK;
    4894:	81 e0       	ldi	r24, 0x01	; 1
    4896:	8e 83       	std	Y+6, r24	; 0x06

	return Local_enuErrorState;
    4898:	8e 81       	ldd	r24, Y+6	; 0x06
    489a:	88 87       	std	Y+8, r24	; 0x08
    489c:	88 85       	ldd	r24, Y+8	; 0x08
}
    489e:	28 96       	adiw	r28, 0x08	; 8
    48a0:	0f b6       	in	r0, 0x3f	; 63
    48a2:	f8 94       	cli
    48a4:	de bf       	out	0x3e, r29	; 62
    48a6:	0f be       	out	0x3f, r0	; 63
    48a8:	cd bf       	out	0x3d, r28	; 61
    48aa:	cf 91       	pop	r28
    48ac:	df 91       	pop	r29
    48ae:	08 95       	ret

000048b0 <SSD_enuEnableCommon>:

ES_t SSD_enuEnableCommon(void)
{
    48b0:	df 93       	push	r29
    48b2:	cf 93       	push	r28
    48b4:	0f 92       	push	r0
    48b6:	cd b7       	in	r28, 0x3d	; 61
    48b8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    48ba:	19 82       	std	Y+1, r1	; 0x01

	#if SEG_CMN_PIN <= DIO_u8PIN7 && SEG_CMN_PORT <= DIO_u8PORTD
		#if SEG_TYPE == COMMON_CATHODE
			Local_enuErrorState = DIO_enuSetPinValue(SEG_CMN_PORT, SEG_CMN_PIN, DIO_u8LOW);
    48bc:	82 e0       	ldi	r24, 0x02	; 2
    48be:	62 e0       	ldi	r22, 0x02	; 2
    48c0:	40 e0       	ldi	r20, 0x00	; 0
    48c2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    48c6:	89 83       	std	Y+1, r24	; 0x01

	#else
		#error "Your Common pin has a wrong selection!"
	#endif

	return Local_enuErrorState;
    48c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    48ca:	0f 90       	pop	r0
    48cc:	cf 91       	pop	r28
    48ce:	df 91       	pop	r29
    48d0:	08 95       	ret

000048d2 <SSD_enuDisableCommon>:

ES_t SSD_enuDisableCommon(void)
{
    48d2:	df 93       	push	r29
    48d4:	cf 93       	push	r28
    48d6:	0f 92       	push	r0
    48d8:	cd b7       	in	r28, 0x3d	; 61
    48da:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    48dc:	19 82       	std	Y+1, r1	; 0x01

	#if SEG_CMN_PIN <= DIO_u8PIN7 && SEG_CMN_PORT <= DIO_u8PORTD
		#if SEG_TYPE == COMMON_CATHODE
			Local_enuErrorState = DIO_enuSetPinValue(SEG_CMN_PORT, SEG_CMN_PIN, DIO_u8HIGH);
    48de:	82 e0       	ldi	r24, 0x02	; 2
    48e0:	62 e0       	ldi	r22, 0x02	; 2
    48e2:	41 e0       	ldi	r20, 0x01	; 1
    48e4:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    48e8:	89 83       	std	Y+1, r24	; 0x01

	#else
		#error "Your Common pin has a wrong selection!"
	#endif

	return Local_enuErrorState;
    48ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    48ec:	0f 90       	pop	r0
    48ee:	cf 91       	pop	r28
    48f0:	df 91       	pop	r29
    48f2:	08 95       	ret

000048f4 <SSD_enuEnableDot>:

ES_t SSD_enuEnableDot(void)
{
    48f4:	df 93       	push	r29
    48f6:	cf 93       	push	r28
    48f8:	0f 92       	push	r0
    48fa:	cd b7       	in	r28, 0x3d	; 61
    48fc:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    48fe:	19 82       	std	Y+1, r1	; 0x01

	#if SEG_DOT_PIN <= DIO_u8PIN7 && SEG_DOT_PORT <= DIO_u8PORTD
		#if SEG_TYPE == COMMON_CATHODE
			Local_enuErrorState = DIO_enuSetPinValue(SEG_DOT_PORT, SEG_DOT_PIN, DIO_u8HIGH);
    4900:	82 e0       	ldi	r24, 0x02	; 2
    4902:	62 e0       	ldi	r22, 0x02	; 2
    4904:	41 e0       	ldi	r20, 0x01	; 1
    4906:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    490a:	89 83       	std	Y+1, r24	; 0x01

	#else
		#error "Your DOT pin has a wrong selection!"
	#endif

	return Local_enuErrorState;
    490c:	89 81       	ldd	r24, Y+1	; 0x01
}
    490e:	0f 90       	pop	r0
    4910:	cf 91       	pop	r28
    4912:	df 91       	pop	r29
    4914:	08 95       	ret

00004916 <SSD_enuDisableDot>:

ES_t SSD_enuDisableDot(void)
{
    4916:	df 93       	push	r29
    4918:	cf 93       	push	r28
    491a:	0f 92       	push	r0
    491c:	cd b7       	in	r28, 0x3d	; 61
    491e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    4920:	19 82       	std	Y+1, r1	; 0x01

	#if SEG_DOT_PIN <= DIO_u8PIN7 && SEG_DOT_PORT <= DIO_u8PORTD
		#if SEG_TYPE == COMMON_CATHODE
			Local_enuErrorState = DIO_enuSetPinValue(SEG_DOT_PORT, SEG_DOT_PIN, DIO_u8LOW);
    4922:	82 e0       	ldi	r24, 0x02	; 2
    4924:	62 e0       	ldi	r22, 0x02	; 2
    4926:	40 e0       	ldi	r20, 0x00	; 0
    4928:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    492c:	89 83       	std	Y+1, r24	; 0x01

	#else
		#error "Your DOT pin has a wrong selection!"
	#endif

	return Local_enuErrorState;
    492e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4930:	0f 90       	pop	r0
    4932:	cf 91       	pop	r28
    4934:	df 91       	pop	r29
    4936:	08 95       	ret

00004938 <SSD_enuClearDisplay>:

ES_t SSD_enuClearDisplay(void)
{
    4938:	df 93       	push	r29
    493a:	cf 93       	push	r28
    493c:	cd b7       	in	r28, 0x3d	; 61
    493e:	de b7       	in	r29, 0x3e	; 62
    4940:	27 97       	sbiw	r28, 0x07	; 7
    4942:	0f b6       	in	r0, 0x3f	; 63
    4944:	f8 94       	cli
    4946:	de bf       	out	0x3e, r29	; 62
    4948:	0f be       	out	0x3f, r0	; 63
    494a:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    494c:	1e 82       	std	Y+6, r1	; 0x06

	u32 Local_u32Check = 0;
    494e:	1a 82       	std	Y+2, r1	; 0x02
    4950:	1b 82       	std	Y+3, r1	; 0x03
    4952:	1c 82       	std	Y+4, r1	; 0x04
    4954:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8Iterator = 0;
    4956:	19 82       	std	Y+1, r1	; 0x01

	#if SEG_TYPE == COMMON_CATHODE
		Local_u32Check |= (DIO_enuSetPinValue(SEG_APORT, SEG_APIN,DIO_u8LOW) << 0);
    4958:	80 e0       	ldi	r24, 0x00	; 0
    495a:	60 e0       	ldi	r22, 0x00	; 0
    495c:	40 e0       	ldi	r20, 0x00	; 0
    495e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4962:	28 2f       	mov	r18, r24
    4964:	30 e0       	ldi	r19, 0x00	; 0
    4966:	40 e0       	ldi	r20, 0x00	; 0
    4968:	50 e0       	ldi	r21, 0x00	; 0
    496a:	8a 81       	ldd	r24, Y+2	; 0x02
    496c:	9b 81       	ldd	r25, Y+3	; 0x03
    496e:	ac 81       	ldd	r26, Y+4	; 0x04
    4970:	bd 81       	ldd	r27, Y+5	; 0x05
    4972:	82 2b       	or	r24, r18
    4974:	93 2b       	or	r25, r19
    4976:	a4 2b       	or	r26, r20
    4978:	b5 2b       	or	r27, r21
    497a:	8a 83       	std	Y+2, r24	; 0x02
    497c:	9b 83       	std	Y+3, r25	; 0x03
    497e:	ac 83       	std	Y+4, r26	; 0x04
    4980:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (DIO_enuSetPinValue(SEG_BPORT, SEG_BPIN,DIO_u8LOW) << 3);
    4982:	80 e0       	ldi	r24, 0x00	; 0
    4984:	61 e0       	ldi	r22, 0x01	; 1
    4986:	40 e0       	ldi	r20, 0x00	; 0
    4988:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    498c:	88 2f       	mov	r24, r24
    498e:	90 e0       	ldi	r25, 0x00	; 0
    4990:	88 0f       	add	r24, r24
    4992:	99 1f       	adc	r25, r25
    4994:	88 0f       	add	r24, r24
    4996:	99 1f       	adc	r25, r25
    4998:	88 0f       	add	r24, r24
    499a:	99 1f       	adc	r25, r25
    499c:	9c 01       	movw	r18, r24
    499e:	44 27       	eor	r20, r20
    49a0:	37 fd       	sbrc	r19, 7
    49a2:	40 95       	com	r20
    49a4:	54 2f       	mov	r21, r20
    49a6:	8a 81       	ldd	r24, Y+2	; 0x02
    49a8:	9b 81       	ldd	r25, Y+3	; 0x03
    49aa:	ac 81       	ldd	r26, Y+4	; 0x04
    49ac:	bd 81       	ldd	r27, Y+5	; 0x05
    49ae:	82 2b       	or	r24, r18
    49b0:	93 2b       	or	r25, r19
    49b2:	a4 2b       	or	r26, r20
    49b4:	b5 2b       	or	r27, r21
    49b6:	8a 83       	std	Y+2, r24	; 0x02
    49b8:	9b 83       	std	Y+3, r25	; 0x03
    49ba:	ac 83       	std	Y+4, r26	; 0x04
    49bc:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (DIO_enuSetPinValue(SEG_CPORT, SEG_CPIN,DIO_u8LOW) << 6);
    49be:	80 e0       	ldi	r24, 0x00	; 0
    49c0:	62 e0       	ldi	r22, 0x02	; 2
    49c2:	40 e0       	ldi	r20, 0x00	; 0
    49c4:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    49c8:	88 2f       	mov	r24, r24
    49ca:	90 e0       	ldi	r25, 0x00	; 0
    49cc:	00 24       	eor	r0, r0
    49ce:	96 95       	lsr	r25
    49d0:	87 95       	ror	r24
    49d2:	07 94       	ror	r0
    49d4:	96 95       	lsr	r25
    49d6:	87 95       	ror	r24
    49d8:	07 94       	ror	r0
    49da:	98 2f       	mov	r25, r24
    49dc:	80 2d       	mov	r24, r0
    49de:	9c 01       	movw	r18, r24
    49e0:	44 27       	eor	r20, r20
    49e2:	37 fd       	sbrc	r19, 7
    49e4:	40 95       	com	r20
    49e6:	54 2f       	mov	r21, r20
    49e8:	8a 81       	ldd	r24, Y+2	; 0x02
    49ea:	9b 81       	ldd	r25, Y+3	; 0x03
    49ec:	ac 81       	ldd	r26, Y+4	; 0x04
    49ee:	bd 81       	ldd	r27, Y+5	; 0x05
    49f0:	82 2b       	or	r24, r18
    49f2:	93 2b       	or	r25, r19
    49f4:	a4 2b       	or	r26, r20
    49f6:	b5 2b       	or	r27, r21
    49f8:	8a 83       	std	Y+2, r24	; 0x02
    49fa:	9b 83       	std	Y+3, r25	; 0x03
    49fc:	ac 83       	std	Y+4, r26	; 0x04
    49fe:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (DIO_enuSetPinValue(SEG_DPORT, SEG_DPIN,DIO_u8LOW) << 9);
    4a00:	81 e0       	ldi	r24, 0x01	; 1
    4a02:	60 e0       	ldi	r22, 0x00	; 0
    4a04:	40 e0       	ldi	r20, 0x00	; 0
    4a06:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4a0a:	88 2f       	mov	r24, r24
    4a0c:	90 e0       	ldi	r25, 0x00	; 0
    4a0e:	98 2f       	mov	r25, r24
    4a10:	88 27       	eor	r24, r24
    4a12:	99 0f       	add	r25, r25
    4a14:	9c 01       	movw	r18, r24
    4a16:	44 27       	eor	r20, r20
    4a18:	37 fd       	sbrc	r19, 7
    4a1a:	40 95       	com	r20
    4a1c:	54 2f       	mov	r21, r20
    4a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a20:	9b 81       	ldd	r25, Y+3	; 0x03
    4a22:	ac 81       	ldd	r26, Y+4	; 0x04
    4a24:	bd 81       	ldd	r27, Y+5	; 0x05
    4a26:	82 2b       	or	r24, r18
    4a28:	93 2b       	or	r25, r19
    4a2a:	a4 2b       	or	r26, r20
    4a2c:	b5 2b       	or	r27, r21
    4a2e:	8a 83       	std	Y+2, r24	; 0x02
    4a30:	9b 83       	std	Y+3, r25	; 0x03
    4a32:	ac 83       	std	Y+4, r26	; 0x04
    4a34:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (DIO_enuSetPinValue(SEG_EPORT, SEG_EPIN,DIO_u8LOW) << 12);
    4a36:	81 e0       	ldi	r24, 0x01	; 1
    4a38:	61 e0       	ldi	r22, 0x01	; 1
    4a3a:	40 e0       	ldi	r20, 0x00	; 0
    4a3c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4a40:	88 2f       	mov	r24, r24
    4a42:	90 e0       	ldi	r25, 0x00	; 0
    4a44:	98 2f       	mov	r25, r24
    4a46:	88 27       	eor	r24, r24
    4a48:	92 95       	swap	r25
    4a4a:	90 7f       	andi	r25, 0xF0	; 240
    4a4c:	9c 01       	movw	r18, r24
    4a4e:	44 27       	eor	r20, r20
    4a50:	37 fd       	sbrc	r19, 7
    4a52:	40 95       	com	r20
    4a54:	54 2f       	mov	r21, r20
    4a56:	8a 81       	ldd	r24, Y+2	; 0x02
    4a58:	9b 81       	ldd	r25, Y+3	; 0x03
    4a5a:	ac 81       	ldd	r26, Y+4	; 0x04
    4a5c:	bd 81       	ldd	r27, Y+5	; 0x05
    4a5e:	82 2b       	or	r24, r18
    4a60:	93 2b       	or	r25, r19
    4a62:	a4 2b       	or	r26, r20
    4a64:	b5 2b       	or	r27, r21
    4a66:	8a 83       	std	Y+2, r24	; 0x02
    4a68:	9b 83       	std	Y+3, r25	; 0x03
    4a6a:	ac 83       	std	Y+4, r26	; 0x04
    4a6c:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_FPORT, SEG_FPIN,DIO_u8LOW)) << 15);
    4a6e:	81 e0       	ldi	r24, 0x01	; 1
    4a70:	62 e0       	ldi	r22, 0x02	; 2
    4a72:	40 e0       	ldi	r20, 0x00	; 0
    4a74:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4a78:	88 2f       	mov	r24, r24
    4a7a:	90 e0       	ldi	r25, 0x00	; 0
    4a7c:	a0 e0       	ldi	r26, 0x00	; 0
    4a7e:	b0 e0       	ldi	r27, 0x00	; 0
    4a80:	9c 01       	movw	r18, r24
    4a82:	ad 01       	movw	r20, r26
    4a84:	01 2e       	mov	r0, r17
    4a86:	1f e0       	ldi	r17, 0x0F	; 15
    4a88:	22 0f       	add	r18, r18
    4a8a:	33 1f       	adc	r19, r19
    4a8c:	44 1f       	adc	r20, r20
    4a8e:	55 1f       	adc	r21, r21
    4a90:	1a 95       	dec	r17
    4a92:	d1 f7       	brne	.-12     	; 0x4a88 <SSD_enuClearDisplay+0x150>
    4a94:	10 2d       	mov	r17, r0
    4a96:	8a 81       	ldd	r24, Y+2	; 0x02
    4a98:	9b 81       	ldd	r25, Y+3	; 0x03
    4a9a:	ac 81       	ldd	r26, Y+4	; 0x04
    4a9c:	bd 81       	ldd	r27, Y+5	; 0x05
    4a9e:	82 2b       	or	r24, r18
    4aa0:	93 2b       	or	r25, r19
    4aa2:	a4 2b       	or	r26, r20
    4aa4:	b5 2b       	or	r27, r21
    4aa6:	8a 83       	std	Y+2, r24	; 0x02
    4aa8:	9b 83       	std	Y+3, r25	; 0x03
    4aaa:	ac 83       	std	Y+4, r26	; 0x04
    4aac:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_GPORT, SEG_GPIN,DIO_u8LOW)) << 18);
    4aae:	81 e0       	ldi	r24, 0x01	; 1
    4ab0:	63 e0       	ldi	r22, 0x03	; 3
    4ab2:	40 e0       	ldi	r20, 0x00	; 0
    4ab4:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4ab8:	88 2f       	mov	r24, r24
    4aba:	90 e0       	ldi	r25, 0x00	; 0
    4abc:	a0 e0       	ldi	r26, 0x00	; 0
    4abe:	b0 e0       	ldi	r27, 0x00	; 0
    4ac0:	9c 01       	movw	r18, r24
    4ac2:	ad 01       	movw	r20, r26
    4ac4:	01 2e       	mov	r0, r17
    4ac6:	12 e1       	ldi	r17, 0x12	; 18
    4ac8:	22 0f       	add	r18, r18
    4aca:	33 1f       	adc	r19, r19
    4acc:	44 1f       	adc	r20, r20
    4ace:	55 1f       	adc	r21, r21
    4ad0:	1a 95       	dec	r17
    4ad2:	d1 f7       	brne	.-12     	; 0x4ac8 <SSD_enuClearDisplay+0x190>
    4ad4:	10 2d       	mov	r17, r0
    4ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    4ada:	ac 81       	ldd	r26, Y+4	; 0x04
    4adc:	bd 81       	ldd	r27, Y+5	; 0x05
    4ade:	82 2b       	or	r24, r18
    4ae0:	93 2b       	or	r25, r19
    4ae2:	a4 2b       	or	r26, r20
    4ae4:	b5 2b       	or	r27, r21
    4ae6:	8a 83       	std	Y+2, r24	; 0x02
    4ae8:	9b 83       	std	Y+3, r25	; 0x03
    4aea:	ac 83       	std	Y+4, r26	; 0x04
    4aec:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_GPORT, SEG_GPIN,DIO_u8HIGH)) << 18);
	#else
		#error "Your type selection is invalid!"
	#endif

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    4aee:	19 82       	std	Y+1, r1	; 0x01
    4af0:	1e c0       	rjmp	.+60     	; 0x4b2e <SSD_enuClearDisplay+0x1f6>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
    4af2:	89 81       	ldd	r24, Y+1	; 0x01
    4af4:	28 2f       	mov	r18, r24
    4af6:	30 e0       	ldi	r19, 0x00	; 0
    4af8:	8a 81       	ldd	r24, Y+2	; 0x02
    4afa:	9b 81       	ldd	r25, Y+3	; 0x03
    4afc:	ac 81       	ldd	r26, Y+4	; 0x04
    4afe:	bd 81       	ldd	r27, Y+5	; 0x05
    4b00:	02 2e       	mov	r0, r18
    4b02:	04 c0       	rjmp	.+8      	; 0x4b0c <SSD_enuClearDisplay+0x1d4>
    4b04:	b6 95       	lsr	r27
    4b06:	a7 95       	ror	r26
    4b08:	97 95       	ror	r25
    4b0a:	87 95       	ror	r24
    4b0c:	0a 94       	dec	r0
    4b0e:	d2 f7       	brpl	.-12     	; 0x4b04 <SSD_enuClearDisplay+0x1cc>
    4b10:	87 70       	andi	r24, 0x07	; 7
    4b12:	90 70       	andi	r25, 0x00	; 0
    4b14:	a0 70       	andi	r26, 0x00	; 0
    4b16:	b0 70       	andi	r27, 0x00	; 0
    4b18:	81 30       	cpi	r24, 0x01	; 1
    4b1a:	91 05       	cpc	r25, r1
    4b1c:	a1 05       	cpc	r26, r1
    4b1e:	b1 05       	cpc	r27, r1
    4b20:	19 f0       	breq	.+6      	; 0x4b28 <SSD_enuClearDisplay+0x1f0>
		{
			return Local_enuErrorState;
    4b22:	8e 81       	ldd	r24, Y+6	; 0x06
    4b24:	8f 83       	std	Y+7, r24	; 0x07
    4b26:	0a c0       	rjmp	.+20     	; 0x4b3c <SSD_enuClearDisplay+0x204>
		Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_GPORT, SEG_GPIN,DIO_u8HIGH)) << 18);
	#else
		#error "Your type selection is invalid!"
	#endif

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    4b28:	89 81       	ldd	r24, Y+1	; 0x01
    4b2a:	8d 5f       	subi	r24, 0xFD	; 253
    4b2c:	89 83       	std	Y+1, r24	; 0x01
    4b2e:	89 81       	ldd	r24, Y+1	; 0x01
    4b30:	85 31       	cpi	r24, 0x15	; 21
    4b32:	f8 f2       	brcs	.-66     	; 0x4af2 <SSD_enuClearDisplay+0x1ba>
		{
			return Local_enuErrorState;
		}
	}

	Local_enuErrorState = ES_OK;
    4b34:	81 e0       	ldi	r24, 0x01	; 1
    4b36:	8e 83       	std	Y+6, r24	; 0x06
	return Local_enuErrorState;
    4b38:	8e 81       	ldd	r24, Y+6	; 0x06
    4b3a:	8f 83       	std	Y+7, r24	; 0x07
    4b3c:	8f 81       	ldd	r24, Y+7	; 0x07
}
    4b3e:	27 96       	adiw	r28, 0x07	; 7
    4b40:	0f b6       	in	r0, 0x3f	; 63
    4b42:	f8 94       	cli
    4b44:	de bf       	out	0x3e, r29	; 62
    4b46:	0f be       	out	0x3f, r0	; 63
    4b48:	cd bf       	out	0x3d, r28	; 61
    4b4a:	cf 91       	pop	r28
    4b4c:	df 91       	pop	r29
    4b4e:	08 95       	ret

00004b50 <LED_enuInit>:
#include "LED_private.h"
#include "LED_config.h"
/***********************	Includes Section End	***********************/

ES_t LED_enuInit(LED_t * Copy_pstrLedConfiguration)
{
    4b50:	df 93       	push	r29
    4b52:	cf 93       	push	r28
    4b54:	00 d0       	rcall	.+0      	; 0x4b56 <LED_enuInit+0x6>
    4b56:	00 d0       	rcall	.+0      	; 0x4b58 <LED_enuInit+0x8>
    4b58:	0f 92       	push	r0
    4b5a:	cd b7       	in	r28, 0x3d	; 61
    4b5c:	de b7       	in	r29, 0x3e	; 62
    4b5e:	9c 83       	std	Y+4, r25	; 0x04
    4b60:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    4b62:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_pstrLedConfiguration != NULL)
    4b64:	8b 81       	ldd	r24, Y+3	; 0x03
    4b66:	9c 81       	ldd	r25, Y+4	; 0x04
    4b68:	00 97       	sbiw	r24, 0x00	; 0
    4b6a:	09 f4       	brne	.+2      	; 0x4b6e <LED_enuInit+0x1e>
    4b6c:	24 c1       	rjmp	.+584    	; 0x4db6 <LED_enuInit+0x266>
	{
		u8 Local_u8Iterator = 0;
    4b6e:	19 82       	std	Y+1, r1	; 0x01

		for(Local_u8Iterator = 0; Local_u8Iterator < LED_NUM; Local_u8Iterator++)
    4b70:	19 82       	std	Y+1, r1	; 0x01
    4b72:	1c c1       	rjmp	.+568    	; 0x4dac <LED_enuInit+0x25c>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PortID,
    4b74:	89 81       	ldd	r24, Y+1	; 0x01
    4b76:	88 2f       	mov	r24, r24
    4b78:	90 e0       	ldi	r25, 0x00	; 0
    4b7a:	9c 01       	movw	r18, r24
    4b7c:	22 0f       	add	r18, r18
    4b7e:	33 1f       	adc	r19, r19
    4b80:	22 0f       	add	r18, r18
    4b82:	33 1f       	adc	r19, r19
    4b84:	8b 81       	ldd	r24, Y+3	; 0x03
    4b86:	9c 81       	ldd	r25, Y+4	; 0x04
    4b88:	fc 01       	movw	r30, r24
    4b8a:	e2 0f       	add	r30, r18
    4b8c:	f3 1f       	adc	r31, r19
    4b8e:	40 81       	ld	r20, Z
    4b90:	89 81       	ldd	r24, Y+1	; 0x01
    4b92:	88 2f       	mov	r24, r24
    4b94:	90 e0       	ldi	r25, 0x00	; 0
    4b96:	9c 01       	movw	r18, r24
    4b98:	22 0f       	add	r18, r18
    4b9a:	33 1f       	adc	r19, r19
    4b9c:	22 0f       	add	r18, r18
    4b9e:	33 1f       	adc	r19, r19
    4ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    4ba4:	fc 01       	movw	r30, r24
    4ba6:	e2 0f       	add	r30, r18
    4ba8:	f3 1f       	adc	r31, r19
    4baa:	91 81       	ldd	r25, Z+1	; 0x01
    4bac:	84 2f       	mov	r24, r20
    4bae:	69 2f       	mov	r22, r25
    4bb0:	41 e0       	ldi	r20, 0x01	; 1
    4bb2:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    4bb6:	8a 83       	std	Y+2, r24	; 0x02
														 Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PinID,
														 DIO_u8OUTPUT
														);

			if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8Connection == LED_u8SINK)
    4bb8:	89 81       	ldd	r24, Y+1	; 0x01
    4bba:	88 2f       	mov	r24, r24
    4bbc:	90 e0       	ldi	r25, 0x00	; 0
    4bbe:	9c 01       	movw	r18, r24
    4bc0:	22 0f       	add	r18, r18
    4bc2:	33 1f       	adc	r19, r19
    4bc4:	22 0f       	add	r18, r18
    4bc6:	33 1f       	adc	r19, r19
    4bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    4bca:	9c 81       	ldd	r25, Y+4	; 0x04
    4bcc:	fc 01       	movw	r30, r24
    4bce:	e2 0f       	add	r30, r18
    4bd0:	f3 1f       	adc	r31, r19
    4bd2:	82 81       	ldd	r24, Z+2	; 0x02
    4bd4:	88 30       	cpi	r24, 0x08	; 8
    4bd6:	09 f0       	breq	.+2      	; 0x4bda <LED_enuInit+0x8a>
    4bd8:	69 c0       	rjmp	.+210    	; 0x4cac <LED_enuInit+0x15c>
			{
				if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8InitState == LED_u8ON)
    4bda:	89 81       	ldd	r24, Y+1	; 0x01
    4bdc:	88 2f       	mov	r24, r24
    4bde:	90 e0       	ldi	r25, 0x00	; 0
    4be0:	9c 01       	movw	r18, r24
    4be2:	22 0f       	add	r18, r18
    4be4:	33 1f       	adc	r19, r19
    4be6:	22 0f       	add	r18, r18
    4be8:	33 1f       	adc	r19, r19
    4bea:	8b 81       	ldd	r24, Y+3	; 0x03
    4bec:	9c 81       	ldd	r25, Y+4	; 0x04
    4bee:	fc 01       	movw	r30, r24
    4bf0:	e2 0f       	add	r30, r18
    4bf2:	f3 1f       	adc	r31, r19
    4bf4:	83 81       	ldd	r24, Z+3	; 0x03
    4bf6:	8a 30       	cpi	r24, 0x0A	; 10
    4bf8:	19 f5       	brne	.+70     	; 0x4c40 <LED_enuInit+0xf0>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PortID,
    4bfa:	89 81       	ldd	r24, Y+1	; 0x01
    4bfc:	88 2f       	mov	r24, r24
    4bfe:	90 e0       	ldi	r25, 0x00	; 0
    4c00:	9c 01       	movw	r18, r24
    4c02:	22 0f       	add	r18, r18
    4c04:	33 1f       	adc	r19, r19
    4c06:	22 0f       	add	r18, r18
    4c08:	33 1f       	adc	r19, r19
    4c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    4c0e:	fc 01       	movw	r30, r24
    4c10:	e2 0f       	add	r30, r18
    4c12:	f3 1f       	adc	r31, r19
    4c14:	40 81       	ld	r20, Z
    4c16:	89 81       	ldd	r24, Y+1	; 0x01
    4c18:	88 2f       	mov	r24, r24
    4c1a:	90 e0       	ldi	r25, 0x00	; 0
    4c1c:	9c 01       	movw	r18, r24
    4c1e:	22 0f       	add	r18, r18
    4c20:	33 1f       	adc	r19, r19
    4c22:	22 0f       	add	r18, r18
    4c24:	33 1f       	adc	r19, r19
    4c26:	8b 81       	ldd	r24, Y+3	; 0x03
    4c28:	9c 81       	ldd	r25, Y+4	; 0x04
    4c2a:	fc 01       	movw	r30, r24
    4c2c:	e2 0f       	add	r30, r18
    4c2e:	f3 1f       	adc	r31, r19
    4c30:	91 81       	ldd	r25, Z+1	; 0x01
    4c32:	84 2f       	mov	r24, r20
    4c34:	69 2f       	mov	r22, r25
    4c36:	40 e0       	ldi	r20, 0x00	; 0
    4c38:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4c3c:	8a 83       	std	Y+2, r24	; 0x02
    4c3e:	b3 c0       	rjmp	.+358    	; 0x4da6 <LED_enuInit+0x256>
							           	   	   	   	   	     Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PinID,
															 DIO_u8LOW);

				}
				else if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8InitState == LED_u8OFF)
    4c40:	89 81       	ldd	r24, Y+1	; 0x01
    4c42:	88 2f       	mov	r24, r24
    4c44:	90 e0       	ldi	r25, 0x00	; 0
    4c46:	9c 01       	movw	r18, r24
    4c48:	22 0f       	add	r18, r18
    4c4a:	33 1f       	adc	r19, r19
    4c4c:	22 0f       	add	r18, r18
    4c4e:	33 1f       	adc	r19, r19
    4c50:	8b 81       	ldd	r24, Y+3	; 0x03
    4c52:	9c 81       	ldd	r25, Y+4	; 0x04
    4c54:	fc 01       	movw	r30, r24
    4c56:	e2 0f       	add	r30, r18
    4c58:	f3 1f       	adc	r31, r19
    4c5a:	83 81       	ldd	r24, Z+3	; 0x03
    4c5c:	8b 30       	cpi	r24, 0x0B	; 11
    4c5e:	19 f5       	brne	.+70     	; 0x4ca6 <LED_enuInit+0x156>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PortID,
    4c60:	89 81       	ldd	r24, Y+1	; 0x01
    4c62:	88 2f       	mov	r24, r24
    4c64:	90 e0       	ldi	r25, 0x00	; 0
    4c66:	9c 01       	movw	r18, r24
    4c68:	22 0f       	add	r18, r18
    4c6a:	33 1f       	adc	r19, r19
    4c6c:	22 0f       	add	r18, r18
    4c6e:	33 1f       	adc	r19, r19
    4c70:	8b 81       	ldd	r24, Y+3	; 0x03
    4c72:	9c 81       	ldd	r25, Y+4	; 0x04
    4c74:	fc 01       	movw	r30, r24
    4c76:	e2 0f       	add	r30, r18
    4c78:	f3 1f       	adc	r31, r19
    4c7a:	40 81       	ld	r20, Z
    4c7c:	89 81       	ldd	r24, Y+1	; 0x01
    4c7e:	88 2f       	mov	r24, r24
    4c80:	90 e0       	ldi	r25, 0x00	; 0
    4c82:	9c 01       	movw	r18, r24
    4c84:	22 0f       	add	r18, r18
    4c86:	33 1f       	adc	r19, r19
    4c88:	22 0f       	add	r18, r18
    4c8a:	33 1f       	adc	r19, r19
    4c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    4c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    4c90:	fc 01       	movw	r30, r24
    4c92:	e2 0f       	add	r30, r18
    4c94:	f3 1f       	adc	r31, r19
    4c96:	91 81       	ldd	r25, Z+1	; 0x01
    4c98:	84 2f       	mov	r24, r20
    4c9a:	69 2f       	mov	r22, r25
    4c9c:	41 e0       	ldi	r20, 0x01	; 1
    4c9e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4ca2:	8a 83       	std	Y+2, r24	; 0x02
    4ca4:	80 c0       	rjmp	.+256    	; 0x4da6 <LED_enuInit+0x256>
							           	   	   	   	   	   	 Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PinID,
															 DIO_u8HIGH);
				}
				else
				{
					return ES_OUT_OF_RANGE;
    4ca6:	83 e0       	ldi	r24, 0x03	; 3
    4ca8:	8d 83       	std	Y+5, r24	; 0x05
    4caa:	89 c0       	rjmp	.+274    	; 0x4dbe <LED_enuInit+0x26e>
				}
			}
			else if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8Connection == LED_u8SOURCE)
    4cac:	89 81       	ldd	r24, Y+1	; 0x01
    4cae:	88 2f       	mov	r24, r24
    4cb0:	90 e0       	ldi	r25, 0x00	; 0
    4cb2:	9c 01       	movw	r18, r24
    4cb4:	22 0f       	add	r18, r18
    4cb6:	33 1f       	adc	r19, r19
    4cb8:	22 0f       	add	r18, r18
    4cba:	33 1f       	adc	r19, r19
    4cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    4cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    4cc0:	fc 01       	movw	r30, r24
    4cc2:	e2 0f       	add	r30, r18
    4cc4:	f3 1f       	adc	r31, r19
    4cc6:	82 81       	ldd	r24, Z+2	; 0x02
    4cc8:	89 30       	cpi	r24, 0x09	; 9
    4cca:	09 f0       	breq	.+2      	; 0x4cce <LED_enuInit+0x17e>
    4ccc:	69 c0       	rjmp	.+210    	; 0x4da0 <LED_enuInit+0x250>
			{
				if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8InitState == LED_u8ON)
    4cce:	89 81       	ldd	r24, Y+1	; 0x01
    4cd0:	88 2f       	mov	r24, r24
    4cd2:	90 e0       	ldi	r25, 0x00	; 0
    4cd4:	9c 01       	movw	r18, r24
    4cd6:	22 0f       	add	r18, r18
    4cd8:	33 1f       	adc	r19, r19
    4cda:	22 0f       	add	r18, r18
    4cdc:	33 1f       	adc	r19, r19
    4cde:	8b 81       	ldd	r24, Y+3	; 0x03
    4ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    4ce2:	fc 01       	movw	r30, r24
    4ce4:	e2 0f       	add	r30, r18
    4ce6:	f3 1f       	adc	r31, r19
    4ce8:	83 81       	ldd	r24, Z+3	; 0x03
    4cea:	8a 30       	cpi	r24, 0x0A	; 10
    4cec:	19 f5       	brne	.+70     	; 0x4d34 <LED_enuInit+0x1e4>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PortID,
    4cee:	89 81       	ldd	r24, Y+1	; 0x01
    4cf0:	88 2f       	mov	r24, r24
    4cf2:	90 e0       	ldi	r25, 0x00	; 0
    4cf4:	9c 01       	movw	r18, r24
    4cf6:	22 0f       	add	r18, r18
    4cf8:	33 1f       	adc	r19, r19
    4cfa:	22 0f       	add	r18, r18
    4cfc:	33 1f       	adc	r19, r19
    4cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    4d00:	9c 81       	ldd	r25, Y+4	; 0x04
    4d02:	fc 01       	movw	r30, r24
    4d04:	e2 0f       	add	r30, r18
    4d06:	f3 1f       	adc	r31, r19
    4d08:	40 81       	ld	r20, Z
    4d0a:	89 81       	ldd	r24, Y+1	; 0x01
    4d0c:	88 2f       	mov	r24, r24
    4d0e:	90 e0       	ldi	r25, 0x00	; 0
    4d10:	9c 01       	movw	r18, r24
    4d12:	22 0f       	add	r18, r18
    4d14:	33 1f       	adc	r19, r19
    4d16:	22 0f       	add	r18, r18
    4d18:	33 1f       	adc	r19, r19
    4d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    4d1e:	fc 01       	movw	r30, r24
    4d20:	e2 0f       	add	r30, r18
    4d22:	f3 1f       	adc	r31, r19
    4d24:	91 81       	ldd	r25, Z+1	; 0x01
    4d26:	84 2f       	mov	r24, r20
    4d28:	69 2f       	mov	r22, r25
    4d2a:	41 e0       	ldi	r20, 0x01	; 1
    4d2c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4d30:	8a 83       	std	Y+2, r24	; 0x02
    4d32:	39 c0       	rjmp	.+114    	; 0x4da6 <LED_enuInit+0x256>
							           	   	   	   	   	     Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PinID,
															 DIO_u8HIGH);

				}
				else if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8InitState == LED_u8OFF)
    4d34:	89 81       	ldd	r24, Y+1	; 0x01
    4d36:	88 2f       	mov	r24, r24
    4d38:	90 e0       	ldi	r25, 0x00	; 0
    4d3a:	9c 01       	movw	r18, r24
    4d3c:	22 0f       	add	r18, r18
    4d3e:	33 1f       	adc	r19, r19
    4d40:	22 0f       	add	r18, r18
    4d42:	33 1f       	adc	r19, r19
    4d44:	8b 81       	ldd	r24, Y+3	; 0x03
    4d46:	9c 81       	ldd	r25, Y+4	; 0x04
    4d48:	fc 01       	movw	r30, r24
    4d4a:	e2 0f       	add	r30, r18
    4d4c:	f3 1f       	adc	r31, r19
    4d4e:	83 81       	ldd	r24, Z+3	; 0x03
    4d50:	8b 30       	cpi	r24, 0x0B	; 11
    4d52:	19 f5       	brne	.+70     	; 0x4d9a <LED_enuInit+0x24a>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PortID,
    4d54:	89 81       	ldd	r24, Y+1	; 0x01
    4d56:	88 2f       	mov	r24, r24
    4d58:	90 e0       	ldi	r25, 0x00	; 0
    4d5a:	9c 01       	movw	r18, r24
    4d5c:	22 0f       	add	r18, r18
    4d5e:	33 1f       	adc	r19, r19
    4d60:	22 0f       	add	r18, r18
    4d62:	33 1f       	adc	r19, r19
    4d64:	8b 81       	ldd	r24, Y+3	; 0x03
    4d66:	9c 81       	ldd	r25, Y+4	; 0x04
    4d68:	fc 01       	movw	r30, r24
    4d6a:	e2 0f       	add	r30, r18
    4d6c:	f3 1f       	adc	r31, r19
    4d6e:	40 81       	ld	r20, Z
    4d70:	89 81       	ldd	r24, Y+1	; 0x01
    4d72:	88 2f       	mov	r24, r24
    4d74:	90 e0       	ldi	r25, 0x00	; 0
    4d76:	9c 01       	movw	r18, r24
    4d78:	22 0f       	add	r18, r18
    4d7a:	33 1f       	adc	r19, r19
    4d7c:	22 0f       	add	r18, r18
    4d7e:	33 1f       	adc	r19, r19
    4d80:	8b 81       	ldd	r24, Y+3	; 0x03
    4d82:	9c 81       	ldd	r25, Y+4	; 0x04
    4d84:	fc 01       	movw	r30, r24
    4d86:	e2 0f       	add	r30, r18
    4d88:	f3 1f       	adc	r31, r19
    4d8a:	91 81       	ldd	r25, Z+1	; 0x01
    4d8c:	84 2f       	mov	r24, r20
    4d8e:	69 2f       	mov	r22, r25
    4d90:	40 e0       	ldi	r20, 0x00	; 0
    4d92:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4d96:	8a 83       	std	Y+2, r24	; 0x02
    4d98:	06 c0       	rjmp	.+12     	; 0x4da6 <LED_enuInit+0x256>
							           	   	   	   	   	   	 Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PinID,
															 DIO_u8LOW);
				}
				else
				{
					return ES_OUT_OF_RANGE;
    4d9a:	83 e0       	ldi	r24, 0x03	; 3
    4d9c:	8d 83       	std	Y+5, r24	; 0x05
    4d9e:	0f c0       	rjmp	.+30     	; 0x4dbe <LED_enuInit+0x26e>
				}
			}
			else
			{
				return ES_OUT_OF_RANGE;
    4da0:	83 e0       	ldi	r24, 0x03	; 3
    4da2:	8d 83       	std	Y+5, r24	; 0x05
    4da4:	0c c0       	rjmp	.+24     	; 0x4dbe <LED_enuInit+0x26e>

	if(Copy_pstrLedConfiguration != NULL)
	{
		u8 Local_u8Iterator = 0;

		for(Local_u8Iterator = 0; Local_u8Iterator < LED_NUM; Local_u8Iterator++)
    4da6:	89 81       	ldd	r24, Y+1	; 0x01
    4da8:	8f 5f       	subi	r24, 0xFF	; 255
    4daa:	89 83       	std	Y+1, r24	; 0x01
    4dac:	89 81       	ldd	r24, Y+1	; 0x01
    4dae:	83 30       	cpi	r24, 0x03	; 3
    4db0:	08 f4       	brcc	.+2      	; 0x4db4 <LED_enuInit+0x264>
    4db2:	e0 ce       	rjmp	.-576    	; 0x4b74 <LED_enuInit+0x24>
    4db4:	02 c0       	rjmp	.+4      	; 0x4dba <LED_enuInit+0x26a>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    4db6:	82 e0       	ldi	r24, 0x02	; 2
    4db8:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    4dba:	8a 81       	ldd	r24, Y+2	; 0x02
    4dbc:	8d 83       	std	Y+5, r24	; 0x05
    4dbe:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4dc0:	0f 90       	pop	r0
    4dc2:	0f 90       	pop	r0
    4dc4:	0f 90       	pop	r0
    4dc6:	0f 90       	pop	r0
    4dc8:	0f 90       	pop	r0
    4dca:	cf 91       	pop	r28
    4dcc:	df 91       	pop	r29
    4dce:	08 95       	ret

00004dd0 <LED_enuTurnON>:

ES_t LED_enuTurnON(LED_t * Copy_pstrLedID)
{
    4dd0:	df 93       	push	r29
    4dd2:	cf 93       	push	r28
    4dd4:	00 d0       	rcall	.+0      	; 0x4dd6 <LED_enuTurnON+0x6>
    4dd6:	00 d0       	rcall	.+0      	; 0x4dd8 <LED_enuTurnON+0x8>
    4dd8:	cd b7       	in	r28, 0x3d	; 61
    4dda:	de b7       	in	r29, 0x3e	; 62
    4ddc:	9b 83       	std	Y+3, r25	; 0x03
    4dde:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4de0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pstrLedID != NULL)
    4de2:	8a 81       	ldd	r24, Y+2	; 0x02
    4de4:	9b 81       	ldd	r25, Y+3	; 0x03
    4de6:	00 97       	sbiw	r24, 0x00	; 0
    4de8:	41 f1       	breq	.+80     	; 0x4e3a <LED_enuTurnON+0x6a>
	{
		if(Copy_pstrLedID->LED_u8Connection == LED_u8SINK)
    4dea:	ea 81       	ldd	r30, Y+2	; 0x02
    4dec:	fb 81       	ldd	r31, Y+3	; 0x03
    4dee:	82 81       	ldd	r24, Z+2	; 0x02
    4df0:	88 30       	cpi	r24, 0x08	; 8
    4df2:	61 f4       	brne	.+24     	; 0x4e0c <LED_enuTurnON+0x3c>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8LOW);
    4df4:	ea 81       	ldd	r30, Y+2	; 0x02
    4df6:	fb 81       	ldd	r31, Y+3	; 0x03
    4df8:	80 81       	ld	r24, Z
    4dfa:	ea 81       	ldd	r30, Y+2	; 0x02
    4dfc:	fb 81       	ldd	r31, Y+3	; 0x03
    4dfe:	91 81       	ldd	r25, Z+1	; 0x01
    4e00:	69 2f       	mov	r22, r25
    4e02:	40 e0       	ldi	r20, 0x00	; 0
    4e04:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4e08:	89 83       	std	Y+1, r24	; 0x01
    4e0a:	14 c0       	rjmp	.+40     	; 0x4e34 <LED_enuTurnON+0x64>
		}
		else if(Copy_pstrLedID->LED_u8Connection == LED_u8SOURCE)
    4e0c:	ea 81       	ldd	r30, Y+2	; 0x02
    4e0e:	fb 81       	ldd	r31, Y+3	; 0x03
    4e10:	82 81       	ldd	r24, Z+2	; 0x02
    4e12:	89 30       	cpi	r24, 0x09	; 9
    4e14:	61 f4       	brne	.+24     	; 0x4e2e <LED_enuTurnON+0x5e>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8HIGH);
    4e16:	ea 81       	ldd	r30, Y+2	; 0x02
    4e18:	fb 81       	ldd	r31, Y+3	; 0x03
    4e1a:	80 81       	ld	r24, Z
    4e1c:	ea 81       	ldd	r30, Y+2	; 0x02
    4e1e:	fb 81       	ldd	r31, Y+3	; 0x03
    4e20:	91 81       	ldd	r25, Z+1	; 0x01
    4e22:	69 2f       	mov	r22, r25
    4e24:	41 e0       	ldi	r20, 0x01	; 1
    4e26:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4e2a:	89 83       	std	Y+1, r24	; 0x01
    4e2c:	03 c0       	rjmp	.+6      	; 0x4e34 <LED_enuTurnON+0x64>
		}
		else
		{
			return ES_OUT_OF_RANGE;
    4e2e:	83 e0       	ldi	r24, 0x03	; 3
    4e30:	8c 83       	std	Y+4, r24	; 0x04
    4e32:	05 c0       	rjmp	.+10     	; 0x4e3e <LED_enuTurnON+0x6e>
	else
	{
		return ES_NULL_POINTER;
	}

	return Local_enuErrorState;
    4e34:	89 81       	ldd	r24, Y+1	; 0x01
    4e36:	8c 83       	std	Y+4, r24	; 0x04
    4e38:	02 c0       	rjmp	.+4      	; 0x4e3e <LED_enuTurnON+0x6e>
			return ES_OUT_OF_RANGE;
		}
	}
	else
	{
		return ES_NULL_POINTER;
    4e3a:	82 e0       	ldi	r24, 0x02	; 2
    4e3c:	8c 83       	std	Y+4, r24	; 0x04
    4e3e:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return Local_enuErrorState;
}
    4e40:	0f 90       	pop	r0
    4e42:	0f 90       	pop	r0
    4e44:	0f 90       	pop	r0
    4e46:	0f 90       	pop	r0
    4e48:	cf 91       	pop	r28
    4e4a:	df 91       	pop	r29
    4e4c:	08 95       	ret

00004e4e <LED_enuTurnOFF>:

ES_t LED_enuTurnOFF(LED_t * Copy_pstrLedID)
{
    4e4e:	df 93       	push	r29
    4e50:	cf 93       	push	r28
    4e52:	00 d0       	rcall	.+0      	; 0x4e54 <LED_enuTurnOFF+0x6>
    4e54:	00 d0       	rcall	.+0      	; 0x4e56 <LED_enuTurnOFF+0x8>
    4e56:	cd b7       	in	r28, 0x3d	; 61
    4e58:	de b7       	in	r29, 0x3e	; 62
    4e5a:	9b 83       	std	Y+3, r25	; 0x03
    4e5c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4e5e:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pstrLedID != NULL)
    4e60:	8a 81       	ldd	r24, Y+2	; 0x02
    4e62:	9b 81       	ldd	r25, Y+3	; 0x03
    4e64:	00 97       	sbiw	r24, 0x00	; 0
    4e66:	41 f1       	breq	.+80     	; 0x4eb8 <LED_enuTurnOFF+0x6a>
	{
		if(Copy_pstrLedID->LED_u8Connection == LED_u8SINK)
    4e68:	ea 81       	ldd	r30, Y+2	; 0x02
    4e6a:	fb 81       	ldd	r31, Y+3	; 0x03
    4e6c:	82 81       	ldd	r24, Z+2	; 0x02
    4e6e:	88 30       	cpi	r24, 0x08	; 8
    4e70:	61 f4       	brne	.+24     	; 0x4e8a <LED_enuTurnOFF+0x3c>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8HIGH);
    4e72:	ea 81       	ldd	r30, Y+2	; 0x02
    4e74:	fb 81       	ldd	r31, Y+3	; 0x03
    4e76:	80 81       	ld	r24, Z
    4e78:	ea 81       	ldd	r30, Y+2	; 0x02
    4e7a:	fb 81       	ldd	r31, Y+3	; 0x03
    4e7c:	91 81       	ldd	r25, Z+1	; 0x01
    4e7e:	69 2f       	mov	r22, r25
    4e80:	41 e0       	ldi	r20, 0x01	; 1
    4e82:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4e86:	89 83       	std	Y+1, r24	; 0x01
    4e88:	14 c0       	rjmp	.+40     	; 0x4eb2 <LED_enuTurnOFF+0x64>
		}
		else if(Copy_pstrLedID->LED_u8Connection == LED_u8SOURCE)
    4e8a:	ea 81       	ldd	r30, Y+2	; 0x02
    4e8c:	fb 81       	ldd	r31, Y+3	; 0x03
    4e8e:	82 81       	ldd	r24, Z+2	; 0x02
    4e90:	89 30       	cpi	r24, 0x09	; 9
    4e92:	61 f4       	brne	.+24     	; 0x4eac <LED_enuTurnOFF+0x5e>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8LOW);
    4e94:	ea 81       	ldd	r30, Y+2	; 0x02
    4e96:	fb 81       	ldd	r31, Y+3	; 0x03
    4e98:	80 81       	ld	r24, Z
    4e9a:	ea 81       	ldd	r30, Y+2	; 0x02
    4e9c:	fb 81       	ldd	r31, Y+3	; 0x03
    4e9e:	91 81       	ldd	r25, Z+1	; 0x01
    4ea0:	69 2f       	mov	r22, r25
    4ea2:	40 e0       	ldi	r20, 0x00	; 0
    4ea4:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    4ea8:	89 83       	std	Y+1, r24	; 0x01
    4eaa:	03 c0       	rjmp	.+6      	; 0x4eb2 <LED_enuTurnOFF+0x64>
		}
		else
		{
			return ES_OUT_OF_RANGE;
    4eac:	83 e0       	ldi	r24, 0x03	; 3
    4eae:	8c 83       	std	Y+4, r24	; 0x04
    4eb0:	05 c0       	rjmp	.+10     	; 0x4ebc <LED_enuTurnOFF+0x6e>
	else
	{
		return ES_NULL_POINTER;
	}

	return Local_enuErrorState;
    4eb2:	89 81       	ldd	r24, Y+1	; 0x01
    4eb4:	8c 83       	std	Y+4, r24	; 0x04
    4eb6:	02 c0       	rjmp	.+4      	; 0x4ebc <LED_enuTurnOFF+0x6e>
			return ES_OUT_OF_RANGE;
		}
	}
	else
	{
		return ES_NULL_POINTER;
    4eb8:	82 e0       	ldi	r24, 0x02	; 2
    4eba:	8c 83       	std	Y+4, r24	; 0x04
    4ebc:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return Local_enuErrorState;
}
    4ebe:	0f 90       	pop	r0
    4ec0:	0f 90       	pop	r0
    4ec2:	0f 90       	pop	r0
    4ec4:	0f 90       	pop	r0
    4ec6:	cf 91       	pop	r28
    4ec8:	df 91       	pop	r29
    4eca:	08 95       	ret

00004ecc <LCD_enuInit>:
#include "LCD_private.h"
#include <util/delay.h>
/***********************	Includes Section End	***********************/

ES_t LCD_enuInit(void)
{
    4ecc:	df 93       	push	r29
    4ece:	cf 93       	push	r28
    4ed0:	cd b7       	in	r28, 0x3d	; 61
    4ed2:	de b7       	in	r29, 0x3e	; 62
    4ed4:	e9 97       	sbiw	r28, 0x39	; 57
    4ed6:	0f b6       	in	r0, 0x3f	; 63
    4ed8:	f8 94       	cli
    4eda:	de bf       	out	0x3e, r29	; 62
    4edc:	0f be       	out	0x3f, r0	; 63
    4ede:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    4ee0:	19 ae       	std	Y+57, r1	; 0x39

	/* Shared configuration in two LCD modes */
	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    4ee2:	80 e0       	ldi	r24, 0x00	; 0
    4ee4:	60 e0       	ldi	r22, 0x00	; 0
    4ee6:	41 e0       	ldi	r20, 0x01	; 1
    4ee8:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    4eec:	80 e0       	ldi	r24, 0x00	; 0
    4eee:	61 e0       	ldi	r22, 0x01	; 1
    4ef0:	41 e0       	ldi	r20, 0x01	; 1
    4ef2:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    4ef6:	80 e0       	ldi	r24, 0x00	; 0
    4ef8:	62 e0       	ldi	r22, 0x02	; 2
    4efa:	41 e0       	ldi	r20, 0x01	; 1
    4efc:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    4f00:	81 e0       	ldi	r24, 0x01	; 1
    4f02:	67 e0       	ldi	r22, 0x07	; 7
    4f04:	41 e0       	ldi	r20, 0x01	; 1
    4f06:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    4f0a:	81 e0       	ldi	r24, 0x01	; 1
    4f0c:	66 e0       	ldi	r22, 0x06	; 6
    4f0e:	41 e0       	ldi	r20, 0x01	; 1
    4f10:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    4f14:	81 e0       	ldi	r24, 0x01	; 1
    4f16:	65 e0       	ldi	r22, 0x05	; 5
    4f18:	41 e0       	ldi	r20, 0x01	; 1
    4f1a:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    4f1e:	81 e0       	ldi	r24, 0x01	; 1
    4f20:	64 e0       	ldi	r22, 0x04	; 4
    4f22:	41 e0       	ldi	r20, 0x01	; 1
    4f24:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    4f28:	80 e0       	ldi	r24, 0x00	; 0
    4f2a:	90 e0       	ldi	r25, 0x00	; 0
    4f2c:	ac e0       	ldi	r26, 0x0C	; 12
    4f2e:	b2 e4       	ldi	r27, 0x42	; 66
    4f30:	8d ab       	std	Y+53, r24	; 0x35
    4f32:	9e ab       	std	Y+54, r25	; 0x36
    4f34:	af ab       	std	Y+55, r26	; 0x37
    4f36:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f38:	6d a9       	ldd	r22, Y+53	; 0x35
    4f3a:	7e a9       	ldd	r23, Y+54	; 0x36
    4f3c:	8f a9       	ldd	r24, Y+55	; 0x37
    4f3e:	98 ad       	ldd	r25, Y+56	; 0x38
    4f40:	20 e0       	ldi	r18, 0x00	; 0
    4f42:	30 e0       	ldi	r19, 0x00	; 0
    4f44:	4a e7       	ldi	r20, 0x7A	; 122
    4f46:	53 e4       	ldi	r21, 0x43	; 67
    4f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f4c:	dc 01       	movw	r26, r24
    4f4e:	cb 01       	movw	r24, r22
    4f50:	89 ab       	std	Y+49, r24	; 0x31
    4f52:	9a ab       	std	Y+50, r25	; 0x32
    4f54:	ab ab       	std	Y+51, r26	; 0x33
    4f56:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4f58:	69 a9       	ldd	r22, Y+49	; 0x31
    4f5a:	7a a9       	ldd	r23, Y+50	; 0x32
    4f5c:	8b a9       	ldd	r24, Y+51	; 0x33
    4f5e:	9c a9       	ldd	r25, Y+52	; 0x34
    4f60:	20 e0       	ldi	r18, 0x00	; 0
    4f62:	30 e0       	ldi	r19, 0x00	; 0
    4f64:	40 e8       	ldi	r20, 0x80	; 128
    4f66:	5f e3       	ldi	r21, 0x3F	; 63
    4f68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f6c:	88 23       	and	r24, r24
    4f6e:	2c f4       	brge	.+10     	; 0x4f7a <LCD_enuInit+0xae>
		__ticks = 1;
    4f70:	81 e0       	ldi	r24, 0x01	; 1
    4f72:	90 e0       	ldi	r25, 0x00	; 0
    4f74:	98 ab       	std	Y+48, r25	; 0x30
    4f76:	8f a7       	std	Y+47, r24	; 0x2f
    4f78:	3f c0       	rjmp	.+126    	; 0x4ff8 <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    4f7a:	69 a9       	ldd	r22, Y+49	; 0x31
    4f7c:	7a a9       	ldd	r23, Y+50	; 0x32
    4f7e:	8b a9       	ldd	r24, Y+51	; 0x33
    4f80:	9c a9       	ldd	r25, Y+52	; 0x34
    4f82:	20 e0       	ldi	r18, 0x00	; 0
    4f84:	3f ef       	ldi	r19, 0xFF	; 255
    4f86:	4f e7       	ldi	r20, 0x7F	; 127
    4f88:	57 e4       	ldi	r21, 0x47	; 71
    4f8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f8e:	18 16       	cp	r1, r24
    4f90:	4c f5       	brge	.+82     	; 0x4fe4 <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f92:	6d a9       	ldd	r22, Y+53	; 0x35
    4f94:	7e a9       	ldd	r23, Y+54	; 0x36
    4f96:	8f a9       	ldd	r24, Y+55	; 0x37
    4f98:	98 ad       	ldd	r25, Y+56	; 0x38
    4f9a:	20 e0       	ldi	r18, 0x00	; 0
    4f9c:	30 e0       	ldi	r19, 0x00	; 0
    4f9e:	40 e2       	ldi	r20, 0x20	; 32
    4fa0:	51 e4       	ldi	r21, 0x41	; 65
    4fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fa6:	dc 01       	movw	r26, r24
    4fa8:	cb 01       	movw	r24, r22
    4faa:	bc 01       	movw	r22, r24
    4fac:	cd 01       	movw	r24, r26
    4fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fb2:	dc 01       	movw	r26, r24
    4fb4:	cb 01       	movw	r24, r22
    4fb6:	98 ab       	std	Y+48, r25	; 0x30
    4fb8:	8f a7       	std	Y+47, r24	; 0x2f
    4fba:	0f c0       	rjmp	.+30     	; 0x4fda <LCD_enuInit+0x10e>
    4fbc:	89 e1       	ldi	r24, 0x19	; 25
    4fbe:	90 e0       	ldi	r25, 0x00	; 0
    4fc0:	9e a7       	std	Y+46, r25	; 0x2e
    4fc2:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4fc4:	8d a5       	ldd	r24, Y+45	; 0x2d
    4fc6:	9e a5       	ldd	r25, Y+46	; 0x2e
    4fc8:	01 97       	sbiw	r24, 0x01	; 1
    4fca:	f1 f7       	brne	.-4      	; 0x4fc8 <LCD_enuInit+0xfc>
    4fcc:	9e a7       	std	Y+46, r25	; 0x2e
    4fce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    4fd2:	98 a9       	ldd	r25, Y+48	; 0x30
    4fd4:	01 97       	sbiw	r24, 0x01	; 1
    4fd6:	98 ab       	std	Y+48, r25	; 0x30
    4fd8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fda:	8f a5       	ldd	r24, Y+47	; 0x2f
    4fdc:	98 a9       	ldd	r25, Y+48	; 0x30
    4fde:	00 97       	sbiw	r24, 0x00	; 0
    4fe0:	69 f7       	brne	.-38     	; 0x4fbc <LCD_enuInit+0xf0>
    4fe2:	14 c0       	rjmp	.+40     	; 0x500c <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fe4:	69 a9       	ldd	r22, Y+49	; 0x31
    4fe6:	7a a9       	ldd	r23, Y+50	; 0x32
    4fe8:	8b a9       	ldd	r24, Y+51	; 0x33
    4fea:	9c a9       	ldd	r25, Y+52	; 0x34
    4fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ff0:	dc 01       	movw	r26, r24
    4ff2:	cb 01       	movw	r24, r22
    4ff4:	98 ab       	std	Y+48, r25	; 0x30
    4ff6:	8f a7       	std	Y+47, r24	; 0x2f
    4ff8:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ffa:	98 a9       	ldd	r25, Y+48	; 0x30
    4ffc:	9c a7       	std	Y+44, r25	; 0x2c
    4ffe:	8b a7       	std	Y+43, r24	; 0x2b
    5000:	8b a5       	ldd	r24, Y+43	; 0x2b
    5002:	9c a5       	ldd	r25, Y+44	; 0x2c
    5004:	01 97       	sbiw	r24, 0x01	; 1
    5006:	f1 f7       	brne	.-4      	; 0x5004 <LCD_enuInit+0x138>
    5008:	9c a7       	std	Y+44, r25	; 0x2c
    500a:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);


	#if LCD_MODE == EIGHT_BIT
		DIO_enuSetPinDirection(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    500c:	82 e0       	ldi	r24, 0x02	; 2
    500e:	63 e0       	ldi	r22, 0x03	; 3
    5010:	41 e0       	ldi	r20, 0x01	; 1
    5012:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    5016:	82 e0       	ldi	r24, 0x02	; 2
    5018:	62 e0       	ldi	r22, 0x02	; 2
    501a:	41 e0       	ldi	r20, 0x01	; 1
    501c:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    5020:	82 e0       	ldi	r24, 0x02	; 2
    5022:	61 e0       	ldi	r22, 0x01	; 1
    5024:	41 e0       	ldi	r20, 0x01	; 1
    5026:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    502a:	82 e0       	ldi	r24, 0x02	; 2
    502c:	60 e0       	ldi	r22, 0x00	; 0
    502e:	41 e0       	ldi	r20, 0x01	; 1
    5030:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>

		/* Function Set */
		LCD_invoidSendCommand(0x38);
    5034:	88 e3       	ldi	r24, 0x38	; 56
    5036:	0e 94 a1 2c 	call	0x5942	; 0x5942 <LCD_invoidSendCommand>
    503a:	80 e0       	ldi	r24, 0x00	; 0
    503c:	90 e0       	ldi	r25, 0x00	; 0
    503e:	a0 e8       	ldi	r26, 0x80	; 128
    5040:	bf e3       	ldi	r27, 0x3F	; 63
    5042:	8f a3       	std	Y+39, r24	; 0x27
    5044:	98 a7       	std	Y+40, r25	; 0x28
    5046:	a9 a7       	std	Y+41, r26	; 0x29
    5048:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    504a:	6f a1       	ldd	r22, Y+39	; 0x27
    504c:	78 a5       	ldd	r23, Y+40	; 0x28
    504e:	89 a5       	ldd	r24, Y+41	; 0x29
    5050:	9a a5       	ldd	r25, Y+42	; 0x2a
    5052:	20 e0       	ldi	r18, 0x00	; 0
    5054:	30 e0       	ldi	r19, 0x00	; 0
    5056:	4a e7       	ldi	r20, 0x7A	; 122
    5058:	53 e4       	ldi	r21, 0x43	; 67
    505a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    505e:	dc 01       	movw	r26, r24
    5060:	cb 01       	movw	r24, r22
    5062:	8b a3       	std	Y+35, r24	; 0x23
    5064:	9c a3       	std	Y+36, r25	; 0x24
    5066:	ad a3       	std	Y+37, r26	; 0x25
    5068:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    506a:	6b a1       	ldd	r22, Y+35	; 0x23
    506c:	7c a1       	ldd	r23, Y+36	; 0x24
    506e:	8d a1       	ldd	r24, Y+37	; 0x25
    5070:	9e a1       	ldd	r25, Y+38	; 0x26
    5072:	20 e0       	ldi	r18, 0x00	; 0
    5074:	30 e0       	ldi	r19, 0x00	; 0
    5076:	40 e8       	ldi	r20, 0x80	; 128
    5078:	5f e3       	ldi	r21, 0x3F	; 63
    507a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    507e:	88 23       	and	r24, r24
    5080:	2c f4       	brge	.+10     	; 0x508c <LCD_enuInit+0x1c0>
		__ticks = 1;
    5082:	81 e0       	ldi	r24, 0x01	; 1
    5084:	90 e0       	ldi	r25, 0x00	; 0
    5086:	9a a3       	std	Y+34, r25	; 0x22
    5088:	89 a3       	std	Y+33, r24	; 0x21
    508a:	3f c0       	rjmp	.+126    	; 0x510a <LCD_enuInit+0x23e>
	else if (__tmp > 65535)
    508c:	6b a1       	ldd	r22, Y+35	; 0x23
    508e:	7c a1       	ldd	r23, Y+36	; 0x24
    5090:	8d a1       	ldd	r24, Y+37	; 0x25
    5092:	9e a1       	ldd	r25, Y+38	; 0x26
    5094:	20 e0       	ldi	r18, 0x00	; 0
    5096:	3f ef       	ldi	r19, 0xFF	; 255
    5098:	4f e7       	ldi	r20, 0x7F	; 127
    509a:	57 e4       	ldi	r21, 0x47	; 71
    509c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    50a0:	18 16       	cp	r1, r24
    50a2:	4c f5       	brge	.+82     	; 0x50f6 <LCD_enuInit+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50a4:	6f a1       	ldd	r22, Y+39	; 0x27
    50a6:	78 a5       	ldd	r23, Y+40	; 0x28
    50a8:	89 a5       	ldd	r24, Y+41	; 0x29
    50aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    50ac:	20 e0       	ldi	r18, 0x00	; 0
    50ae:	30 e0       	ldi	r19, 0x00	; 0
    50b0:	40 e2       	ldi	r20, 0x20	; 32
    50b2:	51 e4       	ldi	r21, 0x41	; 65
    50b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50b8:	dc 01       	movw	r26, r24
    50ba:	cb 01       	movw	r24, r22
    50bc:	bc 01       	movw	r22, r24
    50be:	cd 01       	movw	r24, r26
    50c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50c4:	dc 01       	movw	r26, r24
    50c6:	cb 01       	movw	r24, r22
    50c8:	9a a3       	std	Y+34, r25	; 0x22
    50ca:	89 a3       	std	Y+33, r24	; 0x21
    50cc:	0f c0       	rjmp	.+30     	; 0x50ec <LCD_enuInit+0x220>
    50ce:	89 e1       	ldi	r24, 0x19	; 25
    50d0:	90 e0       	ldi	r25, 0x00	; 0
    50d2:	98 a3       	std	Y+32, r25	; 0x20
    50d4:	8f 8f       	std	Y+31, r24	; 0x1f
    50d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    50d8:	98 a1       	ldd	r25, Y+32	; 0x20
    50da:	01 97       	sbiw	r24, 0x01	; 1
    50dc:	f1 f7       	brne	.-4      	; 0x50da <LCD_enuInit+0x20e>
    50de:	98 a3       	std	Y+32, r25	; 0x20
    50e0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50e2:	89 a1       	ldd	r24, Y+33	; 0x21
    50e4:	9a a1       	ldd	r25, Y+34	; 0x22
    50e6:	01 97       	sbiw	r24, 0x01	; 1
    50e8:	9a a3       	std	Y+34, r25	; 0x22
    50ea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50ec:	89 a1       	ldd	r24, Y+33	; 0x21
    50ee:	9a a1       	ldd	r25, Y+34	; 0x22
    50f0:	00 97       	sbiw	r24, 0x00	; 0
    50f2:	69 f7       	brne	.-38     	; 0x50ce <LCD_enuInit+0x202>
    50f4:	14 c0       	rjmp	.+40     	; 0x511e <LCD_enuInit+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50f6:	6b a1       	ldd	r22, Y+35	; 0x23
    50f8:	7c a1       	ldd	r23, Y+36	; 0x24
    50fa:	8d a1       	ldd	r24, Y+37	; 0x25
    50fc:	9e a1       	ldd	r25, Y+38	; 0x26
    50fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5102:	dc 01       	movw	r26, r24
    5104:	cb 01       	movw	r24, r22
    5106:	9a a3       	std	Y+34, r25	; 0x22
    5108:	89 a3       	std	Y+33, r24	; 0x21
    510a:	89 a1       	ldd	r24, Y+33	; 0x21
    510c:	9a a1       	ldd	r25, Y+34	; 0x22
    510e:	9e 8f       	std	Y+30, r25	; 0x1e
    5110:	8d 8f       	std	Y+29, r24	; 0x1d
    5112:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5114:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5116:	01 97       	sbiw	r24, 0x01	; 1
    5118:	f1 f7       	brne	.-4      	; 0x5116 <LCD_enuInit+0x24a>
    511a:	9e 8f       	std	Y+30, r25	; 0x1e
    511c:	8d 8f       	std	Y+29, r24	; 0x1d
		#error "Invalid LCD Mode"
	#endif

		_delay_ms(1);
		/* Display ON Cursor Blink*/
		LCD_invoidSendCommand(0x0F);
    511e:	8f e0       	ldi	r24, 0x0F	; 15
    5120:	0e 94 a1 2c 	call	0x5942	; 0x5942 <LCD_invoidSendCommand>
    5124:	80 e0       	ldi	r24, 0x00	; 0
    5126:	90 e0       	ldi	r25, 0x00	; 0
    5128:	a0 e8       	ldi	r26, 0x80	; 128
    512a:	bf e3       	ldi	r27, 0x3F	; 63
    512c:	89 8f       	std	Y+25, r24	; 0x19
    512e:	9a 8f       	std	Y+26, r25	; 0x1a
    5130:	ab 8f       	std	Y+27, r26	; 0x1b
    5132:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5134:	69 8d       	ldd	r22, Y+25	; 0x19
    5136:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5138:	8b 8d       	ldd	r24, Y+27	; 0x1b
    513a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    513c:	20 e0       	ldi	r18, 0x00	; 0
    513e:	30 e0       	ldi	r19, 0x00	; 0
    5140:	4a e7       	ldi	r20, 0x7A	; 122
    5142:	53 e4       	ldi	r21, 0x43	; 67
    5144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5148:	dc 01       	movw	r26, r24
    514a:	cb 01       	movw	r24, r22
    514c:	8d 8b       	std	Y+21, r24	; 0x15
    514e:	9e 8b       	std	Y+22, r25	; 0x16
    5150:	af 8b       	std	Y+23, r26	; 0x17
    5152:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5154:	6d 89       	ldd	r22, Y+21	; 0x15
    5156:	7e 89       	ldd	r23, Y+22	; 0x16
    5158:	8f 89       	ldd	r24, Y+23	; 0x17
    515a:	98 8d       	ldd	r25, Y+24	; 0x18
    515c:	20 e0       	ldi	r18, 0x00	; 0
    515e:	30 e0       	ldi	r19, 0x00	; 0
    5160:	40 e8       	ldi	r20, 0x80	; 128
    5162:	5f e3       	ldi	r21, 0x3F	; 63
    5164:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5168:	88 23       	and	r24, r24
    516a:	2c f4       	brge	.+10     	; 0x5176 <LCD_enuInit+0x2aa>
		__ticks = 1;
    516c:	81 e0       	ldi	r24, 0x01	; 1
    516e:	90 e0       	ldi	r25, 0x00	; 0
    5170:	9c 8b       	std	Y+20, r25	; 0x14
    5172:	8b 8b       	std	Y+19, r24	; 0x13
    5174:	3f c0       	rjmp	.+126    	; 0x51f4 <LCD_enuInit+0x328>
	else if (__tmp > 65535)
    5176:	6d 89       	ldd	r22, Y+21	; 0x15
    5178:	7e 89       	ldd	r23, Y+22	; 0x16
    517a:	8f 89       	ldd	r24, Y+23	; 0x17
    517c:	98 8d       	ldd	r25, Y+24	; 0x18
    517e:	20 e0       	ldi	r18, 0x00	; 0
    5180:	3f ef       	ldi	r19, 0xFF	; 255
    5182:	4f e7       	ldi	r20, 0x7F	; 127
    5184:	57 e4       	ldi	r21, 0x47	; 71
    5186:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    518a:	18 16       	cp	r1, r24
    518c:	4c f5       	brge	.+82     	; 0x51e0 <LCD_enuInit+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    518e:	69 8d       	ldd	r22, Y+25	; 0x19
    5190:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5192:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5194:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5196:	20 e0       	ldi	r18, 0x00	; 0
    5198:	30 e0       	ldi	r19, 0x00	; 0
    519a:	40 e2       	ldi	r20, 0x20	; 32
    519c:	51 e4       	ldi	r21, 0x41	; 65
    519e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51a2:	dc 01       	movw	r26, r24
    51a4:	cb 01       	movw	r24, r22
    51a6:	bc 01       	movw	r22, r24
    51a8:	cd 01       	movw	r24, r26
    51aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51ae:	dc 01       	movw	r26, r24
    51b0:	cb 01       	movw	r24, r22
    51b2:	9c 8b       	std	Y+20, r25	; 0x14
    51b4:	8b 8b       	std	Y+19, r24	; 0x13
    51b6:	0f c0       	rjmp	.+30     	; 0x51d6 <LCD_enuInit+0x30a>
    51b8:	89 e1       	ldi	r24, 0x19	; 25
    51ba:	90 e0       	ldi	r25, 0x00	; 0
    51bc:	9a 8b       	std	Y+18, r25	; 0x12
    51be:	89 8b       	std	Y+17, r24	; 0x11
    51c0:	89 89       	ldd	r24, Y+17	; 0x11
    51c2:	9a 89       	ldd	r25, Y+18	; 0x12
    51c4:	01 97       	sbiw	r24, 0x01	; 1
    51c6:	f1 f7       	brne	.-4      	; 0x51c4 <LCD_enuInit+0x2f8>
    51c8:	9a 8b       	std	Y+18, r25	; 0x12
    51ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51cc:	8b 89       	ldd	r24, Y+19	; 0x13
    51ce:	9c 89       	ldd	r25, Y+20	; 0x14
    51d0:	01 97       	sbiw	r24, 0x01	; 1
    51d2:	9c 8b       	std	Y+20, r25	; 0x14
    51d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51d6:	8b 89       	ldd	r24, Y+19	; 0x13
    51d8:	9c 89       	ldd	r25, Y+20	; 0x14
    51da:	00 97       	sbiw	r24, 0x00	; 0
    51dc:	69 f7       	brne	.-38     	; 0x51b8 <LCD_enuInit+0x2ec>
    51de:	14 c0       	rjmp	.+40     	; 0x5208 <LCD_enuInit+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51e0:	6d 89       	ldd	r22, Y+21	; 0x15
    51e2:	7e 89       	ldd	r23, Y+22	; 0x16
    51e4:	8f 89       	ldd	r24, Y+23	; 0x17
    51e6:	98 8d       	ldd	r25, Y+24	; 0x18
    51e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51ec:	dc 01       	movw	r26, r24
    51ee:	cb 01       	movw	r24, r22
    51f0:	9c 8b       	std	Y+20, r25	; 0x14
    51f2:	8b 8b       	std	Y+19, r24	; 0x13
    51f4:	8b 89       	ldd	r24, Y+19	; 0x13
    51f6:	9c 89       	ldd	r25, Y+20	; 0x14
    51f8:	98 8b       	std	Y+16, r25	; 0x10
    51fa:	8f 87       	std	Y+15, r24	; 0x0f
    51fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    51fe:	98 89       	ldd	r25, Y+16	; 0x10
    5200:	01 97       	sbiw	r24, 0x01	; 1
    5202:	f1 f7       	brne	.-4      	; 0x5200 <LCD_enuInit+0x334>
    5204:	98 8b       	std	Y+16, r25	; 0x10
    5206:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		/* Clear Display */
		LCD_invoidSendCommand(0x01);
    5208:	81 e0       	ldi	r24, 0x01	; 1
    520a:	0e 94 a1 2c 	call	0x5942	; 0x5942 <LCD_invoidSendCommand>
    520e:	80 e0       	ldi	r24, 0x00	; 0
    5210:	90 e0       	ldi	r25, 0x00	; 0
    5212:	a0 e0       	ldi	r26, 0x00	; 0
    5214:	b0 e4       	ldi	r27, 0x40	; 64
    5216:	8b 87       	std	Y+11, r24	; 0x0b
    5218:	9c 87       	std	Y+12, r25	; 0x0c
    521a:	ad 87       	std	Y+13, r26	; 0x0d
    521c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    521e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5220:	7c 85       	ldd	r23, Y+12	; 0x0c
    5222:	8d 85       	ldd	r24, Y+13	; 0x0d
    5224:	9e 85       	ldd	r25, Y+14	; 0x0e
    5226:	20 e0       	ldi	r18, 0x00	; 0
    5228:	30 e0       	ldi	r19, 0x00	; 0
    522a:	4a e7       	ldi	r20, 0x7A	; 122
    522c:	53 e4       	ldi	r21, 0x43	; 67
    522e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5232:	dc 01       	movw	r26, r24
    5234:	cb 01       	movw	r24, r22
    5236:	8f 83       	std	Y+7, r24	; 0x07
    5238:	98 87       	std	Y+8, r25	; 0x08
    523a:	a9 87       	std	Y+9, r26	; 0x09
    523c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    523e:	6f 81       	ldd	r22, Y+7	; 0x07
    5240:	78 85       	ldd	r23, Y+8	; 0x08
    5242:	89 85       	ldd	r24, Y+9	; 0x09
    5244:	9a 85       	ldd	r25, Y+10	; 0x0a
    5246:	20 e0       	ldi	r18, 0x00	; 0
    5248:	30 e0       	ldi	r19, 0x00	; 0
    524a:	40 e8       	ldi	r20, 0x80	; 128
    524c:	5f e3       	ldi	r21, 0x3F	; 63
    524e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5252:	88 23       	and	r24, r24
    5254:	2c f4       	brge	.+10     	; 0x5260 <LCD_enuInit+0x394>
		__ticks = 1;
    5256:	81 e0       	ldi	r24, 0x01	; 1
    5258:	90 e0       	ldi	r25, 0x00	; 0
    525a:	9e 83       	std	Y+6, r25	; 0x06
    525c:	8d 83       	std	Y+5, r24	; 0x05
    525e:	3f c0       	rjmp	.+126    	; 0x52de <LCD_enuInit+0x412>
	else if (__tmp > 65535)
    5260:	6f 81       	ldd	r22, Y+7	; 0x07
    5262:	78 85       	ldd	r23, Y+8	; 0x08
    5264:	89 85       	ldd	r24, Y+9	; 0x09
    5266:	9a 85       	ldd	r25, Y+10	; 0x0a
    5268:	20 e0       	ldi	r18, 0x00	; 0
    526a:	3f ef       	ldi	r19, 0xFF	; 255
    526c:	4f e7       	ldi	r20, 0x7F	; 127
    526e:	57 e4       	ldi	r21, 0x47	; 71
    5270:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5274:	18 16       	cp	r1, r24
    5276:	4c f5       	brge	.+82     	; 0x52ca <LCD_enuInit+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5278:	6b 85       	ldd	r22, Y+11	; 0x0b
    527a:	7c 85       	ldd	r23, Y+12	; 0x0c
    527c:	8d 85       	ldd	r24, Y+13	; 0x0d
    527e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5280:	20 e0       	ldi	r18, 0x00	; 0
    5282:	30 e0       	ldi	r19, 0x00	; 0
    5284:	40 e2       	ldi	r20, 0x20	; 32
    5286:	51 e4       	ldi	r21, 0x41	; 65
    5288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    528c:	dc 01       	movw	r26, r24
    528e:	cb 01       	movw	r24, r22
    5290:	bc 01       	movw	r22, r24
    5292:	cd 01       	movw	r24, r26
    5294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5298:	dc 01       	movw	r26, r24
    529a:	cb 01       	movw	r24, r22
    529c:	9e 83       	std	Y+6, r25	; 0x06
    529e:	8d 83       	std	Y+5, r24	; 0x05
    52a0:	0f c0       	rjmp	.+30     	; 0x52c0 <LCD_enuInit+0x3f4>
    52a2:	89 e1       	ldi	r24, 0x19	; 25
    52a4:	90 e0       	ldi	r25, 0x00	; 0
    52a6:	9c 83       	std	Y+4, r25	; 0x04
    52a8:	8b 83       	std	Y+3, r24	; 0x03
    52aa:	8b 81       	ldd	r24, Y+3	; 0x03
    52ac:	9c 81       	ldd	r25, Y+4	; 0x04
    52ae:	01 97       	sbiw	r24, 0x01	; 1
    52b0:	f1 f7       	brne	.-4      	; 0x52ae <LCD_enuInit+0x3e2>
    52b2:	9c 83       	std	Y+4, r25	; 0x04
    52b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52b6:	8d 81       	ldd	r24, Y+5	; 0x05
    52b8:	9e 81       	ldd	r25, Y+6	; 0x06
    52ba:	01 97       	sbiw	r24, 0x01	; 1
    52bc:	9e 83       	std	Y+6, r25	; 0x06
    52be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52c0:	8d 81       	ldd	r24, Y+5	; 0x05
    52c2:	9e 81       	ldd	r25, Y+6	; 0x06
    52c4:	00 97       	sbiw	r24, 0x00	; 0
    52c6:	69 f7       	brne	.-38     	; 0x52a2 <LCD_enuInit+0x3d6>
    52c8:	14 c0       	rjmp	.+40     	; 0x52f2 <LCD_enuInit+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52ca:	6f 81       	ldd	r22, Y+7	; 0x07
    52cc:	78 85       	ldd	r23, Y+8	; 0x08
    52ce:	89 85       	ldd	r24, Y+9	; 0x09
    52d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    52d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52d6:	dc 01       	movw	r26, r24
    52d8:	cb 01       	movw	r24, r22
    52da:	9e 83       	std	Y+6, r25	; 0x06
    52dc:	8d 83       	std	Y+5, r24	; 0x05
    52de:	8d 81       	ldd	r24, Y+5	; 0x05
    52e0:	9e 81       	ldd	r25, Y+6	; 0x06
    52e2:	9a 83       	std	Y+2, r25	; 0x02
    52e4:	89 83       	std	Y+1, r24	; 0x01
    52e6:	89 81       	ldd	r24, Y+1	; 0x01
    52e8:	9a 81       	ldd	r25, Y+2	; 0x02
    52ea:	01 97       	sbiw	r24, 0x01	; 1
    52ec:	f1 f7       	brne	.-4      	; 0x52ea <LCD_enuInit+0x41e>
    52ee:	9a 83       	std	Y+2, r25	; 0x02
    52f0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		/* Entry Mode */
		LCD_invoidSendCommand(0x06);
    52f2:	86 e0       	ldi	r24, 0x06	; 6
    52f4:	0e 94 a1 2c 	call	0x5942	; 0x5942 <LCD_invoidSendCommand>

	return Local_enuErrorState;
    52f8:	89 ad       	ldd	r24, Y+57	; 0x39
}
    52fa:	e9 96       	adiw	r28, 0x39	; 57
    52fc:	0f b6       	in	r0, 0x3f	; 63
    52fe:	f8 94       	cli
    5300:	de bf       	out	0x3e, r29	; 62
    5302:	0f be       	out	0x3f, r0	; 63
    5304:	cd bf       	out	0x3d, r28	; 61
    5306:	cf 91       	pop	r28
    5308:	df 91       	pop	r29
    530a:	08 95       	ret

0000530c <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    530c:	df 93       	push	r29
    530e:	cf 93       	push	r28
    5310:	00 d0       	rcall	.+0      	; 0x5312 <LCD_enuSendCommand+0x6>
    5312:	cd b7       	in	r28, 0x3d	; 61
    5314:	de b7       	in	r29, 0x3e	; 62
    5316:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    5318:	19 82       	std	Y+1, r1	; 0x01

	/* Set RS as Command */
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    531a:	80 e0       	ldi	r24, 0x00	; 0
    531c:	60 e0       	ldi	r22, 0x00	; 0
    531e:	40 e0       	ldi	r20, 0x00	; 0
    5320:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>

	LCD_voidLatch(Copy_u8Command);
    5324:	8a 81       	ldd	r24, Y+2	; 0x02
    5326:	0e 94 44 2b 	call	0x5688	; 0x5688 <LCD_voidLatch>

	return Local_enuErrorState;
    532a:	89 81       	ldd	r24, Y+1	; 0x01
}
    532c:	0f 90       	pop	r0
    532e:	0f 90       	pop	r0
    5330:	cf 91       	pop	r28
    5332:	df 91       	pop	r29
    5334:	08 95       	ret

00005336 <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Char)
{
    5336:	df 93       	push	r29
    5338:	cf 93       	push	r28
    533a:	00 d0       	rcall	.+0      	; 0x533c <LCD_enuDisplayChar+0x6>
    533c:	cd b7       	in	r28, 0x3d	; 61
    533e:	de b7       	in	r29, 0x3e	; 62
    5340:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    5342:	19 82       	std	Y+1, r1	; 0x01

	/* Set RS as DATA */
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    5344:	80 e0       	ldi	r24, 0x00	; 0
    5346:	60 e0       	ldi	r22, 0x00	; 0
    5348:	41 e0       	ldi	r20, 0x01	; 1
    534a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>

	LCD_voidLatch(Copy_u8Char);
    534e:	8a 81       	ldd	r24, Y+2	; 0x02
    5350:	0e 94 44 2b 	call	0x5688	; 0x5688 <LCD_voidLatch>

	return Local_enuErrorState;
    5354:	89 81       	ldd	r24, Y+1	; 0x01
}
    5356:	0f 90       	pop	r0
    5358:	0f 90       	pop	r0
    535a:	cf 91       	pop	r28
    535c:	df 91       	pop	r29
    535e:	08 95       	ret

00005360 <LCD_enuDisplayNumber>:

ES_t LCD_enuDisplayNumber(u32 Copy_u8Number)
{
    5360:	df 93       	push	r29
    5362:	cf 93       	push	r28
    5364:	cd b7       	in	r28, 0x3d	; 61
    5366:	de b7       	in	r29, 0x3e	; 62
    5368:	2a 97       	sbiw	r28, 0x0a	; 10
    536a:	0f b6       	in	r0, 0x3f	; 63
    536c:	f8 94       	cli
    536e:	de bf       	out	0x3e, r29	; 62
    5370:	0f be       	out	0x3f, r0	; 63
    5372:	cd bf       	out	0x3d, r28	; 61
    5374:	6f 83       	std	Y+7, r22	; 0x07
    5376:	78 87       	std	Y+8, r23	; 0x08
    5378:	89 87       	std	Y+9, r24	; 0x09
    537a:	9a 87       	std	Y+10, r25	; 0x0a
	ES_t Local_enuErrorState = ES_NOK;
    537c:	1e 82       	std	Y+6, r1	; 0x06

	u8 Local_u8Digit = 0;
    537e:	1d 82       	std	Y+5, r1	; 0x05
	f64 Local_f64NumberOfDigits = 1;
    5380:	80 e0       	ldi	r24, 0x00	; 0
    5382:	90 e0       	ldi	r25, 0x00	; 0
    5384:	a0 e8       	ldi	r26, 0x80	; 128
    5386:	bf e3       	ldi	r27, 0x3F	; 63
    5388:	89 83       	std	Y+1, r24	; 0x01
    538a:	9a 83       	std	Y+2, r25	; 0x02
    538c:	ab 83       	std	Y+3, r26	; 0x03
    538e:	bc 83       	std	Y+4, r27	; 0x04

	/* Set RS as DATA */
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    5390:	80 e0       	ldi	r24, 0x00	; 0
    5392:	60 e0       	ldi	r22, 0x00	; 0
    5394:	41 e0       	ldi	r20, 0x01	; 1
    5396:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>

	if(Copy_u8Number < 10)
    539a:	8f 81       	ldd	r24, Y+7	; 0x07
    539c:	98 85       	ldd	r25, Y+8	; 0x08
    539e:	a9 85       	ldd	r26, Y+9	; 0x09
    53a0:	ba 85       	ldd	r27, Y+10	; 0x0a
    53a2:	8a 30       	cpi	r24, 0x0A	; 10
    53a4:	91 05       	cpc	r25, r1
    53a6:	a1 05       	cpc	r26, r1
    53a8:	b1 05       	cpc	r27, r1
    53aa:	08 f5       	brcc	.+66     	; 0x53ee <LCD_enuDisplayNumber+0x8e>
	{
		Copy_u8Number += 48;
    53ac:	8f 81       	ldd	r24, Y+7	; 0x07
    53ae:	98 85       	ldd	r25, Y+8	; 0x08
    53b0:	a9 85       	ldd	r26, Y+9	; 0x09
    53b2:	ba 85       	ldd	r27, Y+10	; 0x0a
    53b4:	c0 96       	adiw	r24, 0x30	; 48
    53b6:	a1 1d       	adc	r26, r1
    53b8:	b1 1d       	adc	r27, r1
    53ba:	8f 83       	std	Y+7, r24	; 0x07
    53bc:	98 87       	std	Y+8, r25	; 0x08
    53be:	a9 87       	std	Y+9, r26	; 0x09
    53c0:	ba 87       	std	Y+10, r27	; 0x0a
		LCD_voidLatch(Copy_u8Number);
    53c2:	8f 81       	ldd	r24, Y+7	; 0x07
    53c4:	0e 94 44 2b 	call	0x5688	; 0x5688 <LCD_voidLatch>
		Local_enuErrorState = ES_OK;
    53c8:	81 e0       	ldi	r24, 0x01	; 1
    53ca:	8e 83       	std	Y+6, r24	; 0x06
    53cc:	9a c0       	rjmp	.+308    	; 0x5502 <LCD_enuDisplayNumber+0x1a2>
	else
	{
		/* Count digits of number log10 */
		while(Local_f64NumberOfDigits < Copy_u8Number)
		{
			Local_f64NumberOfDigits *= 10;
    53ce:	69 81       	ldd	r22, Y+1	; 0x01
    53d0:	7a 81       	ldd	r23, Y+2	; 0x02
    53d2:	8b 81       	ldd	r24, Y+3	; 0x03
    53d4:	9c 81       	ldd	r25, Y+4	; 0x04
    53d6:	20 e0       	ldi	r18, 0x00	; 0
    53d8:	30 e0       	ldi	r19, 0x00	; 0
    53da:	40 e2       	ldi	r20, 0x20	; 32
    53dc:	51 e4       	ldi	r21, 0x41	; 65
    53de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53e2:	dc 01       	movw	r26, r24
    53e4:	cb 01       	movw	r24, r22
    53e6:	89 83       	std	Y+1, r24	; 0x01
    53e8:	9a 83       	std	Y+2, r25	; 0x02
    53ea:	ab 83       	std	Y+3, r26	; 0x03
    53ec:	bc 83       	std	Y+4, r27	; 0x04
		Local_enuErrorState = ES_OK;
	}
	else
	{
		/* Count digits of number log10 */
		while(Local_f64NumberOfDigits < Copy_u8Number)
    53ee:	6f 81       	ldd	r22, Y+7	; 0x07
    53f0:	78 85       	ldd	r23, Y+8	; 0x08
    53f2:	89 85       	ldd	r24, Y+9	; 0x09
    53f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    53f6:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    53fa:	dc 01       	movw	r26, r24
    53fc:	cb 01       	movw	r24, r22
    53fe:	bc 01       	movw	r22, r24
    5400:	cd 01       	movw	r24, r26
    5402:	29 81       	ldd	r18, Y+1	; 0x01
    5404:	3a 81       	ldd	r19, Y+2	; 0x02
    5406:	4b 81       	ldd	r20, Y+3	; 0x03
    5408:	5c 81       	ldd	r21, Y+4	; 0x04
    540a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    540e:	18 16       	cp	r1, r24
    5410:	f4 f2       	brlt	.-68     	; 0x53ce <LCD_enuDisplayNumber+0x6e>
		{
			Local_f64NumberOfDigits *= 10;
		}
		Local_f64NumberOfDigits /= 10;
    5412:	69 81       	ldd	r22, Y+1	; 0x01
    5414:	7a 81       	ldd	r23, Y+2	; 0x02
    5416:	8b 81       	ldd	r24, Y+3	; 0x03
    5418:	9c 81       	ldd	r25, Y+4	; 0x04
    541a:	20 e0       	ldi	r18, 0x00	; 0
    541c:	30 e0       	ldi	r19, 0x00	; 0
    541e:	40 e2       	ldi	r20, 0x20	; 32
    5420:	51 e4       	ldi	r21, 0x41	; 65
    5422:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5426:	dc 01       	movw	r26, r24
    5428:	cb 01       	movw	r24, r22
    542a:	89 83       	std	Y+1, r24	; 0x01
    542c:	9a 83       	std	Y+2, r25	; 0x02
    542e:	ab 83       	std	Y+3, r26	; 0x03
    5430:	bc 83       	std	Y+4, r27	; 0x04
    5432:	58 c0       	rjmp	.+176    	; 0x54e4 <LCD_enuDisplayNumber+0x184>

		while(Local_f64NumberOfDigits >= 1)
		{
			Local_u8Digit = (u8)(Copy_u8Number / Local_f64NumberOfDigits);
    5434:	6f 81       	ldd	r22, Y+7	; 0x07
    5436:	78 85       	ldd	r23, Y+8	; 0x08
    5438:	89 85       	ldd	r24, Y+9	; 0x09
    543a:	9a 85       	ldd	r25, Y+10	; 0x0a
    543c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    5440:	dc 01       	movw	r26, r24
    5442:	cb 01       	movw	r24, r22
    5444:	bc 01       	movw	r22, r24
    5446:	cd 01       	movw	r24, r26
    5448:	29 81       	ldd	r18, Y+1	; 0x01
    544a:	3a 81       	ldd	r19, Y+2	; 0x02
    544c:	4b 81       	ldd	r20, Y+3	; 0x03
    544e:	5c 81       	ldd	r21, Y+4	; 0x04
    5450:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5454:	dc 01       	movw	r26, r24
    5456:	cb 01       	movw	r24, r22
    5458:	bc 01       	movw	r22, r24
    545a:	cd 01       	movw	r24, r26
    545c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5460:	dc 01       	movw	r26, r24
    5462:	cb 01       	movw	r24, r22
    5464:	8d 83       	std	Y+5, r24	; 0x05
			Copy_u8Number -= ((u32)(Local_u8Digit * Local_f64NumberOfDigits));
    5466:	8d 81       	ldd	r24, Y+5	; 0x05
    5468:	88 2f       	mov	r24, r24
    546a:	90 e0       	ldi	r25, 0x00	; 0
    546c:	aa 27       	eor	r26, r26
    546e:	97 fd       	sbrc	r25, 7
    5470:	a0 95       	com	r26
    5472:	ba 2f       	mov	r27, r26
    5474:	bc 01       	movw	r22, r24
    5476:	cd 01       	movw	r24, r26
    5478:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    547c:	dc 01       	movw	r26, r24
    547e:	cb 01       	movw	r24, r22
    5480:	bc 01       	movw	r22, r24
    5482:	cd 01       	movw	r24, r26
    5484:	29 81       	ldd	r18, Y+1	; 0x01
    5486:	3a 81       	ldd	r19, Y+2	; 0x02
    5488:	4b 81       	ldd	r20, Y+3	; 0x03
    548a:	5c 81       	ldd	r21, Y+4	; 0x04
    548c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5490:	dc 01       	movw	r26, r24
    5492:	cb 01       	movw	r24, r22
    5494:	bc 01       	movw	r22, r24
    5496:	cd 01       	movw	r24, r26
    5498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    549c:	9b 01       	movw	r18, r22
    549e:	ac 01       	movw	r20, r24
    54a0:	8f 81       	ldd	r24, Y+7	; 0x07
    54a2:	98 85       	ldd	r25, Y+8	; 0x08
    54a4:	a9 85       	ldd	r26, Y+9	; 0x09
    54a6:	ba 85       	ldd	r27, Y+10	; 0x0a
    54a8:	82 1b       	sub	r24, r18
    54aa:	93 0b       	sbc	r25, r19
    54ac:	a4 0b       	sbc	r26, r20
    54ae:	b5 0b       	sbc	r27, r21
    54b0:	8f 83       	std	Y+7, r24	; 0x07
    54b2:	98 87       	std	Y+8, r25	; 0x08
    54b4:	a9 87       	std	Y+9, r26	; 0x09
    54b6:	ba 87       	std	Y+10, r27	; 0x0a
			Local_u8Digit += 48;
    54b8:	8d 81       	ldd	r24, Y+5	; 0x05
    54ba:	80 5d       	subi	r24, 0xD0	; 208
    54bc:	8d 83       	std	Y+5, r24	; 0x05
			Local_f64NumberOfDigits /= 10;
    54be:	69 81       	ldd	r22, Y+1	; 0x01
    54c0:	7a 81       	ldd	r23, Y+2	; 0x02
    54c2:	8b 81       	ldd	r24, Y+3	; 0x03
    54c4:	9c 81       	ldd	r25, Y+4	; 0x04
    54c6:	20 e0       	ldi	r18, 0x00	; 0
    54c8:	30 e0       	ldi	r19, 0x00	; 0
    54ca:	40 e2       	ldi	r20, 0x20	; 32
    54cc:	51 e4       	ldi	r21, 0x41	; 65
    54ce:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    54d2:	dc 01       	movw	r26, r24
    54d4:	cb 01       	movw	r24, r22
    54d6:	89 83       	std	Y+1, r24	; 0x01
    54d8:	9a 83       	std	Y+2, r25	; 0x02
    54da:	ab 83       	std	Y+3, r26	; 0x03
    54dc:	bc 83       	std	Y+4, r27	; 0x04

			LCD_voidLatch(Local_u8Digit);
    54de:	8d 81       	ldd	r24, Y+5	; 0x05
    54e0:	0e 94 44 2b 	call	0x5688	; 0x5688 <LCD_voidLatch>
		{
			Local_f64NumberOfDigits *= 10;
		}
		Local_f64NumberOfDigits /= 10;

		while(Local_f64NumberOfDigits >= 1)
    54e4:	69 81       	ldd	r22, Y+1	; 0x01
    54e6:	7a 81       	ldd	r23, Y+2	; 0x02
    54e8:	8b 81       	ldd	r24, Y+3	; 0x03
    54ea:	9c 81       	ldd	r25, Y+4	; 0x04
    54ec:	20 e0       	ldi	r18, 0x00	; 0
    54ee:	30 e0       	ldi	r19, 0x00	; 0
    54f0:	40 e8       	ldi	r20, 0x80	; 128
    54f2:	5f e3       	ldi	r21, 0x3F	; 63
    54f4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    54f8:	88 23       	and	r24, r24
    54fa:	0c f0       	brlt	.+2      	; 0x54fe <LCD_enuDisplayNumber+0x19e>
    54fc:	9b cf       	rjmp	.-202    	; 0x5434 <LCD_enuDisplayNumber+0xd4>
			Local_u8Digit += 48;
			Local_f64NumberOfDigits /= 10;

			LCD_voidLatch(Local_u8Digit);
		}
		Local_enuErrorState = ES_OK;
    54fe:	81 e0       	ldi	r24, 0x01	; 1
    5500:	8e 83       	std	Y+6, r24	; 0x06
	}


	return Local_enuErrorState;
    5502:	8e 81       	ldd	r24, Y+6	; 0x06
}
    5504:	2a 96       	adiw	r28, 0x0a	; 10
    5506:	0f b6       	in	r0, 0x3f	; 63
    5508:	f8 94       	cli
    550a:	de bf       	out	0x3e, r29	; 62
    550c:	0f be       	out	0x3f, r0	; 63
    550e:	cd bf       	out	0x3d, r28	; 61
    5510:	cf 91       	pop	r28
    5512:	df 91       	pop	r29
    5514:	08 95       	ret

00005516 <LCD_enuDisplaySpecialChar>:

ES_t LCD_enuDisplaySpecialChar(u8 Copy_u8RowPosition , u8 Copy_u8ColPosition, u8 *Copy_pu8ExtraChar)
{
    5516:	df 93       	push	r29
    5518:	cf 93       	push	r28
    551a:	00 d0       	rcall	.+0      	; 0x551c <LCD_enuDisplaySpecialChar+0x6>
    551c:	00 d0       	rcall	.+0      	; 0x551e <LCD_enuDisplaySpecialChar+0x8>
    551e:	00 d0       	rcall	.+0      	; 0x5520 <LCD_enuDisplaySpecialChar+0xa>
    5520:	cd b7       	in	r28, 0x3d	; 61
    5522:	de b7       	in	r29, 0x3e	; 62
    5524:	8b 83       	std	Y+3, r24	; 0x03
    5526:	6c 83       	std	Y+4, r22	; 0x04
    5528:	5e 83       	std	Y+6, r21	; 0x06
    552a:	4d 83       	std	Y+5, r20	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    552c:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8Iterator = 0;
    552e:	19 82       	std	Y+1, r1	; 0x01

		LCD_invoidSendCommand(0x40);
    5530:	80 e4       	ldi	r24, 0x40	; 64
    5532:	0e 94 a1 2c 	call	0x5942	; 0x5942 <LCD_invoidSendCommand>

		/* Set RS as DATA */
		DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    5536:	80 e0       	ldi	r24, 0x00	; 0
    5538:	60 e0       	ldi	r22, 0x00	; 0
    553a:	41 e0       	ldi	r20, 0x01	; 1
    553c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>

		for(Local_u8Iterator = 0; Local_u8Iterator < 8; Local_u8Iterator++)
    5540:	19 82       	std	Y+1, r1	; 0x01
    5542:	0e c0       	rjmp	.+28     	; 0x5560 <LCD_enuDisplaySpecialChar+0x4a>
		{
			LCD_voidLatch(Copy_pu8ExtraChar[Local_u8Iterator]);
    5544:	89 81       	ldd	r24, Y+1	; 0x01
    5546:	28 2f       	mov	r18, r24
    5548:	30 e0       	ldi	r19, 0x00	; 0
    554a:	8d 81       	ldd	r24, Y+5	; 0x05
    554c:	9e 81       	ldd	r25, Y+6	; 0x06
    554e:	fc 01       	movw	r30, r24
    5550:	e2 0f       	add	r30, r18
    5552:	f3 1f       	adc	r31, r19
    5554:	80 81       	ld	r24, Z
    5556:	0e 94 44 2b 	call	0x5688	; 0x5688 <LCD_voidLatch>
		LCD_invoidSendCommand(0x40);

		/* Set RS as DATA */
		DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);

		for(Local_u8Iterator = 0; Local_u8Iterator < 8; Local_u8Iterator++)
    555a:	89 81       	ldd	r24, Y+1	; 0x01
    555c:	8f 5f       	subi	r24, 0xFF	; 255
    555e:	89 83       	std	Y+1, r24	; 0x01
    5560:	89 81       	ldd	r24, Y+1	; 0x01
    5562:	88 30       	cpi	r24, 0x08	; 8
    5564:	78 f3       	brcs	.-34     	; 0x5544 <LCD_enuDisplaySpecialChar+0x2e>
		{
			LCD_voidLatch(Copy_pu8ExtraChar[Local_u8Iterator]);
		}

		LCD_enuLocalGoToXY(Copy_u8RowPosition, Copy_u8ColPosition);
    5566:	8b 81       	ldd	r24, Y+3	; 0x03
    5568:	6c 81       	ldd	r22, Y+4	; 0x04
    556a:	0e 94 1c 2b 	call	0x5638	; 0x5638 <LCD_enuLocalGoToXY>

		DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    556e:	80 e0       	ldi	r24, 0x00	; 0
    5570:	60 e0       	ldi	r22, 0x00	; 0
    5572:	41 e0       	ldi	r20, 0x01	; 1
    5574:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
		LCD_voidLatch(0);
    5578:	80 e0       	ldi	r24, 0x00	; 0
    557a:	0e 94 44 2b 	call	0x5688	; 0x5688 <LCD_voidLatch>

	return Local_enuErrorState;
    557e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5580:	26 96       	adiw	r28, 0x06	; 6
    5582:	0f b6       	in	r0, 0x3f	; 63
    5584:	f8 94       	cli
    5586:	de bf       	out	0x3e, r29	; 62
    5588:	0f be       	out	0x3f, r0	; 63
    558a:	cd bf       	out	0x3d, r28	; 61
    558c:	cf 91       	pop	r28
    558e:	df 91       	pop	r29
    5590:	08 95       	ret

00005592 <LCD_enuSendString>:



ES_t LCD_enuSendString(u8 *Copy_pu8string)
{
    5592:	df 93       	push	r29
    5594:	cf 93       	push	r28
    5596:	00 d0       	rcall	.+0      	; 0x5598 <LCD_enuSendString+0x6>
    5598:	00 d0       	rcall	.+0      	; 0x559a <LCD_enuSendString+0x8>
    559a:	cd b7       	in	r28, 0x3d	; 61
    559c:	de b7       	in	r29, 0x3e	; 62
    559e:	9c 83       	std	Y+4, r25	; 0x04
    55a0:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    55a2:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8Counter = 0;
    55a4:	19 82       	std	Y+1, r1	; 0x01
	/* Set RS as DATA */
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    55a6:	80 e0       	ldi	r24, 0x00	; 0
    55a8:	60 e0       	ldi	r22, 0x00	; 0
    55aa:	41 e0       	ldi	r20, 0x01	; 1
    55ac:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>

	if(Copy_pu8string != NULL)
    55b0:	8b 81       	ldd	r24, Y+3	; 0x03
    55b2:	9c 81       	ldd	r25, Y+4	; 0x04
    55b4:	00 97       	sbiw	r24, 0x00	; 0
    55b6:	09 f1       	breq	.+66     	; 0x55fa <LCD_enuSendString+0x68>
    55b8:	18 c0       	rjmp	.+48     	; 0x55ea <LCD_enuSendString+0x58>
	{
		while(*Copy_pu8string)
		{
			LCD_voidLatch(*Copy_pu8string);
    55ba:	eb 81       	ldd	r30, Y+3	; 0x03
    55bc:	fc 81       	ldd	r31, Y+4	; 0x04
    55be:	80 81       	ld	r24, Z
    55c0:	0e 94 44 2b 	call	0x5688	; 0x5688 <LCD_voidLatch>
			Copy_pu8string++;
    55c4:	8b 81       	ldd	r24, Y+3	; 0x03
    55c6:	9c 81       	ldd	r25, Y+4	; 0x04
    55c8:	01 96       	adiw	r24, 0x01	; 1
    55ca:	9c 83       	std	Y+4, r25	; 0x04
    55cc:	8b 83       	std	Y+3, r24	; 0x03
			Local_u8Counter++;
    55ce:	89 81       	ldd	r24, Y+1	; 0x01
    55d0:	8f 5f       	subi	r24, 0xFF	; 255
    55d2:	89 83       	std	Y+1, r24	; 0x01

			/* Go to Second Line */
			if(Local_u8Counter == 16)
    55d4:	89 81       	ldd	r24, Y+1	; 0x01
    55d6:	80 31       	cpi	r24, 0x10	; 16
    55d8:	41 f4       	brne	.+16     	; 0x55ea <LCD_enuSendString+0x58>
			{
				LCD_invoidSendCommand(0xC0);
    55da:	80 ec       	ldi	r24, 0xC0	; 192
    55dc:	0e 94 a1 2c 	call	0x5942	; 0x5942 <LCD_invoidSendCommand>
				DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    55e0:	80 e0       	ldi	r24, 0x00	; 0
    55e2:	60 e0       	ldi	r22, 0x00	; 0
    55e4:	41 e0       	ldi	r20, 0x01	; 1
    55e6:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
	/* Set RS as DATA */
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);

	if(Copy_pu8string != NULL)
	{
		while(*Copy_pu8string)
    55ea:	eb 81       	ldd	r30, Y+3	; 0x03
    55ec:	fc 81       	ldd	r31, Y+4	; 0x04
    55ee:	80 81       	ld	r24, Z
    55f0:	88 23       	and	r24, r24
    55f2:	19 f7       	brne	.-58     	; 0x55ba <LCD_enuSendString+0x28>
			{
				LCD_invoidSendCommand(0xC0);
				DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
			}
		}
		Local_enuErrorState = ES_OK;
    55f4:	81 e0       	ldi	r24, 0x01	; 1
    55f6:	8a 83       	std	Y+2, r24	; 0x02
    55f8:	02 c0       	rjmp	.+4      	; 0x55fe <LCD_enuSendString+0x6c>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    55fa:	82 e0       	ldi	r24, 0x02	; 2
    55fc:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    55fe:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5600:	0f 90       	pop	r0
    5602:	0f 90       	pop	r0
    5604:	0f 90       	pop	r0
    5606:	0f 90       	pop	r0
    5608:	cf 91       	pop	r28
    560a:	df 91       	pop	r29
    560c:	08 95       	ret

0000560e <LCD_enuSetPosition>:

ES_t LCD_enuSetPosition(u8 Copy_u8Row, u8 Copy_u8Column)
{
    560e:	df 93       	push	r29
    5610:	cf 93       	push	r28
    5612:	00 d0       	rcall	.+0      	; 0x5614 <LCD_enuSetPosition+0x6>
    5614:	0f 92       	push	r0
    5616:	cd b7       	in	r28, 0x3d	; 61
    5618:	de b7       	in	r29, 0x3e	; 62
    561a:	8a 83       	std	Y+2, r24	; 0x02
    561c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    561e:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorState = LCD_enuLocalGoToXY(Copy_u8Row, Copy_u8Column);
    5620:	8a 81       	ldd	r24, Y+2	; 0x02
    5622:	6b 81       	ldd	r22, Y+3	; 0x03
    5624:	0e 94 1c 2b 	call	0x5638	; 0x5638 <LCD_enuLocalGoToXY>
    5628:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    562a:	89 81       	ldd	r24, Y+1	; 0x01
}
    562c:	0f 90       	pop	r0
    562e:	0f 90       	pop	r0
    5630:	0f 90       	pop	r0
    5632:	cf 91       	pop	r28
    5634:	df 91       	pop	r29
    5636:	08 95       	ret

00005638 <LCD_enuLocalGoToXY>:

static ES_t LCD_enuLocalGoToXY(u8 Copy_u8Row, u8 Copy_u8Column)
{
    5638:	df 93       	push	r29
    563a:	cf 93       	push	r28
    563c:	00 d0       	rcall	.+0      	; 0x563e <LCD_enuLocalGoToXY+0x6>
    563e:	00 d0       	rcall	.+0      	; 0x5640 <LCD_enuLocalGoToXY+0x8>
    5640:	0f 92       	push	r0
    5642:	cd b7       	in	r28, 0x3d	; 61
    5644:	de b7       	in	r29, 0x3e	; 62
    5646:	8c 83       	std	Y+4, r24	; 0x04
    5648:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    564a:	19 82       	std	Y+1, r1	; 0x01

	u8 Local_u8RowLocation [] = {0x80 , 0xC0};
    564c:	80 e8       	ldi	r24, 0x80	; 128
    564e:	8a 83       	std	Y+2, r24	; 0x02
    5650:	80 ec       	ldi	r24, 0xC0	; 192
    5652:	8b 83       	std	Y+3, r24	; 0x03
	LCD_enuSendCommand(Local_u8RowLocation [Copy_u8Row-1]+(Copy_u8Column-1));
    5654:	8c 81       	ldd	r24, Y+4	; 0x04
    5656:	88 2f       	mov	r24, r24
    5658:	90 e0       	ldi	r25, 0x00	; 0
    565a:	9c 01       	movw	r18, r24
    565c:	21 50       	subi	r18, 0x01	; 1
    565e:	30 40       	sbci	r19, 0x00	; 0
    5660:	ce 01       	movw	r24, r28
    5662:	02 96       	adiw	r24, 0x02	; 2
    5664:	fc 01       	movw	r30, r24
    5666:	e2 0f       	add	r30, r18
    5668:	f3 1f       	adc	r31, r19
    566a:	90 81       	ld	r25, Z
    566c:	8d 81       	ldd	r24, Y+5	; 0x05
    566e:	89 0f       	add	r24, r25
    5670:	81 50       	subi	r24, 0x01	; 1
    5672:	0e 94 86 29 	call	0x530c	; 0x530c <LCD_enuSendCommand>

	return Local_enuErrorState;
    5676:	89 81       	ldd	r24, Y+1	; 0x01
}
    5678:	0f 90       	pop	r0
    567a:	0f 90       	pop	r0
    567c:	0f 90       	pop	r0
    567e:	0f 90       	pop	r0
    5680:	0f 90       	pop	r0
    5682:	cf 91       	pop	r28
    5684:	df 91       	pop	r29
    5686:	08 95       	ret

00005688 <LCD_voidLatch>:
static void LCD_voidLatch(u8 Copy_u8Data)
{
    5688:	df 93       	push	r29
    568a:	cf 93       	push	r28
    568c:	cd b7       	in	r28, 0x3d	; 61
    568e:	de b7       	in	r29, 0x3e	; 62
    5690:	6d 97       	sbiw	r28, 0x1d	; 29
    5692:	0f b6       	in	r0, 0x3f	; 63
    5694:	f8 94       	cli
    5696:	de bf       	out	0x3e, r29	; 62
    5698:	0f be       	out	0x3f, r0	; 63
    569a:	cd bf       	out	0x3d, r28	; 61
    569c:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Set RW as write operation, EN is Low */
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    569e:	80 e0       	ldi	r24, 0x00	; 0
    56a0:	61 e0       	ldi	r22, 0x01	; 1
    56a2:	40 e0       	ldi	r20, 0x00	; 0
    56a4:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    56a8:	80 e0       	ldi	r24, 0x00	; 0
    56aa:	62 e0       	ldi	r22, 0x02	; 2
    56ac:	40 e0       	ldi	r20, 0x00	; 0
    56ae:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
	/* Write Command or Data */
	DIO_enuSetPinValue(D7_PORT, D7_PIN, ((Copy_u8Data >> 7) & 1));
    56b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    56b4:	98 2f       	mov	r25, r24
    56b6:	99 1f       	adc	r25, r25
    56b8:	99 27       	eor	r25, r25
    56ba:	99 1f       	adc	r25, r25
    56bc:	81 e0       	ldi	r24, 0x01	; 1
    56be:	67 e0       	ldi	r22, 0x07	; 7
    56c0:	49 2f       	mov	r20, r25
    56c2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT, D6_PIN, ((Copy_u8Data >> 6) & 1));
    56c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    56c8:	82 95       	swap	r24
    56ca:	86 95       	lsr	r24
    56cc:	86 95       	lsr	r24
    56ce:	83 70       	andi	r24, 0x03	; 3
    56d0:	98 2f       	mov	r25, r24
    56d2:	91 70       	andi	r25, 0x01	; 1
    56d4:	81 e0       	ldi	r24, 0x01	; 1
    56d6:	66 e0       	ldi	r22, 0x06	; 6
    56d8:	49 2f       	mov	r20, r25
    56da:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT, D5_PIN, ((Copy_u8Data >> 5) & 1));
    56de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    56e0:	82 95       	swap	r24
    56e2:	86 95       	lsr	r24
    56e4:	87 70       	andi	r24, 0x07	; 7
    56e6:	98 2f       	mov	r25, r24
    56e8:	91 70       	andi	r25, 0x01	; 1
    56ea:	81 e0       	ldi	r24, 0x01	; 1
    56ec:	65 e0       	ldi	r22, 0x05	; 5
    56ee:	49 2f       	mov	r20, r25
    56f0:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT, D4_PIN, ((Copy_u8Data >> 4) & 1));
    56f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    56f6:	82 95       	swap	r24
    56f8:	8f 70       	andi	r24, 0x0F	; 15
    56fa:	98 2f       	mov	r25, r24
    56fc:	91 70       	andi	r25, 0x01	; 1
    56fe:	81 e0       	ldi	r24, 0x01	; 1
    5700:	64 e0       	ldi	r22, 0x04	; 4
    5702:	49 2f       	mov	r20, r25
    5704:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
	#if LCD_MODE == EIGHT_BIT
		DIO_enuSetPinValue(D3_PORT, D3_PIN, ((Copy_u8Data >> 3) & 1));
    5708:	8d 8d       	ldd	r24, Y+29	; 0x1d
    570a:	86 95       	lsr	r24
    570c:	86 95       	lsr	r24
    570e:	86 95       	lsr	r24
    5710:	98 2f       	mov	r25, r24
    5712:	91 70       	andi	r25, 0x01	; 1
    5714:	82 e0       	ldi	r24, 0x02	; 2
    5716:	63 e0       	ldi	r22, 0x03	; 3
    5718:	49 2f       	mov	r20, r25
    571a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D2_PORT, D2_PIN, ((Copy_u8Data >> 2) & 1));
    571e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5720:	86 95       	lsr	r24
    5722:	86 95       	lsr	r24
    5724:	98 2f       	mov	r25, r24
    5726:	91 70       	andi	r25, 0x01	; 1
    5728:	82 e0       	ldi	r24, 0x02	; 2
    572a:	62 e0       	ldi	r22, 0x02	; 2
    572c:	49 2f       	mov	r20, r25
    572e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D1_PORT, D1_PIN, ((Copy_u8Data >> 1) & 1));
    5732:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5734:	86 95       	lsr	r24
    5736:	98 2f       	mov	r25, r24
    5738:	91 70       	andi	r25, 0x01	; 1
    573a:	82 e0       	ldi	r24, 0x02	; 2
    573c:	61 e0       	ldi	r22, 0x01	; 1
    573e:	49 2f       	mov	r20, r25
    5740:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D0_PORT, D0_PIN, ((Copy_u8Data >> 0) & 1));
    5744:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5746:	98 2f       	mov	r25, r24
    5748:	91 70       	andi	r25, 0x01	; 1
    574a:	82 e0       	ldi	r24, 0x02	; 2
    574c:	60 e0       	ldi	r22, 0x00	; 0
    574e:	49 2f       	mov	r20, r25
    5750:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT, D6_PIN, ((Copy_u8Data >> 2) & 1));
		DIO_enuSetPinValue(D5_PORT, D5_PIN, ((Copy_u8Data >> 1) & 1));
		DIO_enuSetPinValue(D4_PORT, D4_PIN, ((Copy_u8Data >> 0) & 1));
	#endif
	/* Enable Latch "EN is High" because latch happen in rising edge*/
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8HIGH);
    5754:	80 e0       	ldi	r24, 0x00	; 0
    5756:	62 e0       	ldi	r22, 0x02	; 2
    5758:	41 e0       	ldi	r20, 0x01	; 1
    575a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    575e:	80 e0       	ldi	r24, 0x00	; 0
    5760:	90 e0       	ldi	r25, 0x00	; 0
    5762:	a0 e2       	ldi	r26, 0x20	; 32
    5764:	b1 e4       	ldi	r27, 0x41	; 65
    5766:	89 8f       	std	Y+25, r24	; 0x19
    5768:	9a 8f       	std	Y+26, r25	; 0x1a
    576a:	ab 8f       	std	Y+27, r26	; 0x1b
    576c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    576e:	69 8d       	ldd	r22, Y+25	; 0x19
    5770:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5772:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5774:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5776:	20 e0       	ldi	r18, 0x00	; 0
    5778:	30 e0       	ldi	r19, 0x00	; 0
    577a:	4a e7       	ldi	r20, 0x7A	; 122
    577c:	53 e4       	ldi	r21, 0x43	; 67
    577e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5782:	dc 01       	movw	r26, r24
    5784:	cb 01       	movw	r24, r22
    5786:	8d 8b       	std	Y+21, r24	; 0x15
    5788:	9e 8b       	std	Y+22, r25	; 0x16
    578a:	af 8b       	std	Y+23, r26	; 0x17
    578c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    578e:	6d 89       	ldd	r22, Y+21	; 0x15
    5790:	7e 89       	ldd	r23, Y+22	; 0x16
    5792:	8f 89       	ldd	r24, Y+23	; 0x17
    5794:	98 8d       	ldd	r25, Y+24	; 0x18
    5796:	20 e0       	ldi	r18, 0x00	; 0
    5798:	30 e0       	ldi	r19, 0x00	; 0
    579a:	40 e8       	ldi	r20, 0x80	; 128
    579c:	5f e3       	ldi	r21, 0x3F	; 63
    579e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    57a2:	88 23       	and	r24, r24
    57a4:	2c f4       	brge	.+10     	; 0x57b0 <LCD_voidLatch+0x128>
		__ticks = 1;
    57a6:	81 e0       	ldi	r24, 0x01	; 1
    57a8:	90 e0       	ldi	r25, 0x00	; 0
    57aa:	9c 8b       	std	Y+20, r25	; 0x14
    57ac:	8b 8b       	std	Y+19, r24	; 0x13
    57ae:	3f c0       	rjmp	.+126    	; 0x582e <LCD_voidLatch+0x1a6>
	else if (__tmp > 65535)
    57b0:	6d 89       	ldd	r22, Y+21	; 0x15
    57b2:	7e 89       	ldd	r23, Y+22	; 0x16
    57b4:	8f 89       	ldd	r24, Y+23	; 0x17
    57b6:	98 8d       	ldd	r25, Y+24	; 0x18
    57b8:	20 e0       	ldi	r18, 0x00	; 0
    57ba:	3f ef       	ldi	r19, 0xFF	; 255
    57bc:	4f e7       	ldi	r20, 0x7F	; 127
    57be:	57 e4       	ldi	r21, 0x47	; 71
    57c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    57c4:	18 16       	cp	r1, r24
    57c6:	4c f5       	brge	.+82     	; 0x581a <LCD_voidLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57c8:	69 8d       	ldd	r22, Y+25	; 0x19
    57ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    57cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    57ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    57d0:	20 e0       	ldi	r18, 0x00	; 0
    57d2:	30 e0       	ldi	r19, 0x00	; 0
    57d4:	40 e2       	ldi	r20, 0x20	; 32
    57d6:	51 e4       	ldi	r21, 0x41	; 65
    57d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57dc:	dc 01       	movw	r26, r24
    57de:	cb 01       	movw	r24, r22
    57e0:	bc 01       	movw	r22, r24
    57e2:	cd 01       	movw	r24, r26
    57e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57e8:	dc 01       	movw	r26, r24
    57ea:	cb 01       	movw	r24, r22
    57ec:	9c 8b       	std	Y+20, r25	; 0x14
    57ee:	8b 8b       	std	Y+19, r24	; 0x13
    57f0:	0f c0       	rjmp	.+30     	; 0x5810 <LCD_voidLatch+0x188>
    57f2:	89 e1       	ldi	r24, 0x19	; 25
    57f4:	90 e0       	ldi	r25, 0x00	; 0
    57f6:	9a 8b       	std	Y+18, r25	; 0x12
    57f8:	89 8b       	std	Y+17, r24	; 0x11
    57fa:	89 89       	ldd	r24, Y+17	; 0x11
    57fc:	9a 89       	ldd	r25, Y+18	; 0x12
    57fe:	01 97       	sbiw	r24, 0x01	; 1
    5800:	f1 f7       	brne	.-4      	; 0x57fe <LCD_voidLatch+0x176>
    5802:	9a 8b       	std	Y+18, r25	; 0x12
    5804:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5806:	8b 89       	ldd	r24, Y+19	; 0x13
    5808:	9c 89       	ldd	r25, Y+20	; 0x14
    580a:	01 97       	sbiw	r24, 0x01	; 1
    580c:	9c 8b       	std	Y+20, r25	; 0x14
    580e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5810:	8b 89       	ldd	r24, Y+19	; 0x13
    5812:	9c 89       	ldd	r25, Y+20	; 0x14
    5814:	00 97       	sbiw	r24, 0x00	; 0
    5816:	69 f7       	brne	.-38     	; 0x57f2 <LCD_voidLatch+0x16a>
    5818:	14 c0       	rjmp	.+40     	; 0x5842 <LCD_voidLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    581a:	6d 89       	ldd	r22, Y+21	; 0x15
    581c:	7e 89       	ldd	r23, Y+22	; 0x16
    581e:	8f 89       	ldd	r24, Y+23	; 0x17
    5820:	98 8d       	ldd	r25, Y+24	; 0x18
    5822:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5826:	dc 01       	movw	r26, r24
    5828:	cb 01       	movw	r24, r22
    582a:	9c 8b       	std	Y+20, r25	; 0x14
    582c:	8b 8b       	std	Y+19, r24	; 0x13
    582e:	8b 89       	ldd	r24, Y+19	; 0x13
    5830:	9c 89       	ldd	r25, Y+20	; 0x14
    5832:	98 8b       	std	Y+16, r25	; 0x10
    5834:	8f 87       	std	Y+15, r24	; 0x0f
    5836:	8f 85       	ldd	r24, Y+15	; 0x0f
    5838:	98 89       	ldd	r25, Y+16	; 0x10
    583a:	01 97       	sbiw	r24, 0x01	; 1
    583c:	f1 f7       	brne	.-4      	; 0x583a <LCD_voidLatch+0x1b2>
    583e:	98 8b       	std	Y+16, r25	; 0x10
    5840:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10); /* Garbage Number */
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    5842:	80 e0       	ldi	r24, 0x00	; 0
    5844:	62 e0       	ldi	r22, 0x02	; 2
    5846:	40 e0       	ldi	r20, 0x00	; 0
    5848:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    584c:	80 e0       	ldi	r24, 0x00	; 0
    584e:	90 e0       	ldi	r25, 0x00	; 0
    5850:	a0 e2       	ldi	r26, 0x20	; 32
    5852:	b1 e4       	ldi	r27, 0x41	; 65
    5854:	8b 87       	std	Y+11, r24	; 0x0b
    5856:	9c 87       	std	Y+12, r25	; 0x0c
    5858:	ad 87       	std	Y+13, r26	; 0x0d
    585a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    585c:	6b 85       	ldd	r22, Y+11	; 0x0b
    585e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5860:	8d 85       	ldd	r24, Y+13	; 0x0d
    5862:	9e 85       	ldd	r25, Y+14	; 0x0e
    5864:	20 e0       	ldi	r18, 0x00	; 0
    5866:	30 e0       	ldi	r19, 0x00	; 0
    5868:	4a e7       	ldi	r20, 0x7A	; 122
    586a:	53 e4       	ldi	r21, 0x43	; 67
    586c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5870:	dc 01       	movw	r26, r24
    5872:	cb 01       	movw	r24, r22
    5874:	8f 83       	std	Y+7, r24	; 0x07
    5876:	98 87       	std	Y+8, r25	; 0x08
    5878:	a9 87       	std	Y+9, r26	; 0x09
    587a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    587c:	6f 81       	ldd	r22, Y+7	; 0x07
    587e:	78 85       	ldd	r23, Y+8	; 0x08
    5880:	89 85       	ldd	r24, Y+9	; 0x09
    5882:	9a 85       	ldd	r25, Y+10	; 0x0a
    5884:	20 e0       	ldi	r18, 0x00	; 0
    5886:	30 e0       	ldi	r19, 0x00	; 0
    5888:	40 e8       	ldi	r20, 0x80	; 128
    588a:	5f e3       	ldi	r21, 0x3F	; 63
    588c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5890:	88 23       	and	r24, r24
    5892:	2c f4       	brge	.+10     	; 0x589e <LCD_voidLatch+0x216>
		__ticks = 1;
    5894:	81 e0       	ldi	r24, 0x01	; 1
    5896:	90 e0       	ldi	r25, 0x00	; 0
    5898:	9e 83       	std	Y+6, r25	; 0x06
    589a:	8d 83       	std	Y+5, r24	; 0x05
    589c:	3f c0       	rjmp	.+126    	; 0x591c <LCD_voidLatch+0x294>
	else if (__tmp > 65535)
    589e:	6f 81       	ldd	r22, Y+7	; 0x07
    58a0:	78 85       	ldd	r23, Y+8	; 0x08
    58a2:	89 85       	ldd	r24, Y+9	; 0x09
    58a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    58a6:	20 e0       	ldi	r18, 0x00	; 0
    58a8:	3f ef       	ldi	r19, 0xFF	; 255
    58aa:	4f e7       	ldi	r20, 0x7F	; 127
    58ac:	57 e4       	ldi	r21, 0x47	; 71
    58ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    58b2:	18 16       	cp	r1, r24
    58b4:	4c f5       	brge	.+82     	; 0x5908 <LCD_voidLatch+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    58b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    58ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    58bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    58be:	20 e0       	ldi	r18, 0x00	; 0
    58c0:	30 e0       	ldi	r19, 0x00	; 0
    58c2:	40 e2       	ldi	r20, 0x20	; 32
    58c4:	51 e4       	ldi	r21, 0x41	; 65
    58c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58ca:	dc 01       	movw	r26, r24
    58cc:	cb 01       	movw	r24, r22
    58ce:	bc 01       	movw	r22, r24
    58d0:	cd 01       	movw	r24, r26
    58d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58d6:	dc 01       	movw	r26, r24
    58d8:	cb 01       	movw	r24, r22
    58da:	9e 83       	std	Y+6, r25	; 0x06
    58dc:	8d 83       	std	Y+5, r24	; 0x05
    58de:	0f c0       	rjmp	.+30     	; 0x58fe <LCD_voidLatch+0x276>
    58e0:	89 e1       	ldi	r24, 0x19	; 25
    58e2:	90 e0       	ldi	r25, 0x00	; 0
    58e4:	9c 83       	std	Y+4, r25	; 0x04
    58e6:	8b 83       	std	Y+3, r24	; 0x03
    58e8:	8b 81       	ldd	r24, Y+3	; 0x03
    58ea:	9c 81       	ldd	r25, Y+4	; 0x04
    58ec:	01 97       	sbiw	r24, 0x01	; 1
    58ee:	f1 f7       	brne	.-4      	; 0x58ec <LCD_voidLatch+0x264>
    58f0:	9c 83       	std	Y+4, r25	; 0x04
    58f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58f4:	8d 81       	ldd	r24, Y+5	; 0x05
    58f6:	9e 81       	ldd	r25, Y+6	; 0x06
    58f8:	01 97       	sbiw	r24, 0x01	; 1
    58fa:	9e 83       	std	Y+6, r25	; 0x06
    58fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58fe:	8d 81       	ldd	r24, Y+5	; 0x05
    5900:	9e 81       	ldd	r25, Y+6	; 0x06
    5902:	00 97       	sbiw	r24, 0x00	; 0
    5904:	69 f7       	brne	.-38     	; 0x58e0 <LCD_voidLatch+0x258>
    5906:	14 c0       	rjmp	.+40     	; 0x5930 <LCD_voidLatch+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5908:	6f 81       	ldd	r22, Y+7	; 0x07
    590a:	78 85       	ldd	r23, Y+8	; 0x08
    590c:	89 85       	ldd	r24, Y+9	; 0x09
    590e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5914:	dc 01       	movw	r26, r24
    5916:	cb 01       	movw	r24, r22
    5918:	9e 83       	std	Y+6, r25	; 0x06
    591a:	8d 83       	std	Y+5, r24	; 0x05
    591c:	8d 81       	ldd	r24, Y+5	; 0x05
    591e:	9e 81       	ldd	r25, Y+6	; 0x06
    5920:	9a 83       	std	Y+2, r25	; 0x02
    5922:	89 83       	std	Y+1, r24	; 0x01
    5924:	89 81       	ldd	r24, Y+1	; 0x01
    5926:	9a 81       	ldd	r25, Y+2	; 0x02
    5928:	01 97       	sbiw	r24, 0x01	; 1
    592a:	f1 f7       	brne	.-4      	; 0x5928 <LCD_voidLatch+0x2a0>
    592c:	9a 83       	std	Y+2, r25	; 0x02
    592e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(10); //For speed difference between MC and LCD.
}
    5930:	6d 96       	adiw	r28, 0x1d	; 29
    5932:	0f b6       	in	r0, 0x3f	; 63
    5934:	f8 94       	cli
    5936:	de bf       	out	0x3e, r29	; 62
    5938:	0f be       	out	0x3f, r0	; 63
    593a:	cd bf       	out	0x3d, r28	; 61
    593c:	cf 91       	pop	r28
    593e:	df 91       	pop	r29
    5940:	08 95       	ret

00005942 <LCD_invoidSendCommand>:
static inline void LCD_invoidSendCommand(u8 Copy_u8Command)
{
    5942:	df 93       	push	r29
    5944:	cf 93       	push	r28
    5946:	cd b7       	in	r28, 0x3d	; 61
    5948:	de b7       	in	r29, 0x3e	; 62
    594a:	6d 97       	sbiw	r28, 0x1d	; 29
    594c:	0f b6       	in	r0, 0x3f	; 63
    594e:	f8 94       	cli
    5950:	de bf       	out	0x3e, r29	; 62
    5952:	0f be       	out	0x3f, r0	; 63
    5954:	cd bf       	out	0x3d, r28	; 61
    5956:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Set RS as Command, EN is Low */
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    5958:	80 e0       	ldi	r24, 0x00	; 0
    595a:	60 e0       	ldi	r22, 0x00	; 0
    595c:	40 e0       	ldi	r20, 0x00	; 0
    595e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    5962:	80 e0       	ldi	r24, 0x00	; 0
    5964:	62 e0       	ldi	r22, 0x02	; 2
    5966:	40 e0       	ldi	r20, 0x00	; 0
    5968:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>

	if(Copy_u8Command == 0x28)
    596c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    596e:	88 32       	cpi	r24, 0x28	; 40
    5970:	09 f0       	breq	.+2      	; 0x5974 <LCD_invoidSendCommand+0x32>
    5972:	19 c1       	rjmp	.+562    	; 0x5ba6 <LCD_invoidSendCommand+0x264>
	{
		DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command >> 7) & 1));
    5974:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5976:	98 2f       	mov	r25, r24
    5978:	99 1f       	adc	r25, r25
    597a:	99 27       	eor	r25, r25
    597c:	99 1f       	adc	r25, r25
    597e:	81 e0       	ldi	r24, 0x01	; 1
    5980:	67 e0       	ldi	r22, 0x07	; 7
    5982:	49 2f       	mov	r20, r25
    5984:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command >> 6) & 1));
    5988:	8d 8d       	ldd	r24, Y+29	; 0x1d
    598a:	82 95       	swap	r24
    598c:	86 95       	lsr	r24
    598e:	86 95       	lsr	r24
    5990:	83 70       	andi	r24, 0x03	; 3
    5992:	98 2f       	mov	r25, r24
    5994:	91 70       	andi	r25, 0x01	; 1
    5996:	81 e0       	ldi	r24, 0x01	; 1
    5998:	66 e0       	ldi	r22, 0x06	; 6
    599a:	49 2f       	mov	r20, r25
    599c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command >> 5) & 1));
    59a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    59a2:	82 95       	swap	r24
    59a4:	86 95       	lsr	r24
    59a6:	87 70       	andi	r24, 0x07	; 7
    59a8:	98 2f       	mov	r25, r24
    59aa:	91 70       	andi	r25, 0x01	; 1
    59ac:	81 e0       	ldi	r24, 0x01	; 1
    59ae:	65 e0       	ldi	r22, 0x05	; 5
    59b0:	49 2f       	mov	r20, r25
    59b2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command >> 4) & 1));
    59b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    59b8:	82 95       	swap	r24
    59ba:	8f 70       	andi	r24, 0x0F	; 15
    59bc:	98 2f       	mov	r25, r24
    59be:	91 70       	andi	r25, 0x01	; 1
    59c0:	81 e0       	ldi	r24, 0x01	; 1
    59c2:	64 e0       	ldi	r22, 0x04	; 4
    59c4:	49 2f       	mov	r20, r25
    59c6:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>

		/* Enable Latch "EN is High" because latch happen in rising edge*/
		DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8HIGH);
    59ca:	80 e0       	ldi	r24, 0x00	; 0
    59cc:	62 e0       	ldi	r22, 0x02	; 2
    59ce:	41 e0       	ldi	r20, 0x01	; 1
    59d0:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    59d4:	80 e0       	ldi	r24, 0x00	; 0
    59d6:	90 e0       	ldi	r25, 0x00	; 0
    59d8:	a0 e2       	ldi	r26, 0x20	; 32
    59da:	b1 e4       	ldi	r27, 0x41	; 65
    59dc:	89 8f       	std	Y+25, r24	; 0x19
    59de:	9a 8f       	std	Y+26, r25	; 0x1a
    59e0:	ab 8f       	std	Y+27, r26	; 0x1b
    59e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59e4:	69 8d       	ldd	r22, Y+25	; 0x19
    59e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    59e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    59ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    59ec:	20 e0       	ldi	r18, 0x00	; 0
    59ee:	30 e0       	ldi	r19, 0x00	; 0
    59f0:	4a e7       	ldi	r20, 0x7A	; 122
    59f2:	53 e4       	ldi	r21, 0x43	; 67
    59f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59f8:	dc 01       	movw	r26, r24
    59fa:	cb 01       	movw	r24, r22
    59fc:	8d 8b       	std	Y+21, r24	; 0x15
    59fe:	9e 8b       	std	Y+22, r25	; 0x16
    5a00:	af 8b       	std	Y+23, r26	; 0x17
    5a02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5a04:	6d 89       	ldd	r22, Y+21	; 0x15
    5a06:	7e 89       	ldd	r23, Y+22	; 0x16
    5a08:	8f 89       	ldd	r24, Y+23	; 0x17
    5a0a:	98 8d       	ldd	r25, Y+24	; 0x18
    5a0c:	20 e0       	ldi	r18, 0x00	; 0
    5a0e:	30 e0       	ldi	r19, 0x00	; 0
    5a10:	40 e8       	ldi	r20, 0x80	; 128
    5a12:	5f e3       	ldi	r21, 0x3F	; 63
    5a14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5a18:	88 23       	and	r24, r24
    5a1a:	2c f4       	brge	.+10     	; 0x5a26 <LCD_invoidSendCommand+0xe4>
		__ticks = 1;
    5a1c:	81 e0       	ldi	r24, 0x01	; 1
    5a1e:	90 e0       	ldi	r25, 0x00	; 0
    5a20:	9c 8b       	std	Y+20, r25	; 0x14
    5a22:	8b 8b       	std	Y+19, r24	; 0x13
    5a24:	3f c0       	rjmp	.+126    	; 0x5aa4 <LCD_invoidSendCommand+0x162>
	else if (__tmp > 65535)
    5a26:	6d 89       	ldd	r22, Y+21	; 0x15
    5a28:	7e 89       	ldd	r23, Y+22	; 0x16
    5a2a:	8f 89       	ldd	r24, Y+23	; 0x17
    5a2c:	98 8d       	ldd	r25, Y+24	; 0x18
    5a2e:	20 e0       	ldi	r18, 0x00	; 0
    5a30:	3f ef       	ldi	r19, 0xFF	; 255
    5a32:	4f e7       	ldi	r20, 0x7F	; 127
    5a34:	57 e4       	ldi	r21, 0x47	; 71
    5a36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5a3a:	18 16       	cp	r1, r24
    5a3c:	4c f5       	brge	.+82     	; 0x5a90 <LCD_invoidSendCommand+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a3e:	69 8d       	ldd	r22, Y+25	; 0x19
    5a40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5a42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a46:	20 e0       	ldi	r18, 0x00	; 0
    5a48:	30 e0       	ldi	r19, 0x00	; 0
    5a4a:	40 e2       	ldi	r20, 0x20	; 32
    5a4c:	51 e4       	ldi	r21, 0x41	; 65
    5a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a52:	dc 01       	movw	r26, r24
    5a54:	cb 01       	movw	r24, r22
    5a56:	bc 01       	movw	r22, r24
    5a58:	cd 01       	movw	r24, r26
    5a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a5e:	dc 01       	movw	r26, r24
    5a60:	cb 01       	movw	r24, r22
    5a62:	9c 8b       	std	Y+20, r25	; 0x14
    5a64:	8b 8b       	std	Y+19, r24	; 0x13
    5a66:	0f c0       	rjmp	.+30     	; 0x5a86 <LCD_invoidSendCommand+0x144>
    5a68:	89 e1       	ldi	r24, 0x19	; 25
    5a6a:	90 e0       	ldi	r25, 0x00	; 0
    5a6c:	9a 8b       	std	Y+18, r25	; 0x12
    5a6e:	89 8b       	std	Y+17, r24	; 0x11
    5a70:	89 89       	ldd	r24, Y+17	; 0x11
    5a72:	9a 89       	ldd	r25, Y+18	; 0x12
    5a74:	01 97       	sbiw	r24, 0x01	; 1
    5a76:	f1 f7       	brne	.-4      	; 0x5a74 <LCD_invoidSendCommand+0x132>
    5a78:	9a 8b       	std	Y+18, r25	; 0x12
    5a7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a7c:	8b 89       	ldd	r24, Y+19	; 0x13
    5a7e:	9c 89       	ldd	r25, Y+20	; 0x14
    5a80:	01 97       	sbiw	r24, 0x01	; 1
    5a82:	9c 8b       	std	Y+20, r25	; 0x14
    5a84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a86:	8b 89       	ldd	r24, Y+19	; 0x13
    5a88:	9c 89       	ldd	r25, Y+20	; 0x14
    5a8a:	00 97       	sbiw	r24, 0x00	; 0
    5a8c:	69 f7       	brne	.-38     	; 0x5a68 <LCD_invoidSendCommand+0x126>
    5a8e:	14 c0       	rjmp	.+40     	; 0x5ab8 <LCD_invoidSendCommand+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a90:	6d 89       	ldd	r22, Y+21	; 0x15
    5a92:	7e 89       	ldd	r23, Y+22	; 0x16
    5a94:	8f 89       	ldd	r24, Y+23	; 0x17
    5a96:	98 8d       	ldd	r25, Y+24	; 0x18
    5a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a9c:	dc 01       	movw	r26, r24
    5a9e:	cb 01       	movw	r24, r22
    5aa0:	9c 8b       	std	Y+20, r25	; 0x14
    5aa2:	8b 8b       	std	Y+19, r24	; 0x13
    5aa4:	8b 89       	ldd	r24, Y+19	; 0x13
    5aa6:	9c 89       	ldd	r25, Y+20	; 0x14
    5aa8:	98 8b       	std	Y+16, r25	; 0x10
    5aaa:	8f 87       	std	Y+15, r24	; 0x0f
    5aac:	8f 85       	ldd	r24, Y+15	; 0x0f
    5aae:	98 89       	ldd	r25, Y+16	; 0x10
    5ab0:	01 97       	sbiw	r24, 0x01	; 1
    5ab2:	f1 f7       	brne	.-4      	; 0x5ab0 <LCD_invoidSendCommand+0x16e>
    5ab4:	98 8b       	std	Y+16, r25	; 0x10
    5ab6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10); /* Garbage Number */
		DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    5ab8:	80 e0       	ldi	r24, 0x00	; 0
    5aba:	62 e0       	ldi	r22, 0x02	; 2
    5abc:	40 e0       	ldi	r20, 0x00	; 0
    5abe:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    5ac2:	80 e0       	ldi	r24, 0x00	; 0
    5ac4:	90 e0       	ldi	r25, 0x00	; 0
    5ac6:	a8 e4       	ldi	r26, 0x48	; 72
    5ac8:	b2 e4       	ldi	r27, 0x42	; 66
    5aca:	8b 87       	std	Y+11, r24	; 0x0b
    5acc:	9c 87       	std	Y+12, r25	; 0x0c
    5ace:	ad 87       	std	Y+13, r26	; 0x0d
    5ad0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ad2:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ad4:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ad6:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ad8:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ada:	20 e0       	ldi	r18, 0x00	; 0
    5adc:	30 e0       	ldi	r19, 0x00	; 0
    5ade:	4a e7       	ldi	r20, 0x7A	; 122
    5ae0:	53 e4       	ldi	r21, 0x43	; 67
    5ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ae6:	dc 01       	movw	r26, r24
    5ae8:	cb 01       	movw	r24, r22
    5aea:	8f 83       	std	Y+7, r24	; 0x07
    5aec:	98 87       	std	Y+8, r25	; 0x08
    5aee:	a9 87       	std	Y+9, r26	; 0x09
    5af0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5af2:	6f 81       	ldd	r22, Y+7	; 0x07
    5af4:	78 85       	ldd	r23, Y+8	; 0x08
    5af6:	89 85       	ldd	r24, Y+9	; 0x09
    5af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    5afa:	20 e0       	ldi	r18, 0x00	; 0
    5afc:	30 e0       	ldi	r19, 0x00	; 0
    5afe:	40 e8       	ldi	r20, 0x80	; 128
    5b00:	5f e3       	ldi	r21, 0x3F	; 63
    5b02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b06:	88 23       	and	r24, r24
    5b08:	2c f4       	brge	.+10     	; 0x5b14 <LCD_invoidSendCommand+0x1d2>
		__ticks = 1;
    5b0a:	81 e0       	ldi	r24, 0x01	; 1
    5b0c:	90 e0       	ldi	r25, 0x00	; 0
    5b0e:	9e 83       	std	Y+6, r25	; 0x06
    5b10:	8d 83       	std	Y+5, r24	; 0x05
    5b12:	3f c0       	rjmp	.+126    	; 0x5b92 <LCD_invoidSendCommand+0x250>
	else if (__tmp > 65535)
    5b14:	6f 81       	ldd	r22, Y+7	; 0x07
    5b16:	78 85       	ldd	r23, Y+8	; 0x08
    5b18:	89 85       	ldd	r24, Y+9	; 0x09
    5b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b1c:	20 e0       	ldi	r18, 0x00	; 0
    5b1e:	3f ef       	ldi	r19, 0xFF	; 255
    5b20:	4f e7       	ldi	r20, 0x7F	; 127
    5b22:	57 e4       	ldi	r21, 0x47	; 71
    5b24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b28:	18 16       	cp	r1, r24
    5b2a:	4c f5       	brge	.+82     	; 0x5b7e <LCD_invoidSendCommand+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b30:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b32:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b34:	20 e0       	ldi	r18, 0x00	; 0
    5b36:	30 e0       	ldi	r19, 0x00	; 0
    5b38:	40 e2       	ldi	r20, 0x20	; 32
    5b3a:	51 e4       	ldi	r21, 0x41	; 65
    5b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b40:	dc 01       	movw	r26, r24
    5b42:	cb 01       	movw	r24, r22
    5b44:	bc 01       	movw	r22, r24
    5b46:	cd 01       	movw	r24, r26
    5b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b4c:	dc 01       	movw	r26, r24
    5b4e:	cb 01       	movw	r24, r22
    5b50:	9e 83       	std	Y+6, r25	; 0x06
    5b52:	8d 83       	std	Y+5, r24	; 0x05
    5b54:	0f c0       	rjmp	.+30     	; 0x5b74 <LCD_invoidSendCommand+0x232>
    5b56:	89 e1       	ldi	r24, 0x19	; 25
    5b58:	90 e0       	ldi	r25, 0x00	; 0
    5b5a:	9c 83       	std	Y+4, r25	; 0x04
    5b5c:	8b 83       	std	Y+3, r24	; 0x03
    5b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    5b60:	9c 81       	ldd	r25, Y+4	; 0x04
    5b62:	01 97       	sbiw	r24, 0x01	; 1
    5b64:	f1 f7       	brne	.-4      	; 0x5b62 <LCD_invoidSendCommand+0x220>
    5b66:	9c 83       	std	Y+4, r25	; 0x04
    5b68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    5b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    5b6e:	01 97       	sbiw	r24, 0x01	; 1
    5b70:	9e 83       	std	Y+6, r25	; 0x06
    5b72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b74:	8d 81       	ldd	r24, Y+5	; 0x05
    5b76:	9e 81       	ldd	r25, Y+6	; 0x06
    5b78:	00 97       	sbiw	r24, 0x00	; 0
    5b7a:	69 f7       	brne	.-38     	; 0x5b56 <LCD_invoidSendCommand+0x214>
    5b7c:	14 c0       	rjmp	.+40     	; 0x5ba6 <LCD_invoidSendCommand+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b7e:	6f 81       	ldd	r22, Y+7	; 0x07
    5b80:	78 85       	ldd	r23, Y+8	; 0x08
    5b82:	89 85       	ldd	r24, Y+9	; 0x09
    5b84:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b8a:	dc 01       	movw	r26, r24
    5b8c:	cb 01       	movw	r24, r22
    5b8e:	9e 83       	std	Y+6, r25	; 0x06
    5b90:	8d 83       	std	Y+5, r24	; 0x05
    5b92:	8d 81       	ldd	r24, Y+5	; 0x05
    5b94:	9e 81       	ldd	r25, Y+6	; 0x06
    5b96:	9a 83       	std	Y+2, r25	; 0x02
    5b98:	89 83       	std	Y+1, r24	; 0x01
    5b9a:	89 81       	ldd	r24, Y+1	; 0x01
    5b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    5b9e:	01 97       	sbiw	r24, 0x01	; 1
    5ba0:	f1 f7       	brne	.-4      	; 0x5b9e <LCD_invoidSendCommand+0x25c>
    5ba2:	9a 83       	std	Y+2, r25	; 0x02
    5ba4:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(50);
	}

	LCD_voidLatch(Copy_u8Command);
    5ba6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5ba8:	0e 94 44 2b 	call	0x5688	; 0x5688 <LCD_voidLatch>

}
    5bac:	6d 96       	adiw	r28, 0x1d	; 29
    5bae:	0f b6       	in	r0, 0x3f	; 63
    5bb0:	f8 94       	cli
    5bb2:	de bf       	out	0x3e, r29	; 62
    5bb4:	0f be       	out	0x3f, r0	; 63
    5bb6:	cd bf       	out	0x3d, r28	; 61
    5bb8:	cf 91       	pop	r28
    5bba:	df 91       	pop	r29
    5bbc:	08 95       	ret

00005bbe <KPAD_enuInit>:

#include "Keypad_private.h"
#include "Keypad_config.h"

ES_t KPAD_enuInit(void)
{
    5bbe:	df 93       	push	r29
    5bc0:	cf 93       	push	r28
    5bc2:	cd b7       	in	r28, 0x3d	; 61
    5bc4:	de b7       	in	r29, 0x3e	; 62
    5bc6:	27 97       	sbiw	r28, 0x07	; 7
    5bc8:	0f b6       	in	r0, 0x3f	; 63
    5bca:	f8 94       	cli
    5bcc:	de bf       	out	0x3e, r29	; 62
    5bce:	0f be       	out	0x3f, r0	; 63
    5bd0:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    5bd2:	1e 82       	std	Y+6, r1	; 0x06

	u8 Local_u8Iterator = KPAD_ZERO;
    5bd4:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Check = KPAD_ZERO;
    5bd6:	19 82       	std	Y+1, r1	; 0x01
    5bd8:	1a 82       	std	Y+2, r1	; 0x02
    5bda:	1b 82       	std	Y+3, r1	; 0x03
    5bdc:	1c 82       	std	Y+4, r1	; 0x04

	Local_u32Check |= (DIO_enuSetPinDirection(ROW1_PORT, ROW1_PIN, DIO_u8INPUT) << KPAD_SHIFTBIT_ZERO);
    5bde:	80 e0       	ldi	r24, 0x00	; 0
    5be0:	64 e0       	ldi	r22, 0x04	; 4
    5be2:	40 e0       	ldi	r20, 0x00	; 0
    5be4:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    5be8:	28 2f       	mov	r18, r24
    5bea:	30 e0       	ldi	r19, 0x00	; 0
    5bec:	40 e0       	ldi	r20, 0x00	; 0
    5bee:	50 e0       	ldi	r21, 0x00	; 0
    5bf0:	89 81       	ldd	r24, Y+1	; 0x01
    5bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    5bf4:	ab 81       	ldd	r26, Y+3	; 0x03
    5bf6:	bc 81       	ldd	r27, Y+4	; 0x04
    5bf8:	82 2b       	or	r24, r18
    5bfa:	93 2b       	or	r25, r19
    5bfc:	a4 2b       	or	r26, r20
    5bfe:	b5 2b       	or	r27, r21
    5c00:	89 83       	std	Y+1, r24	; 0x01
    5c02:	9a 83       	std	Y+2, r25	; 0x02
    5c04:	ab 83       	std	Y+3, r26	; 0x03
    5c06:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (DIO_enuSetPinDirection(ROW2_PORT, ROW2_PIN, DIO_u8INPUT) << KPAD_SHIFTBIT_THREE);
    5c08:	80 e0       	ldi	r24, 0x00	; 0
    5c0a:	65 e0       	ldi	r22, 0x05	; 5
    5c0c:	40 e0       	ldi	r20, 0x00	; 0
    5c0e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    5c12:	88 2f       	mov	r24, r24
    5c14:	90 e0       	ldi	r25, 0x00	; 0
    5c16:	88 0f       	add	r24, r24
    5c18:	99 1f       	adc	r25, r25
    5c1a:	88 0f       	add	r24, r24
    5c1c:	99 1f       	adc	r25, r25
    5c1e:	88 0f       	add	r24, r24
    5c20:	99 1f       	adc	r25, r25
    5c22:	9c 01       	movw	r18, r24
    5c24:	44 27       	eor	r20, r20
    5c26:	37 fd       	sbrc	r19, 7
    5c28:	40 95       	com	r20
    5c2a:	54 2f       	mov	r21, r20
    5c2c:	89 81       	ldd	r24, Y+1	; 0x01
    5c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    5c30:	ab 81       	ldd	r26, Y+3	; 0x03
    5c32:	bc 81       	ldd	r27, Y+4	; 0x04
    5c34:	82 2b       	or	r24, r18
    5c36:	93 2b       	or	r25, r19
    5c38:	a4 2b       	or	r26, r20
    5c3a:	b5 2b       	or	r27, r21
    5c3c:	89 83       	std	Y+1, r24	; 0x01
    5c3e:	9a 83       	std	Y+2, r25	; 0x02
    5c40:	ab 83       	std	Y+3, r26	; 0x03
    5c42:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (DIO_enuSetPinDirection(ROW3_PORT, ROW3_PIN, DIO_u8INPUT) << KPAD_SHIFTBIT_SIX);
    5c44:	80 e0       	ldi	r24, 0x00	; 0
    5c46:	66 e0       	ldi	r22, 0x06	; 6
    5c48:	40 e0       	ldi	r20, 0x00	; 0
    5c4a:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    5c4e:	88 2f       	mov	r24, r24
    5c50:	90 e0       	ldi	r25, 0x00	; 0
    5c52:	00 24       	eor	r0, r0
    5c54:	96 95       	lsr	r25
    5c56:	87 95       	ror	r24
    5c58:	07 94       	ror	r0
    5c5a:	96 95       	lsr	r25
    5c5c:	87 95       	ror	r24
    5c5e:	07 94       	ror	r0
    5c60:	98 2f       	mov	r25, r24
    5c62:	80 2d       	mov	r24, r0
    5c64:	9c 01       	movw	r18, r24
    5c66:	44 27       	eor	r20, r20
    5c68:	37 fd       	sbrc	r19, 7
    5c6a:	40 95       	com	r20
    5c6c:	54 2f       	mov	r21, r20
    5c6e:	89 81       	ldd	r24, Y+1	; 0x01
    5c70:	9a 81       	ldd	r25, Y+2	; 0x02
    5c72:	ab 81       	ldd	r26, Y+3	; 0x03
    5c74:	bc 81       	ldd	r27, Y+4	; 0x04
    5c76:	82 2b       	or	r24, r18
    5c78:	93 2b       	or	r25, r19
    5c7a:	a4 2b       	or	r26, r20
    5c7c:	b5 2b       	or	r27, r21
    5c7e:	89 83       	std	Y+1, r24	; 0x01
    5c80:	9a 83       	std	Y+2, r25	; 0x02
    5c82:	ab 83       	std	Y+3, r26	; 0x03
    5c84:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (DIO_enuSetPinDirection(ROW4_PORT, ROW4_PIN, DIO_u8INPUT) << KPAD_SHIFTBIT_NINE);
    5c86:	80 e0       	ldi	r24, 0x00	; 0
    5c88:	67 e0       	ldi	r22, 0x07	; 7
    5c8a:	40 e0       	ldi	r20, 0x00	; 0
    5c8c:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    5c90:	88 2f       	mov	r24, r24
    5c92:	90 e0       	ldi	r25, 0x00	; 0
    5c94:	98 2f       	mov	r25, r24
    5c96:	88 27       	eor	r24, r24
    5c98:	99 0f       	add	r25, r25
    5c9a:	9c 01       	movw	r18, r24
    5c9c:	44 27       	eor	r20, r20
    5c9e:	37 fd       	sbrc	r19, 7
    5ca0:	40 95       	com	r20
    5ca2:	54 2f       	mov	r21, r20
    5ca4:	89 81       	ldd	r24, Y+1	; 0x01
    5ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    5ca8:	ab 81       	ldd	r26, Y+3	; 0x03
    5caa:	bc 81       	ldd	r27, Y+4	; 0x04
    5cac:	82 2b       	or	r24, r18
    5cae:	93 2b       	or	r25, r19
    5cb0:	a4 2b       	or	r26, r20
    5cb2:	b5 2b       	or	r27, r21
    5cb4:	89 83       	std	Y+1, r24	; 0x01
    5cb6:	9a 83       	std	Y+2, r25	; 0x02
    5cb8:	ab 83       	std	Y+3, r26	; 0x03
    5cba:	bc 83       	std	Y+4, r27	; 0x04

	Local_u32Check |= (DIO_enuSetPinValue(ROW1_PORT, ROW1_PIN, DIO_u8PULL_UP) << KPAD_SHIFTBIT_TWELVE);
    5cbc:	80 e0       	ldi	r24, 0x00	; 0
    5cbe:	64 e0       	ldi	r22, 0x04	; 4
    5cc0:	41 e0       	ldi	r20, 0x01	; 1
    5cc2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    5cc6:	88 2f       	mov	r24, r24
    5cc8:	90 e0       	ldi	r25, 0x00	; 0
    5cca:	98 2f       	mov	r25, r24
    5ccc:	88 27       	eor	r24, r24
    5cce:	92 95       	swap	r25
    5cd0:	90 7f       	andi	r25, 0xF0	; 240
    5cd2:	9c 01       	movw	r18, r24
    5cd4:	44 27       	eor	r20, r20
    5cd6:	37 fd       	sbrc	r19, 7
    5cd8:	40 95       	com	r20
    5cda:	54 2f       	mov	r21, r20
    5cdc:	89 81       	ldd	r24, Y+1	; 0x01
    5cde:	9a 81       	ldd	r25, Y+2	; 0x02
    5ce0:	ab 81       	ldd	r26, Y+3	; 0x03
    5ce2:	bc 81       	ldd	r27, Y+4	; 0x04
    5ce4:	82 2b       	or	r24, r18
    5ce6:	93 2b       	or	r25, r19
    5ce8:	a4 2b       	or	r26, r20
    5cea:	b5 2b       	or	r27, r21
    5cec:	89 83       	std	Y+1, r24	; 0x01
    5cee:	9a 83       	std	Y+2, r25	; 0x02
    5cf0:	ab 83       	std	Y+3, r26	; 0x03
    5cf2:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (((u32)DIO_enuSetPinValue(ROW2_PORT, ROW2_PIN, DIO_u8PULL_UP)) << KPAD_SHIFTBIT_FIFTEEN);
    5cf4:	80 e0       	ldi	r24, 0x00	; 0
    5cf6:	65 e0       	ldi	r22, 0x05	; 5
    5cf8:	41 e0       	ldi	r20, 0x01	; 1
    5cfa:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    5cfe:	88 2f       	mov	r24, r24
    5d00:	90 e0       	ldi	r25, 0x00	; 0
    5d02:	a0 e0       	ldi	r26, 0x00	; 0
    5d04:	b0 e0       	ldi	r27, 0x00	; 0
    5d06:	9c 01       	movw	r18, r24
    5d08:	ad 01       	movw	r20, r26
    5d0a:	01 2e       	mov	r0, r17
    5d0c:	1f e0       	ldi	r17, 0x0F	; 15
    5d0e:	22 0f       	add	r18, r18
    5d10:	33 1f       	adc	r19, r19
    5d12:	44 1f       	adc	r20, r20
    5d14:	55 1f       	adc	r21, r21
    5d16:	1a 95       	dec	r17
    5d18:	d1 f7       	brne	.-12     	; 0x5d0e <KPAD_enuInit+0x150>
    5d1a:	10 2d       	mov	r17, r0
    5d1c:	89 81       	ldd	r24, Y+1	; 0x01
    5d1e:	9a 81       	ldd	r25, Y+2	; 0x02
    5d20:	ab 81       	ldd	r26, Y+3	; 0x03
    5d22:	bc 81       	ldd	r27, Y+4	; 0x04
    5d24:	82 2b       	or	r24, r18
    5d26:	93 2b       	or	r25, r19
    5d28:	a4 2b       	or	r26, r20
    5d2a:	b5 2b       	or	r27, r21
    5d2c:	89 83       	std	Y+1, r24	; 0x01
    5d2e:	9a 83       	std	Y+2, r25	; 0x02
    5d30:	ab 83       	std	Y+3, r26	; 0x03
    5d32:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (((u32)DIO_enuSetPinValue(ROW3_PORT, ROW3_PIN, DIO_u8PULL_UP)) << KPAD_SHIFTBIT_EIGHTEEN);
    5d34:	80 e0       	ldi	r24, 0x00	; 0
    5d36:	66 e0       	ldi	r22, 0x06	; 6
    5d38:	41 e0       	ldi	r20, 0x01	; 1
    5d3a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    5d3e:	88 2f       	mov	r24, r24
    5d40:	90 e0       	ldi	r25, 0x00	; 0
    5d42:	a0 e0       	ldi	r26, 0x00	; 0
    5d44:	b0 e0       	ldi	r27, 0x00	; 0
    5d46:	9c 01       	movw	r18, r24
    5d48:	ad 01       	movw	r20, r26
    5d4a:	01 2e       	mov	r0, r17
    5d4c:	12 e1       	ldi	r17, 0x12	; 18
    5d4e:	22 0f       	add	r18, r18
    5d50:	33 1f       	adc	r19, r19
    5d52:	44 1f       	adc	r20, r20
    5d54:	55 1f       	adc	r21, r21
    5d56:	1a 95       	dec	r17
    5d58:	d1 f7       	brne	.-12     	; 0x5d4e <KPAD_enuInit+0x190>
    5d5a:	10 2d       	mov	r17, r0
    5d5c:	89 81       	ldd	r24, Y+1	; 0x01
    5d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    5d60:	ab 81       	ldd	r26, Y+3	; 0x03
    5d62:	bc 81       	ldd	r27, Y+4	; 0x04
    5d64:	82 2b       	or	r24, r18
    5d66:	93 2b       	or	r25, r19
    5d68:	a4 2b       	or	r26, r20
    5d6a:	b5 2b       	or	r27, r21
    5d6c:	89 83       	std	Y+1, r24	; 0x01
    5d6e:	9a 83       	std	Y+2, r25	; 0x02
    5d70:	ab 83       	std	Y+3, r26	; 0x03
    5d72:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (((u32)DIO_enuSetPinValue(ROW4_PORT, ROW4_PIN, DIO_u8PULL_UP)) << KPAD_SHIFTBIT_TWENTYONE);
    5d74:	80 e0       	ldi	r24, 0x00	; 0
    5d76:	67 e0       	ldi	r22, 0x07	; 7
    5d78:	41 e0       	ldi	r20, 0x01	; 1
    5d7a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    5d7e:	88 2f       	mov	r24, r24
    5d80:	90 e0       	ldi	r25, 0x00	; 0
    5d82:	a0 e0       	ldi	r26, 0x00	; 0
    5d84:	b0 e0       	ldi	r27, 0x00	; 0
    5d86:	9c 01       	movw	r18, r24
    5d88:	ad 01       	movw	r20, r26
    5d8a:	01 2e       	mov	r0, r17
    5d8c:	15 e1       	ldi	r17, 0x15	; 21
    5d8e:	22 0f       	add	r18, r18
    5d90:	33 1f       	adc	r19, r19
    5d92:	44 1f       	adc	r20, r20
    5d94:	55 1f       	adc	r21, r21
    5d96:	1a 95       	dec	r17
    5d98:	d1 f7       	brne	.-12     	; 0x5d8e <KPAD_enuInit+0x1d0>
    5d9a:	10 2d       	mov	r17, r0
    5d9c:	89 81       	ldd	r24, Y+1	; 0x01
    5d9e:	9a 81       	ldd	r25, Y+2	; 0x02
    5da0:	ab 81       	ldd	r26, Y+3	; 0x03
    5da2:	bc 81       	ldd	r27, Y+4	; 0x04
    5da4:	82 2b       	or	r24, r18
    5da6:	93 2b       	or	r25, r19
    5da8:	a4 2b       	or	r26, r20
    5daa:	b5 2b       	or	r27, r21
    5dac:	89 83       	std	Y+1, r24	; 0x01
    5dae:	9a 83       	std	Y+2, r25	; 0x02
    5db0:	ab 83       	std	Y+3, r26	; 0x03
    5db2:	bc 83       	std	Y+4, r27	; 0x04

	for(Local_u8Iterator = KPAD_ZERO; Local_u8Iterator < KPAD_TWENTYFOUR; Local_u8Iterator += KPAD_THREE)
    5db4:	1d 82       	std	Y+5, r1	; 0x05
    5db6:	1e c0       	rjmp	.+60     	; 0x5df4 <KPAD_enuInit+0x236>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & KPAD_SEVEN) != ES_OK)
    5db8:	8d 81       	ldd	r24, Y+5	; 0x05
    5dba:	28 2f       	mov	r18, r24
    5dbc:	30 e0       	ldi	r19, 0x00	; 0
    5dbe:	89 81       	ldd	r24, Y+1	; 0x01
    5dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    5dc2:	ab 81       	ldd	r26, Y+3	; 0x03
    5dc4:	bc 81       	ldd	r27, Y+4	; 0x04
    5dc6:	02 2e       	mov	r0, r18
    5dc8:	04 c0       	rjmp	.+8      	; 0x5dd2 <KPAD_enuInit+0x214>
    5dca:	b6 95       	lsr	r27
    5dcc:	a7 95       	ror	r26
    5dce:	97 95       	ror	r25
    5dd0:	87 95       	ror	r24
    5dd2:	0a 94       	dec	r0
    5dd4:	d2 f7       	brpl	.-12     	; 0x5dca <KPAD_enuInit+0x20c>
    5dd6:	87 70       	andi	r24, 0x07	; 7
    5dd8:	90 70       	andi	r25, 0x00	; 0
    5dda:	a0 70       	andi	r26, 0x00	; 0
    5ddc:	b0 70       	andi	r27, 0x00	; 0
    5dde:	81 30       	cpi	r24, 0x01	; 1
    5de0:	91 05       	cpc	r25, r1
    5de2:	a1 05       	cpc	r26, r1
    5de4:	b1 05       	cpc	r27, r1
    5de6:	19 f0       	breq	.+6      	; 0x5dee <KPAD_enuInit+0x230>
		{
			return Local_enuErrorState;
    5de8:	8e 81       	ldd	r24, Y+6	; 0x06
    5dea:	8f 83       	std	Y+7, r24	; 0x07
    5dec:	1c c1       	rjmp	.+568    	; 0x6026 <KPAD_enuInit+0x468>
	Local_u32Check |= (DIO_enuSetPinValue(ROW1_PORT, ROW1_PIN, DIO_u8PULL_UP) << KPAD_SHIFTBIT_TWELVE);
	Local_u32Check |= (((u32)DIO_enuSetPinValue(ROW2_PORT, ROW2_PIN, DIO_u8PULL_UP)) << KPAD_SHIFTBIT_FIFTEEN);
	Local_u32Check |= (((u32)DIO_enuSetPinValue(ROW3_PORT, ROW3_PIN, DIO_u8PULL_UP)) << KPAD_SHIFTBIT_EIGHTEEN);
	Local_u32Check |= (((u32)DIO_enuSetPinValue(ROW4_PORT, ROW4_PIN, DIO_u8PULL_UP)) << KPAD_SHIFTBIT_TWENTYONE);

	for(Local_u8Iterator = KPAD_ZERO; Local_u8Iterator < KPAD_TWENTYFOUR; Local_u8Iterator += KPAD_THREE)
    5dee:	8d 81       	ldd	r24, Y+5	; 0x05
    5df0:	8d 5f       	subi	r24, 0xFD	; 253
    5df2:	8d 83       	std	Y+5, r24	; 0x05
    5df4:	8d 81       	ldd	r24, Y+5	; 0x05
    5df6:	88 31       	cpi	r24, 0x18	; 24
    5df8:	f8 f2       	brcs	.-66     	; 0x5db8 <KPAD_enuInit+0x1fa>
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & KPAD_SEVEN) != ES_OK)
		{
			return Local_enuErrorState;
		}
	}
	Local_u32Check = KPAD_ZERO;
    5dfa:	19 82       	std	Y+1, r1	; 0x01
    5dfc:	1a 82       	std	Y+2, r1	; 0x02
    5dfe:	1b 82       	std	Y+3, r1	; 0x03
    5e00:	1c 82       	std	Y+4, r1	; 0x04

	Local_u32Check |= (DIO_enuSetPinDirection(COL1_PORT, COL1_PIN, DIO_u8OUTPUT) << KPAD_SHIFTBIT_ZERO);
    5e02:	81 e0       	ldi	r24, 0x01	; 1
    5e04:	60 e0       	ldi	r22, 0x00	; 0
    5e06:	41 e0       	ldi	r20, 0x01	; 1
    5e08:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    5e0c:	28 2f       	mov	r18, r24
    5e0e:	30 e0       	ldi	r19, 0x00	; 0
    5e10:	40 e0       	ldi	r20, 0x00	; 0
    5e12:	50 e0       	ldi	r21, 0x00	; 0
    5e14:	89 81       	ldd	r24, Y+1	; 0x01
    5e16:	9a 81       	ldd	r25, Y+2	; 0x02
    5e18:	ab 81       	ldd	r26, Y+3	; 0x03
    5e1a:	bc 81       	ldd	r27, Y+4	; 0x04
    5e1c:	82 2b       	or	r24, r18
    5e1e:	93 2b       	or	r25, r19
    5e20:	a4 2b       	or	r26, r20
    5e22:	b5 2b       	or	r27, r21
    5e24:	89 83       	std	Y+1, r24	; 0x01
    5e26:	9a 83       	std	Y+2, r25	; 0x02
    5e28:	ab 83       	std	Y+3, r26	; 0x03
    5e2a:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (DIO_enuSetPinDirection(COL2_PORT, COL2_PIN, DIO_u8OUTPUT) << KPAD_SHIFTBIT_THREE);
    5e2c:	81 e0       	ldi	r24, 0x01	; 1
    5e2e:	61 e0       	ldi	r22, 0x01	; 1
    5e30:	41 e0       	ldi	r20, 0x01	; 1
    5e32:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    5e36:	88 2f       	mov	r24, r24
    5e38:	90 e0       	ldi	r25, 0x00	; 0
    5e3a:	88 0f       	add	r24, r24
    5e3c:	99 1f       	adc	r25, r25
    5e3e:	88 0f       	add	r24, r24
    5e40:	99 1f       	adc	r25, r25
    5e42:	88 0f       	add	r24, r24
    5e44:	99 1f       	adc	r25, r25
    5e46:	9c 01       	movw	r18, r24
    5e48:	44 27       	eor	r20, r20
    5e4a:	37 fd       	sbrc	r19, 7
    5e4c:	40 95       	com	r20
    5e4e:	54 2f       	mov	r21, r20
    5e50:	89 81       	ldd	r24, Y+1	; 0x01
    5e52:	9a 81       	ldd	r25, Y+2	; 0x02
    5e54:	ab 81       	ldd	r26, Y+3	; 0x03
    5e56:	bc 81       	ldd	r27, Y+4	; 0x04
    5e58:	82 2b       	or	r24, r18
    5e5a:	93 2b       	or	r25, r19
    5e5c:	a4 2b       	or	r26, r20
    5e5e:	b5 2b       	or	r27, r21
    5e60:	89 83       	std	Y+1, r24	; 0x01
    5e62:	9a 83       	std	Y+2, r25	; 0x02
    5e64:	ab 83       	std	Y+3, r26	; 0x03
    5e66:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (DIO_enuSetPinDirection(COL3_PORT, COL3_PIN, DIO_u8OUTPUT) << KPAD_SHIFTBIT_SIX);
    5e68:	81 e0       	ldi	r24, 0x01	; 1
    5e6a:	62 e0       	ldi	r22, 0x02	; 2
    5e6c:	41 e0       	ldi	r20, 0x01	; 1
    5e6e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    5e72:	88 2f       	mov	r24, r24
    5e74:	90 e0       	ldi	r25, 0x00	; 0
    5e76:	00 24       	eor	r0, r0
    5e78:	96 95       	lsr	r25
    5e7a:	87 95       	ror	r24
    5e7c:	07 94       	ror	r0
    5e7e:	96 95       	lsr	r25
    5e80:	87 95       	ror	r24
    5e82:	07 94       	ror	r0
    5e84:	98 2f       	mov	r25, r24
    5e86:	80 2d       	mov	r24, r0
    5e88:	9c 01       	movw	r18, r24
    5e8a:	44 27       	eor	r20, r20
    5e8c:	37 fd       	sbrc	r19, 7
    5e8e:	40 95       	com	r20
    5e90:	54 2f       	mov	r21, r20
    5e92:	89 81       	ldd	r24, Y+1	; 0x01
    5e94:	9a 81       	ldd	r25, Y+2	; 0x02
    5e96:	ab 81       	ldd	r26, Y+3	; 0x03
    5e98:	bc 81       	ldd	r27, Y+4	; 0x04
    5e9a:	82 2b       	or	r24, r18
    5e9c:	93 2b       	or	r25, r19
    5e9e:	a4 2b       	or	r26, r20
    5ea0:	b5 2b       	or	r27, r21
    5ea2:	89 83       	std	Y+1, r24	; 0x01
    5ea4:	9a 83       	std	Y+2, r25	; 0x02
    5ea6:	ab 83       	std	Y+3, r26	; 0x03
    5ea8:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (DIO_enuSetPinDirection(COL4_PORT, COL4_PIN, DIO_u8OUTPUT) << KPAD_SHIFTBIT_NINE);
    5eaa:	81 e0       	ldi	r24, 0x01	; 1
    5eac:	63 e0       	ldi	r22, 0x03	; 3
    5eae:	41 e0       	ldi	r20, 0x01	; 1
    5eb0:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>
    5eb4:	88 2f       	mov	r24, r24
    5eb6:	90 e0       	ldi	r25, 0x00	; 0
    5eb8:	98 2f       	mov	r25, r24
    5eba:	88 27       	eor	r24, r24
    5ebc:	99 0f       	add	r25, r25
    5ebe:	9c 01       	movw	r18, r24
    5ec0:	44 27       	eor	r20, r20
    5ec2:	37 fd       	sbrc	r19, 7
    5ec4:	40 95       	com	r20
    5ec6:	54 2f       	mov	r21, r20
    5ec8:	89 81       	ldd	r24, Y+1	; 0x01
    5eca:	9a 81       	ldd	r25, Y+2	; 0x02
    5ecc:	ab 81       	ldd	r26, Y+3	; 0x03
    5ece:	bc 81       	ldd	r27, Y+4	; 0x04
    5ed0:	82 2b       	or	r24, r18
    5ed2:	93 2b       	or	r25, r19
    5ed4:	a4 2b       	or	r26, r20
    5ed6:	b5 2b       	or	r27, r21
    5ed8:	89 83       	std	Y+1, r24	; 0x01
    5eda:	9a 83       	std	Y+2, r25	; 0x02
    5edc:	ab 83       	std	Y+3, r26	; 0x03
    5ede:	bc 83       	std	Y+4, r27	; 0x04

	Local_u32Check |= (DIO_enuSetPinValue(COL1_PORT, COL1_PIN, DIO_u8HIGH) << KPAD_SHIFTBIT_TWELVE);
    5ee0:	81 e0       	ldi	r24, 0x01	; 1
    5ee2:	60 e0       	ldi	r22, 0x00	; 0
    5ee4:	41 e0       	ldi	r20, 0x01	; 1
    5ee6:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    5eea:	88 2f       	mov	r24, r24
    5eec:	90 e0       	ldi	r25, 0x00	; 0
    5eee:	98 2f       	mov	r25, r24
    5ef0:	88 27       	eor	r24, r24
    5ef2:	92 95       	swap	r25
    5ef4:	90 7f       	andi	r25, 0xF0	; 240
    5ef6:	9c 01       	movw	r18, r24
    5ef8:	44 27       	eor	r20, r20
    5efa:	37 fd       	sbrc	r19, 7
    5efc:	40 95       	com	r20
    5efe:	54 2f       	mov	r21, r20
    5f00:	89 81       	ldd	r24, Y+1	; 0x01
    5f02:	9a 81       	ldd	r25, Y+2	; 0x02
    5f04:	ab 81       	ldd	r26, Y+3	; 0x03
    5f06:	bc 81       	ldd	r27, Y+4	; 0x04
    5f08:	82 2b       	or	r24, r18
    5f0a:	93 2b       	or	r25, r19
    5f0c:	a4 2b       	or	r26, r20
    5f0e:	b5 2b       	or	r27, r21
    5f10:	89 83       	std	Y+1, r24	; 0x01
    5f12:	9a 83       	std	Y+2, r25	; 0x02
    5f14:	ab 83       	std	Y+3, r26	; 0x03
    5f16:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (((u32)DIO_enuSetPinValue(COL2_PORT, COL2_PIN, DIO_u8HIGH)) << KPAD_SHIFTBIT_FIFTEEN);
    5f18:	81 e0       	ldi	r24, 0x01	; 1
    5f1a:	61 e0       	ldi	r22, 0x01	; 1
    5f1c:	41 e0       	ldi	r20, 0x01	; 1
    5f1e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    5f22:	88 2f       	mov	r24, r24
    5f24:	90 e0       	ldi	r25, 0x00	; 0
    5f26:	a0 e0       	ldi	r26, 0x00	; 0
    5f28:	b0 e0       	ldi	r27, 0x00	; 0
    5f2a:	9c 01       	movw	r18, r24
    5f2c:	ad 01       	movw	r20, r26
    5f2e:	01 2e       	mov	r0, r17
    5f30:	1f e0       	ldi	r17, 0x0F	; 15
    5f32:	22 0f       	add	r18, r18
    5f34:	33 1f       	adc	r19, r19
    5f36:	44 1f       	adc	r20, r20
    5f38:	55 1f       	adc	r21, r21
    5f3a:	1a 95       	dec	r17
    5f3c:	d1 f7       	brne	.-12     	; 0x5f32 <KPAD_enuInit+0x374>
    5f3e:	10 2d       	mov	r17, r0
    5f40:	89 81       	ldd	r24, Y+1	; 0x01
    5f42:	9a 81       	ldd	r25, Y+2	; 0x02
    5f44:	ab 81       	ldd	r26, Y+3	; 0x03
    5f46:	bc 81       	ldd	r27, Y+4	; 0x04
    5f48:	82 2b       	or	r24, r18
    5f4a:	93 2b       	or	r25, r19
    5f4c:	a4 2b       	or	r26, r20
    5f4e:	b5 2b       	or	r27, r21
    5f50:	89 83       	std	Y+1, r24	; 0x01
    5f52:	9a 83       	std	Y+2, r25	; 0x02
    5f54:	ab 83       	std	Y+3, r26	; 0x03
    5f56:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (((u32)DIO_enuSetPinValue(COL3_PORT, COL3_PIN, DIO_u8HIGH)) << KPAD_SHIFTBIT_EIGHTEEN);
    5f58:	81 e0       	ldi	r24, 0x01	; 1
    5f5a:	62 e0       	ldi	r22, 0x02	; 2
    5f5c:	41 e0       	ldi	r20, 0x01	; 1
    5f5e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    5f62:	88 2f       	mov	r24, r24
    5f64:	90 e0       	ldi	r25, 0x00	; 0
    5f66:	a0 e0       	ldi	r26, 0x00	; 0
    5f68:	b0 e0       	ldi	r27, 0x00	; 0
    5f6a:	9c 01       	movw	r18, r24
    5f6c:	ad 01       	movw	r20, r26
    5f6e:	01 2e       	mov	r0, r17
    5f70:	12 e1       	ldi	r17, 0x12	; 18
    5f72:	22 0f       	add	r18, r18
    5f74:	33 1f       	adc	r19, r19
    5f76:	44 1f       	adc	r20, r20
    5f78:	55 1f       	adc	r21, r21
    5f7a:	1a 95       	dec	r17
    5f7c:	d1 f7       	brne	.-12     	; 0x5f72 <KPAD_enuInit+0x3b4>
    5f7e:	10 2d       	mov	r17, r0
    5f80:	89 81       	ldd	r24, Y+1	; 0x01
    5f82:	9a 81       	ldd	r25, Y+2	; 0x02
    5f84:	ab 81       	ldd	r26, Y+3	; 0x03
    5f86:	bc 81       	ldd	r27, Y+4	; 0x04
    5f88:	82 2b       	or	r24, r18
    5f8a:	93 2b       	or	r25, r19
    5f8c:	a4 2b       	or	r26, r20
    5f8e:	b5 2b       	or	r27, r21
    5f90:	89 83       	std	Y+1, r24	; 0x01
    5f92:	9a 83       	std	Y+2, r25	; 0x02
    5f94:	ab 83       	std	Y+3, r26	; 0x03
    5f96:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (((u32)DIO_enuSetPinValue(COL4_PORT, COL4_PIN, DIO_u8HIGH)) << KPAD_SHIFTBIT_TWENTYONE);
    5f98:	81 e0       	ldi	r24, 0x01	; 1
    5f9a:	63 e0       	ldi	r22, 0x03	; 3
    5f9c:	41 e0       	ldi	r20, 0x01	; 1
    5f9e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    5fa2:	88 2f       	mov	r24, r24
    5fa4:	90 e0       	ldi	r25, 0x00	; 0
    5fa6:	a0 e0       	ldi	r26, 0x00	; 0
    5fa8:	b0 e0       	ldi	r27, 0x00	; 0
    5faa:	9c 01       	movw	r18, r24
    5fac:	ad 01       	movw	r20, r26
    5fae:	01 2e       	mov	r0, r17
    5fb0:	15 e1       	ldi	r17, 0x15	; 21
    5fb2:	22 0f       	add	r18, r18
    5fb4:	33 1f       	adc	r19, r19
    5fb6:	44 1f       	adc	r20, r20
    5fb8:	55 1f       	adc	r21, r21
    5fba:	1a 95       	dec	r17
    5fbc:	d1 f7       	brne	.-12     	; 0x5fb2 <KPAD_enuInit+0x3f4>
    5fbe:	10 2d       	mov	r17, r0
    5fc0:	89 81       	ldd	r24, Y+1	; 0x01
    5fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    5fc4:	ab 81       	ldd	r26, Y+3	; 0x03
    5fc6:	bc 81       	ldd	r27, Y+4	; 0x04
    5fc8:	82 2b       	or	r24, r18
    5fca:	93 2b       	or	r25, r19
    5fcc:	a4 2b       	or	r26, r20
    5fce:	b5 2b       	or	r27, r21
    5fd0:	89 83       	std	Y+1, r24	; 0x01
    5fd2:	9a 83       	std	Y+2, r25	; 0x02
    5fd4:	ab 83       	std	Y+3, r26	; 0x03
    5fd6:	bc 83       	std	Y+4, r27	; 0x04

	for(Local_u8Iterator = KPAD_ZERO; Local_u8Iterator < KPAD_TWENTYFOUR; Local_u8Iterator += KPAD_THREE)
    5fd8:	1d 82       	std	Y+5, r1	; 0x05
    5fda:	1e c0       	rjmp	.+60     	; 0x6018 <KPAD_enuInit+0x45a>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & KPAD_SEVEN) != ES_OK)
    5fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    5fde:	28 2f       	mov	r18, r24
    5fe0:	30 e0       	ldi	r19, 0x00	; 0
    5fe2:	89 81       	ldd	r24, Y+1	; 0x01
    5fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    5fe6:	ab 81       	ldd	r26, Y+3	; 0x03
    5fe8:	bc 81       	ldd	r27, Y+4	; 0x04
    5fea:	02 2e       	mov	r0, r18
    5fec:	04 c0       	rjmp	.+8      	; 0x5ff6 <KPAD_enuInit+0x438>
    5fee:	b6 95       	lsr	r27
    5ff0:	a7 95       	ror	r26
    5ff2:	97 95       	ror	r25
    5ff4:	87 95       	ror	r24
    5ff6:	0a 94       	dec	r0
    5ff8:	d2 f7       	brpl	.-12     	; 0x5fee <KPAD_enuInit+0x430>
    5ffa:	87 70       	andi	r24, 0x07	; 7
    5ffc:	90 70       	andi	r25, 0x00	; 0
    5ffe:	a0 70       	andi	r26, 0x00	; 0
    6000:	b0 70       	andi	r27, 0x00	; 0
    6002:	81 30       	cpi	r24, 0x01	; 1
    6004:	91 05       	cpc	r25, r1
    6006:	a1 05       	cpc	r26, r1
    6008:	b1 05       	cpc	r27, r1
    600a:	19 f0       	breq	.+6      	; 0x6012 <KPAD_enuInit+0x454>
		{
			return Local_enuErrorState;
    600c:	8e 81       	ldd	r24, Y+6	; 0x06
    600e:	8f 83       	std	Y+7, r24	; 0x07
    6010:	0a c0       	rjmp	.+20     	; 0x6026 <KPAD_enuInit+0x468>
	Local_u32Check |= (DIO_enuSetPinValue(COL1_PORT, COL1_PIN, DIO_u8HIGH) << KPAD_SHIFTBIT_TWELVE);
	Local_u32Check |= (((u32)DIO_enuSetPinValue(COL2_PORT, COL2_PIN, DIO_u8HIGH)) << KPAD_SHIFTBIT_FIFTEEN);
	Local_u32Check |= (((u32)DIO_enuSetPinValue(COL3_PORT, COL3_PIN, DIO_u8HIGH)) << KPAD_SHIFTBIT_EIGHTEEN);
	Local_u32Check |= (((u32)DIO_enuSetPinValue(COL4_PORT, COL4_PIN, DIO_u8HIGH)) << KPAD_SHIFTBIT_TWENTYONE);

	for(Local_u8Iterator = KPAD_ZERO; Local_u8Iterator < KPAD_TWENTYFOUR; Local_u8Iterator += KPAD_THREE)
    6012:	8d 81       	ldd	r24, Y+5	; 0x05
    6014:	8d 5f       	subi	r24, 0xFD	; 253
    6016:	8d 83       	std	Y+5, r24	; 0x05
    6018:	8d 81       	ldd	r24, Y+5	; 0x05
    601a:	88 31       	cpi	r24, 0x18	; 24
    601c:	f8 f2       	brcs	.-66     	; 0x5fdc <KPAD_enuInit+0x41e>
		{
			return Local_enuErrorState;
		}
	}

	Local_enuErrorState = ES_OK;
    601e:	81 e0       	ldi	r24, 0x01	; 1
    6020:	8e 83       	std	Y+6, r24	; 0x06

	return Local_enuErrorState;
    6022:	8e 81       	ldd	r24, Y+6	; 0x06
    6024:	8f 83       	std	Y+7, r24	; 0x07
    6026:	8f 81       	ldd	r24, Y+7	; 0x07
}
    6028:	27 96       	adiw	r28, 0x07	; 7
    602a:	0f b6       	in	r0, 0x3f	; 63
    602c:	f8 94       	cli
    602e:	de bf       	out	0x3e, r29	; 62
    6030:	0f be       	out	0x3f, r0	; 63
    6032:	cd bf       	out	0x3d, r28	; 61
    6034:	cf 91       	pop	r28
    6036:	df 91       	pop	r29
    6038:	08 95       	ret

0000603a <KPAD_enuGetPassedKey>:

ES_t KPAD_enuGetPassedKey(u8 *Copy_pu8KeyNumber)
{
    603a:	df 93       	push	r29
    603c:	cf 93       	push	r28
    603e:	cd b7       	in	r28, 0x3d	; 61
    6040:	de b7       	in	r29, 0x3e	; 62
    6042:	2c 97       	sbiw	r28, 0x0c	; 12
    6044:	0f b6       	in	r0, 0x3f	; 63
    6046:	f8 94       	cli
    6048:	de bf       	out	0x3e, r29	; 62
    604a:	0f be       	out	0x3f, r0	; 63
    604c:	cd bf       	out	0x3d, r28	; 61
    604e:	9b 87       	std	Y+11, r25	; 0x0b
    6050:	8a 87       	std	Y+10, r24	; 0x0a
	ES_t Local_enuErrorState = ES_NOK;
    6052:	18 86       	std	Y+8, r1	; 0x08
	u8 Local_u8ColIndex = KPAD_ZERO, Local_u8RowIndex = KPAD_ZERO, Local_u8KeyState = KPAD_ZERO;
    6054:	1f 82       	std	Y+7, r1	; 0x07
    6056:	1e 82       	std	Y+6, r1	; 0x06
    6058:	19 86       	std	Y+9, r1	; 0x09
	u8 Local_u8Iterator = KPAD_ZERO;
    605a:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Check = KPAD_ZERO;
    605c:	19 82       	std	Y+1, r1	; 0x01
    605e:	1a 82       	std	Y+2, r1	; 0x02
    6060:	1b 82       	std	Y+3, r1	; 0x03
    6062:	1c 82       	std	Y+4, r1	; 0x04


	static u8 Local_u8AKPADARR[KPAD_ROWNUM][KPAD_COLNUM] = KPAD_ARR_VAL;

	/* Initial value of key pressed */
	if(Copy_pu8KeyNumber != NULL)
    6064:	8a 85       	ldd	r24, Y+10	; 0x0a
    6066:	9b 85       	ldd	r25, Y+11	; 0x0b
    6068:	00 97       	sbiw	r24, 0x00	; 0
    606a:	31 f0       	breq	.+12     	; 0x6078 <KPAD_enuGetPassedKey+0x3e>
	{
		*Copy_pu8KeyNumber = NO_PRESSED_KEY;
    606c:	ea 85       	ldd	r30, Y+10	; 0x0a
    606e:	fb 85       	ldd	r31, Y+11	; 0x0b
    6070:	8f ef       	ldi	r24, 0xFF	; 255
    6072:	80 83       	st	Z, r24
	else
	{
		return ES_NULL_POINTER;
	}

	for(Local_u8ColIndex = KPAD_ZERO; Local_u8ColIndex < KPAD_COLNUM; Local_u8ColIndex++)
    6074:	1f 82       	std	Y+7, r1	; 0x07
    6076:	e9 c0       	rjmp	.+466    	; 0x624a <KPAD_enuGetPassedKey+0x210>
	{
		*Copy_pu8KeyNumber = NO_PRESSED_KEY;
	}
	else
	{
		return ES_NULL_POINTER;
    6078:	82 e0       	ldi	r24, 0x02	; 2
    607a:	8c 87       	std	Y+12, r24	; 0x0c
    607c:	11 c1       	rjmp	.+546    	; 0x62a0 <KPAD_enuGetPassedKey+0x266>
	}

	for(Local_u8ColIndex = KPAD_ZERO; Local_u8ColIndex < KPAD_COLNUM; Local_u8ColIndex++)
	{
		/* Activate Column */
		Local_u32Check |= (DIO_enuSetPinValue(Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ZERO],
    607e:	8f 81       	ldd	r24, Y+7	; 0x07
    6080:	88 2f       	mov	r24, r24
    6082:	90 e0       	ldi	r25, 0x00	; 0
    6084:	88 0f       	add	r24, r24
    6086:	99 1f       	adc	r25, r25
    6088:	fc 01       	movw	r30, r24
    608a:	e1 52       	subi	r30, 0x21	; 33
    608c:	fe 4f       	sbci	r31, 0xFE	; 254
    608e:	20 81       	ld	r18, Z
    6090:	8f 81       	ldd	r24, Y+7	; 0x07
    6092:	88 2f       	mov	r24, r24
    6094:	90 e0       	ldi	r25, 0x00	; 0
    6096:	88 0f       	add	r24, r24
    6098:	99 1f       	adc	r25, r25
    609a:	fc 01       	movw	r30, r24
    609c:	e0 52       	subi	r30, 0x20	; 32
    609e:	fe 4f       	sbci	r31, 0xFE	; 254
    60a0:	90 81       	ld	r25, Z
    60a2:	82 2f       	mov	r24, r18
    60a4:	69 2f       	mov	r22, r25
    60a6:	40 e0       	ldi	r20, 0x00	; 0
    60a8:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    60ac:	28 2f       	mov	r18, r24
    60ae:	30 e0       	ldi	r19, 0x00	; 0
    60b0:	40 e0       	ldi	r20, 0x00	; 0
    60b2:	50 e0       	ldi	r21, 0x00	; 0
    60b4:	89 81       	ldd	r24, Y+1	; 0x01
    60b6:	9a 81       	ldd	r25, Y+2	; 0x02
    60b8:	ab 81       	ldd	r26, Y+3	; 0x03
    60ba:	bc 81       	ldd	r27, Y+4	; 0x04
    60bc:	82 2b       	or	r24, r18
    60be:	93 2b       	or	r25, r19
    60c0:	a4 2b       	or	r26, r20
    60c2:	b5 2b       	or	r27, r21
    60c4:	89 83       	std	Y+1, r24	; 0x01
    60c6:	9a 83       	std	Y+2, r25	; 0x02
    60c8:	ab 83       	std	Y+3, r26	; 0x03
    60ca:	bc 83       	std	Y+4, r27	; 0x04
						   Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ONE], DIO_u8LOW) << KPAD_SHIFTBIT_ZERO);

		for(Local_u8RowIndex = KPAD_ZERO; Local_u8RowIndex < KPAD_ROWNUM; Local_u8RowIndex++)
    60cc:	1e 82       	std	Y+6, r1	; 0x06
    60ce:	89 c0       	rjmp	.+274    	; 0x61e2 <KPAD_enuGetPassedKey+0x1a8>
		{
			/* Read the current row */
			 Local_u32Check |= (DIO_enuGetPinValue(Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ZERO],
    60d0:	8e 81       	ldd	r24, Y+6	; 0x06
    60d2:	88 2f       	mov	r24, r24
    60d4:	90 e0       	ldi	r25, 0x00	; 0
    60d6:	88 0f       	add	r24, r24
    60d8:	99 1f       	adc	r25, r25
    60da:	fc 01       	movw	r30, r24
    60dc:	e9 52       	subi	r30, 0x29	; 41
    60de:	fe 4f       	sbci	r31, 0xFE	; 254
    60e0:	40 81       	ld	r20, Z
    60e2:	8e 81       	ldd	r24, Y+6	; 0x06
    60e4:	88 2f       	mov	r24, r24
    60e6:	90 e0       	ldi	r25, 0x00	; 0
    60e8:	88 0f       	add	r24, r24
    60ea:	99 1f       	adc	r25, r25
    60ec:	fc 01       	movw	r30, r24
    60ee:	e8 52       	subi	r30, 0x28	; 40
    60f0:	fe 4f       	sbci	r31, 0xFE	; 254
    60f2:	90 81       	ld	r25, Z
    60f4:	9e 01       	movw	r18, r28
    60f6:	27 5f       	subi	r18, 0xF7	; 247
    60f8:	3f 4f       	sbci	r19, 0xFF	; 255
    60fa:	84 2f       	mov	r24, r20
    60fc:	69 2f       	mov	r22, r25
    60fe:	a9 01       	movw	r20, r18
    6100:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DIO_enuGetPinValue>
    6104:	88 2f       	mov	r24, r24
    6106:	90 e0       	ldi	r25, 0x00	; 0
    6108:	88 0f       	add	r24, r24
    610a:	99 1f       	adc	r25, r25
    610c:	88 0f       	add	r24, r24
    610e:	99 1f       	adc	r25, r25
    6110:	88 0f       	add	r24, r24
    6112:	99 1f       	adc	r25, r25
    6114:	9c 01       	movw	r18, r24
    6116:	44 27       	eor	r20, r20
    6118:	37 fd       	sbrc	r19, 7
    611a:	40 95       	com	r20
    611c:	54 2f       	mov	r21, r20
    611e:	89 81       	ldd	r24, Y+1	; 0x01
    6120:	9a 81       	ldd	r25, Y+2	; 0x02
    6122:	ab 81       	ldd	r26, Y+3	; 0x03
    6124:	bc 81       	ldd	r27, Y+4	; 0x04
    6126:	82 2b       	or	r24, r18
    6128:	93 2b       	or	r25, r19
    612a:	a4 2b       	or	r26, r20
    612c:	b5 2b       	or	r27, r21
    612e:	89 83       	std	Y+1, r24	; 0x01
    6130:	9a 83       	std	Y+2, r25	; 0x02
    6132:	ab 83       	std	Y+3, r26	; 0x03
    6134:	bc 83       	std	Y+4, r27	; 0x04
													Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ONE], &Local_u8KeyState) << KPAD_SHIFTBIT_THREE);
			 if(DIO_u8LOW == Local_u8KeyState)
    6136:	89 85       	ldd	r24, Y+9	; 0x09
    6138:	88 23       	and	r24, r24
    613a:	09 f0       	breq	.+2      	; 0x613e <KPAD_enuGetPassedKey+0x104>
    613c:	4f c0       	rjmp	.+158    	; 0x61dc <KPAD_enuGetPassedKey+0x1a2>
    613e:	36 c0       	rjmp	.+108    	; 0x61ac <KPAD_enuGetPassedKey+0x172>
			 {
				 /* Polling (Busy waiting until the key is released) */
				 while(DIO_u8LOW == Local_u8KeyState)
				 {
					 Local_u32Check |= (DIO_enuGetPinValue(Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ZERO],
    6140:	8e 81       	ldd	r24, Y+6	; 0x06
    6142:	88 2f       	mov	r24, r24
    6144:	90 e0       	ldi	r25, 0x00	; 0
    6146:	88 0f       	add	r24, r24
    6148:	99 1f       	adc	r25, r25
    614a:	fc 01       	movw	r30, r24
    614c:	e9 52       	subi	r30, 0x29	; 41
    614e:	fe 4f       	sbci	r31, 0xFE	; 254
    6150:	40 81       	ld	r20, Z
    6152:	8e 81       	ldd	r24, Y+6	; 0x06
    6154:	88 2f       	mov	r24, r24
    6156:	90 e0       	ldi	r25, 0x00	; 0
    6158:	88 0f       	add	r24, r24
    615a:	99 1f       	adc	r25, r25
    615c:	fc 01       	movw	r30, r24
    615e:	e8 52       	subi	r30, 0x28	; 40
    6160:	fe 4f       	sbci	r31, 0xFE	; 254
    6162:	90 81       	ld	r25, Z
    6164:	9e 01       	movw	r18, r28
    6166:	27 5f       	subi	r18, 0xF7	; 247
    6168:	3f 4f       	sbci	r19, 0xFF	; 255
    616a:	84 2f       	mov	r24, r20
    616c:	69 2f       	mov	r22, r25
    616e:	a9 01       	movw	r20, r18
    6170:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DIO_enuGetPinValue>
    6174:	88 2f       	mov	r24, r24
    6176:	90 e0       	ldi	r25, 0x00	; 0
    6178:	00 24       	eor	r0, r0
    617a:	96 95       	lsr	r25
    617c:	87 95       	ror	r24
    617e:	07 94       	ror	r0
    6180:	96 95       	lsr	r25
    6182:	87 95       	ror	r24
    6184:	07 94       	ror	r0
    6186:	98 2f       	mov	r25, r24
    6188:	80 2d       	mov	r24, r0
    618a:	9c 01       	movw	r18, r24
    618c:	44 27       	eor	r20, r20
    618e:	37 fd       	sbrc	r19, 7
    6190:	40 95       	com	r20
    6192:	54 2f       	mov	r21, r20
    6194:	89 81       	ldd	r24, Y+1	; 0x01
    6196:	9a 81       	ldd	r25, Y+2	; 0x02
    6198:	ab 81       	ldd	r26, Y+3	; 0x03
    619a:	bc 81       	ldd	r27, Y+4	; 0x04
    619c:	82 2b       	or	r24, r18
    619e:	93 2b       	or	r25, r19
    61a0:	a4 2b       	or	r26, r20
    61a2:	b5 2b       	or	r27, r21
    61a4:	89 83       	std	Y+1, r24	; 0x01
    61a6:	9a 83       	std	Y+2, r25	; 0x02
    61a8:	ab 83       	std	Y+3, r26	; 0x03
    61aa:	bc 83       	std	Y+4, r27	; 0x04
			 Local_u32Check |= (DIO_enuGetPinValue(Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ZERO],
													Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ONE], &Local_u8KeyState) << KPAD_SHIFTBIT_THREE);
			 if(DIO_u8LOW == Local_u8KeyState)
			 {
				 /* Polling (Busy waiting until the key is released) */
				 while(DIO_u8LOW == Local_u8KeyState)
    61ac:	89 85       	ldd	r24, Y+9	; 0x09
    61ae:	88 23       	and	r24, r24
    61b0:	39 f2       	breq	.-114    	; 0x6140 <KPAD_enuGetPassedKey+0x106>
				 {
					 Local_u32Check |= (DIO_enuGetPinValue(Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ZERO],
															Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ONE], &Local_u8KeyState) << KPAD_SHIFTBIT_SIX);
				 }

				 *Copy_pu8KeyNumber = Local_u8AKPADARR[Local_u8RowIndex][Local_u8ColIndex];
    61b2:	8e 81       	ldd	r24, Y+6	; 0x06
    61b4:	48 2f       	mov	r20, r24
    61b6:	50 e0       	ldi	r21, 0x00	; 0
    61b8:	8f 81       	ldd	r24, Y+7	; 0x07
    61ba:	28 2f       	mov	r18, r24
    61bc:	30 e0       	ldi	r19, 0x00	; 0
    61be:	ca 01       	movw	r24, r20
    61c0:	88 0f       	add	r24, r24
    61c2:	99 1f       	adc	r25, r25
    61c4:	88 0f       	add	r24, r24
    61c6:	99 1f       	adc	r25, r25
    61c8:	82 0f       	add	r24, r18
    61ca:	93 1f       	adc	r25, r19
    61cc:	fc 01       	movw	r30, r24
    61ce:	e9 53       	subi	r30, 0x39	; 57
    61d0:	fe 4f       	sbci	r31, 0xFE	; 254
    61d2:	80 81       	ld	r24, Z
    61d4:	ea 85       	ldd	r30, Y+10	; 0x0a
    61d6:	fb 85       	ldd	r31, Y+11	; 0x0b
    61d8:	80 83       	st	Z, r24
    61da:	07 c0       	rjmp	.+14     	; 0x61ea <KPAD_enuGetPassedKey+0x1b0>
	{
		/* Activate Column */
		Local_u32Check |= (DIO_enuSetPinValue(Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ZERO],
						   Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ONE], DIO_u8LOW) << KPAD_SHIFTBIT_ZERO);

		for(Local_u8RowIndex = KPAD_ZERO; Local_u8RowIndex < KPAD_ROWNUM; Local_u8RowIndex++)
    61dc:	8e 81       	ldd	r24, Y+6	; 0x06
    61de:	8f 5f       	subi	r24, 0xFF	; 255
    61e0:	8e 83       	std	Y+6, r24	; 0x06
    61e2:	8e 81       	ldd	r24, Y+6	; 0x06
    61e4:	84 30       	cpi	r24, 0x04	; 4
    61e6:	08 f4       	brcc	.+2      	; 0x61ea <KPAD_enuGetPassedKey+0x1b0>
    61e8:	73 cf       	rjmp	.-282    	; 0x60d0 <KPAD_enuGetPassedKey+0x96>
				 break;
			 }
		}

		/* Deactivate Column */
		Local_u32Check |= (DIO_enuSetPinValue(Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ZERO],
    61ea:	8f 81       	ldd	r24, Y+7	; 0x07
    61ec:	88 2f       	mov	r24, r24
    61ee:	90 e0       	ldi	r25, 0x00	; 0
    61f0:	88 0f       	add	r24, r24
    61f2:	99 1f       	adc	r25, r25
    61f4:	fc 01       	movw	r30, r24
    61f6:	e1 52       	subi	r30, 0x21	; 33
    61f8:	fe 4f       	sbci	r31, 0xFE	; 254
    61fa:	20 81       	ld	r18, Z
    61fc:	8f 81       	ldd	r24, Y+7	; 0x07
    61fe:	88 2f       	mov	r24, r24
    6200:	90 e0       	ldi	r25, 0x00	; 0
    6202:	88 0f       	add	r24, r24
    6204:	99 1f       	adc	r25, r25
    6206:	fc 01       	movw	r30, r24
    6208:	e0 52       	subi	r30, 0x20	; 32
    620a:	fe 4f       	sbci	r31, 0xFE	; 254
    620c:	90 81       	ld	r25, Z
    620e:	82 2f       	mov	r24, r18
    6210:	69 2f       	mov	r22, r25
    6212:	41 e0       	ldi	r20, 0x01	; 1
    6214:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    6218:	88 2f       	mov	r24, r24
    621a:	90 e0       	ldi	r25, 0x00	; 0
    621c:	98 2f       	mov	r25, r24
    621e:	88 27       	eor	r24, r24
    6220:	99 0f       	add	r25, r25
    6222:	9c 01       	movw	r18, r24
    6224:	44 27       	eor	r20, r20
    6226:	37 fd       	sbrc	r19, 7
    6228:	40 95       	com	r20
    622a:	54 2f       	mov	r21, r20
    622c:	89 81       	ldd	r24, Y+1	; 0x01
    622e:	9a 81       	ldd	r25, Y+2	; 0x02
    6230:	ab 81       	ldd	r26, Y+3	; 0x03
    6232:	bc 81       	ldd	r27, Y+4	; 0x04
    6234:	82 2b       	or	r24, r18
    6236:	93 2b       	or	r25, r19
    6238:	a4 2b       	or	r26, r20
    623a:	b5 2b       	or	r27, r21
    623c:	89 83       	std	Y+1, r24	; 0x01
    623e:	9a 83       	std	Y+2, r25	; 0x02
    6240:	ab 83       	std	Y+3, r26	; 0x03
    6242:	bc 83       	std	Y+4, r27	; 0x04
	else
	{
		return ES_NULL_POINTER;
	}

	for(Local_u8ColIndex = KPAD_ZERO; Local_u8ColIndex < KPAD_COLNUM; Local_u8ColIndex++)
    6244:	8f 81       	ldd	r24, Y+7	; 0x07
    6246:	8f 5f       	subi	r24, 0xFF	; 255
    6248:	8f 83       	std	Y+7, r24	; 0x07
    624a:	8f 81       	ldd	r24, Y+7	; 0x07
    624c:	84 30       	cpi	r24, 0x04	; 4
    624e:	08 f4       	brcc	.+2      	; 0x6252 <KPAD_enuGetPassedKey+0x218>
    6250:	16 cf       	rjmp	.-468    	; 0x607e <KPAD_enuGetPassedKey+0x44>
		/* Deactivate Column */
		Local_u32Check |= (DIO_enuSetPinValue(Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ZERO],
						   	   	   	   	   	   Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ONE], DIO_u8HIGH) << KPAD_SHIFTBIT_NINE);
	}

	for(Local_u8Iterator = KPAD_ZERO; Local_u8Iterator < KPAD_TWELVE; Local_u8Iterator += KPAD_THREE)
    6252:	1d 82       	std	Y+5, r1	; 0x05
    6254:	1e c0       	rjmp	.+60     	; 0x6292 <KPAD_enuGetPassedKey+0x258>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & KPAD_SEVEN) != ES_OK)
    6256:	8d 81       	ldd	r24, Y+5	; 0x05
    6258:	28 2f       	mov	r18, r24
    625a:	30 e0       	ldi	r19, 0x00	; 0
    625c:	89 81       	ldd	r24, Y+1	; 0x01
    625e:	9a 81       	ldd	r25, Y+2	; 0x02
    6260:	ab 81       	ldd	r26, Y+3	; 0x03
    6262:	bc 81       	ldd	r27, Y+4	; 0x04
    6264:	02 2e       	mov	r0, r18
    6266:	04 c0       	rjmp	.+8      	; 0x6270 <KPAD_enuGetPassedKey+0x236>
    6268:	b6 95       	lsr	r27
    626a:	a7 95       	ror	r26
    626c:	97 95       	ror	r25
    626e:	87 95       	ror	r24
    6270:	0a 94       	dec	r0
    6272:	d2 f7       	brpl	.-12     	; 0x6268 <KPAD_enuGetPassedKey+0x22e>
    6274:	87 70       	andi	r24, 0x07	; 7
    6276:	90 70       	andi	r25, 0x00	; 0
    6278:	a0 70       	andi	r26, 0x00	; 0
    627a:	b0 70       	andi	r27, 0x00	; 0
    627c:	81 30       	cpi	r24, 0x01	; 1
    627e:	91 05       	cpc	r25, r1
    6280:	a1 05       	cpc	r26, r1
    6282:	b1 05       	cpc	r27, r1
    6284:	19 f0       	breq	.+6      	; 0x628c <KPAD_enuGetPassedKey+0x252>
		{
			return Local_enuErrorState;
    6286:	88 85       	ldd	r24, Y+8	; 0x08
    6288:	8c 87       	std	Y+12, r24	; 0x0c
    628a:	0a c0       	rjmp	.+20     	; 0x62a0 <KPAD_enuGetPassedKey+0x266>
		/* Deactivate Column */
		Local_u32Check |= (DIO_enuSetPinValue(Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ZERO],
						   	   	   	   	   	   Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ONE], DIO_u8HIGH) << KPAD_SHIFTBIT_NINE);
	}

	for(Local_u8Iterator = KPAD_ZERO; Local_u8Iterator < KPAD_TWELVE; Local_u8Iterator += KPAD_THREE)
    628c:	8d 81       	ldd	r24, Y+5	; 0x05
    628e:	8d 5f       	subi	r24, 0xFD	; 253
    6290:	8d 83       	std	Y+5, r24	; 0x05
    6292:	8d 81       	ldd	r24, Y+5	; 0x05
    6294:	8c 30       	cpi	r24, 0x0C	; 12
    6296:	f8 f2       	brcs	.-66     	; 0x6256 <KPAD_enuGetPassedKey+0x21c>
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & KPAD_SEVEN) != ES_OK)
		{
			return Local_enuErrorState;
		}
	}
	Local_enuErrorState = ES_OK;
    6298:	81 e0       	ldi	r24, 0x01	; 1
    629a:	88 87       	std	Y+8, r24	; 0x08

	return Local_enuErrorState;
    629c:	88 85       	ldd	r24, Y+8	; 0x08
    629e:	8c 87       	std	Y+12, r24	; 0x0c
    62a0:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    62a2:	2c 96       	adiw	r28, 0x0c	; 12
    62a4:	0f b6       	in	r0, 0x3f	; 63
    62a6:	f8 94       	cli
    62a8:	de bf       	out	0x3e, r29	; 62
    62aa:	0f be       	out	0x3f, r0	; 63
    62ac:	cd bf       	out	0x3d, r28	; 61
    62ae:	cf 91       	pop	r28
    62b0:	df 91       	pop	r29
    62b2:	08 95       	ret

000062b4 <main>:
#include "../LIB/STD_TYPES.h"
#include "../LIB/ERROR_STATE.h"
#include "../MCAL/DIO/DIO_int.h"

int main(void)
{
    62b4:	df 93       	push	r29
    62b6:	cf 93       	push	r28
    62b8:	cd b7       	in	r28, 0x3d	; 61
    62ba:	de b7       	in	r29, 0x3e	; 62
	DIO_enuInit();
    62bc:	0e 94 25 0b 	call	0x164a	; 0x164a <DIO_enuInit>

	DIO_enuSetPinDirection(DIO_u8PORTA, DIO_u8PIN0, DIO_u8OUTPUT);
    62c0:	80 e0       	ldi	r24, 0x00	; 0
    62c2:	60 e0       	ldi	r22, 0x00	; 0
    62c4:	41 e0       	ldi	r20, 0x01	; 1
    62c6:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuSetPinDirection>

	while(1)
	{
		DIO_enuSetPinValue(DIO_u8PORTA, DIO_u8PIN0, DIO_u8HIGH);
    62ca:	80 e0       	ldi	r24, 0x00	; 0
    62cc:	60 e0       	ldi	r22, 0x00	; 0
    62ce:	41 e0       	ldi	r20, 0x01	; 1
    62d0:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_enuSetPinValue>
    62d4:	fa cf       	rjmp	.-12     	; 0x62ca <main+0x16>

000062d6 <__prologue_saves__>:
    62d6:	2f 92       	push	r2
    62d8:	3f 92       	push	r3
    62da:	4f 92       	push	r4
    62dc:	5f 92       	push	r5
    62de:	6f 92       	push	r6
    62e0:	7f 92       	push	r7
    62e2:	8f 92       	push	r8
    62e4:	9f 92       	push	r9
    62e6:	af 92       	push	r10
    62e8:	bf 92       	push	r11
    62ea:	cf 92       	push	r12
    62ec:	df 92       	push	r13
    62ee:	ef 92       	push	r14
    62f0:	ff 92       	push	r15
    62f2:	0f 93       	push	r16
    62f4:	1f 93       	push	r17
    62f6:	cf 93       	push	r28
    62f8:	df 93       	push	r29
    62fa:	cd b7       	in	r28, 0x3d	; 61
    62fc:	de b7       	in	r29, 0x3e	; 62
    62fe:	ca 1b       	sub	r28, r26
    6300:	db 0b       	sbc	r29, r27
    6302:	0f b6       	in	r0, 0x3f	; 63
    6304:	f8 94       	cli
    6306:	de bf       	out	0x3e, r29	; 62
    6308:	0f be       	out	0x3f, r0	; 63
    630a:	cd bf       	out	0x3d, r28	; 61
    630c:	09 94       	ijmp

0000630e <__epilogue_restores__>:
    630e:	2a 88       	ldd	r2, Y+18	; 0x12
    6310:	39 88       	ldd	r3, Y+17	; 0x11
    6312:	48 88       	ldd	r4, Y+16	; 0x10
    6314:	5f 84       	ldd	r5, Y+15	; 0x0f
    6316:	6e 84       	ldd	r6, Y+14	; 0x0e
    6318:	7d 84       	ldd	r7, Y+13	; 0x0d
    631a:	8c 84       	ldd	r8, Y+12	; 0x0c
    631c:	9b 84       	ldd	r9, Y+11	; 0x0b
    631e:	aa 84       	ldd	r10, Y+10	; 0x0a
    6320:	b9 84       	ldd	r11, Y+9	; 0x09
    6322:	c8 84       	ldd	r12, Y+8	; 0x08
    6324:	df 80       	ldd	r13, Y+7	; 0x07
    6326:	ee 80       	ldd	r14, Y+6	; 0x06
    6328:	fd 80       	ldd	r15, Y+5	; 0x05
    632a:	0c 81       	ldd	r16, Y+4	; 0x04
    632c:	1b 81       	ldd	r17, Y+3	; 0x03
    632e:	aa 81       	ldd	r26, Y+2	; 0x02
    6330:	b9 81       	ldd	r27, Y+1	; 0x01
    6332:	ce 0f       	add	r28, r30
    6334:	d1 1d       	adc	r29, r1
    6336:	0f b6       	in	r0, 0x3f	; 63
    6338:	f8 94       	cli
    633a:	de bf       	out	0x3e, r29	; 62
    633c:	0f be       	out	0x3f, r0	; 63
    633e:	cd bf       	out	0x3d, r28	; 61
    6340:	ed 01       	movw	r28, r26
    6342:	08 95       	ret

00006344 <_exit>:
    6344:	f8 94       	cli

00006346 <__stop_program>:
    6346:	ff cf       	rjmp	.-2      	; 0x6346 <__stop_program>
