
DIO_nti.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006424  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000188  00800060  00006424  000064b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008001e8  008001e8  00006640  2**0
                  ALLOC
  3 .stab         00004c44  00000000  00000000  00006640  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d68  00000000  00000000  0000b284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000cfec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000d1ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000d3c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000f9d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00010ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  000121ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0001238c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00012693  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000130ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__vector_1>
       8:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__vector_2>
       c:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e2       	ldi	r30, 0x24	; 36
      68:	f4 e6       	ldi	r31, 0x64	; 100
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3e       	cpi	r26, 0xE8	; 232
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ee       	ldi	r26, 0xE8	; 232
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3f       	cpi	r26, 0xF4	; 244
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 93 31 	call	0x6326	; 0x6326 <main>
      8a:	0c 94 10 32 	jmp	0x6420	; 0x6420 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d9 31 	jmp	0x63b2	; 0x63b2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f5 31 	jmp	0x63ea	; 0x63ea <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e5 31 	jmp	0x63ca	; 0x63ca <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 01 32 	jmp	0x6402	; 0x6402 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e5 31 	jmp	0x63ca	; 0x63ca <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 01 32 	jmp	0x6402	; 0x6402 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d9 31 	jmp	0x63b2	; 0x63b2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f5 31 	jmp	0x63ea	; 0x63ea <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e1 31 	jmp	0x63c2	; 0x63c2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 fd 31 	jmp	0x63fa	; 0x63fa <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e5 31 	jmp	0x63ca	; 0x63ca <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 01 32 	jmp	0x6402	; 0x6402 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e5 31 	jmp	0x63ca	; 0x63ca <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 01 32 	jmp	0x6402	; 0x6402 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e5 31 	jmp	0x63ca	; 0x63ca <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 01 32 	jmp	0x6402	; 0x6402 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e2 31 	jmp	0x63c4	; 0x63c4 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 fe 31 	jmp	0x63fc	; 0x63fc <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 05 32 	jmp	0x640a	; 0x640a <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 e1 31 	jmp	0x63c2	; 0x63c2 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 fd 31 	jmp	0x63fa	; 0x63fa <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <GIE_enuEnable>:
#include "../../LIB/STD_TYPES.h"
#include "../../LIB/ERROR_STATE.h"
#include "GIE_private.h"

ES_t GIE_enuEnable(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	0f 92       	push	r0
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     ef4:	19 82       	std	Y+1, r1	; 0x01

	SREG |= (1<<7);
     ef6:	af e5       	ldi	r26, 0x5F	; 95
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	ef e5       	ldi	r30, 0x5F	; 95
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	80 68       	ori	r24, 0x80	; 128
     f02:	8c 93       	st	X, r24

	Local_enuErrorState = ES_OK;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
     f08:	89 81       	ldd	r24, Y+1	; 0x01
}
     f0a:	0f 90       	pop	r0
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <GIE_enuDisable>:

ES_t GIE_enuDisable(void)
{
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	0f 92       	push	r0
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     f1c:	19 82       	std	Y+1, r1	; 0x01

	SREG &= ~(1<<7);
     f1e:	af e5       	ldi	r26, 0x5F	; 95
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	ef e5       	ldi	r30, 0x5F	; 95
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	8f 77       	andi	r24, 0x7F	; 127
     f2a:	8c 93       	st	X, r24

	Local_enuErrorState = ES_OK;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
     f30:	89 81       	ldd	r24, Y+1	; 0x01

}
     f32:	0f 90       	pop	r0
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	08 95       	ret

00000f3a <EXTI_enuInit>:

static volatile void (*EXTI_ApfunINTFun[3])(void *) = {NULL, NULL, NULL}; //Volatile because it is call from ISR
static volatile void * EXTI_ApvoidGenericparameter[3] = {NULL, NULL, NULL};

ES_t EXTI_enuInit(EXTI_t * Copy_pstrEXTIConfig)
{
     f3a:	df 93       	push	r29
     f3c:	cf 93       	push	r28
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	2d 97       	sbiw	r28, 0x0d	; 13
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	f8 94       	cli
     f48:	de bf       	out	0x3e, r29	; 62
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	cd bf       	out	0x3d, r28	; 61
     f4e:	9c 83       	std	Y+4, r25	; 0x04
     f50:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     f52:	1a 82       	std	Y+2, r1	; 0x02


	if(NULL != Copy_pstrEXTIConfig)
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	9c 81       	ldd	r25, Y+4	; 0x04
     f58:	00 97       	sbiw	r24, 0x00	; 0
     f5a:	09 f4       	brne	.+2      	; 0xf5e <EXTI_enuInit+0x24>
     f5c:	24 c1       	rjmp	.+584    	; 0x11a6 <EXTI_enuInit+0x26c>
	{
		u8 Local_u8Iter = 0;
     f5e:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8Iter = 0; Local_u8Iter < 3; Local_u8Iter++)
     f60:	19 82       	std	Y+1, r1	; 0x01
     f62:	1a c1       	rjmp	.+564    	; 0x1198 <EXTI_enuInit+0x25e>
		{
			if(Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8State == ACTIVE)
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	88 2f       	mov	r24, r24
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	9c 01       	movw	r18, r24
     f6c:	22 0f       	add	r18, r18
     f6e:	33 1f       	adc	r19, r19
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	9c 81       	ldd	r25, Y+4	; 0x04
     f74:	fc 01       	movw	r30, r24
     f76:	e2 0f       	add	r30, r18
     f78:	f3 1f       	adc	r31, r19
     f7a:	80 81       	ld	r24, Z
     f7c:	85 30       	cpi	r24, 0x05	; 5
     f7e:	09 f0       	breq	.+2      	; 0xf82 <EXTI_enuInit+0x48>
     f80:	08 c1       	rjmp	.+528    	; 0x1192 <EXTI_enuInit+0x258>
			{
				switch(Local_u8Iter)
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	3d 87       	std	Y+13, r19	; 0x0d
     f8a:	2c 87       	std	Y+12, r18	; 0x0c
     f8c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f8e:	9d 85       	ldd	r25, Y+13	; 0x0d
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	91 05       	cpc	r25, r1
     f94:	09 f4       	brne	.+2      	; 0xf98 <EXTI_enuInit+0x5e>
     f96:	68 c0       	rjmp	.+208    	; 0x1068 <EXTI_enuInit+0x12e>
     f98:	2c 85       	ldd	r18, Y+12	; 0x0c
     f9a:	3d 85       	ldd	r19, Y+13	; 0x0d
     f9c:	22 30       	cpi	r18, 0x02	; 2
     f9e:	31 05       	cpc	r19, r1
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <EXTI_enuInit+0x6a>
     fa2:	bf c0       	rjmp	.+382    	; 0x1122 <EXTI_enuInit+0x1e8>
     fa4:	8c 85       	ldd	r24, Y+12	; 0x0c
     fa6:	9d 85       	ldd	r25, Y+13	; 0x0d
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	09 f0       	breq	.+2      	; 0xfae <EXTI_enuInit+0x74>
     fac:	f2 c0       	rjmp	.+484    	; 0x1192 <EXTI_enuInit+0x258>
				{
				case 0:
					GICR |= (1<<6);
     fae:	ab e5       	ldi	r26, 0x5B	; 91
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	eb e5       	ldi	r30, 0x5B	; 91
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	80 64       	ori	r24, 0x40	; 64
     fba:	8c 93       	st	X, r24
					 *            -> 0000 0011
					 *           -> 1111 1100
					 * MCUCR  &= 1111 1100
					 * */

					MCUCR &= ~(0x03 << 0);
     fbc:	a5 e5       	ldi	r26, 0x55	; 85
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e5 e5       	ldi	r30, 0x55	; 85
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	8c 7f       	andi	r24, 0xFC	; 252
     fc8:	8c 93       	st	X, r24

					//Check Sense Mode
					switch(Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenceLevel)
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	88 2f       	mov	r24, r24
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	9c 01       	movw	r18, r24
     fd2:	22 0f       	add	r18, r18
     fd4:	33 1f       	adc	r19, r19
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	9c 81       	ldd	r25, Y+4	; 0x04
     fda:	fc 01       	movw	r30, r24
     fdc:	e2 0f       	add	r30, r18
     fde:	f3 1f       	adc	r31, r19
     fe0:	81 81       	ldd	r24, Z+1	; 0x01
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	3b 87       	std	Y+11, r19	; 0x0b
     fe8:	2a 87       	std	Y+10, r18	; 0x0a
     fea:	8a 85       	ldd	r24, Y+10	; 0x0a
     fec:	9b 85       	ldd	r25, Y+11	; 0x0b
     fee:	82 30       	cpi	r24, 0x02	; 2
     ff0:	91 05       	cpc	r25, r1
     ff2:	01 f1       	breq	.+64     	; 0x1034 <EXTI_enuInit+0xfa>
     ff4:	2a 85       	ldd	r18, Y+10	; 0x0a
     ff6:	3b 85       	ldd	r19, Y+11	; 0x0b
     ff8:	23 30       	cpi	r18, 0x03	; 3
     ffa:	31 05       	cpc	r19, r1
     ffc:	34 f4       	brge	.+12     	; 0x100a <EXTI_enuInit+0xd0>
     ffe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1000:	9b 85       	ldd	r25, Y+11	; 0x0b
    1002:	81 30       	cpi	r24, 0x01	; 1
    1004:	91 05       	cpc	r25, r1
    1006:	61 f0       	breq	.+24     	; 0x1020 <EXTI_enuInit+0xe6>
    1008:	2c c0       	rjmp	.+88     	; 0x1062 <EXTI_enuInit+0x128>
    100a:	2a 85       	ldd	r18, Y+10	; 0x0a
    100c:	3b 85       	ldd	r19, Y+11	; 0x0b
    100e:	23 30       	cpi	r18, 0x03	; 3
    1010:	31 05       	cpc	r19, r1
    1012:	d1 f0       	breq	.+52     	; 0x1048 <EXTI_enuInit+0x10e>
    1014:	8a 85       	ldd	r24, Y+10	; 0x0a
    1016:	9b 85       	ldd	r25, Y+11	; 0x0b
    1018:	84 30       	cpi	r24, 0x04	; 4
    101a:	91 05       	cpc	r25, r1
    101c:	f9 f0       	breq	.+62     	; 0x105c <EXTI_enuInit+0x122>
    101e:	21 c0       	rjmp	.+66     	; 0x1062 <EXTI_enuInit+0x128>
					{
					case RISING_EDGE:
						MCUCR |= (3 << 0);
    1020:	a5 e5       	ldi	r26, 0x55	; 85
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e5 e5       	ldi	r30, 0x55	; 85
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	83 60       	ori	r24, 0x03	; 3
    102c:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	8a 83       	std	Y+2, r24	; 0x02
    1032:	af c0       	rjmp	.+350    	; 0x1192 <EXTI_enuInit+0x258>
						break;
					case FALLING_EDGE:
						MCUCR |= (1 << 1);
    1034:	a5 e5       	ldi	r26, 0x55	; 85
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e5 e5       	ldi	r30, 0x55	; 85
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	82 60       	ori	r24, 0x02	; 2
    1040:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	8a 83       	std	Y+2, r24	; 0x02
    1046:	a5 c0       	rjmp	.+330    	; 0x1192 <EXTI_enuInit+0x258>
						break;
					case ANY_LOGIC:
						MCUCR |= (1 << 0);
    1048:	a5 e5       	ldi	r26, 0x55	; 85
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e5 e5       	ldi	r30, 0x55	; 85
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	81 60       	ori	r24, 0x01	; 1
    1054:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	8a 83       	std	Y+2, r24	; 0x02
    105a:	9b c0       	rjmp	.+310    	; 0x1192 <EXTI_enuInit+0x258>
						break;
					case LOW_LEVEL:
						Local_enuErrorState = ES_OK;
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	8a 83       	std	Y+2, r24	; 0x02
    1060:	98 c0       	rjmp	.+304    	; 0x1192 <EXTI_enuInit+0x258>
						break;
					default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
    1062:	83 e0       	ldi	r24, 0x03	; 3
    1064:	8a 83       	std	Y+2, r24	; 0x02
    1066:	95 c0       	rjmp	.+298    	; 0x1192 <EXTI_enuInit+0x258>
					}
					break;

				case 1:
					GICR |= (1<<7);
    1068:	ab e5       	ldi	r26, 0x5B	; 91
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	eb e5       	ldi	r30, 0x5B	; 91
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	80 68       	ori	r24, 0x80	; 128
    1074:	8c 93       	st	X, r24
					MCUCR &= ~(3<<2); //Mask second 2 bits
    1076:	a5 e5       	ldi	r26, 0x55	; 85
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e5 e5       	ldi	r30, 0x55	; 85
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	83 7f       	andi	r24, 0xF3	; 243
    1082:	8c 93       	st	X, r24
					switch(Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenceLevel)
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	88 2f       	mov	r24, r24
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	9c 01       	movw	r18, r24
    108c:	22 0f       	add	r18, r18
    108e:	33 1f       	adc	r19, r19
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	9c 81       	ldd	r25, Y+4	; 0x04
    1094:	fc 01       	movw	r30, r24
    1096:	e2 0f       	add	r30, r18
    1098:	f3 1f       	adc	r31, r19
    109a:	81 81       	ldd	r24, Z+1	; 0x01
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	39 87       	std	Y+9, r19	; 0x09
    10a2:	28 87       	std	Y+8, r18	; 0x08
    10a4:	88 85       	ldd	r24, Y+8	; 0x08
    10a6:	99 85       	ldd	r25, Y+9	; 0x09
    10a8:	82 30       	cpi	r24, 0x02	; 2
    10aa:	91 05       	cpc	r25, r1
    10ac:	01 f1       	breq	.+64     	; 0x10ee <EXTI_enuInit+0x1b4>
    10ae:	28 85       	ldd	r18, Y+8	; 0x08
    10b0:	39 85       	ldd	r19, Y+9	; 0x09
    10b2:	23 30       	cpi	r18, 0x03	; 3
    10b4:	31 05       	cpc	r19, r1
    10b6:	34 f4       	brge	.+12     	; 0x10c4 <EXTI_enuInit+0x18a>
    10b8:	88 85       	ldd	r24, Y+8	; 0x08
    10ba:	99 85       	ldd	r25, Y+9	; 0x09
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	91 05       	cpc	r25, r1
    10c0:	61 f0       	breq	.+24     	; 0x10da <EXTI_enuInit+0x1a0>
    10c2:	2c c0       	rjmp	.+88     	; 0x111c <EXTI_enuInit+0x1e2>
    10c4:	28 85       	ldd	r18, Y+8	; 0x08
    10c6:	39 85       	ldd	r19, Y+9	; 0x09
    10c8:	23 30       	cpi	r18, 0x03	; 3
    10ca:	31 05       	cpc	r19, r1
    10cc:	d1 f0       	breq	.+52     	; 0x1102 <EXTI_enuInit+0x1c8>
    10ce:	88 85       	ldd	r24, Y+8	; 0x08
    10d0:	99 85       	ldd	r25, Y+9	; 0x09
    10d2:	84 30       	cpi	r24, 0x04	; 4
    10d4:	91 05       	cpc	r25, r1
    10d6:	f9 f0       	breq	.+62     	; 0x1116 <EXTI_enuInit+0x1dc>
    10d8:	21 c0       	rjmp	.+66     	; 0x111c <EXTI_enuInit+0x1e2>
					{
					case RISING_EDGE:
						MCUCR |= (3 << 2);
    10da:	a5 e5       	ldi	r26, 0x55	; 85
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e5 e5       	ldi	r30, 0x55	; 85
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	8c 60       	ori	r24, 0x0C	; 12
    10e6:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	8a 83       	std	Y+2, r24	; 0x02
    10ec:	52 c0       	rjmp	.+164    	; 0x1192 <EXTI_enuInit+0x258>
						break;
					case FALLING_EDGE:
						MCUCR |= (1 << 3);
    10ee:	a5 e5       	ldi	r26, 0x55	; 85
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e5 e5       	ldi	r30, 0x55	; 85
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	88 60       	ori	r24, 0x08	; 8
    10fa:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	8a 83       	std	Y+2, r24	; 0x02
    1100:	48 c0       	rjmp	.+144    	; 0x1192 <EXTI_enuInit+0x258>
						break;
					case ANY_LOGIC:
						MCUCR |= (1 << 2);
    1102:	a5 e5       	ldi	r26, 0x55	; 85
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e5 e5       	ldi	r30, 0x55	; 85
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	84 60       	ori	r24, 0x04	; 4
    110e:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	8a 83       	std	Y+2, r24	; 0x02
    1114:	3e c0       	rjmp	.+124    	; 0x1192 <EXTI_enuInit+0x258>
						break;
					case LOW_LEVEL:
						Local_enuErrorState = ES_OK;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	8a 83       	std	Y+2, r24	; 0x02
    111a:	3b c0       	rjmp	.+118    	; 0x1192 <EXTI_enuInit+0x258>
						break;
					default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
    111c:	83 e0       	ldi	r24, 0x03	; 3
    111e:	8a 83       	std	Y+2, r24	; 0x02
    1120:	38 c0       	rjmp	.+112    	; 0x1192 <EXTI_enuInit+0x258>
					}
					break;

				case 2:
					GICR |= (1<<5);
    1122:	ab e5       	ldi	r26, 0x5B	; 91
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	eb e5       	ldi	r30, 0x5B	; 91
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	80 62       	ori	r24, 0x20	; 32
    112e:	8c 93       	st	X, r24
					MCUCSR &= ~(1<<6); //Mask its control sense bit
    1130:	a4 e5       	ldi	r26, 0x54	; 84
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e4 e5       	ldi	r30, 0x54	; 84
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	8f 7b       	andi	r24, 0xBF	; 191
    113c:	8c 93       	st	X, r24

					switch(Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenceLevel)
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	88 2f       	mov	r24, r24
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	9c 01       	movw	r18, r24
    1146:	22 0f       	add	r18, r18
    1148:	33 1f       	adc	r19, r19
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	fc 01       	movw	r30, r24
    1150:	e2 0f       	add	r30, r18
    1152:	f3 1f       	adc	r31, r19
    1154:	81 81       	ldd	r24, Z+1	; 0x01
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	3f 83       	std	Y+7, r19	; 0x07
    115c:	2e 83       	std	Y+6, r18	; 0x06
    115e:	8e 81       	ldd	r24, Y+6	; 0x06
    1160:	9f 81       	ldd	r25, Y+7	; 0x07
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	91 05       	cpc	r25, r1
    1166:	31 f0       	breq	.+12     	; 0x1174 <EXTI_enuInit+0x23a>
    1168:	2e 81       	ldd	r18, Y+6	; 0x06
    116a:	3f 81       	ldd	r19, Y+7	; 0x07
    116c:	22 30       	cpi	r18, 0x02	; 2
    116e:	31 05       	cpc	r19, r1
    1170:	59 f0       	breq	.+22     	; 0x1188 <EXTI_enuInit+0x24e>
    1172:	0d c0       	rjmp	.+26     	; 0x118e <EXTI_enuInit+0x254>
					{
					case RISING_EDGE:
						MCUCSR |= (1 << 6);
    1174:	a4 e5       	ldi	r26, 0x54	; 84
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e4 e5       	ldi	r30, 0x54	; 84
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	80 64       	ori	r24, 0x40	; 64
    1180:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	8a 83       	std	Y+2, r24	; 0x02
    1186:	05 c0       	rjmp	.+10     	; 0x1192 <EXTI_enuInit+0x258>
						break;
					case FALLING_EDGE:
						Local_enuErrorState = ES_OK;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	8a 83       	std	Y+2, r24	; 0x02
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <EXTI_enuInit+0x258>
						break;
					default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
    118e:	83 e0       	ldi	r24, 0x03	; 3
    1190:	8a 83       	std	Y+2, r24	; 0x02


	if(NULL != Copy_pstrEXTIConfig)
	{
		u8 Local_u8Iter = 0;
		for(Local_u8Iter = 0; Local_u8Iter < 3; Local_u8Iter++)
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	8f 5f       	subi	r24, 0xFF	; 255
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	83 30       	cpi	r24, 0x03	; 3
    119c:	08 f4       	brcc	.+2      	; 0x11a0 <EXTI_enuInit+0x266>
    119e:	e2 ce       	rjmp	.-572    	; 0xf64 <EXTI_enuInit+0x2a>
	{
		return ES_NULL_POINTER;
	}


	return Local_enuErrorState;
    11a0:	3a 81       	ldd	r19, Y+2	; 0x02
    11a2:	3d 83       	std	Y+5, r19	; 0x05
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <EXTI_enuInit+0x270>
			}
		}
	}
	else
	{
		return ES_NULL_POINTER;
    11a6:	82 e0       	ldi	r24, 0x02	; 2
    11a8:	8d 83       	std	Y+5, r24	; 0x05
    11aa:	8d 81       	ldd	r24, Y+5	; 0x05
	}


	return Local_enuErrorState;
}
    11ac:	2d 96       	adiw	r28, 0x0d	; 13
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	cd bf       	out	0x3d, r28	; 61
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <EXTI_enuSetSenceMode>:

ES_t EXTI_enuSetSenceMode(u8 Copy_u8EXTI_ID, u8 Copy_u8SenceLevel)
{
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	2c 97       	sbiw	r28, 0x0c	; 12
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
    11cc:	de bf       	out	0x3e, r29	; 62
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	cd bf       	out	0x3d, r28	; 61
    11d2:	8a 83       	std	Y+2, r24	; 0x02
    11d4:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    11d6:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8EXTI_ID < 3)
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	83 30       	cpi	r24, 0x03	; 3
    11dc:	08 f0       	brcs	.+2      	; 0x11e0 <EXTI_enuSetSenceMode+0x22>
    11de:	d5 c0       	rjmp	.+426    	; 0x138a <EXTI_enuSetSenceMode+0x1cc>
	{
		switch(Copy_u8EXTI_ID)
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	3c 87       	std	Y+12, r19	; 0x0c
    11e8:	2b 87       	std	Y+11, r18	; 0x0b
    11ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    11ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    11ee:	81 30       	cpi	r24, 0x01	; 1
    11f0:	91 05       	cpc	r25, r1
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <EXTI_enuSetSenceMode+0x38>
    11f4:	56 c0       	rjmp	.+172    	; 0x12a2 <EXTI_enuSetSenceMode+0xe4>
    11f6:	2b 85       	ldd	r18, Y+11	; 0x0b
    11f8:	3c 85       	ldd	r19, Y+12	; 0x0c
    11fa:	22 30       	cpi	r18, 0x02	; 2
    11fc:	31 05       	cpc	r19, r1
    11fe:	09 f4       	brne	.+2      	; 0x1202 <EXTI_enuSetSenceMode+0x44>
    1200:	9b c0       	rjmp	.+310    	; 0x1338 <EXTI_enuSetSenceMode+0x17a>
    1202:	8b 85       	ldd	r24, Y+11	; 0x0b
    1204:	9c 85       	ldd	r25, Y+12	; 0x0c
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	09 f0       	breq	.+2      	; 0x120c <EXTI_enuSetSenceMode+0x4e>
    120a:	bc c0       	rjmp	.+376    	; 0x1384 <EXTI_enuSetSenceMode+0x1c6>
		{
		case 0:
			MCUCR &= ~(0x03 << 0);
    120c:	a5 e5       	ldi	r26, 0x55	; 85
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e5 e5       	ldi	r30, 0x55	; 85
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	8c 7f       	andi	r24, 0xFC	; 252
    1218:	8c 93       	st	X, r24
			//Check Sense Mode
			switch(Copy_u8SenceLevel)
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	3a 87       	std	Y+10, r19	; 0x0a
    1222:	29 87       	std	Y+9, r18	; 0x09
    1224:	89 85       	ldd	r24, Y+9	; 0x09
    1226:	9a 85       	ldd	r25, Y+10	; 0x0a
    1228:	82 30       	cpi	r24, 0x02	; 2
    122a:	91 05       	cpc	r25, r1
    122c:	01 f1       	breq	.+64     	; 0x126e <EXTI_enuSetSenceMode+0xb0>
    122e:	29 85       	ldd	r18, Y+9	; 0x09
    1230:	3a 85       	ldd	r19, Y+10	; 0x0a
    1232:	23 30       	cpi	r18, 0x03	; 3
    1234:	31 05       	cpc	r19, r1
    1236:	34 f4       	brge	.+12     	; 0x1244 <EXTI_enuSetSenceMode+0x86>
    1238:	89 85       	ldd	r24, Y+9	; 0x09
    123a:	9a 85       	ldd	r25, Y+10	; 0x0a
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	91 05       	cpc	r25, r1
    1240:	61 f0       	breq	.+24     	; 0x125a <EXTI_enuSetSenceMode+0x9c>
    1242:	2c c0       	rjmp	.+88     	; 0x129c <EXTI_enuSetSenceMode+0xde>
    1244:	29 85       	ldd	r18, Y+9	; 0x09
    1246:	3a 85       	ldd	r19, Y+10	; 0x0a
    1248:	23 30       	cpi	r18, 0x03	; 3
    124a:	31 05       	cpc	r19, r1
    124c:	d1 f0       	breq	.+52     	; 0x1282 <EXTI_enuSetSenceMode+0xc4>
    124e:	89 85       	ldd	r24, Y+9	; 0x09
    1250:	9a 85       	ldd	r25, Y+10	; 0x0a
    1252:	84 30       	cpi	r24, 0x04	; 4
    1254:	91 05       	cpc	r25, r1
    1256:	f9 f0       	breq	.+62     	; 0x1296 <EXTI_enuSetSenceMode+0xd8>
    1258:	21 c0       	rjmp	.+66     	; 0x129c <EXTI_enuSetSenceMode+0xde>
			{
			case RISING_EDGE:
				MCUCR |= (3 << 0);
    125a:	a5 e5       	ldi	r26, 0x55	; 85
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e5 e5       	ldi	r30, 0x55	; 85
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	83 60       	ori	r24, 0x03	; 3
    1266:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	89 83       	std	Y+1, r24	; 0x01
    126c:	8b c0       	rjmp	.+278    	; 0x1384 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case FALLING_EDGE:
				MCUCR |= (1 << 1);
    126e:	a5 e5       	ldi	r26, 0x55	; 85
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e5 e5       	ldi	r30, 0x55	; 85
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	82 60       	ori	r24, 0x02	; 2
    127a:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	81 c0       	rjmp	.+258    	; 0x1384 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case ANY_LOGIC:
				MCUCR |= (1 << 0);
    1282:	a5 e5       	ldi	r26, 0x55	; 85
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e5 e5       	ldi	r30, 0x55	; 85
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	81 60       	ori	r24, 0x01	; 1
    128e:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	77 c0       	rjmp	.+238    	; 0x1384 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case LOW_LEVEL:
				Local_enuErrorState = ES_OK;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	74 c0       	rjmp	.+232    	; 0x1384 <EXTI_enuSetSenceMode+0x1c6>
				break;
			default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    129c:	83 e0       	ldi	r24, 0x03	; 3
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	71 c0       	rjmp	.+226    	; 0x1384 <EXTI_enuSetSenceMode+0x1c6>
			}
			break;

		case 1:
			MCUCR &= ~(3<<2); //Mask second 2 bits
    12a2:	a5 e5       	ldi	r26, 0x55	; 85
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e5 e5       	ldi	r30, 0x55	; 85
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	83 7f       	andi	r24, 0xF3	; 243
    12ae:	8c 93       	st	X, r24
			switch(Copy_u8SenceLevel)
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	38 87       	std	Y+8, r19	; 0x08
    12b8:	2f 83       	std	Y+7, r18	; 0x07
    12ba:	8f 81       	ldd	r24, Y+7	; 0x07
    12bc:	98 85       	ldd	r25, Y+8	; 0x08
    12be:	82 30       	cpi	r24, 0x02	; 2
    12c0:	91 05       	cpc	r25, r1
    12c2:	01 f1       	breq	.+64     	; 0x1304 <EXTI_enuSetSenceMode+0x146>
    12c4:	2f 81       	ldd	r18, Y+7	; 0x07
    12c6:	38 85       	ldd	r19, Y+8	; 0x08
    12c8:	23 30       	cpi	r18, 0x03	; 3
    12ca:	31 05       	cpc	r19, r1
    12cc:	34 f4       	brge	.+12     	; 0x12da <EXTI_enuSetSenceMode+0x11c>
    12ce:	8f 81       	ldd	r24, Y+7	; 0x07
    12d0:	98 85       	ldd	r25, Y+8	; 0x08
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	91 05       	cpc	r25, r1
    12d6:	61 f0       	breq	.+24     	; 0x12f0 <EXTI_enuSetSenceMode+0x132>
    12d8:	2c c0       	rjmp	.+88     	; 0x1332 <EXTI_enuSetSenceMode+0x174>
    12da:	2f 81       	ldd	r18, Y+7	; 0x07
    12dc:	38 85       	ldd	r19, Y+8	; 0x08
    12de:	23 30       	cpi	r18, 0x03	; 3
    12e0:	31 05       	cpc	r19, r1
    12e2:	d1 f0       	breq	.+52     	; 0x1318 <EXTI_enuSetSenceMode+0x15a>
    12e4:	8f 81       	ldd	r24, Y+7	; 0x07
    12e6:	98 85       	ldd	r25, Y+8	; 0x08
    12e8:	84 30       	cpi	r24, 0x04	; 4
    12ea:	91 05       	cpc	r25, r1
    12ec:	f9 f0       	breq	.+62     	; 0x132c <EXTI_enuSetSenceMode+0x16e>
    12ee:	21 c0       	rjmp	.+66     	; 0x1332 <EXTI_enuSetSenceMode+0x174>
			{
			case RISING_EDGE:
				MCUCR |= (3 << 2);
    12f0:	a5 e5       	ldi	r26, 0x55	; 85
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e5 e5       	ldi	r30, 0x55	; 85
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	8c 60       	ori	r24, 0x0C	; 12
    12fc:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	89 83       	std	Y+1, r24	; 0x01
    1302:	40 c0       	rjmp	.+128    	; 0x1384 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case FALLING_EDGE:
				MCUCR |= (1 << 3);
    1304:	a5 e5       	ldi	r26, 0x55	; 85
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e5 e5       	ldi	r30, 0x55	; 85
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	88 60       	ori	r24, 0x08	; 8
    1310:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	89 83       	std	Y+1, r24	; 0x01
    1316:	36 c0       	rjmp	.+108    	; 0x1384 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case ANY_LOGIC:
				MCUCR |= (1 << 2);
    1318:	a5 e5       	ldi	r26, 0x55	; 85
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	e5 e5       	ldi	r30, 0x55	; 85
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	84 60       	ori	r24, 0x04	; 4
    1324:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	89 83       	std	Y+1, r24	; 0x01
    132a:	2c c0       	rjmp	.+88     	; 0x1384 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case LOW_LEVEL:
				Local_enuErrorState = ES_OK;
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	89 83       	std	Y+1, r24	; 0x01
    1330:	29 c0       	rjmp	.+82     	; 0x1384 <EXTI_enuSetSenceMode+0x1c6>
				break;
			default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    1332:	83 e0       	ldi	r24, 0x03	; 3
    1334:	89 83       	std	Y+1, r24	; 0x01
    1336:	26 c0       	rjmp	.+76     	; 0x1384 <EXTI_enuSetSenceMode+0x1c6>
			}
			break;

		case 2:
			MCUCSR &= ~(1<<6); //Mask its control sense bit
    1338:	a4 e5       	ldi	r26, 0x54	; 84
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e4 e5       	ldi	r30, 0x54	; 84
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	8f 7b       	andi	r24, 0xBF	; 191
    1344:	8c 93       	st	X, r24

			switch(Copy_u8SenceLevel)
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	3e 83       	std	Y+6, r19	; 0x06
    134e:	2d 83       	std	Y+5, r18	; 0x05
    1350:	8d 81       	ldd	r24, Y+5	; 0x05
    1352:	9e 81       	ldd	r25, Y+6	; 0x06
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	91 05       	cpc	r25, r1
    1358:	31 f0       	breq	.+12     	; 0x1366 <EXTI_enuSetSenceMode+0x1a8>
    135a:	2d 81       	ldd	r18, Y+5	; 0x05
    135c:	3e 81       	ldd	r19, Y+6	; 0x06
    135e:	22 30       	cpi	r18, 0x02	; 2
    1360:	31 05       	cpc	r19, r1
    1362:	59 f0       	breq	.+22     	; 0x137a <EXTI_enuSetSenceMode+0x1bc>
    1364:	0d c0       	rjmp	.+26     	; 0x1380 <EXTI_enuSetSenceMode+0x1c2>
			{
			case RISING_EDGE:
				MCUCSR |= (1 << 6);
    1366:	a4 e5       	ldi	r26, 0x54	; 84
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e4 e5       	ldi	r30, 0x54	; 84
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	80 64       	ori	r24, 0x40	; 64
    1372:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	89 83       	std	Y+1, r24	; 0x01
    1378:	05 c0       	rjmp	.+10     	; 0x1384 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case FALLING_EDGE:
				Local_enuErrorState = ES_OK;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	89 83       	std	Y+1, r24	; 0x01
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <EXTI_enuSetSenceMode+0x1c6>
				break;
			default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    1380:	83 e0       	ldi	r24, 0x03	; 3
    1382:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		return ES_OUT_OF_RANGE;
	}

	return Local_enuErrorState;
    1384:	39 81       	ldd	r19, Y+1	; 0x01
    1386:	3c 83       	std	Y+4, r19	; 0x04
    1388:	02 c0       	rjmp	.+4      	; 0x138e <EXTI_enuSetSenceMode+0x1d0>

		}
	}
	else
	{
		return ES_OUT_OF_RANGE;
    138a:	83 e0       	ldi	r24, 0x03	; 3
    138c:	8c 83       	std	Y+4, r24	; 0x04
    138e:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return Local_enuErrorState;
}
    1390:	2c 96       	adiw	r28, 0x0c	; 12
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	f8 94       	cli
    1396:	de bf       	out	0x3e, r29	; 62
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	cd bf       	out	0x3d, r28	; 61
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <EXTI_enuEnableINT>:

ES_t EXTI_enuEnableINT(u8 Copy_u8EXTI_ID)
{
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <EXTI_enuEnableINT+0x6>
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <EXTI_enuEnableINT+0x8>
    13aa:	0f 92       	push	r0
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    13b2:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8EXTI_ID < 3)
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	83 30       	cpi	r24, 0x03	; 3
    13b8:	98 f5       	brcc	.+102    	; 0x1420 <EXTI_enuEnableINT+0x7e>
	{
		switch(Copy_u8EXTI_ID)
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	3d 83       	std	Y+5, r19	; 0x05
    13c2:	2c 83       	std	Y+4, r18	; 0x04
    13c4:	8c 81       	ldd	r24, Y+4	; 0x04
    13c6:	9d 81       	ldd	r25, Y+5	; 0x05
    13c8:	81 30       	cpi	r24, 0x01	; 1
    13ca:	91 05       	cpc	r25, r1
    13cc:	99 f0       	breq	.+38     	; 0x13f4 <EXTI_enuEnableINT+0x52>
    13ce:	2c 81       	ldd	r18, Y+4	; 0x04
    13d0:	3d 81       	ldd	r19, Y+5	; 0x05
    13d2:	22 30       	cpi	r18, 0x02	; 2
    13d4:	31 05       	cpc	r19, r1
    13d6:	c1 f0       	breq	.+48     	; 0x1408 <EXTI_enuEnableINT+0x66>
    13d8:	8c 81       	ldd	r24, Y+4	; 0x04
    13da:	9d 81       	ldd	r25, Y+5	; 0x05
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	e9 f4       	brne	.+58     	; 0x141a <EXTI_enuEnableINT+0x78>
		{
		case 0:
			GICR |= (1<<6);
    13e0:	ab e5       	ldi	r26, 0x5B	; 91
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	eb e5       	ldi	r30, 0x5B	; 91
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	80 64       	ori	r24, 0x40	; 64
    13ec:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	13 c0       	rjmp	.+38     	; 0x141a <EXTI_enuEnableINT+0x78>
			break;

		case 1:
			GICR |= (1<<7);
    13f4:	ab e5       	ldi	r26, 0x5B	; 91
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	eb e5       	ldi	r30, 0x5B	; 91
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	80 68       	ori	r24, 0x80	; 128
    1400:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	89 83       	std	Y+1, r24	; 0x01
    1406:	09 c0       	rjmp	.+18     	; 0x141a <EXTI_enuEnableINT+0x78>
			break;

		case 2:
			GICR |= (1<<5);
    1408:	ab e5       	ldi	r26, 0x5B	; 91
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	eb e5       	ldi	r30, 0x5B	; 91
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	80 62       	ori	r24, 0x20	; 32
    1414:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		return ES_OUT_OF_RANGE;
	}

	return Local_enuErrorState;
    141a:	99 81       	ldd	r25, Y+1	; 0x01
    141c:	9b 83       	std	Y+3, r25	; 0x03
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <EXTI_enuEnableINT+0x82>
			break;
		}
	}
	else
	{
		return ES_OUT_OF_RANGE;
    1420:	23 e0       	ldi	r18, 0x03	; 3
    1422:	2b 83       	std	Y+3, r18	; 0x03
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
	}

	return Local_enuErrorState;
}
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <EXTI_enuDisableINT>:

ES_t EXTI_enuDisableINT(u8 Copy_u8EXTI_ID)
{
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	00 d0       	rcall	.+0      	; 0x143c <EXTI_enuDisableINT+0x6>
    143c:	00 d0       	rcall	.+0      	; 0x143e <EXTI_enuDisableINT+0x8>
    143e:	0f 92       	push	r0
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1446:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8EXTI_ID < 3)
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	83 30       	cpi	r24, 0x03	; 3
    144c:	98 f5       	brcc	.+102    	; 0x14b4 <EXTI_enuDisableINT+0x7e>
	{
		switch(Copy_u8EXTI_ID)
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	3d 83       	std	Y+5, r19	; 0x05
    1456:	2c 83       	std	Y+4, r18	; 0x04
    1458:	8c 81       	ldd	r24, Y+4	; 0x04
    145a:	9d 81       	ldd	r25, Y+5	; 0x05
    145c:	81 30       	cpi	r24, 0x01	; 1
    145e:	91 05       	cpc	r25, r1
    1460:	99 f0       	breq	.+38     	; 0x1488 <EXTI_enuDisableINT+0x52>
    1462:	2c 81       	ldd	r18, Y+4	; 0x04
    1464:	3d 81       	ldd	r19, Y+5	; 0x05
    1466:	22 30       	cpi	r18, 0x02	; 2
    1468:	31 05       	cpc	r19, r1
    146a:	c1 f0       	breq	.+48     	; 0x149c <EXTI_enuDisableINT+0x66>
    146c:	8c 81       	ldd	r24, Y+4	; 0x04
    146e:	9d 81       	ldd	r25, Y+5	; 0x05
    1470:	00 97       	sbiw	r24, 0x00	; 0
    1472:	e9 f4       	brne	.+58     	; 0x14ae <EXTI_enuDisableINT+0x78>
		{
		case 0:
			GICR &= ~(1<<6);
    1474:	ab e5       	ldi	r26, 0x5B	; 91
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	eb e5       	ldi	r30, 0x5B	; 91
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	8f 7b       	andi	r24, 0xBF	; 191
    1480:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	89 83       	std	Y+1, r24	; 0x01
    1486:	13 c0       	rjmp	.+38     	; 0x14ae <EXTI_enuDisableINT+0x78>
			break;

		case 1:
			GICR &= ~(1<<7);
    1488:	ab e5       	ldi	r26, 0x5B	; 91
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	eb e5       	ldi	r30, 0x5B	; 91
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	8f 77       	andi	r24, 0x7F	; 127
    1494:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	09 c0       	rjmp	.+18     	; 0x14ae <EXTI_enuDisableINT+0x78>
			break;

		case 2:
			GICR &= ~(1<<5);
    149c:	ab e5       	ldi	r26, 0x5B	; 91
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	eb e5       	ldi	r30, 0x5B	; 91
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	8f 7d       	andi	r24, 0xDF	; 223
    14a8:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		return ES_OUT_OF_RANGE;
	}

	return Local_enuErrorState;
    14ae:	99 81       	ldd	r25, Y+1	; 0x01
    14b0:	9b 83       	std	Y+3, r25	; 0x03
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <EXTI_enuDisableINT+0x82>
			break;
		}
	}
	else
	{
		return ES_OUT_OF_RANGE;
    14b4:	23 e0       	ldi	r18, 0x03	; 3
    14b6:	2b 83       	std	Y+3, r18	; 0x03
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
	}

	return Local_enuErrorState;
}
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	cf 91       	pop	r28
    14c6:	df 91       	pop	r29
    14c8:	08 95       	ret

000014ca <EXTI_enuCallBack>:

ES_t EXTI_enuCallBack(volatile void (*Copy_pfunAppFun)(void *), volatile void * Copy_pvoidParameter, u8 Copy_u8EXTI_ID)
{
    14ca:	df 93       	push	r29
    14cc:	cf 93       	push	r28
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	27 97       	sbiw	r28, 0x07	; 7
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	cd bf       	out	0x3d, r28	; 61
    14de:	9b 83       	std	Y+3, r25	; 0x03
    14e0:	8a 83       	std	Y+2, r24	; 0x02
    14e2:	7d 83       	std	Y+5, r23	; 0x05
    14e4:	6c 83       	std	Y+4, r22	; 0x04
    14e6:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
    14e8:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8EXTI_ID < 3)
    14ea:	8e 81       	ldd	r24, Y+6	; 0x06
    14ec:	83 30       	cpi	r24, 0x03	; 3
    14ee:	20 f5       	brcc	.+72     	; 0x1538 <EXTI_enuCallBack+0x6e>
	{
		if(Copy_pfunAppFun != NULL)
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	9b 81       	ldd	r25, Y+3	; 0x03
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	c9 f0       	breq	.+50     	; 0x152a <EXTI_enuCallBack+0x60>
		{
			EXTI_ApfunINTFun[Copy_u8EXTI_ID] = Copy_pfunAppFun;
    14f8:	8e 81       	ldd	r24, Y+6	; 0x06
    14fa:	88 2f       	mov	r24, r24
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	fc 01       	movw	r30, r24
    1504:	e8 51       	subi	r30, 0x18	; 24
    1506:	fe 4f       	sbci	r31, 0xFE	; 254
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	9b 81       	ldd	r25, Y+3	; 0x03
    150c:	91 83       	std	Z+1, r25	; 0x01
    150e:	80 83       	st	Z, r24
			EXTI_ApvoidGenericparameter[Copy_u8EXTI_ID] = Copy_pvoidParameter;
    1510:	8e 81       	ldd	r24, Y+6	; 0x06
    1512:	88 2f       	mov	r24, r24
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	88 0f       	add	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	fc 01       	movw	r30, r24
    151c:	e2 51       	subi	r30, 0x12	; 18
    151e:	fe 4f       	sbci	r31, 0xFE	; 254
    1520:	8c 81       	ldd	r24, Y+4	; 0x04
    1522:	9d 81       	ldd	r25, Y+5	; 0x05
    1524:	91 83       	std	Z+1, r25	; 0x01
    1526:	80 83       	st	Z, r24
    1528:	02 c0       	rjmp	.+4      	; 0x152e <EXTI_enuCallBack+0x64>
		}
		else
		{
			Local_enuErrorState = ES_NULL_POINTER;
    152a:	82 e0       	ldi	r24, 0x02	; 2
    152c:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		return ES_OUT_OF_RANGE;
	}

	Local_enuErrorState = ES_OK;
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	8f 83       	std	Y+7, r24	; 0x07
    1536:	02 c0       	rjmp	.+4      	; 0x153c <EXTI_enuCallBack+0x72>
			Local_enuErrorState = ES_NULL_POINTER;
		}
	}
	else
	{
		return ES_OUT_OF_RANGE;
    1538:	83 e0       	ldi	r24, 0x03	; 3
    153a:	8f 83       	std	Y+7, r24	; 0x07
    153c:	8f 81       	ldd	r24, Y+7	; 0x07
	}

	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
}
    153e:	27 96       	adiw	r28, 0x07	; 7
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <__vector_1>:

ISR(VECT_INT0)
{
    1550:	1f 92       	push	r1
    1552:	0f 92       	push	r0
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	0f 92       	push	r0
    1558:	11 24       	eor	r1, r1
    155a:	2f 93       	push	r18
    155c:	3f 93       	push	r19
    155e:	4f 93       	push	r20
    1560:	5f 93       	push	r21
    1562:	6f 93       	push	r22
    1564:	7f 93       	push	r23
    1566:	8f 93       	push	r24
    1568:	9f 93       	push	r25
    156a:	af 93       	push	r26
    156c:	bf 93       	push	r27
    156e:	ef 93       	push	r30
    1570:	ff 93       	push	r31
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfunINTFun[0] != NULL)
    157a:	80 91 e8 01 	lds	r24, 0x01E8
    157e:	90 91 e9 01 	lds	r25, 0x01E9
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	49 f0       	breq	.+18     	; 0x1598 <__vector_1+0x48>
	{
		/* Two approaches working well*/
		(*EXTI_ApfunINTFun[0])(EXTI_ApvoidGenericparameter[0]);
    1586:	e0 91 e8 01 	lds	r30, 0x01E8
    158a:	f0 91 e9 01 	lds	r31, 0x01E9
    158e:	80 91 ee 01 	lds	r24, 0x01EE
    1592:	90 91 ef 01 	lds	r25, 0x01EF
    1596:	09 95       	icall
		//(*EXTI_ApfunINTFun[0])(EXTI_ApvoidGenericparameter[0]);
		// wanna test: EXTI_ApfunINTFun[0](EXTI_ApvoidGenericparameter[0]);
	}
}
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	ff 91       	pop	r31
    159e:	ef 91       	pop	r30
    15a0:	bf 91       	pop	r27
    15a2:	af 91       	pop	r26
    15a4:	9f 91       	pop	r25
    15a6:	8f 91       	pop	r24
    15a8:	7f 91       	pop	r23
    15aa:	6f 91       	pop	r22
    15ac:	5f 91       	pop	r21
    15ae:	4f 91       	pop	r20
    15b0:	3f 91       	pop	r19
    15b2:	2f 91       	pop	r18
    15b4:	0f 90       	pop	r0
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	0f 90       	pop	r0
    15ba:	1f 90       	pop	r1
    15bc:	18 95       	reti

000015be <__vector_2>:

ISR(VECT_INT1)
{
    15be:	1f 92       	push	r1
    15c0:	0f 92       	push	r0
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	0f 92       	push	r0
    15c6:	11 24       	eor	r1, r1
    15c8:	2f 93       	push	r18
    15ca:	3f 93       	push	r19
    15cc:	4f 93       	push	r20
    15ce:	5f 93       	push	r21
    15d0:	6f 93       	push	r22
    15d2:	7f 93       	push	r23
    15d4:	8f 93       	push	r24
    15d6:	9f 93       	push	r25
    15d8:	af 93       	push	r26
    15da:	bf 93       	push	r27
    15dc:	ef 93       	push	r30
    15de:	ff 93       	push	r31
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfunINTFun[1] != NULL)
    15e8:	80 91 ea 01 	lds	r24, 0x01EA
    15ec:	90 91 eb 01 	lds	r25, 0x01EB
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	49 f0       	breq	.+18     	; 0x1606 <__vector_2+0x48>
	{
		(*EXTI_ApfunINTFun[1])(EXTI_ApvoidGenericparameter[1]);
    15f4:	e0 91 ea 01 	lds	r30, 0x01EA
    15f8:	f0 91 eb 01 	lds	r31, 0x01EB
    15fc:	80 91 f0 01 	lds	r24, 0x01F0
    1600:	90 91 f1 01 	lds	r25, 0x01F1
    1604:	09 95       	icall
	}
}
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	ff 91       	pop	r31
    160c:	ef 91       	pop	r30
    160e:	bf 91       	pop	r27
    1610:	af 91       	pop	r26
    1612:	9f 91       	pop	r25
    1614:	8f 91       	pop	r24
    1616:	7f 91       	pop	r23
    1618:	6f 91       	pop	r22
    161a:	5f 91       	pop	r21
    161c:	4f 91       	pop	r20
    161e:	3f 91       	pop	r19
    1620:	2f 91       	pop	r18
    1622:	0f 90       	pop	r0
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	0f 90       	pop	r0
    1628:	1f 90       	pop	r1
    162a:	18 95       	reti

0000162c <__vector_3>:

ISR(VECT_INT2)
{
    162c:	1f 92       	push	r1
    162e:	0f 92       	push	r0
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	0f 92       	push	r0
    1634:	11 24       	eor	r1, r1
    1636:	2f 93       	push	r18
    1638:	3f 93       	push	r19
    163a:	4f 93       	push	r20
    163c:	5f 93       	push	r21
    163e:	6f 93       	push	r22
    1640:	7f 93       	push	r23
    1642:	8f 93       	push	r24
    1644:	9f 93       	push	r25
    1646:	af 93       	push	r26
    1648:	bf 93       	push	r27
    164a:	ef 93       	push	r30
    164c:	ff 93       	push	r31
    164e:	df 93       	push	r29
    1650:	cf 93       	push	r28
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfunINTFun[2] != NULL)
    1656:	80 91 ec 01 	lds	r24, 0x01EC
    165a:	90 91 ed 01 	lds	r25, 0x01ED
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	49 f0       	breq	.+18     	; 0x1674 <__vector_3+0x48>
	{
		(*EXTI_ApfunINTFun[2])(EXTI_ApvoidGenericparameter[2]);
    1662:	e0 91 ec 01 	lds	r30, 0x01EC
    1666:	f0 91 ed 01 	lds	r31, 0x01ED
    166a:	80 91 f2 01 	lds	r24, 0x01F2
    166e:	90 91 f3 01 	lds	r25, 0x01F3
    1672:	09 95       	icall
	}
}
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	ff 91       	pop	r31
    167a:	ef 91       	pop	r30
    167c:	bf 91       	pop	r27
    167e:	af 91       	pop	r26
    1680:	9f 91       	pop	r25
    1682:	8f 91       	pop	r24
    1684:	7f 91       	pop	r23
    1686:	6f 91       	pop	r22
    1688:	5f 91       	pop	r21
    168a:	4f 91       	pop	r20
    168c:	3f 91       	pop	r19
    168e:	2f 91       	pop	r18
    1690:	0f 90       	pop	r0
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	0f 90       	pop	r0
    1696:	1f 90       	pop	r1
    1698:	18 95       	reti

0000169a <DIO_enuInit>:
#include "DIO_config.h"



ES_t DIO_enuInit(void)
{
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	0f 92       	push	r0
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    16a4:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR, PA_PIN6_DIR, PA_PIN5_DIR, PA_PIN4_DIR, PA_PIN3_DIR, PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
    16a6:	ea e3       	ldi	r30, 0x3A	; 58
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	8f ef       	ldi	r24, 0xFF	; 255
    16ac:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR, PB_PIN6_DIR, PB_PIN5_DIR, PB_PIN4_DIR, PB_PIN3_DIR, PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
    16ae:	e7 e3       	ldi	r30, 0x37	; 55
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	8f ef       	ldi	r24, 0xFF	; 255
    16b4:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR, PC_PIN6_DIR, PC_PIN5_DIR, PC_PIN4_DIR, PC_PIN3_DIR, PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
    16b6:	e4 e3       	ldi	r30, 0x34	; 52
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	8a ea       	ldi	r24, 0xAA	; 170
    16bc:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR, PD_PIN6_DIR, PD_PIN5_DIR, PD_PIN4_DIR, PD_PIN3_DIR, PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
    16be:	e1 e3       	ldi	r30, 0x31	; 49
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	8a ea       	ldi	r24, 0xAA	; 170
    16c4:	80 83       	st	Z, r24

	PORTA = CONC(PA_PIN7_VAL, PA_PIN6_VAL, PA_PIN5_VAL, PA_PIN4_VAL, PA_PIN3_VAL, PA_PIN2_VAL, PA_PIN1_VAL, PA_PIN0_VAL);
    16c6:	eb e3       	ldi	r30, 0x3B	; 59
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	10 82       	st	Z, r1
	PORTB = CONC(PB_PIN7_VAL, PB_PIN6_VAL, PB_PIN5_VAL, PB_PIN4_VAL, PB_PIN3_VAL, PB_PIN2_VAL, PB_PIN1_VAL, PB_PIN0_VAL);
    16cc:	e8 e3       	ldi	r30, 0x38	; 56
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	10 82       	st	Z, r1
	PORTC = CONC(PC_PIN7_VAL, PC_PIN6_VAL, PC_PIN5_VAL, PC_PIN4_VAL, PC_PIN3_VAL, PC_PIN2_VAL, PC_PIN1_VAL, PC_PIN0_VAL);
    16d2:	e5 e3       	ldi	r30, 0x35	; 53
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	86 e6       	ldi	r24, 0x66	; 102
    16d8:	80 83       	st	Z, r24
	PORTD = CONC(PD_PIN7_VAL, PD_PIN6_VAL, PD_PIN5_VAL, PD_PIN4_VAL, PD_PIN3_VAL, PD_PIN2_VAL, PD_PIN1_VAL, PD_PIN0_VAL);
    16da:	e2 e3       	ldi	r30, 0x32	; 50
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	86 e6       	ldi	r24, 0x66	; 102
    16e0:	80 83       	st	Z, r24

	Local_enuErrorState = ES_OK;
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    16e8:	0f 90       	pop	r0
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	08 95       	ret

000016f0 <DIO_enuSetPortDirection>:


ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	00 d0       	rcall	.+0      	; 0x16f6 <DIO_enuSetPortDirection+0x6>
    16f6:	00 d0       	rcall	.+0      	; 0x16f8 <DIO_enuSetPortDirection+0x8>
    16f8:	0f 92       	push	r0
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    16fe:	8a 83       	std	Y+2, r24	; 0x02
    1700:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1702:	19 82       	std	Y+1, r1	; 0x01

	/*Range Check*/
	if(Copy_u8PortID <= DIO_PORTD)
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	84 30       	cpi	r24, 0x04	; 4
    1708:	a8 f5       	brcc	.+106    	; 0x1774 <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	3d 83       	std	Y+5, r19	; 0x05
    1712:	2c 83       	std	Y+4, r18	; 0x04
    1714:	8c 81       	ldd	r24, Y+4	; 0x04
    1716:	9d 81       	ldd	r25, Y+5	; 0x05
    1718:	81 30       	cpi	r24, 0x01	; 1
    171a:	91 05       	cpc	r25, r1
    171c:	d1 f0       	breq	.+52     	; 0x1752 <DIO_enuSetPortDirection+0x62>
    171e:	2c 81       	ldd	r18, Y+4	; 0x04
    1720:	3d 81       	ldd	r19, Y+5	; 0x05
    1722:	22 30       	cpi	r18, 0x02	; 2
    1724:	31 05       	cpc	r19, r1
    1726:	2c f4       	brge	.+10     	; 0x1732 <DIO_enuSetPortDirection+0x42>
    1728:	8c 81       	ldd	r24, Y+4	; 0x04
    172a:	9d 81       	ldd	r25, Y+5	; 0x05
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	61 f0       	breq	.+24     	; 0x1748 <DIO_enuSetPortDirection+0x58>
    1730:	1e c0       	rjmp	.+60     	; 0x176e <DIO_enuSetPortDirection+0x7e>
    1732:	2c 81       	ldd	r18, Y+4	; 0x04
    1734:	3d 81       	ldd	r19, Y+5	; 0x05
    1736:	22 30       	cpi	r18, 0x02	; 2
    1738:	31 05       	cpc	r19, r1
    173a:	81 f0       	breq	.+32     	; 0x175c <DIO_enuSetPortDirection+0x6c>
    173c:	8c 81       	ldd	r24, Y+4	; 0x04
    173e:	9d 81       	ldd	r25, Y+5	; 0x05
    1740:	83 30       	cpi	r24, 0x03	; 3
    1742:	91 05       	cpc	r25, r1
    1744:	81 f0       	breq	.+32     	; 0x1766 <DIO_enuSetPortDirection+0x76>
    1746:	13 c0       	rjmp	.+38     	; 0x176e <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
    1748:	ea e3       	ldi	r30, 0x3A	; 58
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	80 83       	st	Z, r24
    1750:	0e c0       	rjmp	.+28     	; 0x176e <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
    1752:	e7 e3       	ldi	r30, 0x37	; 55
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	80 83       	st	Z, r24
    175a:	09 c0       	rjmp	.+18     	; 0x176e <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
    175c:	e4 e3       	ldi	r30, 0x34	; 52
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	80 83       	st	Z, r24
    1764:	04 c0       	rjmp	.+8      	; 0x176e <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
    1766:	e1 e3       	ldi	r30, 0x31	; 49
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1774:	83 e0       	ldi	r24, 0x03	; 3
    1776:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1778:	89 81       	ldd	r24, Y+1	; 0x01
}
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <DIO_enuSetPortValue>:


ES_t DIO_enuSetPortValue(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	00 d0       	rcall	.+0      	; 0x1790 <DIO_enuSetPortValue+0x6>
    1790:	00 d0       	rcall	.+0      	; 0x1792 <DIO_enuSetPortValue+0x8>
    1792:	0f 92       	push	r0
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	8a 83       	std	Y+2, r24	; 0x02
    179a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    179c:	19 82       	std	Y+1, r1	; 0x01

	/* Range Check */
	if(Copy_u8PortID <= DIO_PORTD)
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	84 30       	cpi	r24, 0x04	; 4
    17a2:	a8 f5       	brcc	.+106    	; 0x180e <DIO_enuSetPortValue+0x84>
	{
		switch(Copy_u8PortID)
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	3d 83       	std	Y+5, r19	; 0x05
    17ac:	2c 83       	std	Y+4, r18	; 0x04
    17ae:	8c 81       	ldd	r24, Y+4	; 0x04
    17b0:	9d 81       	ldd	r25, Y+5	; 0x05
    17b2:	81 30       	cpi	r24, 0x01	; 1
    17b4:	91 05       	cpc	r25, r1
    17b6:	d1 f0       	breq	.+52     	; 0x17ec <DIO_enuSetPortValue+0x62>
    17b8:	2c 81       	ldd	r18, Y+4	; 0x04
    17ba:	3d 81       	ldd	r19, Y+5	; 0x05
    17bc:	22 30       	cpi	r18, 0x02	; 2
    17be:	31 05       	cpc	r19, r1
    17c0:	2c f4       	brge	.+10     	; 0x17cc <DIO_enuSetPortValue+0x42>
    17c2:	8c 81       	ldd	r24, Y+4	; 0x04
    17c4:	9d 81       	ldd	r25, Y+5	; 0x05
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	61 f0       	breq	.+24     	; 0x17e2 <DIO_enuSetPortValue+0x58>
    17ca:	1e c0       	rjmp	.+60     	; 0x1808 <DIO_enuSetPortValue+0x7e>
    17cc:	2c 81       	ldd	r18, Y+4	; 0x04
    17ce:	3d 81       	ldd	r19, Y+5	; 0x05
    17d0:	22 30       	cpi	r18, 0x02	; 2
    17d2:	31 05       	cpc	r19, r1
    17d4:	81 f0       	breq	.+32     	; 0x17f6 <DIO_enuSetPortValue+0x6c>
    17d6:	8c 81       	ldd	r24, Y+4	; 0x04
    17d8:	9d 81       	ldd	r25, Y+5	; 0x05
    17da:	83 30       	cpi	r24, 0x03	; 3
    17dc:	91 05       	cpc	r25, r1
    17de:	81 f0       	breq	.+32     	; 0x1800 <DIO_enuSetPortValue+0x76>
    17e0:	13 c0       	rjmp	.+38     	; 0x1808 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA = Copy_u8Value;
    17e2:	eb e3       	ldi	r30, 0x3B	; 59
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	80 83       	st	Z, r24
    17ea:	0e c0       	rjmp	.+28     	; 0x1808 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8Value;
    17ec:	e8 e3       	ldi	r30, 0x38	; 56
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	80 83       	st	Z, r24
    17f4:	09 c0       	rjmp	.+18     	; 0x1808 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8Value;
    17f6:	e5 e3       	ldi	r30, 0x35	; 53
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	80 83       	st	Z, r24
    17fe:	04 c0       	rjmp	.+8      	; 0x1808 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = Copy_u8Value;
    1800:	e2 e3       	ldi	r30, 0x32	; 50
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	89 83       	std	Y+1, r24	; 0x01
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    180e:	83 e0       	ldi	r24, 0x03	; 3
    1810:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1812:	89 81       	ldd	r24, Y+1	; 0x01
}
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <DIO_enuTogPortValue>:


ES_t DIO_enuTogPortValue(u8 Copy_u8PortID)
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	00 d0       	rcall	.+0      	; 0x182a <DIO_enuTogPortValue+0x6>
    182a:	00 d0       	rcall	.+0      	; 0x182c <DIO_enuTogPortValue+0x8>
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1832:	19 82       	std	Y+1, r1	; 0x01

	/* Range Check */
	if(Copy_u8PortID <= DIO_PORTD)
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	84 30       	cpi	r24, 0x04	; 4
    1838:	08 f0       	brcs	.+2      	; 0x183c <DIO_enuTogPortValue+0x18>
    183a:	41 c0       	rjmp	.+130    	; 0x18be <DIO_enuTogPortValue+0x9a>
	{
		switch(Copy_u8PortID)
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	3c 83       	std	Y+4, r19	; 0x04
    1844:	2b 83       	std	Y+3, r18	; 0x03
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	9c 81       	ldd	r25, Y+4	; 0x04
    184a:	81 30       	cpi	r24, 0x01	; 1
    184c:	91 05       	cpc	r25, r1
    184e:	e9 f0       	breq	.+58     	; 0x188a <DIO_enuTogPortValue+0x66>
    1850:	2b 81       	ldd	r18, Y+3	; 0x03
    1852:	3c 81       	ldd	r19, Y+4	; 0x04
    1854:	22 30       	cpi	r18, 0x02	; 2
    1856:	31 05       	cpc	r19, r1
    1858:	2c f4       	brge	.+10     	; 0x1864 <DIO_enuTogPortValue+0x40>
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	9c 81       	ldd	r25, Y+4	; 0x04
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	61 f0       	breq	.+24     	; 0x187a <DIO_enuTogPortValue+0x56>
    1862:	2a c0       	rjmp	.+84     	; 0x18b8 <DIO_enuTogPortValue+0x94>
    1864:	2b 81       	ldd	r18, Y+3	; 0x03
    1866:	3c 81       	ldd	r19, Y+4	; 0x04
    1868:	22 30       	cpi	r18, 0x02	; 2
    186a:	31 05       	cpc	r19, r1
    186c:	b1 f0       	breq	.+44     	; 0x189a <DIO_enuTogPortValue+0x76>
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	9c 81       	ldd	r25, Y+4	; 0x04
    1872:	83 30       	cpi	r24, 0x03	; 3
    1874:	91 05       	cpc	r25, r1
    1876:	c9 f0       	breq	.+50     	; 0x18aa <DIO_enuTogPortValue+0x86>
    1878:	1f c0       	rjmp	.+62     	; 0x18b8 <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA = ~PORTA;
    187a:	ab e3       	ldi	r26, 0x3B	; 59
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	eb e3       	ldi	r30, 0x3B	; 59
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	80 95       	com	r24
    1886:	8c 93       	st	X, r24
    1888:	17 c0       	rjmp	.+46     	; 0x18b8 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB = ~PORTB;
    188a:	a8 e3       	ldi	r26, 0x38	; 56
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e8 e3       	ldi	r30, 0x38	; 56
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	80 95       	com	r24
    1896:	8c 93       	st	X, r24
    1898:	0f c0       	rjmp	.+30     	; 0x18b8 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC = ~PORTC;
    189a:	a5 e3       	ldi	r26, 0x35	; 53
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e5 e3       	ldi	r30, 0x35	; 53
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	80 95       	com	r24
    18a6:	8c 93       	st	X, r24
    18a8:	07 c0       	rjmp	.+14     	; 0x18b8 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD = ~PORTD;
    18aa:	a2 e3       	ldi	r26, 0x32	; 50
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e2 e3       	ldi	r30, 0x32	; 50
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	80 95       	com	r24
    18b6:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	89 83       	std	Y+1, r24	; 0x01
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    18be:	83 e0       	ldi	r24, 0x03	; 3
    18c0:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <DIO_enuGetPortValue>:


ES_t DIO_enuGetPortValue(u8 Copy_u8PortID, u8 * Copy_pu8Value)
{
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <DIO_enuGetPortValue+0x6>
    18d8:	00 d0       	rcall	.+0      	; 0x18da <DIO_enuGetPortValue+0x8>
    18da:	00 d0       	rcall	.+0      	; 0x18dc <DIO_enuGetPortValue+0xa>
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	8a 83       	std	Y+2, r24	; 0x02
    18e2:	7c 83       	std	Y+4, r23	; 0x04
    18e4:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    18e6:	19 82       	std	Y+1, r1	; 0x01

	/* Check if wild pointer */
	if(Copy_pu8Value != NULL)
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	9c 81       	ldd	r25, Y+4	; 0x04
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <DIO_enuGetPortValue+0x20>
    18f0:	43 c0       	rjmp	.+134    	; 0x1978 <DIO_enuGetPortValue+0xa6>
	{
		/* Change Range */
		if(Copy_u8PortID <= DIO_PORTD)
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	84 30       	cpi	r24, 0x04	; 4
    18f6:	e8 f5       	brcc	.+122    	; 0x1972 <DIO_enuGetPortValue+0xa0>
		{
			switch(Copy_u8PortID)
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	3e 83       	std	Y+6, r19	; 0x06
    1900:	2d 83       	std	Y+5, r18	; 0x05
    1902:	8d 81       	ldd	r24, Y+5	; 0x05
    1904:	9e 81       	ldd	r25, Y+6	; 0x06
    1906:	81 30       	cpi	r24, 0x01	; 1
    1908:	91 05       	cpc	r25, r1
    190a:	e1 f0       	breq	.+56     	; 0x1944 <DIO_enuGetPortValue+0x72>
    190c:	2d 81       	ldd	r18, Y+5	; 0x05
    190e:	3e 81       	ldd	r19, Y+6	; 0x06
    1910:	22 30       	cpi	r18, 0x02	; 2
    1912:	31 05       	cpc	r19, r1
    1914:	2c f4       	brge	.+10     	; 0x1920 <DIO_enuGetPortValue+0x4e>
    1916:	8d 81       	ldd	r24, Y+5	; 0x05
    1918:	9e 81       	ldd	r25, Y+6	; 0x06
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	61 f0       	breq	.+24     	; 0x1936 <DIO_enuGetPortValue+0x64>
    191e:	26 c0       	rjmp	.+76     	; 0x196c <DIO_enuGetPortValue+0x9a>
    1920:	2d 81       	ldd	r18, Y+5	; 0x05
    1922:	3e 81       	ldd	r19, Y+6	; 0x06
    1924:	22 30       	cpi	r18, 0x02	; 2
    1926:	31 05       	cpc	r19, r1
    1928:	a1 f0       	breq	.+40     	; 0x1952 <DIO_enuGetPortValue+0x80>
    192a:	8d 81       	ldd	r24, Y+5	; 0x05
    192c:	9e 81       	ldd	r25, Y+6	; 0x06
    192e:	83 30       	cpi	r24, 0x03	; 3
    1930:	91 05       	cpc	r25, r1
    1932:	b1 f0       	breq	.+44     	; 0x1960 <DIO_enuGetPortValue+0x8e>
    1934:	1b c0       	rjmp	.+54     	; 0x196c <DIO_enuGetPortValue+0x9a>
			{
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
    1936:	e9 e3       	ldi	r30, 0x39	; 57
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	eb 81       	ldd	r30, Y+3	; 0x03
    193e:	fc 81       	ldd	r31, Y+4	; 0x04
    1940:	80 83       	st	Z, r24
    1942:	14 c0       	rjmp	.+40     	; 0x196c <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
    1944:	e6 e3       	ldi	r30, 0x36	; 54
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	eb 81       	ldd	r30, Y+3	; 0x03
    194c:	fc 81       	ldd	r31, Y+4	; 0x04
    194e:	80 83       	st	Z, r24
    1950:	0d c0       	rjmp	.+26     	; 0x196c <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
    1952:	e3 e3       	ldi	r30, 0x33	; 51
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	eb 81       	ldd	r30, Y+3	; 0x03
    195a:	fc 81       	ldd	r31, Y+4	; 0x04
    195c:	80 83       	st	Z, r24
    195e:	06 c0       	rjmp	.+12     	; 0x196c <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
    1960:	e0 e3       	ldi	r30, 0x30	; 48
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	eb 81       	ldd	r30, Y+3	; 0x03
    1968:	fc 81       	ldd	r31, Y+4	; 0x04
    196a:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	89 83       	std	Y+1, r24	; 0x01
    1970:	05 c0       	rjmp	.+10     	; 0x197c <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1972:	83 e0       	ldi	r24, 0x03	; 3
    1974:	89 83       	std	Y+1, r24	; 0x01
    1976:	02 c0       	rjmp	.+4      	; 0x197c <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1978:	82 e0       	ldi	r24, 0x02	; 2
    197a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    197c:	89 81       	ldd	r24, Y+1	; 0x01
}
    197e:	26 96       	adiw	r28, 0x06	; 6
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	f8 94       	cli
    1984:	de bf       	out	0x3e, r29	; 62
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	cd bf       	out	0x3d, r28	; 61
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	00 d0       	rcall	.+0      	; 0x1996 <DIO_enuSetPinDirection+0x6>
    1996:	00 d0       	rcall	.+0      	; 0x1998 <DIO_enuSetPinDirection+0x8>
    1998:	00 d0       	rcall	.+0      	; 0x199a <DIO_enuSetPinDirection+0xa>
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	8a 83       	std	Y+2, r24	; 0x02
    19a0:	6b 83       	std	Y+3, r22	; 0x03
    19a2:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    19a4:	19 82       	std	Y+1, r1	; 0x01

	/* Check range */
	if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) && (Copy_u8Value <= OUTPUT))
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	84 30       	cpi	r24, 0x04	; 4
    19aa:	08 f0       	brcs	.+2      	; 0x19ae <DIO_enuSetPinDirection+0x1e>
    19ac:	d1 c0       	rjmp	.+418    	; 0x1b50 <DIO_enuSetPinDirection+0x1c0>
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	88 30       	cpi	r24, 0x08	; 8
    19b2:	08 f0       	brcs	.+2      	; 0x19b6 <DIO_enuSetPinDirection+0x26>
    19b4:	cd c0       	rjmp	.+410    	; 0x1b50 <DIO_enuSetPinDirection+0x1c0>
    19b6:	8c 81       	ldd	r24, Y+4	; 0x04
    19b8:	82 30       	cpi	r24, 0x02	; 2
    19ba:	08 f0       	brcs	.+2      	; 0x19be <DIO_enuSetPinDirection+0x2e>
    19bc:	c9 c0       	rjmp	.+402    	; 0x1b50 <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	3e 83       	std	Y+6, r19	; 0x06
    19c6:	2d 83       	std	Y+5, r18	; 0x05
    19c8:	6d 81       	ldd	r22, Y+5	; 0x05
    19ca:	7e 81       	ldd	r23, Y+6	; 0x06
    19cc:	61 30       	cpi	r22, 0x01	; 1
    19ce:	71 05       	cpc	r23, r1
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <DIO_enuSetPinDirection+0x44>
    19d2:	41 c0       	rjmp	.+130    	; 0x1a56 <DIO_enuSetPinDirection+0xc6>
    19d4:	8d 81       	ldd	r24, Y+5	; 0x05
    19d6:	9e 81       	ldd	r25, Y+6	; 0x06
    19d8:	82 30       	cpi	r24, 0x02	; 2
    19da:	91 05       	cpc	r25, r1
    19dc:	34 f4       	brge	.+12     	; 0x19ea <DIO_enuSetPinDirection+0x5a>
    19de:	2d 81       	ldd	r18, Y+5	; 0x05
    19e0:	3e 81       	ldd	r19, Y+6	; 0x06
    19e2:	21 15       	cp	r18, r1
    19e4:	31 05       	cpc	r19, r1
    19e6:	71 f0       	breq	.+28     	; 0x1a04 <DIO_enuSetPinDirection+0x74>
    19e8:	b0 c0       	rjmp	.+352    	; 0x1b4a <DIO_enuSetPinDirection+0x1ba>
    19ea:	6d 81       	ldd	r22, Y+5	; 0x05
    19ec:	7e 81       	ldd	r23, Y+6	; 0x06
    19ee:	62 30       	cpi	r22, 0x02	; 2
    19f0:	71 05       	cpc	r23, r1
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <DIO_enuSetPinDirection+0x66>
    19f4:	59 c0       	rjmp	.+178    	; 0x1aa8 <DIO_enuSetPinDirection+0x118>
    19f6:	8d 81       	ldd	r24, Y+5	; 0x05
    19f8:	9e 81       	ldd	r25, Y+6	; 0x06
    19fa:	83 30       	cpi	r24, 0x03	; 3
    19fc:	91 05       	cpc	r25, r1
    19fe:	09 f4       	brne	.+2      	; 0x1a02 <DIO_enuSetPinDirection+0x72>
    1a00:	7c c0       	rjmp	.+248    	; 0x1afa <DIO_enuSetPinDirection+0x16a>
    1a02:	a3 c0       	rjmp	.+326    	; 0x1b4a <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);             //Mask bit == Clear Bit
    1a04:	aa e3       	ldi	r26, 0x3A	; 58
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	ea e3       	ldi	r30, 0x3A	; 58
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	48 2f       	mov	r20, r24
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <DIO_enuSetPinDirection+0x90>
    1a1c:	88 0f       	add	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	2a 95       	dec	r18
    1a22:	e2 f7       	brpl	.-8      	; 0x1a1c <DIO_enuSetPinDirection+0x8c>
    1a24:	80 95       	com	r24
    1a26:	84 23       	and	r24, r20
    1a28:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID); //Write new value
    1a2a:	aa e3       	ldi	r26, 0x3A	; 58
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	ea e3       	ldi	r30, 0x3A	; 58
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	48 2f       	mov	r20, r24
    1a36:	8c 81       	ldd	r24, Y+4	; 0x04
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	88 2f       	mov	r24, r24
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	b9 01       	movw	r22, r18
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <DIO_enuSetPinDirection+0xba>
    1a46:	66 0f       	add	r22, r22
    1a48:	77 1f       	adc	r23, r23
    1a4a:	8a 95       	dec	r24
    1a4c:	e2 f7       	brpl	.-8      	; 0x1a46 <DIO_enuSetPinDirection+0xb6>
    1a4e:	cb 01       	movw	r24, r22
    1a50:	84 2b       	or	r24, r20
    1a52:	8c 93       	st	X, r24
    1a54:	7a c0       	rjmp	.+244    	; 0x1b4a <DIO_enuSetPinDirection+0x1ba>
			 *      -> 101-0-1001 | 000-1-0000 (Write Value)
			 *      -> 101-1-1-1001 (Result)
			 */
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1a56:	a7 e3       	ldi	r26, 0x37	; 55
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e7 e3       	ldi	r30, 0x37	; 55
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	48 2f       	mov	r20, r24
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <DIO_enuSetPinDirection+0xe2>
    1a6e:	88 0f       	add	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	2a 95       	dec	r18
    1a74:	e2 f7       	brpl	.-8      	; 0x1a6e <DIO_enuSetPinDirection+0xde>
    1a76:	80 95       	com	r24
    1a78:	84 23       	and	r24, r20
    1a7a:	8c 93       	st	X, r24
			DDRB |= (Copy_u8Value << Copy_u8PinID);
    1a7c:	a7 e3       	ldi	r26, 0x37	; 55
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e7 e3       	ldi	r30, 0x37	; 55
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	48 2f       	mov	r20, r24
    1a88:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	88 2f       	mov	r24, r24
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	b9 01       	movw	r22, r18
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <DIO_enuSetPinDirection+0x10c>
    1a98:	66 0f       	add	r22, r22
    1a9a:	77 1f       	adc	r23, r23
    1a9c:	8a 95       	dec	r24
    1a9e:	e2 f7       	brpl	.-8      	; 0x1a98 <DIO_enuSetPinDirection+0x108>
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	84 2b       	or	r24, r20
    1aa4:	8c 93       	st	X, r24
    1aa6:	51 c0       	rjmp	.+162    	; 0x1b4a <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1aa8:	a4 e3       	ldi	r26, 0x34	; 52
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e4 e3       	ldi	r30, 0x34	; 52
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	48 2f       	mov	r20, r24
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <DIO_enuSetPinDirection+0x134>
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	2a 95       	dec	r18
    1ac6:	e2 f7       	brpl	.-8      	; 0x1ac0 <DIO_enuSetPinDirection+0x130>
    1ac8:	80 95       	com	r24
    1aca:	84 23       	and	r24, r20
    1acc:	8c 93       	st	X, r24
			DDRC |= (Copy_u8Value << Copy_u8PinID);
    1ace:	a4 e3       	ldi	r26, 0x34	; 52
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	e4 e3       	ldi	r30, 0x34	; 52
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	48 2f       	mov	r20, r24
    1ada:	8c 81       	ldd	r24, Y+4	; 0x04
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	88 2f       	mov	r24, r24
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	b9 01       	movw	r22, r18
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <DIO_enuSetPinDirection+0x15e>
    1aea:	66 0f       	add	r22, r22
    1aec:	77 1f       	adc	r23, r23
    1aee:	8a 95       	dec	r24
    1af0:	e2 f7       	brpl	.-8      	; 0x1aea <DIO_enuSetPinDirection+0x15a>
    1af2:	cb 01       	movw	r24, r22
    1af4:	84 2b       	or	r24, r20
    1af6:	8c 93       	st	X, r24
    1af8:	28 c0       	rjmp	.+80     	; 0x1b4a <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1afa:	a1 e3       	ldi	r26, 0x31	; 49
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e1 e3       	ldi	r30, 0x31	; 49
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	48 2f       	mov	r20, r24
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <DIO_enuSetPinDirection+0x186>
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	2a 95       	dec	r18
    1b18:	e2 f7       	brpl	.-8      	; 0x1b12 <DIO_enuSetPinDirection+0x182>
    1b1a:	80 95       	com	r24
    1b1c:	84 23       	and	r24, r20
    1b1e:	8c 93       	st	X, r24
			DDRD |= (Copy_u8Value << Copy_u8PinID);
    1b20:	a1 e3       	ldi	r26, 0x31	; 49
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	e1 e3       	ldi	r30, 0x31	; 49
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	48 2f       	mov	r20, r24
    1b2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	88 2f       	mov	r24, r24
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	b9 01       	movw	r22, r18
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <DIO_enuSetPinDirection+0x1b0>
    1b3c:	66 0f       	add	r22, r22
    1b3e:	77 1f       	adc	r23, r23
    1b40:	8a 95       	dec	r24
    1b42:	e2 f7       	brpl	.-8      	; 0x1b3c <DIO_enuSetPinDirection+0x1ac>
    1b44:	cb 01       	movw	r24, r22
    1b46:	84 2b       	or	r24, r20
    1b48:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1b50:	83 e0       	ldi	r24, 0x03	; 3
    1b52:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b56:	26 96       	adiw	r28, 0x06	; 6
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	00 d0       	rcall	.+0      	; 0x1b6e <DIO_enuSetPinValue+0x6>
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <DIO_enuSetPinValue+0x8>
    1b70:	00 d0       	rcall	.+0      	; 0x1b72 <DIO_enuSetPinValue+0xa>
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    1b76:	8a 83       	std	Y+2, r24	; 0x02
    1b78:	6b 83       	std	Y+3, r22	; 0x03
    1b7a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1b7c:	19 82       	std	Y+1, r1	; 0x01

	/* Check range */
	if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) && (Copy_u8Value <= HIGH))
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	84 30       	cpi	r24, 0x04	; 4
    1b82:	08 f0       	brcs	.+2      	; 0x1b86 <DIO_enuSetPinValue+0x1e>
    1b84:	d1 c0       	rjmp	.+418    	; 0x1d28 <DIO_enuSetPinValue+0x1c0>
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	88 30       	cpi	r24, 0x08	; 8
    1b8a:	08 f0       	brcs	.+2      	; 0x1b8e <DIO_enuSetPinValue+0x26>
    1b8c:	cd c0       	rjmp	.+410    	; 0x1d28 <DIO_enuSetPinValue+0x1c0>
    1b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b90:	82 30       	cpi	r24, 0x02	; 2
    1b92:	08 f0       	brcs	.+2      	; 0x1b96 <DIO_enuSetPinValue+0x2e>
    1b94:	c9 c0       	rjmp	.+402    	; 0x1d28 <DIO_enuSetPinValue+0x1c0>
	{
		switch(Copy_u8PortID)
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	3e 83       	std	Y+6, r19	; 0x06
    1b9e:	2d 83       	std	Y+5, r18	; 0x05
    1ba0:	6d 81       	ldd	r22, Y+5	; 0x05
    1ba2:	7e 81       	ldd	r23, Y+6	; 0x06
    1ba4:	61 30       	cpi	r22, 0x01	; 1
    1ba6:	71 05       	cpc	r23, r1
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <DIO_enuSetPinValue+0x44>
    1baa:	41 c0       	rjmp	.+130    	; 0x1c2e <DIO_enuSetPinValue+0xc6>
    1bac:	8d 81       	ldd	r24, Y+5	; 0x05
    1bae:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb0:	82 30       	cpi	r24, 0x02	; 2
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	34 f4       	brge	.+12     	; 0x1bc2 <DIO_enuSetPinValue+0x5a>
    1bb6:	2d 81       	ldd	r18, Y+5	; 0x05
    1bb8:	3e 81       	ldd	r19, Y+6	; 0x06
    1bba:	21 15       	cp	r18, r1
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	71 f0       	breq	.+28     	; 0x1bdc <DIO_enuSetPinValue+0x74>
    1bc0:	b0 c0       	rjmp	.+352    	; 0x1d22 <DIO_enuSetPinValue+0x1ba>
    1bc2:	6d 81       	ldd	r22, Y+5	; 0x05
    1bc4:	7e 81       	ldd	r23, Y+6	; 0x06
    1bc6:	62 30       	cpi	r22, 0x02	; 2
    1bc8:	71 05       	cpc	r23, r1
    1bca:	09 f4       	brne	.+2      	; 0x1bce <DIO_enuSetPinValue+0x66>
    1bcc:	59 c0       	rjmp	.+178    	; 0x1c80 <DIO_enuSetPinValue+0x118>
    1bce:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd2:	83 30       	cpi	r24, 0x03	; 3
    1bd4:	91 05       	cpc	r25, r1
    1bd6:	09 f4       	brne	.+2      	; 0x1bda <DIO_enuSetPinValue+0x72>
    1bd8:	7c c0       	rjmp	.+248    	; 0x1cd2 <DIO_enuSetPinValue+0x16a>
    1bda:	a3 c0       	rjmp	.+326    	; 0x1d22 <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);             //Mask bit == Clear Bit
    1bdc:	ab e3       	ldi	r26, 0x3B	; 59
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	eb e3       	ldi	r30, 0x3B	; 59
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	48 2f       	mov	r20, r24
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <DIO_enuSetPinValue+0x90>
    1bf4:	88 0f       	add	r24, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	2a 95       	dec	r18
    1bfa:	e2 f7       	brpl	.-8      	; 0x1bf4 <DIO_enuSetPinValue+0x8c>
    1bfc:	80 95       	com	r24
    1bfe:	84 23       	and	r24, r20
    1c00:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID); //Write new value
    1c02:	ab e3       	ldi	r26, 0x3B	; 59
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	eb e3       	ldi	r30, 0x3B	; 59
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	48 2f       	mov	r20, r24
    1c0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c10:	28 2f       	mov	r18, r24
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	88 2f       	mov	r24, r24
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	b9 01       	movw	r22, r18
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <DIO_enuSetPinValue+0xba>
    1c1e:	66 0f       	add	r22, r22
    1c20:	77 1f       	adc	r23, r23
    1c22:	8a 95       	dec	r24
    1c24:	e2 f7       	brpl	.-8      	; 0x1c1e <DIO_enuSetPinValue+0xb6>
    1c26:	cb 01       	movw	r24, r22
    1c28:	84 2b       	or	r24, r20
    1c2a:	8c 93       	st	X, r24
    1c2c:	7a c0       	rjmp	.+244    	; 0x1d22 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1c2e:	a8 e3       	ldi	r26, 0x38	; 56
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e8 e3       	ldi	r30, 0x38	; 56
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	48 2f       	mov	r20, r24
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <DIO_enuSetPinValue+0xe2>
    1c46:	88 0f       	add	r24, r24
    1c48:	99 1f       	adc	r25, r25
    1c4a:	2a 95       	dec	r18
    1c4c:	e2 f7       	brpl	.-8      	; 0x1c46 <DIO_enuSetPinValue+0xde>
    1c4e:	80 95       	com	r24
    1c50:	84 23       	and	r24, r20
    1c52:	8c 93       	st	X, r24
			PORTB |= (Copy_u8Value << Copy_u8PinID);
    1c54:	a8 e3       	ldi	r26, 0x38	; 56
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e8 e3       	ldi	r30, 0x38	; 56
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	48 2f       	mov	r20, r24
    1c60:	8c 81       	ldd	r24, Y+4	; 0x04
    1c62:	28 2f       	mov	r18, r24
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	88 2f       	mov	r24, r24
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	b9 01       	movw	r22, r18
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <DIO_enuSetPinValue+0x10c>
    1c70:	66 0f       	add	r22, r22
    1c72:	77 1f       	adc	r23, r23
    1c74:	8a 95       	dec	r24
    1c76:	e2 f7       	brpl	.-8      	; 0x1c70 <DIO_enuSetPinValue+0x108>
    1c78:	cb 01       	movw	r24, r22
    1c7a:	84 2b       	or	r24, r20
    1c7c:	8c 93       	st	X, r24
    1c7e:	51 c0       	rjmp	.+162    	; 0x1d22 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1c80:	a5 e3       	ldi	r26, 0x35	; 53
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e5 e3       	ldi	r30, 0x35	; 53
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	48 2f       	mov	r20, r24
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	28 2f       	mov	r18, r24
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <DIO_enuSetPinValue+0x134>
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	2a 95       	dec	r18
    1c9e:	e2 f7       	brpl	.-8      	; 0x1c98 <DIO_enuSetPinValue+0x130>
    1ca0:	80 95       	com	r24
    1ca2:	84 23       	and	r24, r20
    1ca4:	8c 93       	st	X, r24
			PORTC |= (Copy_u8Value << Copy_u8PinID);
    1ca6:	a5 e3       	ldi	r26, 0x35	; 53
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e5 e3       	ldi	r30, 0x35	; 53
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	48 2f       	mov	r20, r24
    1cb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	88 2f       	mov	r24, r24
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	b9 01       	movw	r22, r18
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <DIO_enuSetPinValue+0x15e>
    1cc2:	66 0f       	add	r22, r22
    1cc4:	77 1f       	adc	r23, r23
    1cc6:	8a 95       	dec	r24
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <DIO_enuSetPinValue+0x15a>
    1cca:	cb 01       	movw	r24, r22
    1ccc:	84 2b       	or	r24, r20
    1cce:	8c 93       	st	X, r24
    1cd0:	28 c0       	rjmp	.+80     	; 0x1d22 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1cd2:	a2 e3       	ldi	r26, 0x32	; 50
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	e2 e3       	ldi	r30, 0x32	; 50
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	48 2f       	mov	r20, r24
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	28 2f       	mov	r18, r24
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	02 c0       	rjmp	.+4      	; 0x1cee <DIO_enuSetPinValue+0x186>
    1cea:	88 0f       	add	r24, r24
    1cec:	99 1f       	adc	r25, r25
    1cee:	2a 95       	dec	r18
    1cf0:	e2 f7       	brpl	.-8      	; 0x1cea <DIO_enuSetPinValue+0x182>
    1cf2:	80 95       	com	r24
    1cf4:	84 23       	and	r24, r20
    1cf6:	8c 93       	st	X, r24
			PORTD |= (Copy_u8Value << Copy_u8PinID);
    1cf8:	a2 e3       	ldi	r26, 0x32	; 50
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	e2 e3       	ldi	r30, 0x32	; 50
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	48 2f       	mov	r20, r24
    1d04:	8c 81       	ldd	r24, Y+4	; 0x04
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	88 2f       	mov	r24, r24
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	b9 01       	movw	r22, r18
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <DIO_enuSetPinValue+0x1b0>
    1d14:	66 0f       	add	r22, r22
    1d16:	77 1f       	adc	r23, r23
    1d18:	8a 95       	dec	r24
    1d1a:	e2 f7       	brpl	.-8      	; 0x1d14 <DIO_enuSetPinValue+0x1ac>
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	84 2b       	or	r24, r20
    1d20:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	89 83       	std	Y+1, r24	; 0x01
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1d28:	83 e0       	ldi	r24, 0x03	; 3
    1d2a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d2e:	26 96       	adiw	r28, 0x06	; 6
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	08 95       	ret

00001d40 <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID)
{
    1d40:	df 93       	push	r29
    1d42:	cf 93       	push	r28
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <DIO_enuTogPinValue+0x6>
    1d46:	00 d0       	rcall	.+0      	; 0x1d48 <DIO_enuTogPinValue+0x8>
    1d48:	0f 92       	push	r0
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
    1d4e:	8a 83       	std	Y+2, r24	; 0x02
    1d50:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1d52:	19 82       	std	Y+1, r1	; 0x01

	/* Check range */
	if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7))
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	84 30       	cpi	r24, 0x04	; 4
    1d58:	08 f0       	brcs	.+2      	; 0x1d5c <DIO_enuTogPinValue+0x1c>
    1d5a:	75 c0       	rjmp	.+234    	; 0x1e46 <DIO_enuTogPinValue+0x106>
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	88 30       	cpi	r24, 0x08	; 8
    1d60:	08 f0       	brcs	.+2      	; 0x1d64 <DIO_enuTogPinValue+0x24>
    1d62:	71 c0       	rjmp	.+226    	; 0x1e46 <DIO_enuTogPinValue+0x106>
	{
		switch(Copy_u8PortID)
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	28 2f       	mov	r18, r24
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	3d 83       	std	Y+5, r19	; 0x05
    1d6c:	2c 83       	std	Y+4, r18	; 0x04
    1d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d70:	9d 81       	ldd	r25, Y+5	; 0x05
    1d72:	81 30       	cpi	r24, 0x01	; 1
    1d74:	91 05       	cpc	r25, r1
    1d76:	49 f1       	breq	.+82     	; 0x1dca <DIO_enuTogPinValue+0x8a>
    1d78:	2c 81       	ldd	r18, Y+4	; 0x04
    1d7a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d7c:	22 30       	cpi	r18, 0x02	; 2
    1d7e:	31 05       	cpc	r19, r1
    1d80:	2c f4       	brge	.+10     	; 0x1d8c <DIO_enuTogPinValue+0x4c>
    1d82:	8c 81       	ldd	r24, Y+4	; 0x04
    1d84:	9d 81       	ldd	r25, Y+5	; 0x05
    1d86:	00 97       	sbiw	r24, 0x00	; 0
    1d88:	61 f0       	breq	.+24     	; 0x1da2 <DIO_enuTogPinValue+0x62>
    1d8a:	5a c0       	rjmp	.+180    	; 0x1e40 <DIO_enuTogPinValue+0x100>
    1d8c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d8e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d90:	22 30       	cpi	r18, 0x02	; 2
    1d92:	31 05       	cpc	r19, r1
    1d94:	71 f1       	breq	.+92     	; 0x1df2 <DIO_enuTogPinValue+0xb2>
    1d96:	8c 81       	ldd	r24, Y+4	; 0x04
    1d98:	9d 81       	ldd	r25, Y+5	; 0x05
    1d9a:	83 30       	cpi	r24, 0x03	; 3
    1d9c:	91 05       	cpc	r25, r1
    1d9e:	e9 f1       	breq	.+122    	; 0x1e1a <DIO_enuTogPinValue+0xda>
    1da0:	4f c0       	rjmp	.+158    	; 0x1e40 <DIO_enuTogPinValue+0x100>
		{
		case DIO_PORTA:
			PORTA ^=  (DIO_MASK_BIT << Copy_u8PinID);
    1da2:	ab e3       	ldi	r26, 0x3B	; 59
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	eb e3       	ldi	r30, 0x3B	; 59
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	48 2f       	mov	r20, r24
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	28 2f       	mov	r18, r24
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	02 2e       	mov	r0, r18
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <DIO_enuTogPinValue+0x80>
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	0a 94       	dec	r0
    1dc2:	e2 f7       	brpl	.-8      	; 0x1dbc <DIO_enuTogPinValue+0x7c>
    1dc4:	84 27       	eor	r24, r20
    1dc6:	8c 93       	st	X, r24
    1dc8:	3b c0       	rjmp	.+118    	; 0x1e40 <DIO_enuTogPinValue+0x100>
			 *       -> 000-1-0000
			 *       -> 101-0-1001
			 * */
			break;
		case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT << Copy_u8PinID);
    1dca:	a8 e3       	ldi	r26, 0x38	; 56
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e8 e3       	ldi	r30, 0x38	; 56
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	48 2f       	mov	r20, r24
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	02 2e       	mov	r0, r18
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <DIO_enuTogPinValue+0xa8>
    1de4:	88 0f       	add	r24, r24
    1de6:	99 1f       	adc	r25, r25
    1de8:	0a 94       	dec	r0
    1dea:	e2 f7       	brpl	.-8      	; 0x1de4 <DIO_enuTogPinValue+0xa4>
    1dec:	84 27       	eor	r24, r20
    1dee:	8c 93       	st	X, r24
    1df0:	27 c0       	rjmp	.+78     	; 0x1e40 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT << Copy_u8PinID);
    1df2:	a5 e3       	ldi	r26, 0x35	; 53
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	e5 e3       	ldi	r30, 0x35	; 53
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	48 2f       	mov	r20, r24
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	02 2e       	mov	r0, r18
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <DIO_enuTogPinValue+0xd0>
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	0a 94       	dec	r0
    1e12:	e2 f7       	brpl	.-8      	; 0x1e0c <DIO_enuTogPinValue+0xcc>
    1e14:	84 27       	eor	r24, r20
    1e16:	8c 93       	st	X, r24
    1e18:	13 c0       	rjmp	.+38     	; 0x1e40 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT << Copy_u8PinID);
    1e1a:	a2 e3       	ldi	r26, 0x32	; 50
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e2 e3       	ldi	r30, 0x32	; 50
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	48 2f       	mov	r20, r24
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	02 2e       	mov	r0, r18
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <DIO_enuTogPinValue+0xf8>
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	0a 94       	dec	r0
    1e3a:	e2 f7       	brpl	.-8      	; 0x1e34 <DIO_enuTogPinValue+0xf4>
    1e3c:	84 27       	eor	r24, r20
    1e3e:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	89 83       	std	Y+1, r24	; 0x01
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <DIO_enuTogPinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1e46:	83 e0       	ldi	r24, 0x03	; 3
    1e48:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	cf 91       	pop	r28
    1e58:	df 91       	pop	r29
    1e5a:	08 95       	ret

00001e5c <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 * Copy_pu8Value)
{
    1e5c:	df 93       	push	r29
    1e5e:	cf 93       	push	r28
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	27 97       	sbiw	r28, 0x07	; 7
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	de bf       	out	0x3e, r29	; 62
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	cd bf       	out	0x3d, r28	; 61
    1e70:	8a 83       	std	Y+2, r24	; 0x02
    1e72:	6b 83       	std	Y+3, r22	; 0x03
    1e74:	5d 83       	std	Y+5, r21	; 0x05
    1e76:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1e78:	19 82       	std	Y+1, r1	; 0x01

	/* Check if wild pointer */
	if(Copy_pu8Value != NULL)
    1e7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e7e:	00 97       	sbiw	r24, 0x00	; 0
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <DIO_enuGetPinValue+0x28>
    1e82:	7e c0       	rjmp	.+252    	; 0x1f80 <DIO_enuGetPinValue+0x124>
	{
		/* Check Range */
		if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7))
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	84 30       	cpi	r24, 0x04	; 4
    1e88:	08 f0       	brcs	.+2      	; 0x1e8c <DIO_enuGetPinValue+0x30>
    1e8a:	77 c0       	rjmp	.+238    	; 0x1f7a <DIO_enuGetPinValue+0x11e>
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	88 30       	cpi	r24, 0x08	; 8
    1e90:	08 f0       	brcs	.+2      	; 0x1e94 <DIO_enuGetPinValue+0x38>
    1e92:	73 c0       	rjmp	.+230    	; 0x1f7a <DIO_enuGetPinValue+0x11e>
		{
			switch(Copy_u8PortID)
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	28 2f       	mov	r18, r24
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	3f 83       	std	Y+7, r19	; 0x07
    1e9c:	2e 83       	std	Y+6, r18	; 0x06
    1e9e:	4e 81       	ldd	r20, Y+6	; 0x06
    1ea0:	5f 81       	ldd	r21, Y+7	; 0x07
    1ea2:	41 30       	cpi	r20, 0x01	; 1
    1ea4:	51 05       	cpc	r21, r1
    1ea6:	59 f1       	breq	.+86     	; 0x1efe <DIO_enuGetPinValue+0xa2>
    1ea8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eaa:	9f 81       	ldd	r25, Y+7	; 0x07
    1eac:	82 30       	cpi	r24, 0x02	; 2
    1eae:	91 05       	cpc	r25, r1
    1eb0:	34 f4       	brge	.+12     	; 0x1ebe <DIO_enuGetPinValue+0x62>
    1eb2:	2e 81       	ldd	r18, Y+6	; 0x06
    1eb4:	3f 81       	ldd	r19, Y+7	; 0x07
    1eb6:	21 15       	cp	r18, r1
    1eb8:	31 05       	cpc	r19, r1
    1eba:	69 f0       	breq	.+26     	; 0x1ed6 <DIO_enuGetPinValue+0x7a>
    1ebc:	5b c0       	rjmp	.+182    	; 0x1f74 <DIO_enuGetPinValue+0x118>
    1ebe:	4e 81       	ldd	r20, Y+6	; 0x06
    1ec0:	5f 81       	ldd	r21, Y+7	; 0x07
    1ec2:	42 30       	cpi	r20, 0x02	; 2
    1ec4:	51 05       	cpc	r21, r1
    1ec6:	79 f1       	breq	.+94     	; 0x1f26 <DIO_enuGetPinValue+0xca>
    1ec8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eca:	9f 81       	ldd	r25, Y+7	; 0x07
    1ecc:	83 30       	cpi	r24, 0x03	; 3
    1ece:	91 05       	cpc	r25, r1
    1ed0:	09 f4       	brne	.+2      	; 0x1ed4 <DIO_enuGetPinValue+0x78>
    1ed2:	3d c0       	rjmp	.+122    	; 0x1f4e <DIO_enuGetPinValue+0xf2>
    1ed4:	4f c0       	rjmp	.+158    	; 0x1f74 <DIO_enuGetPinValue+0x118>
			{
			case DIO_PORTA:
				*Copy_pu8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
    1ed6:	e9 e3       	ldi	r30, 0x39	; 57
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	28 2f       	mov	r18, r24
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee2:	88 2f       	mov	r24, r24
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	a9 01       	movw	r20, r18
    1ee8:	02 c0       	rjmp	.+4      	; 0x1eee <DIO_enuGetPinValue+0x92>
    1eea:	55 95       	asr	r21
    1eec:	47 95       	ror	r20
    1eee:	8a 95       	dec	r24
    1ef0:	e2 f7       	brpl	.-8      	; 0x1eea <DIO_enuGetPinValue+0x8e>
    1ef2:	ca 01       	movw	r24, r20
    1ef4:	81 70       	andi	r24, 0x01	; 1
    1ef6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ef8:	fd 81       	ldd	r31, Y+5	; 0x05
    1efa:	80 83       	st	Z, r24
    1efc:	3b c0       	rjmp	.+118    	; 0x1f74 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
    1efe:	e6 e3       	ldi	r30, 0x36	; 54
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	28 2f       	mov	r18, r24
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0a:	88 2f       	mov	r24, r24
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	a9 01       	movw	r20, r18
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <DIO_enuGetPinValue+0xba>
    1f12:	55 95       	asr	r21
    1f14:	47 95       	ror	r20
    1f16:	8a 95       	dec	r24
    1f18:	e2 f7       	brpl	.-8      	; 0x1f12 <DIO_enuGetPinValue+0xb6>
    1f1a:	ca 01       	movw	r24, r20
    1f1c:	81 70       	andi	r24, 0x01	; 1
    1f1e:	ec 81       	ldd	r30, Y+4	; 0x04
    1f20:	fd 81       	ldd	r31, Y+5	; 0x05
    1f22:	80 83       	st	Z, r24
    1f24:	27 c0       	rjmp	.+78     	; 0x1f74 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
    1f26:	e3 e3       	ldi	r30, 0x33	; 51
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	28 2f       	mov	r18, r24
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	88 2f       	mov	r24, r24
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	a9 01       	movw	r20, r18
    1f38:	02 c0       	rjmp	.+4      	; 0x1f3e <DIO_enuGetPinValue+0xe2>
    1f3a:	55 95       	asr	r21
    1f3c:	47 95       	ror	r20
    1f3e:	8a 95       	dec	r24
    1f40:	e2 f7       	brpl	.-8      	; 0x1f3a <DIO_enuGetPinValue+0xde>
    1f42:	ca 01       	movw	r24, r20
    1f44:	81 70       	andi	r24, 0x01	; 1
    1f46:	ec 81       	ldd	r30, Y+4	; 0x04
    1f48:	fd 81       	ldd	r31, Y+5	; 0x05
    1f4a:	80 83       	st	Z, r24
    1f4c:	13 c0       	rjmp	.+38     	; 0x1f74 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = ((PIND >> Copy_u8PinID) & DIO_MASK_BIT);
    1f4e:	e0 e3       	ldi	r30, 0x30	; 48
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	28 2f       	mov	r18, r24
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	88 2f       	mov	r24, r24
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	a9 01       	movw	r20, r18
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <DIO_enuGetPinValue+0x10a>
    1f62:	55 95       	asr	r21
    1f64:	47 95       	ror	r20
    1f66:	8a 95       	dec	r24
    1f68:	e2 f7       	brpl	.-8      	; 0x1f62 <DIO_enuGetPinValue+0x106>
    1f6a:	ca 01       	movw	r24, r20
    1f6c:	81 70       	andi	r24, 0x01	; 1
    1f6e:	ec 81       	ldd	r30, Y+4	; 0x04
    1f70:	fd 81       	ldd	r31, Y+5	; 0x05
    1f72:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	89 83       	std	Y+1, r24	; 0x01
    1f78:	05 c0       	rjmp	.+10     	; 0x1f84 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1f7a:	83 e0       	ldi	r24, 0x03	; 3
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1f80:	82 e0       	ldi	r24, 0x02	; 2
    1f82:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f86:	27 96       	adiw	r28, 0x07	; 7
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	f8 94       	cli
    1f8c:	de bf       	out	0x3e, r29	; 62
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	cd bf       	out	0x3d, r28	; 61
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	08 95       	ret

00001f98 <Switch_enuInit>:
#include "Switch_private.h"
#include "Switch_config.h"
/***********************	Includes Section End	***********************/

ES_t Switch_enuInit(SW_t * Copy_pAstrSwitches)
{
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	00 d0       	rcall	.+0      	; 0x1f9e <Switch_enuInit+0x6>
    1f9e:	00 d0       	rcall	.+0      	; 0x1fa0 <Switch_enuInit+0x8>
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    1fa4:	9c 83       	std	Y+4, r25	; 0x04
    1fa6:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1fa8:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_pAstrSwitches != NULL)
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	9c 81       	ldd	r25, Y+4	; 0x04
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <Switch_enuInit+0x1c>
    1fb2:	5d c0       	rjmp	.+186    	; 0x206e <Switch_enuInit+0xd6>
	{
		u8 Local_u8Iterator = 0;
    1fb4:	19 82       	std	Y+1, r1	; 0x01

		for(Local_u8Iterator = 0; Local_u8Iterator < SW_NUM; Local_u8Iterator++)
    1fb6:	19 82       	std	Y+1, r1	; 0x01
    1fb8:	55 c0       	rjmp	.+170    	; 0x2064 <Switch_enuInit+0xcc>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_pAstrSwitches[Local_u8Iterator].SW_u8PortID,
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	c9 01       	movw	r24, r18
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	28 0f       	add	r18, r24
    1fc8:	39 1f       	adc	r19, r25
    1fca:	8b 81       	ldd	r24, Y+3	; 0x03
    1fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fce:	fc 01       	movw	r30, r24
    1fd0:	e2 0f       	add	r30, r18
    1fd2:	f3 1f       	adc	r31, r19
    1fd4:	40 81       	ld	r20, Z
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	28 2f       	mov	r18, r24
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	c9 01       	movw	r24, r18
    1fde:	88 0f       	add	r24, r24
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	28 0f       	add	r18, r24
    1fe4:	39 1f       	adc	r19, r25
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fea:	fc 01       	movw	r30, r24
    1fec:	e2 0f       	add	r30, r18
    1fee:	f3 1f       	adc	r31, r19
    1ff0:	91 81       	ldd	r25, Z+1	; 0x01
    1ff2:	84 2f       	mov	r24, r20
    1ff4:	69 2f       	mov	r22, r25
    1ff6:	40 e0       	ldi	r20, 0x00	; 0
    1ff8:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    1ffc:	8a 83       	std	Y+2, r24	; 0x02
								   	   	   	   	   	     Copy_pAstrSwitches[Local_u8Iterator].SW_u8PinID,
														 DIO_u8INPUT);
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pAstrSwitches[Local_u8Iterator].SW_u8PortID,
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	28 2f       	mov	r18, r24
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	c9 01       	movw	r24, r18
    2006:	88 0f       	add	r24, r24
    2008:	99 1f       	adc	r25, r25
    200a:	28 0f       	add	r18, r24
    200c:	39 1f       	adc	r19, r25
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	9c 81       	ldd	r25, Y+4	; 0x04
    2012:	fc 01       	movw	r30, r24
    2014:	e2 0f       	add	r30, r18
    2016:	f3 1f       	adc	r31, r19
    2018:	50 81       	ld	r21, Z
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	28 2f       	mov	r18, r24
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	c9 01       	movw	r24, r18
    2022:	88 0f       	add	r24, r24
    2024:	99 1f       	adc	r25, r25
    2026:	28 0f       	add	r18, r24
    2028:	39 1f       	adc	r19, r25
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	9c 81       	ldd	r25, Y+4	; 0x04
    202e:	fc 01       	movw	r30, r24
    2030:	e2 0f       	add	r30, r18
    2032:	f3 1f       	adc	r31, r19
    2034:	41 81       	ldd	r20, Z+1	; 0x01
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	28 2f       	mov	r18, r24
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	c9 01       	movw	r24, r18
    203e:	88 0f       	add	r24, r24
    2040:	99 1f       	adc	r25, r25
    2042:	28 0f       	add	r18, r24
    2044:	39 1f       	adc	r19, r25
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	9c 81       	ldd	r25, Y+4	; 0x04
    204a:	fc 01       	movw	r30, r24
    204c:	e2 0f       	add	r30, r18
    204e:	f3 1f       	adc	r31, r19
    2050:	92 81       	ldd	r25, Z+2	; 0x02
    2052:	85 2f       	mov	r24, r21
    2054:	64 2f       	mov	r22, r20
    2056:	49 2f       	mov	r20, r25
    2058:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    205c:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_pAstrSwitches != NULL)
	{
		u8 Local_u8Iterator = 0;

		for(Local_u8Iterator = 0; Local_u8Iterator < SW_NUM; Local_u8Iterator++)
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	8f 5f       	subi	r24, 0xFF	; 255
    2062:	89 83       	std	Y+1, r24	; 0x01
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	83 30       	cpi	r24, 0x03	; 3
    2068:	08 f4       	brcc	.+2      	; 0x206c <Switch_enuInit+0xd4>
    206a:	a7 cf       	rjmp	.-178    	; 0x1fba <Switch_enuInit+0x22>
    206c:	02 c0       	rjmp	.+4      	; 0x2072 <Switch_enuInit+0xda>
		}

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    206e:	82 e0       	ldi	r24, 0x02	; 2
    2070:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    2072:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	08 95       	ret

00002082 <Switch_enuGetState>:

ES_t Switch_enuGetState(SW_t * Copy_pstrSwitches, u8 * Copy_pu8SwState)
{
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	00 d0       	rcall	.+0      	; 0x2088 <Switch_enuGetState+0x6>
    2088:	00 d0       	rcall	.+0      	; 0x208a <Switch_enuGetState+0x8>
    208a:	0f 92       	push	r0
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
    2090:	9b 83       	std	Y+3, r25	; 0x03
    2092:	8a 83       	std	Y+2, r24	; 0x02
    2094:	7d 83       	std	Y+5, r23	; 0x05
    2096:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    2098:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pstrSwitches != NULL && Copy_pu8SwState != NULL)
    209a:	8a 81       	ldd	r24, Y+2	; 0x02
    209c:	9b 81       	ldd	r25, Y+3	; 0x03
    209e:	00 97       	sbiw	r24, 0x00	; 0
    20a0:	91 f0       	breq	.+36     	; 0x20c6 <Switch_enuGetState+0x44>
    20a2:	8c 81       	ldd	r24, Y+4	; 0x04
    20a4:	9d 81       	ldd	r25, Y+5	; 0x05
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	71 f0       	breq	.+28     	; 0x20c6 <Switch_enuGetState+0x44>
	{
		Local_enuErrorState = DIO_enuGetPinValue(Copy_pstrSwitches->SW_u8PortID,
    20aa:	ea 81       	ldd	r30, Y+2	; 0x02
    20ac:	fb 81       	ldd	r31, Y+3	; 0x03
    20ae:	80 81       	ld	r24, Z
    20b0:	ea 81       	ldd	r30, Y+2	; 0x02
    20b2:	fb 81       	ldd	r31, Y+3	; 0x03
    20b4:	91 81       	ldd	r25, Z+1	; 0x01
    20b6:	2c 81       	ldd	r18, Y+4	; 0x04
    20b8:	3d 81       	ldd	r19, Y+5	; 0x05
    20ba:	69 2f       	mov	r22, r25
    20bc:	a9 01       	movw	r20, r18
    20be:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <DIO_enuGetPinValue>
    20c2:	89 83       	std	Y+1, r24	; 0x01
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <Switch_enuGetState+0x48>
												 Copy_pstrSwitches->SW_u8PinID,
												 Copy_pu8SwState);
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    20c6:	82 e0       	ldi	r24, 0x02	; 2
    20c8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	08 95       	ret

000020dc <SSDLT_enuInit>:
extern SEG_t SSD_AstrSegConfig[SEG_NUM];
/***********************	Declarations Section End	***********************/


ES_t SSDLT_enuInit(SEG_t * Copy_pstrSegConfig)
{
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
    20e4:	2a 97       	sbiw	r28, 0x0a	; 10
    20e6:	0f b6       	in	r0, 0x3f	; 63
    20e8:	f8 94       	cli
    20ea:	de bf       	out	0x3e, r29	; 62
    20ec:	0f be       	out	0x3f, r0	; 63
    20ee:	cd bf       	out	0x3d, r28	; 61
    20f0:	99 87       	std	Y+9, r25	; 0x09
    20f2:	88 87       	std	Y+8, r24	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    20f4:	1f 82       	std	Y+7, r1	; 0x07

	u8 Local_u8Iterator = 0;
    20f6:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8LastBit  = 0;
    20f8:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Check  = 0;
    20fa:	19 82       	std	Y+1, r1	; 0x01
    20fc:	1a 82       	std	Y+2, r1	; 0x02
    20fe:	1b 82       	std	Y+3, r1	; 0x03
    2100:	1c 82       	std	Y+4, r1	; 0x04

	if(Copy_pstrSegConfig != NULL)
    2102:	88 85       	ldd	r24, Y+8	; 0x08
    2104:	99 85       	ldd	r25, Y+9	; 0x09
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	09 f4       	brne	.+2      	; 0x210c <SSDLT_enuInit+0x30>
    210a:	35 c3       	rjmp	.+1642   	; 0x2776 <SSDLT_enuInit+0x69a>
	{
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
    210c:	1e 82       	std	Y+6, r1	; 0x06
    210e:	2e c3       	rjmp	.+1628   	; 0x276c <SSDLT_enuInit+0x690>
		{
			Local_u32Check |= (DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8APort,
    2110:	8e 81       	ldd	r24, Y+6	; 0x06
    2112:	48 2f       	mov	r20, r24
    2114:	50 e0       	ldi	r21, 0x00	; 0
    2116:	ca 01       	movw	r24, r20
    2118:	88 0f       	add	r24, r24
    211a:	99 1f       	adc	r25, r25
    211c:	9c 01       	movw	r18, r24
    211e:	22 0f       	add	r18, r18
    2120:	33 1f       	adc	r19, r19
    2122:	22 0f       	add	r18, r18
    2124:	33 1f       	adc	r19, r19
    2126:	22 0f       	add	r18, r18
    2128:	33 1f       	adc	r19, r19
    212a:	82 0f       	add	r24, r18
    212c:	93 1f       	adc	r25, r19
    212e:	9c 01       	movw	r18, r24
    2130:	24 0f       	add	r18, r20
    2132:	35 1f       	adc	r19, r21
    2134:	88 85       	ldd	r24, Y+8	; 0x08
    2136:	99 85       	ldd	r25, Y+9	; 0x09
    2138:	fc 01       	movw	r30, r24
    213a:	e2 0f       	add	r30, r18
    213c:	f3 1f       	adc	r31, r19
    213e:	60 81       	ld	r22, Z
    2140:	8e 81       	ldd	r24, Y+6	; 0x06
    2142:	48 2f       	mov	r20, r24
    2144:	50 e0       	ldi	r21, 0x00	; 0
    2146:	ca 01       	movw	r24, r20
    2148:	88 0f       	add	r24, r24
    214a:	99 1f       	adc	r25, r25
    214c:	9c 01       	movw	r18, r24
    214e:	22 0f       	add	r18, r18
    2150:	33 1f       	adc	r19, r19
    2152:	22 0f       	add	r18, r18
    2154:	33 1f       	adc	r19, r19
    2156:	22 0f       	add	r18, r18
    2158:	33 1f       	adc	r19, r19
    215a:	82 0f       	add	r24, r18
    215c:	93 1f       	adc	r25, r19
    215e:	9c 01       	movw	r18, r24
    2160:	24 0f       	add	r18, r20
    2162:	35 1f       	adc	r19, r21
    2164:	88 85       	ldd	r24, Y+8	; 0x08
    2166:	99 85       	ldd	r25, Y+9	; 0x09
    2168:	fc 01       	movw	r30, r24
    216a:	e2 0f       	add	r30, r18
    216c:	f3 1f       	adc	r31, r19
    216e:	91 81       	ldd	r25, Z+1	; 0x01
    2170:	86 2f       	mov	r24, r22
    2172:	69 2f       	mov	r22, r25
    2174:	41 e0       	ldi	r20, 0x01	; 1
    2176:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    217a:	28 2f       	mov	r18, r24
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	40 e0       	ldi	r20, 0x00	; 0
    2180:	50 e0       	ldi	r21, 0x00	; 0
    2182:	89 81       	ldd	r24, Y+1	; 0x01
    2184:	9a 81       	ldd	r25, Y+2	; 0x02
    2186:	ab 81       	ldd	r26, Y+3	; 0x03
    2188:	bc 81       	ldd	r27, Y+4	; 0x04
    218a:	82 2b       	or	r24, r18
    218c:	93 2b       	or	r25, r19
    218e:	a4 2b       	or	r26, r20
    2190:	b5 2b       	or	r27, r21
    2192:	89 83       	std	Y+1, r24	; 0x01
    2194:	9a 83       	std	Y+2, r25	; 0x02
    2196:	ab 83       	std	Y+3, r26	; 0x03
    2198:	bc 83       	std	Y+4, r27	; 0x04
													  Copy_pstrSegConfig[Local_u8Iterator].SEG_u8APin, DIO_u8OUTPUT) << 0);

			Local_u32Check |= (DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8BPort,
    219a:	8e 81       	ldd	r24, Y+6	; 0x06
    219c:	48 2f       	mov	r20, r24
    219e:	50 e0       	ldi	r21, 0x00	; 0
    21a0:	ca 01       	movw	r24, r20
    21a2:	88 0f       	add	r24, r24
    21a4:	99 1f       	adc	r25, r25
    21a6:	9c 01       	movw	r18, r24
    21a8:	22 0f       	add	r18, r18
    21aa:	33 1f       	adc	r19, r19
    21ac:	22 0f       	add	r18, r18
    21ae:	33 1f       	adc	r19, r19
    21b0:	22 0f       	add	r18, r18
    21b2:	33 1f       	adc	r19, r19
    21b4:	82 0f       	add	r24, r18
    21b6:	93 1f       	adc	r25, r19
    21b8:	9c 01       	movw	r18, r24
    21ba:	24 0f       	add	r18, r20
    21bc:	35 1f       	adc	r19, r21
    21be:	88 85       	ldd	r24, Y+8	; 0x08
    21c0:	99 85       	ldd	r25, Y+9	; 0x09
    21c2:	fc 01       	movw	r30, r24
    21c4:	e2 0f       	add	r30, r18
    21c6:	f3 1f       	adc	r31, r19
    21c8:	62 81       	ldd	r22, Z+2	; 0x02
    21ca:	8e 81       	ldd	r24, Y+6	; 0x06
    21cc:	48 2f       	mov	r20, r24
    21ce:	50 e0       	ldi	r21, 0x00	; 0
    21d0:	ca 01       	movw	r24, r20
    21d2:	88 0f       	add	r24, r24
    21d4:	99 1f       	adc	r25, r25
    21d6:	9c 01       	movw	r18, r24
    21d8:	22 0f       	add	r18, r18
    21da:	33 1f       	adc	r19, r19
    21dc:	22 0f       	add	r18, r18
    21de:	33 1f       	adc	r19, r19
    21e0:	22 0f       	add	r18, r18
    21e2:	33 1f       	adc	r19, r19
    21e4:	82 0f       	add	r24, r18
    21e6:	93 1f       	adc	r25, r19
    21e8:	9c 01       	movw	r18, r24
    21ea:	24 0f       	add	r18, r20
    21ec:	35 1f       	adc	r19, r21
    21ee:	88 85       	ldd	r24, Y+8	; 0x08
    21f0:	99 85       	ldd	r25, Y+9	; 0x09
    21f2:	fc 01       	movw	r30, r24
    21f4:	e2 0f       	add	r30, r18
    21f6:	f3 1f       	adc	r31, r19
    21f8:	93 81       	ldd	r25, Z+3	; 0x03
    21fa:	86 2f       	mov	r24, r22
    21fc:	69 2f       	mov	r22, r25
    21fe:	41 e0       	ldi	r20, 0x01	; 1
    2200:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    2204:	88 2f       	mov	r24, r24
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	88 0f       	add	r24, r24
    220a:	99 1f       	adc	r25, r25
    220c:	88 0f       	add	r24, r24
    220e:	99 1f       	adc	r25, r25
    2210:	88 0f       	add	r24, r24
    2212:	99 1f       	adc	r25, r25
    2214:	9c 01       	movw	r18, r24
    2216:	44 27       	eor	r20, r20
    2218:	37 fd       	sbrc	r19, 7
    221a:	40 95       	com	r20
    221c:	54 2f       	mov	r21, r20
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	9a 81       	ldd	r25, Y+2	; 0x02
    2222:	ab 81       	ldd	r26, Y+3	; 0x03
    2224:	bc 81       	ldd	r27, Y+4	; 0x04
    2226:	82 2b       	or	r24, r18
    2228:	93 2b       	or	r25, r19
    222a:	a4 2b       	or	r26, r20
    222c:	b5 2b       	or	r27, r21
    222e:	89 83       	std	Y+1, r24	; 0x01
    2230:	9a 83       	std	Y+2, r25	; 0x02
    2232:	ab 83       	std	Y+3, r26	; 0x03
    2234:	bc 83       	std	Y+4, r27	; 0x04
													  Copy_pstrSegConfig[Local_u8Iterator].SEG_u8BPin, DIO_u8OUTPUT) << 3);

			Local_u32Check |= (DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8CPort,
    2236:	8e 81       	ldd	r24, Y+6	; 0x06
    2238:	48 2f       	mov	r20, r24
    223a:	50 e0       	ldi	r21, 0x00	; 0
    223c:	ca 01       	movw	r24, r20
    223e:	88 0f       	add	r24, r24
    2240:	99 1f       	adc	r25, r25
    2242:	9c 01       	movw	r18, r24
    2244:	22 0f       	add	r18, r18
    2246:	33 1f       	adc	r19, r19
    2248:	22 0f       	add	r18, r18
    224a:	33 1f       	adc	r19, r19
    224c:	22 0f       	add	r18, r18
    224e:	33 1f       	adc	r19, r19
    2250:	82 0f       	add	r24, r18
    2252:	93 1f       	adc	r25, r19
    2254:	9c 01       	movw	r18, r24
    2256:	24 0f       	add	r18, r20
    2258:	35 1f       	adc	r19, r21
    225a:	88 85       	ldd	r24, Y+8	; 0x08
    225c:	99 85       	ldd	r25, Y+9	; 0x09
    225e:	fc 01       	movw	r30, r24
    2260:	e2 0f       	add	r30, r18
    2262:	f3 1f       	adc	r31, r19
    2264:	64 81       	ldd	r22, Z+4	; 0x04
    2266:	8e 81       	ldd	r24, Y+6	; 0x06
    2268:	48 2f       	mov	r20, r24
    226a:	50 e0       	ldi	r21, 0x00	; 0
    226c:	ca 01       	movw	r24, r20
    226e:	88 0f       	add	r24, r24
    2270:	99 1f       	adc	r25, r25
    2272:	9c 01       	movw	r18, r24
    2274:	22 0f       	add	r18, r18
    2276:	33 1f       	adc	r19, r19
    2278:	22 0f       	add	r18, r18
    227a:	33 1f       	adc	r19, r19
    227c:	22 0f       	add	r18, r18
    227e:	33 1f       	adc	r19, r19
    2280:	82 0f       	add	r24, r18
    2282:	93 1f       	adc	r25, r19
    2284:	9c 01       	movw	r18, r24
    2286:	24 0f       	add	r18, r20
    2288:	35 1f       	adc	r19, r21
    228a:	88 85       	ldd	r24, Y+8	; 0x08
    228c:	99 85       	ldd	r25, Y+9	; 0x09
    228e:	fc 01       	movw	r30, r24
    2290:	e2 0f       	add	r30, r18
    2292:	f3 1f       	adc	r31, r19
    2294:	95 81       	ldd	r25, Z+5	; 0x05
    2296:	86 2f       	mov	r24, r22
    2298:	69 2f       	mov	r22, r25
    229a:	41 e0       	ldi	r20, 0x01	; 1
    229c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    22a0:	88 2f       	mov	r24, r24
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	00 24       	eor	r0, r0
    22a6:	96 95       	lsr	r25
    22a8:	87 95       	ror	r24
    22aa:	07 94       	ror	r0
    22ac:	96 95       	lsr	r25
    22ae:	87 95       	ror	r24
    22b0:	07 94       	ror	r0
    22b2:	98 2f       	mov	r25, r24
    22b4:	80 2d       	mov	r24, r0
    22b6:	9c 01       	movw	r18, r24
    22b8:	44 27       	eor	r20, r20
    22ba:	37 fd       	sbrc	r19, 7
    22bc:	40 95       	com	r20
    22be:	54 2f       	mov	r21, r20
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	9a 81       	ldd	r25, Y+2	; 0x02
    22c4:	ab 81       	ldd	r26, Y+3	; 0x03
    22c6:	bc 81       	ldd	r27, Y+4	; 0x04
    22c8:	82 2b       	or	r24, r18
    22ca:	93 2b       	or	r25, r19
    22cc:	a4 2b       	or	r26, r20
    22ce:	b5 2b       	or	r27, r21
    22d0:	89 83       	std	Y+1, r24	; 0x01
    22d2:	9a 83       	std	Y+2, r25	; 0x02
    22d4:	ab 83       	std	Y+3, r26	; 0x03
    22d6:	bc 83       	std	Y+4, r27	; 0x04
													  Copy_pstrSegConfig[Local_u8Iterator].SEG_u8CPin, DIO_u8OUTPUT) << 6);

			Local_u32Check |= (DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8DPort,
    22d8:	8e 81       	ldd	r24, Y+6	; 0x06
    22da:	48 2f       	mov	r20, r24
    22dc:	50 e0       	ldi	r21, 0x00	; 0
    22de:	ca 01       	movw	r24, r20
    22e0:	88 0f       	add	r24, r24
    22e2:	99 1f       	adc	r25, r25
    22e4:	9c 01       	movw	r18, r24
    22e6:	22 0f       	add	r18, r18
    22e8:	33 1f       	adc	r19, r19
    22ea:	22 0f       	add	r18, r18
    22ec:	33 1f       	adc	r19, r19
    22ee:	22 0f       	add	r18, r18
    22f0:	33 1f       	adc	r19, r19
    22f2:	82 0f       	add	r24, r18
    22f4:	93 1f       	adc	r25, r19
    22f6:	9c 01       	movw	r18, r24
    22f8:	24 0f       	add	r18, r20
    22fa:	35 1f       	adc	r19, r21
    22fc:	88 85       	ldd	r24, Y+8	; 0x08
    22fe:	99 85       	ldd	r25, Y+9	; 0x09
    2300:	fc 01       	movw	r30, r24
    2302:	e2 0f       	add	r30, r18
    2304:	f3 1f       	adc	r31, r19
    2306:	66 81       	ldd	r22, Z+6	; 0x06
    2308:	8e 81       	ldd	r24, Y+6	; 0x06
    230a:	48 2f       	mov	r20, r24
    230c:	50 e0       	ldi	r21, 0x00	; 0
    230e:	ca 01       	movw	r24, r20
    2310:	88 0f       	add	r24, r24
    2312:	99 1f       	adc	r25, r25
    2314:	9c 01       	movw	r18, r24
    2316:	22 0f       	add	r18, r18
    2318:	33 1f       	adc	r19, r19
    231a:	22 0f       	add	r18, r18
    231c:	33 1f       	adc	r19, r19
    231e:	22 0f       	add	r18, r18
    2320:	33 1f       	adc	r19, r19
    2322:	82 0f       	add	r24, r18
    2324:	93 1f       	adc	r25, r19
    2326:	9c 01       	movw	r18, r24
    2328:	24 0f       	add	r18, r20
    232a:	35 1f       	adc	r19, r21
    232c:	88 85       	ldd	r24, Y+8	; 0x08
    232e:	99 85       	ldd	r25, Y+9	; 0x09
    2330:	fc 01       	movw	r30, r24
    2332:	e2 0f       	add	r30, r18
    2334:	f3 1f       	adc	r31, r19
    2336:	97 81       	ldd	r25, Z+7	; 0x07
    2338:	86 2f       	mov	r24, r22
    233a:	69 2f       	mov	r22, r25
    233c:	41 e0       	ldi	r20, 0x01	; 1
    233e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    2342:	88 2f       	mov	r24, r24
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	98 2f       	mov	r25, r24
    2348:	88 27       	eor	r24, r24
    234a:	99 0f       	add	r25, r25
    234c:	9c 01       	movw	r18, r24
    234e:	44 27       	eor	r20, r20
    2350:	37 fd       	sbrc	r19, 7
    2352:	40 95       	com	r20
    2354:	54 2f       	mov	r21, r20
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	9a 81       	ldd	r25, Y+2	; 0x02
    235a:	ab 81       	ldd	r26, Y+3	; 0x03
    235c:	bc 81       	ldd	r27, Y+4	; 0x04
    235e:	82 2b       	or	r24, r18
    2360:	93 2b       	or	r25, r19
    2362:	a4 2b       	or	r26, r20
    2364:	b5 2b       	or	r27, r21
    2366:	89 83       	std	Y+1, r24	; 0x01
    2368:	9a 83       	std	Y+2, r25	; 0x02
    236a:	ab 83       	std	Y+3, r26	; 0x03
    236c:	bc 83       	std	Y+4, r27	; 0x04
													  Copy_pstrSegConfig[Local_u8Iterator].SEG_u8DPin, DIO_u8OUTPUT) << 9);

			Local_u32Check |= (DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8EPort,
    236e:	8e 81       	ldd	r24, Y+6	; 0x06
    2370:	48 2f       	mov	r20, r24
    2372:	50 e0       	ldi	r21, 0x00	; 0
    2374:	ca 01       	movw	r24, r20
    2376:	88 0f       	add	r24, r24
    2378:	99 1f       	adc	r25, r25
    237a:	9c 01       	movw	r18, r24
    237c:	22 0f       	add	r18, r18
    237e:	33 1f       	adc	r19, r19
    2380:	22 0f       	add	r18, r18
    2382:	33 1f       	adc	r19, r19
    2384:	22 0f       	add	r18, r18
    2386:	33 1f       	adc	r19, r19
    2388:	82 0f       	add	r24, r18
    238a:	93 1f       	adc	r25, r19
    238c:	9c 01       	movw	r18, r24
    238e:	24 0f       	add	r18, r20
    2390:	35 1f       	adc	r19, r21
    2392:	88 85       	ldd	r24, Y+8	; 0x08
    2394:	99 85       	ldd	r25, Y+9	; 0x09
    2396:	fc 01       	movw	r30, r24
    2398:	e2 0f       	add	r30, r18
    239a:	f3 1f       	adc	r31, r19
    239c:	60 85       	ldd	r22, Z+8	; 0x08
    239e:	8e 81       	ldd	r24, Y+6	; 0x06
    23a0:	48 2f       	mov	r20, r24
    23a2:	50 e0       	ldi	r21, 0x00	; 0
    23a4:	ca 01       	movw	r24, r20
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	9c 01       	movw	r18, r24
    23ac:	22 0f       	add	r18, r18
    23ae:	33 1f       	adc	r19, r19
    23b0:	22 0f       	add	r18, r18
    23b2:	33 1f       	adc	r19, r19
    23b4:	22 0f       	add	r18, r18
    23b6:	33 1f       	adc	r19, r19
    23b8:	82 0f       	add	r24, r18
    23ba:	93 1f       	adc	r25, r19
    23bc:	9c 01       	movw	r18, r24
    23be:	24 0f       	add	r18, r20
    23c0:	35 1f       	adc	r19, r21
    23c2:	88 85       	ldd	r24, Y+8	; 0x08
    23c4:	99 85       	ldd	r25, Y+9	; 0x09
    23c6:	fc 01       	movw	r30, r24
    23c8:	e2 0f       	add	r30, r18
    23ca:	f3 1f       	adc	r31, r19
    23cc:	91 85       	ldd	r25, Z+9	; 0x09
    23ce:	86 2f       	mov	r24, r22
    23d0:	69 2f       	mov	r22, r25
    23d2:	41 e0       	ldi	r20, 0x01	; 1
    23d4:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    23d8:	88 2f       	mov	r24, r24
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	98 2f       	mov	r25, r24
    23de:	88 27       	eor	r24, r24
    23e0:	92 95       	swap	r25
    23e2:	90 7f       	andi	r25, 0xF0	; 240
    23e4:	9c 01       	movw	r18, r24
    23e6:	44 27       	eor	r20, r20
    23e8:	37 fd       	sbrc	r19, 7
    23ea:	40 95       	com	r20
    23ec:	54 2f       	mov	r21, r20
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
    23f0:	9a 81       	ldd	r25, Y+2	; 0x02
    23f2:	ab 81       	ldd	r26, Y+3	; 0x03
    23f4:	bc 81       	ldd	r27, Y+4	; 0x04
    23f6:	82 2b       	or	r24, r18
    23f8:	93 2b       	or	r25, r19
    23fa:	a4 2b       	or	r26, r20
    23fc:	b5 2b       	or	r27, r21
    23fe:	89 83       	std	Y+1, r24	; 0x01
    2400:	9a 83       	std	Y+2, r25	; 0x02
    2402:	ab 83       	std	Y+3, r26	; 0x03
    2404:	bc 83       	std	Y+4, r27	; 0x04
													  Copy_pstrSegConfig[Local_u8Iterator].SEG_u8EPin, DIO_u8OUTPUT) << 12);

			Local_u32Check |= (((u32)DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8FPort,
    2406:	8e 81       	ldd	r24, Y+6	; 0x06
    2408:	48 2f       	mov	r20, r24
    240a:	50 e0       	ldi	r21, 0x00	; 0
    240c:	ca 01       	movw	r24, r20
    240e:	88 0f       	add	r24, r24
    2410:	99 1f       	adc	r25, r25
    2412:	9c 01       	movw	r18, r24
    2414:	22 0f       	add	r18, r18
    2416:	33 1f       	adc	r19, r19
    2418:	22 0f       	add	r18, r18
    241a:	33 1f       	adc	r19, r19
    241c:	22 0f       	add	r18, r18
    241e:	33 1f       	adc	r19, r19
    2420:	82 0f       	add	r24, r18
    2422:	93 1f       	adc	r25, r19
    2424:	9c 01       	movw	r18, r24
    2426:	24 0f       	add	r18, r20
    2428:	35 1f       	adc	r19, r21
    242a:	88 85       	ldd	r24, Y+8	; 0x08
    242c:	99 85       	ldd	r25, Y+9	; 0x09
    242e:	fc 01       	movw	r30, r24
    2430:	e2 0f       	add	r30, r18
    2432:	f3 1f       	adc	r31, r19
    2434:	62 85       	ldd	r22, Z+10	; 0x0a
    2436:	8e 81       	ldd	r24, Y+6	; 0x06
    2438:	48 2f       	mov	r20, r24
    243a:	50 e0       	ldi	r21, 0x00	; 0
    243c:	ca 01       	movw	r24, r20
    243e:	88 0f       	add	r24, r24
    2440:	99 1f       	adc	r25, r25
    2442:	9c 01       	movw	r18, r24
    2444:	22 0f       	add	r18, r18
    2446:	33 1f       	adc	r19, r19
    2448:	22 0f       	add	r18, r18
    244a:	33 1f       	adc	r19, r19
    244c:	22 0f       	add	r18, r18
    244e:	33 1f       	adc	r19, r19
    2450:	82 0f       	add	r24, r18
    2452:	93 1f       	adc	r25, r19
    2454:	9c 01       	movw	r18, r24
    2456:	24 0f       	add	r18, r20
    2458:	35 1f       	adc	r19, r21
    245a:	88 85       	ldd	r24, Y+8	; 0x08
    245c:	99 85       	ldd	r25, Y+9	; 0x09
    245e:	fc 01       	movw	r30, r24
    2460:	e2 0f       	add	r30, r18
    2462:	f3 1f       	adc	r31, r19
    2464:	93 85       	ldd	r25, Z+11	; 0x0b
    2466:	86 2f       	mov	r24, r22
    2468:	69 2f       	mov	r22, r25
    246a:	41 e0       	ldi	r20, 0x01	; 1
    246c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    2470:	88 2f       	mov	r24, r24
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	a0 e0       	ldi	r26, 0x00	; 0
    2476:	b0 e0       	ldi	r27, 0x00	; 0
    2478:	9c 01       	movw	r18, r24
    247a:	ad 01       	movw	r20, r26
    247c:	01 2e       	mov	r0, r17
    247e:	1f e0       	ldi	r17, 0x0F	; 15
    2480:	22 0f       	add	r18, r18
    2482:	33 1f       	adc	r19, r19
    2484:	44 1f       	adc	r20, r20
    2486:	55 1f       	adc	r21, r21
    2488:	1a 95       	dec	r17
    248a:	d1 f7       	brne	.-12     	; 0x2480 <SSDLT_enuInit+0x3a4>
    248c:	10 2d       	mov	r17, r0
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	9a 81       	ldd	r25, Y+2	; 0x02
    2492:	ab 81       	ldd	r26, Y+3	; 0x03
    2494:	bc 81       	ldd	r27, Y+4	; 0x04
    2496:	82 2b       	or	r24, r18
    2498:	93 2b       	or	r25, r19
    249a:	a4 2b       	or	r26, r20
    249c:	b5 2b       	or	r27, r21
    249e:	89 83       	std	Y+1, r24	; 0x01
    24a0:	9a 83       	std	Y+2, r25	; 0x02
    24a2:	ab 83       	std	Y+3, r26	; 0x03
    24a4:	bc 83       	std	Y+4, r27	; 0x04
													 Copy_pstrSegConfig[Local_u8Iterator].SEG_u8FPin, DIO_u8OUTPUT)) << 15);

			Local_u32Check |= (((u32)DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8GPort,
    24a6:	8e 81       	ldd	r24, Y+6	; 0x06
    24a8:	48 2f       	mov	r20, r24
    24aa:	50 e0       	ldi	r21, 0x00	; 0
    24ac:	ca 01       	movw	r24, r20
    24ae:	88 0f       	add	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	9c 01       	movw	r18, r24
    24b4:	22 0f       	add	r18, r18
    24b6:	33 1f       	adc	r19, r19
    24b8:	22 0f       	add	r18, r18
    24ba:	33 1f       	adc	r19, r19
    24bc:	22 0f       	add	r18, r18
    24be:	33 1f       	adc	r19, r19
    24c0:	82 0f       	add	r24, r18
    24c2:	93 1f       	adc	r25, r19
    24c4:	9c 01       	movw	r18, r24
    24c6:	24 0f       	add	r18, r20
    24c8:	35 1f       	adc	r19, r21
    24ca:	88 85       	ldd	r24, Y+8	; 0x08
    24cc:	99 85       	ldd	r25, Y+9	; 0x09
    24ce:	fc 01       	movw	r30, r24
    24d0:	e2 0f       	add	r30, r18
    24d2:	f3 1f       	adc	r31, r19
    24d4:	64 85       	ldd	r22, Z+12	; 0x0c
    24d6:	8e 81       	ldd	r24, Y+6	; 0x06
    24d8:	48 2f       	mov	r20, r24
    24da:	50 e0       	ldi	r21, 0x00	; 0
    24dc:	ca 01       	movw	r24, r20
    24de:	88 0f       	add	r24, r24
    24e0:	99 1f       	adc	r25, r25
    24e2:	9c 01       	movw	r18, r24
    24e4:	22 0f       	add	r18, r18
    24e6:	33 1f       	adc	r19, r19
    24e8:	22 0f       	add	r18, r18
    24ea:	33 1f       	adc	r19, r19
    24ec:	22 0f       	add	r18, r18
    24ee:	33 1f       	adc	r19, r19
    24f0:	82 0f       	add	r24, r18
    24f2:	93 1f       	adc	r25, r19
    24f4:	9c 01       	movw	r18, r24
    24f6:	24 0f       	add	r18, r20
    24f8:	35 1f       	adc	r19, r21
    24fa:	88 85       	ldd	r24, Y+8	; 0x08
    24fc:	99 85       	ldd	r25, Y+9	; 0x09
    24fe:	fc 01       	movw	r30, r24
    2500:	e2 0f       	add	r30, r18
    2502:	f3 1f       	adc	r31, r19
    2504:	95 85       	ldd	r25, Z+13	; 0x0d
    2506:	86 2f       	mov	r24, r22
    2508:	69 2f       	mov	r22, r25
    250a:	41 e0       	ldi	r20, 0x01	; 1
    250c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    2510:	88 2f       	mov	r24, r24
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	a0 e0       	ldi	r26, 0x00	; 0
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	9c 01       	movw	r18, r24
    251a:	ad 01       	movw	r20, r26
    251c:	01 2e       	mov	r0, r17
    251e:	12 e1       	ldi	r17, 0x12	; 18
    2520:	22 0f       	add	r18, r18
    2522:	33 1f       	adc	r19, r19
    2524:	44 1f       	adc	r20, r20
    2526:	55 1f       	adc	r21, r21
    2528:	1a 95       	dec	r17
    252a:	d1 f7       	brne	.-12     	; 0x2520 <SSDLT_enuInit+0x444>
    252c:	10 2d       	mov	r17, r0
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	9a 81       	ldd	r25, Y+2	; 0x02
    2532:	ab 81       	ldd	r26, Y+3	; 0x03
    2534:	bc 81       	ldd	r27, Y+4	; 0x04
    2536:	82 2b       	or	r24, r18
    2538:	93 2b       	or	r25, r19
    253a:	a4 2b       	or	r26, r20
    253c:	b5 2b       	or	r27, r21
    253e:	89 83       	std	Y+1, r24	; 0x01
    2540:	9a 83       	std	Y+2, r25	; 0x02
    2542:	ab 83       	std	Y+3, r26	; 0x03
    2544:	bc 83       	std	Y+4, r27	; 0x04
													 Copy_pstrSegConfig[Local_u8Iterator].SEG_u8GPin, DIO_u8OUTPUT)) << 18);
			Local_u8LastBit = 21;
    2546:	85 e1       	ldi	r24, 0x15	; 21
    2548:	8d 83       	std	Y+5, r24	; 0x05

			if(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8CMN_Port != NOT_CONNECTED ||
    254a:	8e 81       	ldd	r24, Y+6	; 0x06
    254c:	48 2f       	mov	r20, r24
    254e:	50 e0       	ldi	r21, 0x00	; 0
    2550:	ca 01       	movw	r24, r20
    2552:	88 0f       	add	r24, r24
    2554:	99 1f       	adc	r25, r25
    2556:	9c 01       	movw	r18, r24
    2558:	22 0f       	add	r18, r18
    255a:	33 1f       	adc	r19, r19
    255c:	22 0f       	add	r18, r18
    255e:	33 1f       	adc	r19, r19
    2560:	22 0f       	add	r18, r18
    2562:	33 1f       	adc	r19, r19
    2564:	82 0f       	add	r24, r18
    2566:	93 1f       	adc	r25, r19
    2568:	9c 01       	movw	r18, r24
    256a:	24 0f       	add	r18, r20
    256c:	35 1f       	adc	r19, r21
    256e:	88 85       	ldd	r24, Y+8	; 0x08
    2570:	99 85       	ldd	r25, Y+9	; 0x09
    2572:	fc 01       	movw	r30, r24
    2574:	e2 0f       	add	r30, r18
    2576:	f3 1f       	adc	r31, r19
    2578:	86 85       	ldd	r24, Z+14	; 0x0e
    257a:	82 30       	cpi	r24, 0x02	; 2
    257c:	d9 f4       	brne	.+54     	; 0x25b4 <SSDLT_enuInit+0x4d8>
    257e:	8e 81       	ldd	r24, Y+6	; 0x06
    2580:	48 2f       	mov	r20, r24
    2582:	50 e0       	ldi	r21, 0x00	; 0
    2584:	ca 01       	movw	r24, r20
    2586:	88 0f       	add	r24, r24
    2588:	99 1f       	adc	r25, r25
    258a:	9c 01       	movw	r18, r24
    258c:	22 0f       	add	r18, r18
    258e:	33 1f       	adc	r19, r19
    2590:	22 0f       	add	r18, r18
    2592:	33 1f       	adc	r19, r19
    2594:	22 0f       	add	r18, r18
    2596:	33 1f       	adc	r19, r19
    2598:	82 0f       	add	r24, r18
    259a:	93 1f       	adc	r25, r19
    259c:	9c 01       	movw	r18, r24
    259e:	24 0f       	add	r18, r20
    25a0:	35 1f       	adc	r19, r21
    25a2:	88 85       	ldd	r24, Y+8	; 0x08
    25a4:	99 85       	ldd	r25, Y+9	; 0x09
    25a6:	fc 01       	movw	r30, r24
    25a8:	e2 0f       	add	r30, r18
    25aa:	f3 1f       	adc	r31, r19
    25ac:	87 85       	ldd	r24, Z+15	; 0x0f
    25ae:	82 30       	cpi	r24, 0x02	; 2
    25b0:	09 f4       	brne	.+2      	; 0x25b4 <SSDLT_enuInit+0x4d8>
    25b2:	52 c0       	rjmp	.+164    	; 0x2658 <SSDLT_enuInit+0x57c>
			   Copy_pstrSegConfig[Local_u8Iterator].SEG_u8CMN_Pin != NOT_CONNECTED)
			{
				Local_u32Check |= (((u32)DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8CMN_Port,
    25b4:	8e 81       	ldd	r24, Y+6	; 0x06
    25b6:	48 2f       	mov	r20, r24
    25b8:	50 e0       	ldi	r21, 0x00	; 0
    25ba:	ca 01       	movw	r24, r20
    25bc:	88 0f       	add	r24, r24
    25be:	99 1f       	adc	r25, r25
    25c0:	9c 01       	movw	r18, r24
    25c2:	22 0f       	add	r18, r18
    25c4:	33 1f       	adc	r19, r19
    25c6:	22 0f       	add	r18, r18
    25c8:	33 1f       	adc	r19, r19
    25ca:	22 0f       	add	r18, r18
    25cc:	33 1f       	adc	r19, r19
    25ce:	82 0f       	add	r24, r18
    25d0:	93 1f       	adc	r25, r19
    25d2:	9c 01       	movw	r18, r24
    25d4:	24 0f       	add	r18, r20
    25d6:	35 1f       	adc	r19, r21
    25d8:	88 85       	ldd	r24, Y+8	; 0x08
    25da:	99 85       	ldd	r25, Y+9	; 0x09
    25dc:	fc 01       	movw	r30, r24
    25de:	e2 0f       	add	r30, r18
    25e0:	f3 1f       	adc	r31, r19
    25e2:	66 85       	ldd	r22, Z+14	; 0x0e
    25e4:	8e 81       	ldd	r24, Y+6	; 0x06
    25e6:	48 2f       	mov	r20, r24
    25e8:	50 e0       	ldi	r21, 0x00	; 0
    25ea:	ca 01       	movw	r24, r20
    25ec:	88 0f       	add	r24, r24
    25ee:	99 1f       	adc	r25, r25
    25f0:	9c 01       	movw	r18, r24
    25f2:	22 0f       	add	r18, r18
    25f4:	33 1f       	adc	r19, r19
    25f6:	22 0f       	add	r18, r18
    25f8:	33 1f       	adc	r19, r19
    25fa:	22 0f       	add	r18, r18
    25fc:	33 1f       	adc	r19, r19
    25fe:	82 0f       	add	r24, r18
    2600:	93 1f       	adc	r25, r19
    2602:	9c 01       	movw	r18, r24
    2604:	24 0f       	add	r18, r20
    2606:	35 1f       	adc	r19, r21
    2608:	88 85       	ldd	r24, Y+8	; 0x08
    260a:	99 85       	ldd	r25, Y+9	; 0x09
    260c:	fc 01       	movw	r30, r24
    260e:	e2 0f       	add	r30, r18
    2610:	f3 1f       	adc	r31, r19
    2612:	97 85       	ldd	r25, Z+15	; 0x0f
    2614:	86 2f       	mov	r24, r22
    2616:	69 2f       	mov	r22, r25
    2618:	41 e0       	ldi	r20, 0x01	; 1
    261a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    261e:	28 2f       	mov	r18, r24
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e0       	ldi	r20, 0x00	; 0
    2624:	50 e0       	ldi	r21, 0x00	; 0
    2626:	8d 81       	ldd	r24, Y+5	; 0x05
    2628:	88 2f       	mov	r24, r24
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	04 c0       	rjmp	.+8      	; 0x2636 <SSDLT_enuInit+0x55a>
    262e:	22 0f       	add	r18, r18
    2630:	33 1f       	adc	r19, r19
    2632:	44 1f       	adc	r20, r20
    2634:	55 1f       	adc	r21, r21
    2636:	8a 95       	dec	r24
    2638:	d2 f7       	brpl	.-12     	; 0x262e <SSDLT_enuInit+0x552>
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	9a 81       	ldd	r25, Y+2	; 0x02
    263e:	ab 81       	ldd	r26, Y+3	; 0x03
    2640:	bc 81       	ldd	r27, Y+4	; 0x04
    2642:	82 2b       	or	r24, r18
    2644:	93 2b       	or	r25, r19
    2646:	a4 2b       	or	r26, r20
    2648:	b5 2b       	or	r27, r21
    264a:	89 83       	std	Y+1, r24	; 0x01
    264c:	9a 83       	std	Y+2, r25	; 0x02
    264e:	ab 83       	std	Y+3, r26	; 0x03
    2650:	bc 83       	std	Y+4, r27	; 0x04
												   Copy_pstrSegConfig[Local_u8Iterator].SEG_u8CMN_Pin, DIO_u8OUTPUT) << Local_u8LastBit));
				Local_u8LastBit += 3;
    2652:	8d 81       	ldd	r24, Y+5	; 0x05
    2654:	8d 5f       	subi	r24, 0xFD	; 253
    2656:	8d 83       	std	Y+5, r24	; 0x05
			}

			if(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8DOT_Port != NOT_CONNECTED ||
    2658:	8e 81       	ldd	r24, Y+6	; 0x06
    265a:	48 2f       	mov	r20, r24
    265c:	50 e0       	ldi	r21, 0x00	; 0
    265e:	ca 01       	movw	r24, r20
    2660:	88 0f       	add	r24, r24
    2662:	99 1f       	adc	r25, r25
    2664:	9c 01       	movw	r18, r24
    2666:	22 0f       	add	r18, r18
    2668:	33 1f       	adc	r19, r19
    266a:	22 0f       	add	r18, r18
    266c:	33 1f       	adc	r19, r19
    266e:	22 0f       	add	r18, r18
    2670:	33 1f       	adc	r19, r19
    2672:	82 0f       	add	r24, r18
    2674:	93 1f       	adc	r25, r19
    2676:	9c 01       	movw	r18, r24
    2678:	24 0f       	add	r18, r20
    267a:	35 1f       	adc	r19, r21
    267c:	88 85       	ldd	r24, Y+8	; 0x08
    267e:	99 85       	ldd	r25, Y+9	; 0x09
    2680:	fc 01       	movw	r30, r24
    2682:	e2 0f       	add	r30, r18
    2684:	f3 1f       	adc	r31, r19
    2686:	80 89       	ldd	r24, Z+16	; 0x10
    2688:	82 30       	cpi	r24, 0x02	; 2
    268a:	d9 f4       	brne	.+54     	; 0x26c2 <SSDLT_enuInit+0x5e6>
    268c:	8e 81       	ldd	r24, Y+6	; 0x06
    268e:	48 2f       	mov	r20, r24
    2690:	50 e0       	ldi	r21, 0x00	; 0
    2692:	ca 01       	movw	r24, r20
    2694:	88 0f       	add	r24, r24
    2696:	99 1f       	adc	r25, r25
    2698:	9c 01       	movw	r18, r24
    269a:	22 0f       	add	r18, r18
    269c:	33 1f       	adc	r19, r19
    269e:	22 0f       	add	r18, r18
    26a0:	33 1f       	adc	r19, r19
    26a2:	22 0f       	add	r18, r18
    26a4:	33 1f       	adc	r19, r19
    26a6:	82 0f       	add	r24, r18
    26a8:	93 1f       	adc	r25, r19
    26aa:	9c 01       	movw	r18, r24
    26ac:	24 0f       	add	r18, r20
    26ae:	35 1f       	adc	r19, r21
    26b0:	88 85       	ldd	r24, Y+8	; 0x08
    26b2:	99 85       	ldd	r25, Y+9	; 0x09
    26b4:	fc 01       	movw	r30, r24
    26b6:	e2 0f       	add	r30, r18
    26b8:	f3 1f       	adc	r31, r19
    26ba:	81 89       	ldd	r24, Z+17	; 0x11
    26bc:	82 30       	cpi	r24, 0x02	; 2
    26be:	09 f4       	brne	.+2      	; 0x26c2 <SSDLT_enuInit+0x5e6>
    26c0:	52 c0       	rjmp	.+164    	; 0x2766 <SSDLT_enuInit+0x68a>
			   Copy_pstrSegConfig[Local_u8Iterator].SEG_u8DOT_Pin != NOT_CONNECTED)
			{
				Local_u32Check |= (((u32)DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8DOT_Port,
    26c2:	8e 81       	ldd	r24, Y+6	; 0x06
    26c4:	48 2f       	mov	r20, r24
    26c6:	50 e0       	ldi	r21, 0x00	; 0
    26c8:	ca 01       	movw	r24, r20
    26ca:	88 0f       	add	r24, r24
    26cc:	99 1f       	adc	r25, r25
    26ce:	9c 01       	movw	r18, r24
    26d0:	22 0f       	add	r18, r18
    26d2:	33 1f       	adc	r19, r19
    26d4:	22 0f       	add	r18, r18
    26d6:	33 1f       	adc	r19, r19
    26d8:	22 0f       	add	r18, r18
    26da:	33 1f       	adc	r19, r19
    26dc:	82 0f       	add	r24, r18
    26de:	93 1f       	adc	r25, r19
    26e0:	9c 01       	movw	r18, r24
    26e2:	24 0f       	add	r18, r20
    26e4:	35 1f       	adc	r19, r21
    26e6:	88 85       	ldd	r24, Y+8	; 0x08
    26e8:	99 85       	ldd	r25, Y+9	; 0x09
    26ea:	fc 01       	movw	r30, r24
    26ec:	e2 0f       	add	r30, r18
    26ee:	f3 1f       	adc	r31, r19
    26f0:	60 89       	ldd	r22, Z+16	; 0x10
    26f2:	8e 81       	ldd	r24, Y+6	; 0x06
    26f4:	48 2f       	mov	r20, r24
    26f6:	50 e0       	ldi	r21, 0x00	; 0
    26f8:	ca 01       	movw	r24, r20
    26fa:	88 0f       	add	r24, r24
    26fc:	99 1f       	adc	r25, r25
    26fe:	9c 01       	movw	r18, r24
    2700:	22 0f       	add	r18, r18
    2702:	33 1f       	adc	r19, r19
    2704:	22 0f       	add	r18, r18
    2706:	33 1f       	adc	r19, r19
    2708:	22 0f       	add	r18, r18
    270a:	33 1f       	adc	r19, r19
    270c:	82 0f       	add	r24, r18
    270e:	93 1f       	adc	r25, r19
    2710:	9c 01       	movw	r18, r24
    2712:	24 0f       	add	r18, r20
    2714:	35 1f       	adc	r19, r21
    2716:	88 85       	ldd	r24, Y+8	; 0x08
    2718:	99 85       	ldd	r25, Y+9	; 0x09
    271a:	fc 01       	movw	r30, r24
    271c:	e2 0f       	add	r30, r18
    271e:	f3 1f       	adc	r31, r19
    2720:	91 89       	ldd	r25, Z+17	; 0x11
    2722:	86 2f       	mov	r24, r22
    2724:	69 2f       	mov	r22, r25
    2726:	41 e0       	ldi	r20, 0x01	; 1
    2728:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    272c:	28 2f       	mov	r18, r24
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	40 e0       	ldi	r20, 0x00	; 0
    2732:	50 e0       	ldi	r21, 0x00	; 0
    2734:	8d 81       	ldd	r24, Y+5	; 0x05
    2736:	88 2f       	mov	r24, r24
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	04 c0       	rjmp	.+8      	; 0x2744 <SSDLT_enuInit+0x668>
    273c:	22 0f       	add	r18, r18
    273e:	33 1f       	adc	r19, r19
    2740:	44 1f       	adc	r20, r20
    2742:	55 1f       	adc	r21, r21
    2744:	8a 95       	dec	r24
    2746:	d2 f7       	brpl	.-12     	; 0x273c <SSDLT_enuInit+0x660>
    2748:	89 81       	ldd	r24, Y+1	; 0x01
    274a:	9a 81       	ldd	r25, Y+2	; 0x02
    274c:	ab 81       	ldd	r26, Y+3	; 0x03
    274e:	bc 81       	ldd	r27, Y+4	; 0x04
    2750:	82 2b       	or	r24, r18
    2752:	93 2b       	or	r25, r19
    2754:	a4 2b       	or	r26, r20
    2756:	b5 2b       	or	r27, r21
    2758:	89 83       	std	Y+1, r24	; 0x01
    275a:	9a 83       	std	Y+2, r25	; 0x02
    275c:	ab 83       	std	Y+3, r26	; 0x03
    275e:	bc 83       	std	Y+4, r27	; 0x04
												   Copy_pstrSegConfig[Local_u8Iterator].SEG_u8DOT_Pin, DIO_u8OUTPUT) << Local_u8LastBit));
				Local_u8LastBit += 3;
    2760:	8d 81       	ldd	r24, Y+5	; 0x05
    2762:	8d 5f       	subi	r24, 0xFD	; 253
    2764:	8d 83       	std	Y+5, r24	; 0x05
	u8 Local_u8LastBit  = 0;
	u32 Local_u32Check  = 0;

	if(Copy_pstrSegConfig != NULL)
	{
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
    2766:	8e 81       	ldd	r24, Y+6	; 0x06
    2768:	8f 5f       	subi	r24, 0xFF	; 255
    276a:	8e 83       	std	Y+6, r24	; 0x06
    276c:	8e 81       	ldd	r24, Y+6	; 0x06
    276e:	82 30       	cpi	r24, 0x02	; 2
    2770:	08 f4       	brcc	.+2      	; 0x2774 <SSDLT_enuInit+0x698>
    2772:	ce cc       	rjmp	.-1636   	; 0x2110 <SSDLT_enuInit+0x34>
    2774:	02 c0       	rjmp	.+4      	; 0x277a <SSDLT_enuInit+0x69e>

		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2776:	82 e0       	ldi	r24, 0x02	; 2
    2778:	8f 83       	std	Y+7, r24	; 0x07
	}


	for(Local_u8Iterator = 0; Local_u8Iterator < Local_u8LastBit; Local_u8Iterator += 3)
    277a:	1e 82       	std	Y+6, r1	; 0x06
    277c:	1e c0       	rjmp	.+60     	; 0x27ba <SSDLT_enuInit+0x6de>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
    277e:	8e 81       	ldd	r24, Y+6	; 0x06
    2780:	28 2f       	mov	r18, r24
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	9a 81       	ldd	r25, Y+2	; 0x02
    2788:	ab 81       	ldd	r26, Y+3	; 0x03
    278a:	bc 81       	ldd	r27, Y+4	; 0x04
    278c:	02 2e       	mov	r0, r18
    278e:	04 c0       	rjmp	.+8      	; 0x2798 <SSDLT_enuInit+0x6bc>
    2790:	b6 95       	lsr	r27
    2792:	a7 95       	ror	r26
    2794:	97 95       	ror	r25
    2796:	87 95       	ror	r24
    2798:	0a 94       	dec	r0
    279a:	d2 f7       	brpl	.-12     	; 0x2790 <SSDLT_enuInit+0x6b4>
    279c:	87 70       	andi	r24, 0x07	; 7
    279e:	90 70       	andi	r25, 0x00	; 0
    27a0:	a0 70       	andi	r26, 0x00	; 0
    27a2:	b0 70       	andi	r27, 0x00	; 0
    27a4:	81 30       	cpi	r24, 0x01	; 1
    27a6:	91 05       	cpc	r25, r1
    27a8:	a1 05       	cpc	r26, r1
    27aa:	b1 05       	cpc	r27, r1
    27ac:	19 f0       	breq	.+6      	; 0x27b4 <SSDLT_enuInit+0x6d8>
		{
			return Local_enuErrorState;
    27ae:	8f 81       	ldd	r24, Y+7	; 0x07
    27b0:	8a 87       	std	Y+10, r24	; 0x0a
    27b2:	0b c0       	rjmp	.+22     	; 0x27ca <SSDLT_enuInit+0x6ee>
	{
		Local_enuErrorState = ES_NULL_POINTER;
	}


	for(Local_u8Iterator = 0; Local_u8Iterator < Local_u8LastBit; Local_u8Iterator += 3)
    27b4:	8e 81       	ldd	r24, Y+6	; 0x06
    27b6:	8d 5f       	subi	r24, 0xFD	; 253
    27b8:	8e 83       	std	Y+6, r24	; 0x06
    27ba:	9e 81       	ldd	r25, Y+6	; 0x06
    27bc:	8d 81       	ldd	r24, Y+5	; 0x05
    27be:	98 17       	cp	r25, r24
    27c0:	f0 f2       	brcs	.-68     	; 0x277e <SSDLT_enuInit+0x6a2>
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
		{
			return Local_enuErrorState;
		}
	}
	Local_enuErrorState = ES_OK;
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	8f 83       	std	Y+7, r24	; 0x07

	return Local_enuErrorState;
    27c6:	8f 81       	ldd	r24, Y+7	; 0x07
    27c8:	8a 87       	std	Y+10, r24	; 0x0a
    27ca:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    27cc:	2a 96       	adiw	r28, 0x0a	; 10
    27ce:	0f b6       	in	r0, 0x3f	; 63
    27d0:	f8 94       	cli
    27d2:	de bf       	out	0x3e, r29	; 62
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	cd bf       	out	0x3d, r28	; 61
    27d8:	cf 91       	pop	r28
    27da:	df 91       	pop	r29
    27dc:	08 95       	ret

000027de <SSDLT_enuDisplayNum>:

ES_t SSDLT_enuDisplayNum(u8 Copy_u8SegID, u8 Copy_u8Number)
{
    27de:	df 93       	push	r29
    27e0:	cf 93       	push	r28
    27e2:	cd b7       	in	r28, 0x3d	; 61
    27e4:	de b7       	in	r29, 0x3e	; 62
    27e6:	6e 97       	sbiw	r28, 0x1e	; 30
    27e8:	0f b6       	in	r0, 0x3f	; 63
    27ea:	f8 94       	cli
    27ec:	de bf       	out	0x3e, r29	; 62
    27ee:	0f be       	out	0x3f, r0	; 63
    27f0:	cd bf       	out	0x3d, r28	; 61
    27f2:	8f 83       	std	Y+7, r24	; 0x07
    27f4:	68 87       	std	Y+8, r22	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    27f6:	1e 82       	std	Y+6, r1	; 0x06

	u8 Local_u8Iterator = 0;
    27f8:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Check = 0;
    27fa:	19 82       	std	Y+1, r1	; 0x01
    27fc:	1a 82       	std	Y+2, r1	; 0x02
    27fe:	1b 82       	std	Y+3, r1	; 0x03
    2800:	1c 82       	std	Y+4, r1	; 0x04

	if(Copy_u8Number < 10 && Copy_u8SegID < SEG_NUM)
    2802:	88 85       	ldd	r24, Y+8	; 0x08
    2804:	8a 30       	cpi	r24, 0x0A	; 10
    2806:	08 f0       	brcs	.+2      	; 0x280a <SSDLT_enuDisplayNum+0x2c>
    2808:	f6 c4       	rjmp	.+2540   	; 0x31f6 <SSDLT_enuDisplayNum+0xa18>
    280a:	8f 81       	ldd	r24, Y+7	; 0x07
    280c:	82 30       	cpi	r24, 0x02	; 2
    280e:	08 f0       	brcs	.+2      	; 0x2812 <SSDLT_enuDisplayNum+0x34>
    2810:	f2 c4       	rjmp	.+2532   	; 0x31f6 <SSDLT_enuDisplayNum+0xa18>
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    2812:	8f 81       	ldd	r24, Y+7	; 0x07
    2814:	48 2f       	mov	r20, r24
    2816:	50 e0       	ldi	r21, 0x00	; 0
    2818:	ca 01       	movw	r24, r20
    281a:	88 0f       	add	r24, r24
    281c:	99 1f       	adc	r25, r25
    281e:	9c 01       	movw	r18, r24
    2820:	22 0f       	add	r18, r18
    2822:	33 1f       	adc	r19, r19
    2824:	22 0f       	add	r18, r18
    2826:	33 1f       	adc	r19, r19
    2828:	22 0f       	add	r18, r18
    282a:	33 1f       	adc	r19, r19
    282c:	82 0f       	add	r24, r18
    282e:	93 1f       	adc	r25, r19
    2830:	84 0f       	add	r24, r20
    2832:	95 1f       	adc	r25, r21
    2834:	fc 01       	movw	r30, r24
    2836:	ed 56       	subi	r30, 0x6D	; 109
    2838:	fe 4f       	sbci	r31, 0xFE	; 254
    283a:	80 81       	ld	r24, Z
    283c:	81 30       	cpi	r24, 0x01	; 1
    283e:	09 f0       	breq	.+2      	; 0x2842 <SSDLT_enuDisplayNum+0x64>
    2840:	40 c2       	rjmp	.+1152   	; 0x2cc2 <SSDLT_enuDisplayNum+0x4e4>
		{
			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APort,
    2842:	8f 81       	ldd	r24, Y+7	; 0x07
    2844:	48 2f       	mov	r20, r24
    2846:	50 e0       	ldi	r21, 0x00	; 0
    2848:	ca 01       	movw	r24, r20
    284a:	88 0f       	add	r24, r24
    284c:	99 1f       	adc	r25, r25
    284e:	9c 01       	movw	r18, r24
    2850:	22 0f       	add	r18, r18
    2852:	33 1f       	adc	r19, r19
    2854:	22 0f       	add	r18, r18
    2856:	33 1f       	adc	r19, r19
    2858:	22 0f       	add	r18, r18
    285a:	33 1f       	adc	r19, r19
    285c:	82 0f       	add	r24, r18
    285e:	93 1f       	adc	r25, r19
    2860:	84 0f       	add	r24, r20
    2862:	95 1f       	adc	r25, r21
    2864:	fc 01       	movw	r30, r24
    2866:	ef 57       	subi	r30, 0x7F	; 127
    2868:	fe 4f       	sbci	r31, 0xFE	; 254
    286a:	60 81       	ld	r22, Z
    286c:	8f 81       	ldd	r24, Y+7	; 0x07
    286e:	48 2f       	mov	r20, r24
    2870:	50 e0       	ldi	r21, 0x00	; 0
    2872:	ca 01       	movw	r24, r20
    2874:	88 0f       	add	r24, r24
    2876:	99 1f       	adc	r25, r25
    2878:	9c 01       	movw	r18, r24
    287a:	22 0f       	add	r18, r18
    287c:	33 1f       	adc	r19, r19
    287e:	22 0f       	add	r18, r18
    2880:	33 1f       	adc	r19, r19
    2882:	22 0f       	add	r18, r18
    2884:	33 1f       	adc	r19, r19
    2886:	82 0f       	add	r24, r18
    2888:	93 1f       	adc	r25, r19
    288a:	84 0f       	add	r24, r20
    288c:	95 1f       	adc	r25, r21
    288e:	fc 01       	movw	r30, r24
    2890:	ee 57       	subi	r30, 0x7E	; 126
    2892:	fe 4f       	sbci	r31, 0xFE	; 254
    2894:	20 81       	ld	r18, Z
    2896:	88 85       	ldd	r24, Y+8	; 0x08
    2898:	88 2f       	mov	r24, r24
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	fc 01       	movw	r30, r24
    289e:	e9 55       	subi	r30, 0x59	; 89
    28a0:	fe 4f       	sbci	r31, 0xFE	; 254
    28a2:	80 81       	ld	r24, Z
    28a4:	98 2f       	mov	r25, r24
    28a6:	91 70       	andi	r25, 0x01	; 1
    28a8:	86 2f       	mov	r24, r22
    28aa:	62 2f       	mov	r22, r18
    28ac:	49 2f       	mov	r20, r25
    28ae:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    28b2:	28 2f       	mov	r18, r24
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	40 e0       	ldi	r20, 0x00	; 0
    28b8:	50 e0       	ldi	r21, 0x00	; 0
    28ba:	89 81       	ldd	r24, Y+1	; 0x01
    28bc:	9a 81       	ldd	r25, Y+2	; 0x02
    28be:	ab 81       	ldd	r26, Y+3	; 0x03
    28c0:	bc 81       	ldd	r27, Y+4	; 0x04
    28c2:	82 2b       	or	r24, r18
    28c4:	93 2b       	or	r25, r19
    28c6:	a4 2b       	or	r26, r20
    28c8:	b5 2b       	or	r27, r21
    28ca:	89 83       	std	Y+1, r24	; 0x01
    28cc:	9a 83       	std	Y+2, r25	; 0x02
    28ce:	ab 83       	std	Y+3, r26	; 0x03
    28d0:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	      SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APin,
											   	  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>0) & 1)) << 0);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPort,
    28d2:	8f 81       	ldd	r24, Y+7	; 0x07
    28d4:	48 2f       	mov	r20, r24
    28d6:	50 e0       	ldi	r21, 0x00	; 0
    28d8:	ca 01       	movw	r24, r20
    28da:	88 0f       	add	r24, r24
    28dc:	99 1f       	adc	r25, r25
    28de:	9c 01       	movw	r18, r24
    28e0:	22 0f       	add	r18, r18
    28e2:	33 1f       	adc	r19, r19
    28e4:	22 0f       	add	r18, r18
    28e6:	33 1f       	adc	r19, r19
    28e8:	22 0f       	add	r18, r18
    28ea:	33 1f       	adc	r19, r19
    28ec:	82 0f       	add	r24, r18
    28ee:	93 1f       	adc	r25, r19
    28f0:	84 0f       	add	r24, r20
    28f2:	95 1f       	adc	r25, r21
    28f4:	fc 01       	movw	r30, r24
    28f6:	ed 57       	subi	r30, 0x7D	; 125
    28f8:	fe 4f       	sbci	r31, 0xFE	; 254
    28fa:	60 81       	ld	r22, Z
    28fc:	8f 81       	ldd	r24, Y+7	; 0x07
    28fe:	48 2f       	mov	r20, r24
    2900:	50 e0       	ldi	r21, 0x00	; 0
    2902:	ca 01       	movw	r24, r20
    2904:	88 0f       	add	r24, r24
    2906:	99 1f       	adc	r25, r25
    2908:	9c 01       	movw	r18, r24
    290a:	22 0f       	add	r18, r18
    290c:	33 1f       	adc	r19, r19
    290e:	22 0f       	add	r18, r18
    2910:	33 1f       	adc	r19, r19
    2912:	22 0f       	add	r18, r18
    2914:	33 1f       	adc	r19, r19
    2916:	82 0f       	add	r24, r18
    2918:	93 1f       	adc	r25, r19
    291a:	84 0f       	add	r24, r20
    291c:	95 1f       	adc	r25, r21
    291e:	fc 01       	movw	r30, r24
    2920:	ec 57       	subi	r30, 0x7C	; 124
    2922:	fe 4f       	sbci	r31, 0xFE	; 254
    2924:	20 81       	ld	r18, Z
    2926:	88 85       	ldd	r24, Y+8	; 0x08
    2928:	88 2f       	mov	r24, r24
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	fc 01       	movw	r30, r24
    292e:	e9 55       	subi	r30, 0x59	; 89
    2930:	fe 4f       	sbci	r31, 0xFE	; 254
    2932:	80 81       	ld	r24, Z
    2934:	86 95       	lsr	r24
    2936:	98 2f       	mov	r25, r24
    2938:	91 70       	andi	r25, 0x01	; 1
    293a:	86 2f       	mov	r24, r22
    293c:	62 2f       	mov	r22, r18
    293e:	49 2f       	mov	r20, r25
    2940:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    2944:	88 2f       	mov	r24, r24
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	88 0f       	add	r24, r24
    294a:	99 1f       	adc	r25, r25
    294c:	88 0f       	add	r24, r24
    294e:	99 1f       	adc	r25, r25
    2950:	88 0f       	add	r24, r24
    2952:	99 1f       	adc	r25, r25
    2954:	9c 01       	movw	r18, r24
    2956:	44 27       	eor	r20, r20
    2958:	37 fd       	sbrc	r19, 7
    295a:	40 95       	com	r20
    295c:	54 2f       	mov	r21, r20
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	9a 81       	ldd	r25, Y+2	; 0x02
    2962:	ab 81       	ldd	r26, Y+3	; 0x03
    2964:	bc 81       	ldd	r27, Y+4	; 0x04
    2966:	82 2b       	or	r24, r18
    2968:	93 2b       	or	r25, r19
    296a:	a4 2b       	or	r26, r20
    296c:	b5 2b       	or	r27, r21
    296e:	89 83       	std	Y+1, r24	; 0x01
    2970:	9a 83       	std	Y+2, r25	; 0x02
    2972:	ab 83       	std	Y+3, r26	; 0x03
    2974:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPin,
												  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>1) & 1)) << 3);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPort,
    2976:	8f 81       	ldd	r24, Y+7	; 0x07
    2978:	48 2f       	mov	r20, r24
    297a:	50 e0       	ldi	r21, 0x00	; 0
    297c:	ca 01       	movw	r24, r20
    297e:	88 0f       	add	r24, r24
    2980:	99 1f       	adc	r25, r25
    2982:	9c 01       	movw	r18, r24
    2984:	22 0f       	add	r18, r18
    2986:	33 1f       	adc	r19, r19
    2988:	22 0f       	add	r18, r18
    298a:	33 1f       	adc	r19, r19
    298c:	22 0f       	add	r18, r18
    298e:	33 1f       	adc	r19, r19
    2990:	82 0f       	add	r24, r18
    2992:	93 1f       	adc	r25, r19
    2994:	84 0f       	add	r24, r20
    2996:	95 1f       	adc	r25, r21
    2998:	fc 01       	movw	r30, r24
    299a:	eb 57       	subi	r30, 0x7B	; 123
    299c:	fe 4f       	sbci	r31, 0xFE	; 254
    299e:	60 81       	ld	r22, Z
    29a0:	8f 81       	ldd	r24, Y+7	; 0x07
    29a2:	48 2f       	mov	r20, r24
    29a4:	50 e0       	ldi	r21, 0x00	; 0
    29a6:	ca 01       	movw	r24, r20
    29a8:	88 0f       	add	r24, r24
    29aa:	99 1f       	adc	r25, r25
    29ac:	9c 01       	movw	r18, r24
    29ae:	22 0f       	add	r18, r18
    29b0:	33 1f       	adc	r19, r19
    29b2:	22 0f       	add	r18, r18
    29b4:	33 1f       	adc	r19, r19
    29b6:	22 0f       	add	r18, r18
    29b8:	33 1f       	adc	r19, r19
    29ba:	82 0f       	add	r24, r18
    29bc:	93 1f       	adc	r25, r19
    29be:	84 0f       	add	r24, r20
    29c0:	95 1f       	adc	r25, r21
    29c2:	fc 01       	movw	r30, r24
    29c4:	ea 57       	subi	r30, 0x7A	; 122
    29c6:	fe 4f       	sbci	r31, 0xFE	; 254
    29c8:	20 81       	ld	r18, Z
    29ca:	88 85       	ldd	r24, Y+8	; 0x08
    29cc:	88 2f       	mov	r24, r24
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	fc 01       	movw	r30, r24
    29d2:	e9 55       	subi	r30, 0x59	; 89
    29d4:	fe 4f       	sbci	r31, 0xFE	; 254
    29d6:	80 81       	ld	r24, Z
    29d8:	86 95       	lsr	r24
    29da:	86 95       	lsr	r24
    29dc:	98 2f       	mov	r25, r24
    29de:	91 70       	andi	r25, 0x01	; 1
    29e0:	86 2f       	mov	r24, r22
    29e2:	62 2f       	mov	r22, r18
    29e4:	49 2f       	mov	r20, r25
    29e6:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    29ea:	88 2f       	mov	r24, r24
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	00 24       	eor	r0, r0
    29f0:	96 95       	lsr	r25
    29f2:	87 95       	ror	r24
    29f4:	07 94       	ror	r0
    29f6:	96 95       	lsr	r25
    29f8:	87 95       	ror	r24
    29fa:	07 94       	ror	r0
    29fc:	98 2f       	mov	r25, r24
    29fe:	80 2d       	mov	r24, r0
    2a00:	9c 01       	movw	r18, r24
    2a02:	44 27       	eor	r20, r20
    2a04:	37 fd       	sbrc	r19, 7
    2a06:	40 95       	com	r20
    2a08:	54 2f       	mov	r21, r20
    2a0a:	89 81       	ldd	r24, Y+1	; 0x01
    2a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0e:	ab 81       	ldd	r26, Y+3	; 0x03
    2a10:	bc 81       	ldd	r27, Y+4	; 0x04
    2a12:	82 2b       	or	r24, r18
    2a14:	93 2b       	or	r25, r19
    2a16:	a4 2b       	or	r26, r20
    2a18:	b5 2b       	or	r27, r21
    2a1a:	89 83       	std	Y+1, r24	; 0x01
    2a1c:	9a 83       	std	Y+2, r25	; 0x02
    2a1e:	ab 83       	std	Y+3, r26	; 0x03
    2a20:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPin,
												  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>2) & 1)) << 6);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPort,
    2a22:	8f 81       	ldd	r24, Y+7	; 0x07
    2a24:	48 2f       	mov	r20, r24
    2a26:	50 e0       	ldi	r21, 0x00	; 0
    2a28:	ca 01       	movw	r24, r20
    2a2a:	88 0f       	add	r24, r24
    2a2c:	99 1f       	adc	r25, r25
    2a2e:	9c 01       	movw	r18, r24
    2a30:	22 0f       	add	r18, r18
    2a32:	33 1f       	adc	r19, r19
    2a34:	22 0f       	add	r18, r18
    2a36:	33 1f       	adc	r19, r19
    2a38:	22 0f       	add	r18, r18
    2a3a:	33 1f       	adc	r19, r19
    2a3c:	82 0f       	add	r24, r18
    2a3e:	93 1f       	adc	r25, r19
    2a40:	84 0f       	add	r24, r20
    2a42:	95 1f       	adc	r25, r21
    2a44:	fc 01       	movw	r30, r24
    2a46:	e9 57       	subi	r30, 0x79	; 121
    2a48:	fe 4f       	sbci	r31, 0xFE	; 254
    2a4a:	60 81       	ld	r22, Z
    2a4c:	8f 81       	ldd	r24, Y+7	; 0x07
    2a4e:	48 2f       	mov	r20, r24
    2a50:	50 e0       	ldi	r21, 0x00	; 0
    2a52:	ca 01       	movw	r24, r20
    2a54:	88 0f       	add	r24, r24
    2a56:	99 1f       	adc	r25, r25
    2a58:	9c 01       	movw	r18, r24
    2a5a:	22 0f       	add	r18, r18
    2a5c:	33 1f       	adc	r19, r19
    2a5e:	22 0f       	add	r18, r18
    2a60:	33 1f       	adc	r19, r19
    2a62:	22 0f       	add	r18, r18
    2a64:	33 1f       	adc	r19, r19
    2a66:	82 0f       	add	r24, r18
    2a68:	93 1f       	adc	r25, r19
    2a6a:	84 0f       	add	r24, r20
    2a6c:	95 1f       	adc	r25, r21
    2a6e:	fc 01       	movw	r30, r24
    2a70:	e8 57       	subi	r30, 0x78	; 120
    2a72:	fe 4f       	sbci	r31, 0xFE	; 254
    2a74:	20 81       	ld	r18, Z
    2a76:	88 85       	ldd	r24, Y+8	; 0x08
    2a78:	88 2f       	mov	r24, r24
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	fc 01       	movw	r30, r24
    2a7e:	e9 55       	subi	r30, 0x59	; 89
    2a80:	fe 4f       	sbci	r31, 0xFE	; 254
    2a82:	80 81       	ld	r24, Z
    2a84:	86 95       	lsr	r24
    2a86:	86 95       	lsr	r24
    2a88:	86 95       	lsr	r24
    2a8a:	98 2f       	mov	r25, r24
    2a8c:	91 70       	andi	r25, 0x01	; 1
    2a8e:	86 2f       	mov	r24, r22
    2a90:	62 2f       	mov	r22, r18
    2a92:	49 2f       	mov	r20, r25
    2a94:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    2a98:	88 2f       	mov	r24, r24
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	98 2f       	mov	r25, r24
    2a9e:	88 27       	eor	r24, r24
    2aa0:	99 0f       	add	r25, r25
    2aa2:	9c 01       	movw	r18, r24
    2aa4:	44 27       	eor	r20, r20
    2aa6:	37 fd       	sbrc	r19, 7
    2aa8:	40 95       	com	r20
    2aaa:	54 2f       	mov	r21, r20
    2aac:	89 81       	ldd	r24, Y+1	; 0x01
    2aae:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab0:	ab 81       	ldd	r26, Y+3	; 0x03
    2ab2:	bc 81       	ldd	r27, Y+4	; 0x04
    2ab4:	82 2b       	or	r24, r18
    2ab6:	93 2b       	or	r25, r19
    2ab8:	a4 2b       	or	r26, r20
    2aba:	b5 2b       	or	r27, r21
    2abc:	89 83       	std	Y+1, r24	; 0x01
    2abe:	9a 83       	std	Y+2, r25	; 0x02
    2ac0:	ab 83       	std	Y+3, r26	; 0x03
    2ac2:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPin,
												  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>3) & 1)) << 9) ;

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPort,
    2ac4:	8f 81       	ldd	r24, Y+7	; 0x07
    2ac6:	48 2f       	mov	r20, r24
    2ac8:	50 e0       	ldi	r21, 0x00	; 0
    2aca:	ca 01       	movw	r24, r20
    2acc:	88 0f       	add	r24, r24
    2ace:	99 1f       	adc	r25, r25
    2ad0:	9c 01       	movw	r18, r24
    2ad2:	22 0f       	add	r18, r18
    2ad4:	33 1f       	adc	r19, r19
    2ad6:	22 0f       	add	r18, r18
    2ad8:	33 1f       	adc	r19, r19
    2ada:	22 0f       	add	r18, r18
    2adc:	33 1f       	adc	r19, r19
    2ade:	82 0f       	add	r24, r18
    2ae0:	93 1f       	adc	r25, r19
    2ae2:	84 0f       	add	r24, r20
    2ae4:	95 1f       	adc	r25, r21
    2ae6:	fc 01       	movw	r30, r24
    2ae8:	e7 57       	subi	r30, 0x77	; 119
    2aea:	fe 4f       	sbci	r31, 0xFE	; 254
    2aec:	60 81       	ld	r22, Z
    2aee:	8f 81       	ldd	r24, Y+7	; 0x07
    2af0:	48 2f       	mov	r20, r24
    2af2:	50 e0       	ldi	r21, 0x00	; 0
    2af4:	ca 01       	movw	r24, r20
    2af6:	88 0f       	add	r24, r24
    2af8:	99 1f       	adc	r25, r25
    2afa:	9c 01       	movw	r18, r24
    2afc:	22 0f       	add	r18, r18
    2afe:	33 1f       	adc	r19, r19
    2b00:	22 0f       	add	r18, r18
    2b02:	33 1f       	adc	r19, r19
    2b04:	22 0f       	add	r18, r18
    2b06:	33 1f       	adc	r19, r19
    2b08:	82 0f       	add	r24, r18
    2b0a:	93 1f       	adc	r25, r19
    2b0c:	84 0f       	add	r24, r20
    2b0e:	95 1f       	adc	r25, r21
    2b10:	fc 01       	movw	r30, r24
    2b12:	e6 57       	subi	r30, 0x76	; 118
    2b14:	fe 4f       	sbci	r31, 0xFE	; 254
    2b16:	20 81       	ld	r18, Z
    2b18:	88 85       	ldd	r24, Y+8	; 0x08
    2b1a:	88 2f       	mov	r24, r24
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	fc 01       	movw	r30, r24
    2b20:	e9 55       	subi	r30, 0x59	; 89
    2b22:	fe 4f       	sbci	r31, 0xFE	; 254
    2b24:	80 81       	ld	r24, Z
    2b26:	82 95       	swap	r24
    2b28:	8f 70       	andi	r24, 0x0F	; 15
    2b2a:	98 2f       	mov	r25, r24
    2b2c:	91 70       	andi	r25, 0x01	; 1
    2b2e:	86 2f       	mov	r24, r22
    2b30:	62 2f       	mov	r22, r18
    2b32:	49 2f       	mov	r20, r25
    2b34:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    2b38:	88 2f       	mov	r24, r24
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	98 2f       	mov	r25, r24
    2b3e:	88 27       	eor	r24, r24
    2b40:	92 95       	swap	r25
    2b42:	90 7f       	andi	r25, 0xF0	; 240
    2b44:	9c 01       	movw	r18, r24
    2b46:	44 27       	eor	r20, r20
    2b48:	37 fd       	sbrc	r19, 7
    2b4a:	40 95       	com	r20
    2b4c:	54 2f       	mov	r21, r20
    2b4e:	89 81       	ldd	r24, Y+1	; 0x01
    2b50:	9a 81       	ldd	r25, Y+2	; 0x02
    2b52:	ab 81       	ldd	r26, Y+3	; 0x03
    2b54:	bc 81       	ldd	r27, Y+4	; 0x04
    2b56:	82 2b       	or	r24, r18
    2b58:	93 2b       	or	r25, r19
    2b5a:	a4 2b       	or	r26, r20
    2b5c:	b5 2b       	or	r27, r21
    2b5e:	89 83       	std	Y+1, r24	; 0x01
    2b60:	9a 83       	std	Y+2, r25	; 0x02
    2b62:	ab 83       	std	Y+3, r26	; 0x03
    2b64:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPin,
												  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>4) & 1)) << 12);

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPort,
    2b66:	8f 81       	ldd	r24, Y+7	; 0x07
    2b68:	48 2f       	mov	r20, r24
    2b6a:	50 e0       	ldi	r21, 0x00	; 0
    2b6c:	ca 01       	movw	r24, r20
    2b6e:	88 0f       	add	r24, r24
    2b70:	99 1f       	adc	r25, r25
    2b72:	9c 01       	movw	r18, r24
    2b74:	22 0f       	add	r18, r18
    2b76:	33 1f       	adc	r19, r19
    2b78:	22 0f       	add	r18, r18
    2b7a:	33 1f       	adc	r19, r19
    2b7c:	22 0f       	add	r18, r18
    2b7e:	33 1f       	adc	r19, r19
    2b80:	82 0f       	add	r24, r18
    2b82:	93 1f       	adc	r25, r19
    2b84:	84 0f       	add	r24, r20
    2b86:	95 1f       	adc	r25, r21
    2b88:	fc 01       	movw	r30, r24
    2b8a:	e5 57       	subi	r30, 0x75	; 117
    2b8c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b8e:	60 81       	ld	r22, Z
    2b90:	8f 81       	ldd	r24, Y+7	; 0x07
    2b92:	48 2f       	mov	r20, r24
    2b94:	50 e0       	ldi	r21, 0x00	; 0
    2b96:	ca 01       	movw	r24, r20
    2b98:	88 0f       	add	r24, r24
    2b9a:	99 1f       	adc	r25, r25
    2b9c:	9c 01       	movw	r18, r24
    2b9e:	22 0f       	add	r18, r18
    2ba0:	33 1f       	adc	r19, r19
    2ba2:	22 0f       	add	r18, r18
    2ba4:	33 1f       	adc	r19, r19
    2ba6:	22 0f       	add	r18, r18
    2ba8:	33 1f       	adc	r19, r19
    2baa:	82 0f       	add	r24, r18
    2bac:	93 1f       	adc	r25, r19
    2bae:	84 0f       	add	r24, r20
    2bb0:	95 1f       	adc	r25, r21
    2bb2:	fc 01       	movw	r30, r24
    2bb4:	e4 57       	subi	r30, 0x74	; 116
    2bb6:	fe 4f       	sbci	r31, 0xFE	; 254
    2bb8:	20 81       	ld	r18, Z
    2bba:	88 85       	ldd	r24, Y+8	; 0x08
    2bbc:	88 2f       	mov	r24, r24
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	fc 01       	movw	r30, r24
    2bc2:	e9 55       	subi	r30, 0x59	; 89
    2bc4:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc6:	80 81       	ld	r24, Z
    2bc8:	82 95       	swap	r24
    2bca:	86 95       	lsr	r24
    2bcc:	87 70       	andi	r24, 0x07	; 7
    2bce:	98 2f       	mov	r25, r24
    2bd0:	91 70       	andi	r25, 0x01	; 1
    2bd2:	86 2f       	mov	r24, r22
    2bd4:	62 2f       	mov	r22, r18
    2bd6:	49 2f       	mov	r20, r25
    2bd8:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    2bdc:	88 2f       	mov	r24, r24
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	a0 e0       	ldi	r26, 0x00	; 0
    2be2:	b0 e0       	ldi	r27, 0x00	; 0
    2be4:	9c 01       	movw	r18, r24
    2be6:	ad 01       	movw	r20, r26
    2be8:	01 2e       	mov	r0, r17
    2bea:	1f e0       	ldi	r17, 0x0F	; 15
    2bec:	22 0f       	add	r18, r18
    2bee:	33 1f       	adc	r19, r19
    2bf0:	44 1f       	adc	r20, r20
    2bf2:	55 1f       	adc	r21, r21
    2bf4:	1a 95       	dec	r17
    2bf6:	d1 f7       	brne	.-12     	; 0x2bec <SSDLT_enuDisplayNum+0x40e>
    2bf8:	10 2d       	mov	r17, r0
    2bfa:	89 81       	ldd	r24, Y+1	; 0x01
    2bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfe:	ab 81       	ldd	r26, Y+3	; 0x03
    2c00:	bc 81       	ldd	r27, Y+4	; 0x04
    2c02:	82 2b       	or	r24, r18
    2c04:	93 2b       	or	r25, r19
    2c06:	a4 2b       	or	r26, r20
    2c08:	b5 2b       	or	r27, r21
    2c0a:	89 83       	std	Y+1, r24	; 0x01
    2c0c:	9a 83       	std	Y+2, r25	; 0x02
    2c0e:	ab 83       	std	Y+3, r26	; 0x03
    2c10:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPin,
												  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>5) & 1)) << 15));

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPort,
    2c12:	8f 81       	ldd	r24, Y+7	; 0x07
    2c14:	48 2f       	mov	r20, r24
    2c16:	50 e0       	ldi	r21, 0x00	; 0
    2c18:	ca 01       	movw	r24, r20
    2c1a:	88 0f       	add	r24, r24
    2c1c:	99 1f       	adc	r25, r25
    2c1e:	9c 01       	movw	r18, r24
    2c20:	22 0f       	add	r18, r18
    2c22:	33 1f       	adc	r19, r19
    2c24:	22 0f       	add	r18, r18
    2c26:	33 1f       	adc	r19, r19
    2c28:	22 0f       	add	r18, r18
    2c2a:	33 1f       	adc	r19, r19
    2c2c:	82 0f       	add	r24, r18
    2c2e:	93 1f       	adc	r25, r19
    2c30:	84 0f       	add	r24, r20
    2c32:	95 1f       	adc	r25, r21
    2c34:	fc 01       	movw	r30, r24
    2c36:	e3 57       	subi	r30, 0x73	; 115
    2c38:	fe 4f       	sbci	r31, 0xFE	; 254
    2c3a:	60 81       	ld	r22, Z
    2c3c:	8f 81       	ldd	r24, Y+7	; 0x07
    2c3e:	48 2f       	mov	r20, r24
    2c40:	50 e0       	ldi	r21, 0x00	; 0
    2c42:	ca 01       	movw	r24, r20
    2c44:	88 0f       	add	r24, r24
    2c46:	99 1f       	adc	r25, r25
    2c48:	9c 01       	movw	r18, r24
    2c4a:	22 0f       	add	r18, r18
    2c4c:	33 1f       	adc	r19, r19
    2c4e:	22 0f       	add	r18, r18
    2c50:	33 1f       	adc	r19, r19
    2c52:	22 0f       	add	r18, r18
    2c54:	33 1f       	adc	r19, r19
    2c56:	82 0f       	add	r24, r18
    2c58:	93 1f       	adc	r25, r19
    2c5a:	84 0f       	add	r24, r20
    2c5c:	95 1f       	adc	r25, r21
    2c5e:	fc 01       	movw	r30, r24
    2c60:	e2 57       	subi	r30, 0x72	; 114
    2c62:	fe 4f       	sbci	r31, 0xFE	; 254
    2c64:	20 81       	ld	r18, Z
    2c66:	88 85       	ldd	r24, Y+8	; 0x08
    2c68:	88 2f       	mov	r24, r24
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	e9 55       	subi	r30, 0x59	; 89
    2c70:	fe 4f       	sbci	r31, 0xFE	; 254
    2c72:	80 81       	ld	r24, Z
    2c74:	82 95       	swap	r24
    2c76:	86 95       	lsr	r24
    2c78:	86 95       	lsr	r24
    2c7a:	83 70       	andi	r24, 0x03	; 3
    2c7c:	98 2f       	mov	r25, r24
    2c7e:	91 70       	andi	r25, 0x01	; 1
    2c80:	86 2f       	mov	r24, r22
    2c82:	62 2f       	mov	r22, r18
    2c84:	49 2f       	mov	r20, r25
    2c86:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    2c8a:	88 2f       	mov	r24, r24
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	a0 e0       	ldi	r26, 0x00	; 0
    2c90:	b0 e0       	ldi	r27, 0x00	; 0
    2c92:	9c 01       	movw	r18, r24
    2c94:	ad 01       	movw	r20, r26
    2c96:	01 2e       	mov	r0, r17
    2c98:	12 e1       	ldi	r17, 0x12	; 18
    2c9a:	22 0f       	add	r18, r18
    2c9c:	33 1f       	adc	r19, r19
    2c9e:	44 1f       	adc	r20, r20
    2ca0:	55 1f       	adc	r21, r21
    2ca2:	1a 95       	dec	r17
    2ca4:	d1 f7       	brne	.-12     	; 0x2c9a <SSDLT_enuDisplayNum+0x4bc>
    2ca6:	10 2d       	mov	r17, r0
    2ca8:	89 81       	ldd	r24, Y+1	; 0x01
    2caa:	9a 81       	ldd	r25, Y+2	; 0x02
    2cac:	ab 81       	ldd	r26, Y+3	; 0x03
    2cae:	bc 81       	ldd	r27, Y+4	; 0x04
    2cb0:	82 2b       	or	r24, r18
    2cb2:	93 2b       	or	r25, r19
    2cb4:	a4 2b       	or	r26, r20
    2cb6:	b5 2b       	or	r27, r21
    2cb8:	89 83       	std	Y+1, r24	; 0x01
    2cba:	9a 83       	std	Y+2, r25	; 0x02
    2cbc:	ab 83       	std	Y+3, r26	; 0x03
    2cbe:	bc 83       	std	Y+4, r27	; 0x04
    2cc0:	9c c2       	rjmp	.+1336   	; 0x31fa <SSDLT_enuDisplayNum+0xa1c>
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPin,
												  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>6) & 1)) << 18));

		}
		else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    2cc2:	8f 81       	ldd	r24, Y+7	; 0x07
    2cc4:	48 2f       	mov	r20, r24
    2cc6:	50 e0       	ldi	r21, 0x00	; 0
    2cc8:	ca 01       	movw	r24, r20
    2cca:	88 0f       	add	r24, r24
    2ccc:	99 1f       	adc	r25, r25
    2cce:	9c 01       	movw	r18, r24
    2cd0:	22 0f       	add	r18, r18
    2cd2:	33 1f       	adc	r19, r19
    2cd4:	22 0f       	add	r18, r18
    2cd6:	33 1f       	adc	r19, r19
    2cd8:	22 0f       	add	r18, r18
    2cda:	33 1f       	adc	r19, r19
    2cdc:	82 0f       	add	r24, r18
    2cde:	93 1f       	adc	r25, r19
    2ce0:	84 0f       	add	r24, r20
    2ce2:	95 1f       	adc	r25, r21
    2ce4:	fc 01       	movw	r30, r24
    2ce6:	ed 56       	subi	r30, 0x6D	; 109
    2ce8:	fe 4f       	sbci	r31, 0xFE	; 254
    2cea:	80 81       	ld	r24, Z
    2cec:	88 23       	and	r24, r24
    2cee:	09 f0       	breq	.+2      	; 0x2cf2 <SSDLT_enuDisplayNum+0x514>
    2cf0:	7f c2       	rjmp	.+1278   	; 0x31f0 <SSDLT_enuDisplayNum+0xa12>
		{
			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APort,
    2cf2:	8f 81       	ldd	r24, Y+7	; 0x07
    2cf4:	48 2f       	mov	r20, r24
    2cf6:	50 e0       	ldi	r21, 0x00	; 0
    2cf8:	ca 01       	movw	r24, r20
    2cfa:	88 0f       	add	r24, r24
    2cfc:	99 1f       	adc	r25, r25
    2cfe:	9c 01       	movw	r18, r24
    2d00:	22 0f       	add	r18, r18
    2d02:	33 1f       	adc	r19, r19
    2d04:	22 0f       	add	r18, r18
    2d06:	33 1f       	adc	r19, r19
    2d08:	22 0f       	add	r18, r18
    2d0a:	33 1f       	adc	r19, r19
    2d0c:	82 0f       	add	r24, r18
    2d0e:	93 1f       	adc	r25, r19
    2d10:	84 0f       	add	r24, r20
    2d12:	95 1f       	adc	r25, r21
    2d14:	fc 01       	movw	r30, r24
    2d16:	ef 57       	subi	r30, 0x7F	; 127
    2d18:	fe 4f       	sbci	r31, 0xFE	; 254
    2d1a:	80 81       	ld	r24, Z
    2d1c:	8e 8f       	std	Y+30, r24	; 0x1e
    2d1e:	8f 81       	ldd	r24, Y+7	; 0x07
    2d20:	48 2f       	mov	r20, r24
    2d22:	50 e0       	ldi	r21, 0x00	; 0
    2d24:	ca 01       	movw	r24, r20
    2d26:	88 0f       	add	r24, r24
    2d28:	99 1f       	adc	r25, r25
    2d2a:	9c 01       	movw	r18, r24
    2d2c:	22 0f       	add	r18, r18
    2d2e:	33 1f       	adc	r19, r19
    2d30:	22 0f       	add	r18, r18
    2d32:	33 1f       	adc	r19, r19
    2d34:	22 0f       	add	r18, r18
    2d36:	33 1f       	adc	r19, r19
    2d38:	82 0f       	add	r24, r18
    2d3a:	93 1f       	adc	r25, r19
    2d3c:	84 0f       	add	r24, r20
    2d3e:	95 1f       	adc	r25, r21
    2d40:	fc 01       	movw	r30, r24
    2d42:	ee 57       	subi	r30, 0x7E	; 126
    2d44:	fe 4f       	sbci	r31, 0xFE	; 254
    2d46:	80 81       	ld	r24, Z
    2d48:	8d 8f       	std	Y+29, r24	; 0x1d
    2d4a:	88 85       	ldd	r24, Y+8	; 0x08
    2d4c:	88 2f       	mov	r24, r24
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	fc 01       	movw	r30, r24
    2d52:	e9 55       	subi	r30, 0x59	; 89
    2d54:	fe 4f       	sbci	r31, 0xFE	; 254
    2d56:	80 81       	ld	r24, Z
    2d58:	88 2f       	mov	r24, r24
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	81 70       	andi	r24, 0x01	; 1
    2d5e:	90 70       	andi	r25, 0x00	; 0
    2d60:	1c 8e       	std	Y+28, r1	; 0x1c
    2d62:	00 97       	sbiw	r24, 0x00	; 0
    2d64:	11 f4       	brne	.+4      	; 0x2d6a <SSDLT_enuDisplayNum+0x58c>
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	8c 8f       	std	Y+28, r24	; 0x1c
    2d6a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d6c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2d6e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2d70:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    2d74:	28 2f       	mov	r18, r24
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	40 e0       	ldi	r20, 0x00	; 0
    2d7a:	50 e0       	ldi	r21, 0x00	; 0
    2d7c:	89 81       	ldd	r24, Y+1	; 0x01
    2d7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d80:	ab 81       	ldd	r26, Y+3	; 0x03
    2d82:	bc 81       	ldd	r27, Y+4	; 0x04
    2d84:	82 2b       	or	r24, r18
    2d86:	93 2b       	or	r25, r19
    2d88:	a4 2b       	or	r26, r20
    2d8a:	b5 2b       	or	r27, r21
    2d8c:	89 83       	std	Y+1, r24	; 0x01
    2d8e:	9a 83       	std	Y+2, r25	; 0x02
    2d90:	ab 83       	std	Y+3, r26	; 0x03
    2d92:	bc 83       	std	Y+4, r27	; 0x04
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>0) & 1))) << 0);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPort,
    2d94:	8f 81       	ldd	r24, Y+7	; 0x07
    2d96:	48 2f       	mov	r20, r24
    2d98:	50 e0       	ldi	r21, 0x00	; 0
    2d9a:	ca 01       	movw	r24, r20
    2d9c:	88 0f       	add	r24, r24
    2d9e:	99 1f       	adc	r25, r25
    2da0:	9c 01       	movw	r18, r24
    2da2:	22 0f       	add	r18, r18
    2da4:	33 1f       	adc	r19, r19
    2da6:	22 0f       	add	r18, r18
    2da8:	33 1f       	adc	r19, r19
    2daa:	22 0f       	add	r18, r18
    2dac:	33 1f       	adc	r19, r19
    2dae:	82 0f       	add	r24, r18
    2db0:	93 1f       	adc	r25, r19
    2db2:	84 0f       	add	r24, r20
    2db4:	95 1f       	adc	r25, r21
    2db6:	fc 01       	movw	r30, r24
    2db8:	ed 57       	subi	r30, 0x7D	; 125
    2dba:	fe 4f       	sbci	r31, 0xFE	; 254
    2dbc:	80 81       	ld	r24, Z
    2dbe:	8b 8f       	std	Y+27, r24	; 0x1b
    2dc0:	8f 81       	ldd	r24, Y+7	; 0x07
    2dc2:	48 2f       	mov	r20, r24
    2dc4:	50 e0       	ldi	r21, 0x00	; 0
    2dc6:	ca 01       	movw	r24, r20
    2dc8:	88 0f       	add	r24, r24
    2dca:	99 1f       	adc	r25, r25
    2dcc:	9c 01       	movw	r18, r24
    2dce:	22 0f       	add	r18, r18
    2dd0:	33 1f       	adc	r19, r19
    2dd2:	22 0f       	add	r18, r18
    2dd4:	33 1f       	adc	r19, r19
    2dd6:	22 0f       	add	r18, r18
    2dd8:	33 1f       	adc	r19, r19
    2dda:	82 0f       	add	r24, r18
    2ddc:	93 1f       	adc	r25, r19
    2dde:	84 0f       	add	r24, r20
    2de0:	95 1f       	adc	r25, r21
    2de2:	fc 01       	movw	r30, r24
    2de4:	ec 57       	subi	r30, 0x7C	; 124
    2de6:	fe 4f       	sbci	r31, 0xFE	; 254
    2de8:	80 81       	ld	r24, Z
    2dea:	8a 8f       	std	Y+26, r24	; 0x1a
    2dec:	88 85       	ldd	r24, Y+8	; 0x08
    2dee:	88 2f       	mov	r24, r24
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	fc 01       	movw	r30, r24
    2df4:	e9 55       	subi	r30, 0x59	; 89
    2df6:	fe 4f       	sbci	r31, 0xFE	; 254
    2df8:	80 81       	ld	r24, Z
    2dfa:	86 95       	lsr	r24
    2dfc:	88 2f       	mov	r24, r24
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	81 70       	andi	r24, 0x01	; 1
    2e02:	90 70       	andi	r25, 0x00	; 0
    2e04:	19 8e       	std	Y+25, r1	; 0x19
    2e06:	00 97       	sbiw	r24, 0x00	; 0
    2e08:	11 f4       	brne	.+4      	; 0x2e0e <SSDLT_enuDisplayNum+0x630>
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	89 8f       	std	Y+25, r24	; 0x19
    2e0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e10:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2e12:	49 8d       	ldd	r20, Y+25	; 0x19
    2e14:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    2e18:	88 2f       	mov	r24, r24
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	88 0f       	add	r24, r24
    2e1e:	99 1f       	adc	r25, r25
    2e20:	88 0f       	add	r24, r24
    2e22:	99 1f       	adc	r25, r25
    2e24:	88 0f       	add	r24, r24
    2e26:	99 1f       	adc	r25, r25
    2e28:	9c 01       	movw	r18, r24
    2e2a:	44 27       	eor	r20, r20
    2e2c:	37 fd       	sbrc	r19, 7
    2e2e:	40 95       	com	r20
    2e30:	54 2f       	mov	r21, r20
    2e32:	89 81       	ldd	r24, Y+1	; 0x01
    2e34:	9a 81       	ldd	r25, Y+2	; 0x02
    2e36:	ab 81       	ldd	r26, Y+3	; 0x03
    2e38:	bc 81       	ldd	r27, Y+4	; 0x04
    2e3a:	82 2b       	or	r24, r18
    2e3c:	93 2b       	or	r25, r19
    2e3e:	a4 2b       	or	r26, r20
    2e40:	b5 2b       	or	r27, r21
    2e42:	89 83       	std	Y+1, r24	; 0x01
    2e44:	9a 83       	std	Y+2, r25	; 0x02
    2e46:	ab 83       	std	Y+3, r26	; 0x03
    2e48:	bc 83       	std	Y+4, r27	; 0x04
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>1) & 1))) << 3);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPort,
    2e4a:	8f 81       	ldd	r24, Y+7	; 0x07
    2e4c:	48 2f       	mov	r20, r24
    2e4e:	50 e0       	ldi	r21, 0x00	; 0
    2e50:	ca 01       	movw	r24, r20
    2e52:	88 0f       	add	r24, r24
    2e54:	99 1f       	adc	r25, r25
    2e56:	9c 01       	movw	r18, r24
    2e58:	22 0f       	add	r18, r18
    2e5a:	33 1f       	adc	r19, r19
    2e5c:	22 0f       	add	r18, r18
    2e5e:	33 1f       	adc	r19, r19
    2e60:	22 0f       	add	r18, r18
    2e62:	33 1f       	adc	r19, r19
    2e64:	82 0f       	add	r24, r18
    2e66:	93 1f       	adc	r25, r19
    2e68:	84 0f       	add	r24, r20
    2e6a:	95 1f       	adc	r25, r21
    2e6c:	fc 01       	movw	r30, r24
    2e6e:	eb 57       	subi	r30, 0x7B	; 123
    2e70:	fe 4f       	sbci	r31, 0xFE	; 254
    2e72:	80 81       	ld	r24, Z
    2e74:	88 8f       	std	Y+24, r24	; 0x18
    2e76:	8f 81       	ldd	r24, Y+7	; 0x07
    2e78:	48 2f       	mov	r20, r24
    2e7a:	50 e0       	ldi	r21, 0x00	; 0
    2e7c:	ca 01       	movw	r24, r20
    2e7e:	88 0f       	add	r24, r24
    2e80:	99 1f       	adc	r25, r25
    2e82:	9c 01       	movw	r18, r24
    2e84:	22 0f       	add	r18, r18
    2e86:	33 1f       	adc	r19, r19
    2e88:	22 0f       	add	r18, r18
    2e8a:	33 1f       	adc	r19, r19
    2e8c:	22 0f       	add	r18, r18
    2e8e:	33 1f       	adc	r19, r19
    2e90:	82 0f       	add	r24, r18
    2e92:	93 1f       	adc	r25, r19
    2e94:	84 0f       	add	r24, r20
    2e96:	95 1f       	adc	r25, r21
    2e98:	fc 01       	movw	r30, r24
    2e9a:	ea 57       	subi	r30, 0x7A	; 122
    2e9c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e9e:	80 81       	ld	r24, Z
    2ea0:	8f 8b       	std	Y+23, r24	; 0x17
    2ea2:	88 85       	ldd	r24, Y+8	; 0x08
    2ea4:	88 2f       	mov	r24, r24
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	fc 01       	movw	r30, r24
    2eaa:	e9 55       	subi	r30, 0x59	; 89
    2eac:	fe 4f       	sbci	r31, 0xFE	; 254
    2eae:	80 81       	ld	r24, Z
    2eb0:	86 95       	lsr	r24
    2eb2:	86 95       	lsr	r24
    2eb4:	88 2f       	mov	r24, r24
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	81 70       	andi	r24, 0x01	; 1
    2eba:	90 70       	andi	r25, 0x00	; 0
    2ebc:	1e 8a       	std	Y+22, r1	; 0x16
    2ebe:	00 97       	sbiw	r24, 0x00	; 0
    2ec0:	11 f4       	brne	.+4      	; 0x2ec6 <SSDLT_enuDisplayNum+0x6e8>
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	8e 8b       	std	Y+22, r24	; 0x16
    2ec6:	88 8d       	ldd	r24, Y+24	; 0x18
    2ec8:	6f 89       	ldd	r22, Y+23	; 0x17
    2eca:	4e 89       	ldd	r20, Y+22	; 0x16
    2ecc:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    2ed0:	88 2f       	mov	r24, r24
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	00 24       	eor	r0, r0
    2ed6:	96 95       	lsr	r25
    2ed8:	87 95       	ror	r24
    2eda:	07 94       	ror	r0
    2edc:	96 95       	lsr	r25
    2ede:	87 95       	ror	r24
    2ee0:	07 94       	ror	r0
    2ee2:	98 2f       	mov	r25, r24
    2ee4:	80 2d       	mov	r24, r0
    2ee6:	9c 01       	movw	r18, r24
    2ee8:	44 27       	eor	r20, r20
    2eea:	37 fd       	sbrc	r19, 7
    2eec:	40 95       	com	r20
    2eee:	54 2f       	mov	r21, r20
    2ef0:	89 81       	ldd	r24, Y+1	; 0x01
    2ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef4:	ab 81       	ldd	r26, Y+3	; 0x03
    2ef6:	bc 81       	ldd	r27, Y+4	; 0x04
    2ef8:	82 2b       	or	r24, r18
    2efa:	93 2b       	or	r25, r19
    2efc:	a4 2b       	or	r26, r20
    2efe:	b5 2b       	or	r27, r21
    2f00:	89 83       	std	Y+1, r24	; 0x01
    2f02:	9a 83       	std	Y+2, r25	; 0x02
    2f04:	ab 83       	std	Y+3, r26	; 0x03
    2f06:	bc 83       	std	Y+4, r27	; 0x04
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>2) & 1))) << 6);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPort,
    2f08:	8f 81       	ldd	r24, Y+7	; 0x07
    2f0a:	48 2f       	mov	r20, r24
    2f0c:	50 e0       	ldi	r21, 0x00	; 0
    2f0e:	ca 01       	movw	r24, r20
    2f10:	88 0f       	add	r24, r24
    2f12:	99 1f       	adc	r25, r25
    2f14:	9c 01       	movw	r18, r24
    2f16:	22 0f       	add	r18, r18
    2f18:	33 1f       	adc	r19, r19
    2f1a:	22 0f       	add	r18, r18
    2f1c:	33 1f       	adc	r19, r19
    2f1e:	22 0f       	add	r18, r18
    2f20:	33 1f       	adc	r19, r19
    2f22:	82 0f       	add	r24, r18
    2f24:	93 1f       	adc	r25, r19
    2f26:	84 0f       	add	r24, r20
    2f28:	95 1f       	adc	r25, r21
    2f2a:	fc 01       	movw	r30, r24
    2f2c:	e9 57       	subi	r30, 0x79	; 121
    2f2e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f30:	80 81       	ld	r24, Z
    2f32:	8d 8b       	std	Y+21, r24	; 0x15
    2f34:	8f 81       	ldd	r24, Y+7	; 0x07
    2f36:	48 2f       	mov	r20, r24
    2f38:	50 e0       	ldi	r21, 0x00	; 0
    2f3a:	ca 01       	movw	r24, r20
    2f3c:	88 0f       	add	r24, r24
    2f3e:	99 1f       	adc	r25, r25
    2f40:	9c 01       	movw	r18, r24
    2f42:	22 0f       	add	r18, r18
    2f44:	33 1f       	adc	r19, r19
    2f46:	22 0f       	add	r18, r18
    2f48:	33 1f       	adc	r19, r19
    2f4a:	22 0f       	add	r18, r18
    2f4c:	33 1f       	adc	r19, r19
    2f4e:	82 0f       	add	r24, r18
    2f50:	93 1f       	adc	r25, r19
    2f52:	84 0f       	add	r24, r20
    2f54:	95 1f       	adc	r25, r21
    2f56:	fc 01       	movw	r30, r24
    2f58:	e8 57       	subi	r30, 0x78	; 120
    2f5a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f5c:	80 81       	ld	r24, Z
    2f5e:	8c 8b       	std	Y+20, r24	; 0x14
    2f60:	88 85       	ldd	r24, Y+8	; 0x08
    2f62:	88 2f       	mov	r24, r24
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	fc 01       	movw	r30, r24
    2f68:	e9 55       	subi	r30, 0x59	; 89
    2f6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f6c:	80 81       	ld	r24, Z
    2f6e:	86 95       	lsr	r24
    2f70:	86 95       	lsr	r24
    2f72:	86 95       	lsr	r24
    2f74:	88 2f       	mov	r24, r24
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	81 70       	andi	r24, 0x01	; 1
    2f7a:	90 70       	andi	r25, 0x00	; 0
    2f7c:	1b 8a       	std	Y+19, r1	; 0x13
    2f7e:	00 97       	sbiw	r24, 0x00	; 0
    2f80:	11 f4       	brne	.+4      	; 0x2f86 <SSDLT_enuDisplayNum+0x7a8>
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	8b 8b       	std	Y+19, r24	; 0x13
    2f86:	8d 89       	ldd	r24, Y+21	; 0x15
    2f88:	6c 89       	ldd	r22, Y+20	; 0x14
    2f8a:	4b 89       	ldd	r20, Y+19	; 0x13
    2f8c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    2f90:	88 2f       	mov	r24, r24
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	98 2f       	mov	r25, r24
    2f96:	88 27       	eor	r24, r24
    2f98:	99 0f       	add	r25, r25
    2f9a:	9c 01       	movw	r18, r24
    2f9c:	44 27       	eor	r20, r20
    2f9e:	37 fd       	sbrc	r19, 7
    2fa0:	40 95       	com	r20
    2fa2:	54 2f       	mov	r21, r20
    2fa4:	89 81       	ldd	r24, Y+1	; 0x01
    2fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa8:	ab 81       	ldd	r26, Y+3	; 0x03
    2faa:	bc 81       	ldd	r27, Y+4	; 0x04
    2fac:	82 2b       	or	r24, r18
    2fae:	93 2b       	or	r25, r19
    2fb0:	a4 2b       	or	r26, r20
    2fb2:	b5 2b       	or	r27, r21
    2fb4:	89 83       	std	Y+1, r24	; 0x01
    2fb6:	9a 83       	std	Y+2, r25	; 0x02
    2fb8:	ab 83       	std	Y+3, r26	; 0x03
    2fba:	bc 83       	std	Y+4, r27	; 0x04
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>3) & 1))) << 9);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPort,
    2fbc:	8f 81       	ldd	r24, Y+7	; 0x07
    2fbe:	48 2f       	mov	r20, r24
    2fc0:	50 e0       	ldi	r21, 0x00	; 0
    2fc2:	ca 01       	movw	r24, r20
    2fc4:	88 0f       	add	r24, r24
    2fc6:	99 1f       	adc	r25, r25
    2fc8:	9c 01       	movw	r18, r24
    2fca:	22 0f       	add	r18, r18
    2fcc:	33 1f       	adc	r19, r19
    2fce:	22 0f       	add	r18, r18
    2fd0:	33 1f       	adc	r19, r19
    2fd2:	22 0f       	add	r18, r18
    2fd4:	33 1f       	adc	r19, r19
    2fd6:	82 0f       	add	r24, r18
    2fd8:	93 1f       	adc	r25, r19
    2fda:	84 0f       	add	r24, r20
    2fdc:	95 1f       	adc	r25, r21
    2fde:	fc 01       	movw	r30, r24
    2fe0:	e7 57       	subi	r30, 0x77	; 119
    2fe2:	fe 4f       	sbci	r31, 0xFE	; 254
    2fe4:	80 81       	ld	r24, Z
    2fe6:	8a 8b       	std	Y+18, r24	; 0x12
    2fe8:	8f 81       	ldd	r24, Y+7	; 0x07
    2fea:	48 2f       	mov	r20, r24
    2fec:	50 e0       	ldi	r21, 0x00	; 0
    2fee:	ca 01       	movw	r24, r20
    2ff0:	88 0f       	add	r24, r24
    2ff2:	99 1f       	adc	r25, r25
    2ff4:	9c 01       	movw	r18, r24
    2ff6:	22 0f       	add	r18, r18
    2ff8:	33 1f       	adc	r19, r19
    2ffa:	22 0f       	add	r18, r18
    2ffc:	33 1f       	adc	r19, r19
    2ffe:	22 0f       	add	r18, r18
    3000:	33 1f       	adc	r19, r19
    3002:	82 0f       	add	r24, r18
    3004:	93 1f       	adc	r25, r19
    3006:	84 0f       	add	r24, r20
    3008:	95 1f       	adc	r25, r21
    300a:	fc 01       	movw	r30, r24
    300c:	e6 57       	subi	r30, 0x76	; 118
    300e:	fe 4f       	sbci	r31, 0xFE	; 254
    3010:	80 81       	ld	r24, Z
    3012:	89 8b       	std	Y+17, r24	; 0x11
    3014:	88 85       	ldd	r24, Y+8	; 0x08
    3016:	88 2f       	mov	r24, r24
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	fc 01       	movw	r30, r24
    301c:	e9 55       	subi	r30, 0x59	; 89
    301e:	fe 4f       	sbci	r31, 0xFE	; 254
    3020:	80 81       	ld	r24, Z
    3022:	82 95       	swap	r24
    3024:	8f 70       	andi	r24, 0x0F	; 15
    3026:	88 2f       	mov	r24, r24
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	81 70       	andi	r24, 0x01	; 1
    302c:	90 70       	andi	r25, 0x00	; 0
    302e:	18 8a       	std	Y+16, r1	; 0x10
    3030:	00 97       	sbiw	r24, 0x00	; 0
    3032:	11 f4       	brne	.+4      	; 0x3038 <SSDLT_enuDisplayNum+0x85a>
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	88 8b       	std	Y+16, r24	; 0x10
    3038:	8a 89       	ldd	r24, Y+18	; 0x12
    303a:	69 89       	ldd	r22, Y+17	; 0x11
    303c:	48 89       	ldd	r20, Y+16	; 0x10
    303e:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    3042:	88 2f       	mov	r24, r24
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	98 2f       	mov	r25, r24
    3048:	88 27       	eor	r24, r24
    304a:	92 95       	swap	r25
    304c:	90 7f       	andi	r25, 0xF0	; 240
    304e:	9c 01       	movw	r18, r24
    3050:	44 27       	eor	r20, r20
    3052:	37 fd       	sbrc	r19, 7
    3054:	40 95       	com	r20
    3056:	54 2f       	mov	r21, r20
    3058:	89 81       	ldd	r24, Y+1	; 0x01
    305a:	9a 81       	ldd	r25, Y+2	; 0x02
    305c:	ab 81       	ldd	r26, Y+3	; 0x03
    305e:	bc 81       	ldd	r27, Y+4	; 0x04
    3060:	82 2b       	or	r24, r18
    3062:	93 2b       	or	r25, r19
    3064:	a4 2b       	or	r26, r20
    3066:	b5 2b       	or	r27, r21
    3068:	89 83       	std	Y+1, r24	; 0x01
    306a:	9a 83       	std	Y+2, r25	; 0x02
    306c:	ab 83       	std	Y+3, r26	; 0x03
    306e:	bc 83       	std	Y+4, r27	; 0x04
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>4) & 1))) << 12);

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPort,
    3070:	8f 81       	ldd	r24, Y+7	; 0x07
    3072:	48 2f       	mov	r20, r24
    3074:	50 e0       	ldi	r21, 0x00	; 0
    3076:	ca 01       	movw	r24, r20
    3078:	88 0f       	add	r24, r24
    307a:	99 1f       	adc	r25, r25
    307c:	9c 01       	movw	r18, r24
    307e:	22 0f       	add	r18, r18
    3080:	33 1f       	adc	r19, r19
    3082:	22 0f       	add	r18, r18
    3084:	33 1f       	adc	r19, r19
    3086:	22 0f       	add	r18, r18
    3088:	33 1f       	adc	r19, r19
    308a:	82 0f       	add	r24, r18
    308c:	93 1f       	adc	r25, r19
    308e:	84 0f       	add	r24, r20
    3090:	95 1f       	adc	r25, r21
    3092:	fc 01       	movw	r30, r24
    3094:	e5 57       	subi	r30, 0x75	; 117
    3096:	fe 4f       	sbci	r31, 0xFE	; 254
    3098:	80 81       	ld	r24, Z
    309a:	8f 87       	std	Y+15, r24	; 0x0f
    309c:	8f 81       	ldd	r24, Y+7	; 0x07
    309e:	48 2f       	mov	r20, r24
    30a0:	50 e0       	ldi	r21, 0x00	; 0
    30a2:	ca 01       	movw	r24, r20
    30a4:	88 0f       	add	r24, r24
    30a6:	99 1f       	adc	r25, r25
    30a8:	9c 01       	movw	r18, r24
    30aa:	22 0f       	add	r18, r18
    30ac:	33 1f       	adc	r19, r19
    30ae:	22 0f       	add	r18, r18
    30b0:	33 1f       	adc	r19, r19
    30b2:	22 0f       	add	r18, r18
    30b4:	33 1f       	adc	r19, r19
    30b6:	82 0f       	add	r24, r18
    30b8:	93 1f       	adc	r25, r19
    30ba:	84 0f       	add	r24, r20
    30bc:	95 1f       	adc	r25, r21
    30be:	fc 01       	movw	r30, r24
    30c0:	e4 57       	subi	r30, 0x74	; 116
    30c2:	fe 4f       	sbci	r31, 0xFE	; 254
    30c4:	80 81       	ld	r24, Z
    30c6:	8e 87       	std	Y+14, r24	; 0x0e
    30c8:	88 85       	ldd	r24, Y+8	; 0x08
    30ca:	88 2f       	mov	r24, r24
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	fc 01       	movw	r30, r24
    30d0:	e9 55       	subi	r30, 0x59	; 89
    30d2:	fe 4f       	sbci	r31, 0xFE	; 254
    30d4:	80 81       	ld	r24, Z
    30d6:	82 95       	swap	r24
    30d8:	86 95       	lsr	r24
    30da:	87 70       	andi	r24, 0x07	; 7
    30dc:	88 2f       	mov	r24, r24
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	81 70       	andi	r24, 0x01	; 1
    30e2:	90 70       	andi	r25, 0x00	; 0
    30e4:	1d 86       	std	Y+13, r1	; 0x0d
    30e6:	00 97       	sbiw	r24, 0x00	; 0
    30e8:	11 f4       	brne	.+4      	; 0x30ee <SSDLT_enuDisplayNum+0x910>
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	8d 87       	std	Y+13, r24	; 0x0d
    30ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    30f0:	6e 85       	ldd	r22, Y+14	; 0x0e
    30f2:	4d 85       	ldd	r20, Y+13	; 0x0d
    30f4:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    30f8:	88 2f       	mov	r24, r24
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	a0 e0       	ldi	r26, 0x00	; 0
    30fe:	b0 e0       	ldi	r27, 0x00	; 0
    3100:	9c 01       	movw	r18, r24
    3102:	ad 01       	movw	r20, r26
    3104:	01 2e       	mov	r0, r17
    3106:	1f e0       	ldi	r17, 0x0F	; 15
    3108:	22 0f       	add	r18, r18
    310a:	33 1f       	adc	r19, r19
    310c:	44 1f       	adc	r20, r20
    310e:	55 1f       	adc	r21, r21
    3110:	1a 95       	dec	r17
    3112:	d1 f7       	brne	.-12     	; 0x3108 <SSDLT_enuDisplayNum+0x92a>
    3114:	10 2d       	mov	r17, r0
    3116:	89 81       	ldd	r24, Y+1	; 0x01
    3118:	9a 81       	ldd	r25, Y+2	; 0x02
    311a:	ab 81       	ldd	r26, Y+3	; 0x03
    311c:	bc 81       	ldd	r27, Y+4	; 0x04
    311e:	82 2b       	or	r24, r18
    3120:	93 2b       	or	r25, r19
    3122:	a4 2b       	or	r26, r20
    3124:	b5 2b       	or	r27, r21
    3126:	89 83       	std	Y+1, r24	; 0x01
    3128:	9a 83       	std	Y+2, r25	; 0x02
    312a:	ab 83       	std	Y+3, r26	; 0x03
    312c:	bc 83       	std	Y+4, r27	; 0x04
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>5) & 1))) << 15));

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPort,
    312e:	8f 81       	ldd	r24, Y+7	; 0x07
    3130:	48 2f       	mov	r20, r24
    3132:	50 e0       	ldi	r21, 0x00	; 0
    3134:	ca 01       	movw	r24, r20
    3136:	88 0f       	add	r24, r24
    3138:	99 1f       	adc	r25, r25
    313a:	9c 01       	movw	r18, r24
    313c:	22 0f       	add	r18, r18
    313e:	33 1f       	adc	r19, r19
    3140:	22 0f       	add	r18, r18
    3142:	33 1f       	adc	r19, r19
    3144:	22 0f       	add	r18, r18
    3146:	33 1f       	adc	r19, r19
    3148:	82 0f       	add	r24, r18
    314a:	93 1f       	adc	r25, r19
    314c:	84 0f       	add	r24, r20
    314e:	95 1f       	adc	r25, r21
    3150:	fc 01       	movw	r30, r24
    3152:	e3 57       	subi	r30, 0x73	; 115
    3154:	fe 4f       	sbci	r31, 0xFE	; 254
    3156:	80 81       	ld	r24, Z
    3158:	8c 87       	std	Y+12, r24	; 0x0c
    315a:	8f 81       	ldd	r24, Y+7	; 0x07
    315c:	48 2f       	mov	r20, r24
    315e:	50 e0       	ldi	r21, 0x00	; 0
    3160:	ca 01       	movw	r24, r20
    3162:	88 0f       	add	r24, r24
    3164:	99 1f       	adc	r25, r25
    3166:	9c 01       	movw	r18, r24
    3168:	22 0f       	add	r18, r18
    316a:	33 1f       	adc	r19, r19
    316c:	22 0f       	add	r18, r18
    316e:	33 1f       	adc	r19, r19
    3170:	22 0f       	add	r18, r18
    3172:	33 1f       	adc	r19, r19
    3174:	82 0f       	add	r24, r18
    3176:	93 1f       	adc	r25, r19
    3178:	84 0f       	add	r24, r20
    317a:	95 1f       	adc	r25, r21
    317c:	fc 01       	movw	r30, r24
    317e:	e2 57       	subi	r30, 0x72	; 114
    3180:	fe 4f       	sbci	r31, 0xFE	; 254
    3182:	80 81       	ld	r24, Z
    3184:	8b 87       	std	Y+11, r24	; 0x0b
    3186:	88 85       	ldd	r24, Y+8	; 0x08
    3188:	88 2f       	mov	r24, r24
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	fc 01       	movw	r30, r24
    318e:	e9 55       	subi	r30, 0x59	; 89
    3190:	fe 4f       	sbci	r31, 0xFE	; 254
    3192:	80 81       	ld	r24, Z
    3194:	82 95       	swap	r24
    3196:	86 95       	lsr	r24
    3198:	86 95       	lsr	r24
    319a:	83 70       	andi	r24, 0x03	; 3
    319c:	88 2f       	mov	r24, r24
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	81 70       	andi	r24, 0x01	; 1
    31a2:	90 70       	andi	r25, 0x00	; 0
    31a4:	1a 86       	std	Y+10, r1	; 0x0a
    31a6:	00 97       	sbiw	r24, 0x00	; 0
    31a8:	11 f4       	brne	.+4      	; 0x31ae <SSDLT_enuDisplayNum+0x9d0>
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	8a 87       	std	Y+10, r24	; 0x0a
    31ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    31b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    31b2:	4a 85       	ldd	r20, Y+10	; 0x0a
    31b4:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    31b8:	88 2f       	mov	r24, r24
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	a0 e0       	ldi	r26, 0x00	; 0
    31be:	b0 e0       	ldi	r27, 0x00	; 0
    31c0:	9c 01       	movw	r18, r24
    31c2:	ad 01       	movw	r20, r26
    31c4:	01 2e       	mov	r0, r17
    31c6:	12 e1       	ldi	r17, 0x12	; 18
    31c8:	22 0f       	add	r18, r18
    31ca:	33 1f       	adc	r19, r19
    31cc:	44 1f       	adc	r20, r20
    31ce:	55 1f       	adc	r21, r21
    31d0:	1a 95       	dec	r17
    31d2:	d1 f7       	brne	.-12     	; 0x31c8 <SSDLT_enuDisplayNum+0x9ea>
    31d4:	10 2d       	mov	r17, r0
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
    31d8:	9a 81       	ldd	r25, Y+2	; 0x02
    31da:	ab 81       	ldd	r26, Y+3	; 0x03
    31dc:	bc 81       	ldd	r27, Y+4	; 0x04
    31de:	82 2b       	or	r24, r18
    31e0:	93 2b       	or	r25, r19
    31e2:	a4 2b       	or	r26, r20
    31e4:	b5 2b       	or	r27, r21
    31e6:	89 83       	std	Y+1, r24	; 0x01
    31e8:	9a 83       	std	Y+2, r25	; 0x02
    31ea:	ab 83       	std	Y+3, r26	; 0x03
    31ec:	bc 83       	std	Y+4, r27	; 0x04
    31ee:	05 c0       	rjmp	.+10     	; 0x31fa <SSDLT_enuDisplayNum+0xa1c>
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>6) & 1))) << 18));
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    31f0:	83 e0       	ldi	r24, 0x03	; 3
    31f2:	8e 83       	std	Y+6, r24	; 0x06
    31f4:	02 c0       	rjmp	.+4      	; 0x31fa <SSDLT_enuDisplayNum+0xa1c>
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    31f6:	83 e0       	ldi	r24, 0x03	; 3
    31f8:	8e 83       	std	Y+6, r24	; 0x06
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    31fa:	1d 82       	std	Y+5, r1	; 0x05
    31fc:	1e c0       	rjmp	.+60     	; 0x323a <SSDLT_enuDisplayNum+0xa5c>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
    31fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3200:	28 2f       	mov	r18, r24
    3202:	30 e0       	ldi	r19, 0x00	; 0
    3204:	89 81       	ldd	r24, Y+1	; 0x01
    3206:	9a 81       	ldd	r25, Y+2	; 0x02
    3208:	ab 81       	ldd	r26, Y+3	; 0x03
    320a:	bc 81       	ldd	r27, Y+4	; 0x04
    320c:	02 2e       	mov	r0, r18
    320e:	04 c0       	rjmp	.+8      	; 0x3218 <SSDLT_enuDisplayNum+0xa3a>
    3210:	b6 95       	lsr	r27
    3212:	a7 95       	ror	r26
    3214:	97 95       	ror	r25
    3216:	87 95       	ror	r24
    3218:	0a 94       	dec	r0
    321a:	d2 f7       	brpl	.-12     	; 0x3210 <SSDLT_enuDisplayNum+0xa32>
    321c:	87 70       	andi	r24, 0x07	; 7
    321e:	90 70       	andi	r25, 0x00	; 0
    3220:	a0 70       	andi	r26, 0x00	; 0
    3222:	b0 70       	andi	r27, 0x00	; 0
    3224:	81 30       	cpi	r24, 0x01	; 1
    3226:	91 05       	cpc	r25, r1
    3228:	a1 05       	cpc	r26, r1
    322a:	b1 05       	cpc	r27, r1
    322c:	19 f0       	breq	.+6      	; 0x3234 <SSDLT_enuDisplayNum+0xa56>
		{
			return Local_enuErrorState;
    322e:	8e 81       	ldd	r24, Y+6	; 0x06
    3230:	89 87       	std	Y+9, r24	; 0x09
    3232:	0a c0       	rjmp	.+20     	; 0x3248 <SSDLT_enuDisplayNum+0xa6a>
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    3234:	8d 81       	ldd	r24, Y+5	; 0x05
    3236:	8d 5f       	subi	r24, 0xFD	; 253
    3238:	8d 83       	std	Y+5, r24	; 0x05
    323a:	8d 81       	ldd	r24, Y+5	; 0x05
    323c:	85 31       	cpi	r24, 0x15	; 21
    323e:	f8 f2       	brcs	.-66     	; 0x31fe <SSDLT_enuDisplayNum+0xa20>
		{
			return Local_enuErrorState;
		}
	}

	Local_enuErrorState = ES_OK;
    3240:	81 e0       	ldi	r24, 0x01	; 1
    3242:	8e 83       	std	Y+6, r24	; 0x06

	return Local_enuErrorState;
    3244:	8e 81       	ldd	r24, Y+6	; 0x06
    3246:	89 87       	std	Y+9, r24	; 0x09
    3248:	89 85       	ldd	r24, Y+9	; 0x09
}
    324a:	6e 96       	adiw	r28, 0x1e	; 30
    324c:	0f b6       	in	r0, 0x3f	; 63
    324e:	f8 94       	cli
    3250:	de bf       	out	0x3e, r29	; 62
    3252:	0f be       	out	0x3f, r0	; 63
    3254:	cd bf       	out	0x3d, r28	; 61
    3256:	cf 91       	pop	r28
    3258:	df 91       	pop	r29
    325a:	08 95       	ret

0000325c <SSDLT_enuEnableCommon>:

ES_t SSDLT_enuEnableCommon(u8 Copy_u8SegID)
{
    325c:	df 93       	push	r29
    325e:	cf 93       	push	r28
    3260:	00 d0       	rcall	.+0      	; 0x3262 <SSDLT_enuEnableCommon+0x6>
    3262:	cd b7       	in	r28, 0x3d	; 61
    3264:	de b7       	in	r29, 0x3e	; 62
    3266:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3268:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8SegID < SEG_NUM)
    326a:	8a 81       	ldd	r24, Y+2	; 0x02
    326c:	82 30       	cpi	r24, 0x02	; 2
    326e:	08 f0       	brcs	.+2      	; 0x3272 <SSDLT_enuEnableCommon+0x16>
    3270:	c2 c0       	rjmp	.+388    	; 0x33f6 <SSDLT_enuEnableCommon+0x19a>
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port != NOT_CONNECTED ||
    3272:	8a 81       	ldd	r24, Y+2	; 0x02
    3274:	48 2f       	mov	r20, r24
    3276:	50 e0       	ldi	r21, 0x00	; 0
    3278:	ca 01       	movw	r24, r20
    327a:	88 0f       	add	r24, r24
    327c:	99 1f       	adc	r25, r25
    327e:	9c 01       	movw	r18, r24
    3280:	22 0f       	add	r18, r18
    3282:	33 1f       	adc	r19, r19
    3284:	22 0f       	add	r18, r18
    3286:	33 1f       	adc	r19, r19
    3288:	22 0f       	add	r18, r18
    328a:	33 1f       	adc	r19, r19
    328c:	82 0f       	add	r24, r18
    328e:	93 1f       	adc	r25, r19
    3290:	84 0f       	add	r24, r20
    3292:	95 1f       	adc	r25, r21
    3294:	fc 01       	movw	r30, r24
    3296:	e1 57       	subi	r30, 0x71	; 113
    3298:	fe 4f       	sbci	r31, 0xFE	; 254
    329a:	80 81       	ld	r24, Z
    329c:	82 30       	cpi	r24, 0x02	; 2
    329e:	c1 f4       	brne	.+48     	; 0x32d0 <SSDLT_enuEnableCommon+0x74>
    32a0:	8a 81       	ldd	r24, Y+2	; 0x02
    32a2:	48 2f       	mov	r20, r24
    32a4:	50 e0       	ldi	r21, 0x00	; 0
    32a6:	ca 01       	movw	r24, r20
    32a8:	88 0f       	add	r24, r24
    32aa:	99 1f       	adc	r25, r25
    32ac:	9c 01       	movw	r18, r24
    32ae:	22 0f       	add	r18, r18
    32b0:	33 1f       	adc	r19, r19
    32b2:	22 0f       	add	r18, r18
    32b4:	33 1f       	adc	r19, r19
    32b6:	22 0f       	add	r18, r18
    32b8:	33 1f       	adc	r19, r19
    32ba:	82 0f       	add	r24, r18
    32bc:	93 1f       	adc	r25, r19
    32be:	84 0f       	add	r24, r20
    32c0:	95 1f       	adc	r25, r21
    32c2:	fc 01       	movw	r30, r24
    32c4:	e0 57       	subi	r30, 0x70	; 112
    32c6:	fe 4f       	sbci	r31, 0xFE	; 254
    32c8:	80 81       	ld	r24, Z
    32ca:	82 30       	cpi	r24, 0x02	; 2
    32cc:	09 f4       	brne	.+2      	; 0x32d0 <SSDLT_enuEnableCommon+0x74>
    32ce:	95 c0       	rjmp	.+298    	; 0x33fa <SSDLT_enuEnableCommon+0x19e>
				SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin != NOT_CONNECTED)
		{
			if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    32d0:	8a 81       	ldd	r24, Y+2	; 0x02
    32d2:	48 2f       	mov	r20, r24
    32d4:	50 e0       	ldi	r21, 0x00	; 0
    32d6:	ca 01       	movw	r24, r20
    32d8:	88 0f       	add	r24, r24
    32da:	99 1f       	adc	r25, r25
    32dc:	9c 01       	movw	r18, r24
    32de:	22 0f       	add	r18, r18
    32e0:	33 1f       	adc	r19, r19
    32e2:	22 0f       	add	r18, r18
    32e4:	33 1f       	adc	r19, r19
    32e6:	22 0f       	add	r18, r18
    32e8:	33 1f       	adc	r19, r19
    32ea:	82 0f       	add	r24, r18
    32ec:	93 1f       	adc	r25, r19
    32ee:	84 0f       	add	r24, r20
    32f0:	95 1f       	adc	r25, r21
    32f2:	fc 01       	movw	r30, r24
    32f4:	ed 56       	subi	r30, 0x6D	; 109
    32f6:	fe 4f       	sbci	r31, 0xFE	; 254
    32f8:	80 81       	ld	r24, Z
    32fa:	81 30       	cpi	r24, 0x01	; 1
    32fc:	89 f5       	brne	.+98     	; 0x3360 <SSDLT_enuEnableCommon+0x104>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port,
    32fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3300:	48 2f       	mov	r20, r24
    3302:	50 e0       	ldi	r21, 0x00	; 0
    3304:	ca 01       	movw	r24, r20
    3306:	88 0f       	add	r24, r24
    3308:	99 1f       	adc	r25, r25
    330a:	9c 01       	movw	r18, r24
    330c:	22 0f       	add	r18, r18
    330e:	33 1f       	adc	r19, r19
    3310:	22 0f       	add	r18, r18
    3312:	33 1f       	adc	r19, r19
    3314:	22 0f       	add	r18, r18
    3316:	33 1f       	adc	r19, r19
    3318:	82 0f       	add	r24, r18
    331a:	93 1f       	adc	r25, r19
    331c:	84 0f       	add	r24, r20
    331e:	95 1f       	adc	r25, r21
    3320:	fc 01       	movw	r30, r24
    3322:	e1 57       	subi	r30, 0x71	; 113
    3324:	fe 4f       	sbci	r31, 0xFE	; 254
    3326:	60 81       	ld	r22, Z
    3328:	8a 81       	ldd	r24, Y+2	; 0x02
    332a:	48 2f       	mov	r20, r24
    332c:	50 e0       	ldi	r21, 0x00	; 0
    332e:	ca 01       	movw	r24, r20
    3330:	88 0f       	add	r24, r24
    3332:	99 1f       	adc	r25, r25
    3334:	9c 01       	movw	r18, r24
    3336:	22 0f       	add	r18, r18
    3338:	33 1f       	adc	r19, r19
    333a:	22 0f       	add	r18, r18
    333c:	33 1f       	adc	r19, r19
    333e:	22 0f       	add	r18, r18
    3340:	33 1f       	adc	r19, r19
    3342:	82 0f       	add	r24, r18
    3344:	93 1f       	adc	r25, r19
    3346:	84 0f       	add	r24, r20
    3348:	95 1f       	adc	r25, r21
    334a:	fc 01       	movw	r30, r24
    334c:	e0 57       	subi	r30, 0x70	; 112
    334e:	fe 4f       	sbci	r31, 0xFE	; 254
    3350:	90 81       	ld	r25, Z
    3352:	86 2f       	mov	r24, r22
    3354:	69 2f       	mov	r22, r25
    3356:	40 e0       	ldi	r20, 0x00	; 0
    3358:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    335c:	89 83       	std	Y+1, r24	; 0x01
    335e:	4d c0       	rjmp	.+154    	; 0x33fa <SSDLT_enuEnableCommon+0x19e>
														 SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin, DIO_u8LOW);
			}
			else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    3360:	8a 81       	ldd	r24, Y+2	; 0x02
    3362:	48 2f       	mov	r20, r24
    3364:	50 e0       	ldi	r21, 0x00	; 0
    3366:	ca 01       	movw	r24, r20
    3368:	88 0f       	add	r24, r24
    336a:	99 1f       	adc	r25, r25
    336c:	9c 01       	movw	r18, r24
    336e:	22 0f       	add	r18, r18
    3370:	33 1f       	adc	r19, r19
    3372:	22 0f       	add	r18, r18
    3374:	33 1f       	adc	r19, r19
    3376:	22 0f       	add	r18, r18
    3378:	33 1f       	adc	r19, r19
    337a:	82 0f       	add	r24, r18
    337c:	93 1f       	adc	r25, r19
    337e:	84 0f       	add	r24, r20
    3380:	95 1f       	adc	r25, r21
    3382:	fc 01       	movw	r30, r24
    3384:	ed 56       	subi	r30, 0x6D	; 109
    3386:	fe 4f       	sbci	r31, 0xFE	; 254
    3388:	80 81       	ld	r24, Z
    338a:	88 23       	and	r24, r24
    338c:	89 f5       	brne	.+98     	; 0x33f0 <SSDLT_enuEnableCommon+0x194>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port,
    338e:	8a 81       	ldd	r24, Y+2	; 0x02
    3390:	48 2f       	mov	r20, r24
    3392:	50 e0       	ldi	r21, 0x00	; 0
    3394:	ca 01       	movw	r24, r20
    3396:	88 0f       	add	r24, r24
    3398:	99 1f       	adc	r25, r25
    339a:	9c 01       	movw	r18, r24
    339c:	22 0f       	add	r18, r18
    339e:	33 1f       	adc	r19, r19
    33a0:	22 0f       	add	r18, r18
    33a2:	33 1f       	adc	r19, r19
    33a4:	22 0f       	add	r18, r18
    33a6:	33 1f       	adc	r19, r19
    33a8:	82 0f       	add	r24, r18
    33aa:	93 1f       	adc	r25, r19
    33ac:	84 0f       	add	r24, r20
    33ae:	95 1f       	adc	r25, r21
    33b0:	fc 01       	movw	r30, r24
    33b2:	e1 57       	subi	r30, 0x71	; 113
    33b4:	fe 4f       	sbci	r31, 0xFE	; 254
    33b6:	60 81       	ld	r22, Z
    33b8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ba:	48 2f       	mov	r20, r24
    33bc:	50 e0       	ldi	r21, 0x00	; 0
    33be:	ca 01       	movw	r24, r20
    33c0:	88 0f       	add	r24, r24
    33c2:	99 1f       	adc	r25, r25
    33c4:	9c 01       	movw	r18, r24
    33c6:	22 0f       	add	r18, r18
    33c8:	33 1f       	adc	r19, r19
    33ca:	22 0f       	add	r18, r18
    33cc:	33 1f       	adc	r19, r19
    33ce:	22 0f       	add	r18, r18
    33d0:	33 1f       	adc	r19, r19
    33d2:	82 0f       	add	r24, r18
    33d4:	93 1f       	adc	r25, r19
    33d6:	84 0f       	add	r24, r20
    33d8:	95 1f       	adc	r25, r21
    33da:	fc 01       	movw	r30, r24
    33dc:	e0 57       	subi	r30, 0x70	; 112
    33de:	fe 4f       	sbci	r31, 0xFE	; 254
    33e0:	90 81       	ld	r25, Z
    33e2:	86 2f       	mov	r24, r22
    33e4:	69 2f       	mov	r22, r25
    33e6:	41 e0       	ldi	r20, 0x01	; 1
    33e8:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    33ec:	89 83       	std	Y+1, r24	; 0x01
    33ee:	05 c0       	rjmp	.+10     	; 0x33fa <SSDLT_enuEnableCommon+0x19e>
														SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin, DIO_u8HIGH);
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    33f0:	83 e0       	ldi	r24, 0x03	; 3
    33f2:	89 83       	std	Y+1, r24	; 0x01
    33f4:	02 c0       	rjmp	.+4      	; 0x33fa <SSDLT_enuEnableCommon+0x19e>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    33f6:	83 e0       	ldi	r24, 0x03	; 3
    33f8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    33fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    33fc:	0f 90       	pop	r0
    33fe:	0f 90       	pop	r0
    3400:	cf 91       	pop	r28
    3402:	df 91       	pop	r29
    3404:	08 95       	ret

00003406 <SSDLT_enuDisableCommon>:

ES_t SSDLT_enuDisableCommon(u8 Copy_u8SegID)
{
    3406:	df 93       	push	r29
    3408:	cf 93       	push	r28
    340a:	00 d0       	rcall	.+0      	; 0x340c <SSDLT_enuDisableCommon+0x6>
    340c:	cd b7       	in	r28, 0x3d	; 61
    340e:	de b7       	in	r29, 0x3e	; 62
    3410:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3412:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8SegID < SEG_NUM)
    3414:	8a 81       	ldd	r24, Y+2	; 0x02
    3416:	82 30       	cpi	r24, 0x02	; 2
    3418:	08 f0       	brcs	.+2      	; 0x341c <SSDLT_enuDisableCommon+0x16>
    341a:	c2 c0       	rjmp	.+388    	; 0x35a0 <SSDLT_enuDisableCommon+0x19a>
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port != NOT_CONNECTED ||
    341c:	8a 81       	ldd	r24, Y+2	; 0x02
    341e:	48 2f       	mov	r20, r24
    3420:	50 e0       	ldi	r21, 0x00	; 0
    3422:	ca 01       	movw	r24, r20
    3424:	88 0f       	add	r24, r24
    3426:	99 1f       	adc	r25, r25
    3428:	9c 01       	movw	r18, r24
    342a:	22 0f       	add	r18, r18
    342c:	33 1f       	adc	r19, r19
    342e:	22 0f       	add	r18, r18
    3430:	33 1f       	adc	r19, r19
    3432:	22 0f       	add	r18, r18
    3434:	33 1f       	adc	r19, r19
    3436:	82 0f       	add	r24, r18
    3438:	93 1f       	adc	r25, r19
    343a:	84 0f       	add	r24, r20
    343c:	95 1f       	adc	r25, r21
    343e:	fc 01       	movw	r30, r24
    3440:	e1 57       	subi	r30, 0x71	; 113
    3442:	fe 4f       	sbci	r31, 0xFE	; 254
    3444:	80 81       	ld	r24, Z
    3446:	82 30       	cpi	r24, 0x02	; 2
    3448:	c1 f4       	brne	.+48     	; 0x347a <SSDLT_enuDisableCommon+0x74>
    344a:	8a 81       	ldd	r24, Y+2	; 0x02
    344c:	48 2f       	mov	r20, r24
    344e:	50 e0       	ldi	r21, 0x00	; 0
    3450:	ca 01       	movw	r24, r20
    3452:	88 0f       	add	r24, r24
    3454:	99 1f       	adc	r25, r25
    3456:	9c 01       	movw	r18, r24
    3458:	22 0f       	add	r18, r18
    345a:	33 1f       	adc	r19, r19
    345c:	22 0f       	add	r18, r18
    345e:	33 1f       	adc	r19, r19
    3460:	22 0f       	add	r18, r18
    3462:	33 1f       	adc	r19, r19
    3464:	82 0f       	add	r24, r18
    3466:	93 1f       	adc	r25, r19
    3468:	84 0f       	add	r24, r20
    346a:	95 1f       	adc	r25, r21
    346c:	fc 01       	movw	r30, r24
    346e:	e0 57       	subi	r30, 0x70	; 112
    3470:	fe 4f       	sbci	r31, 0xFE	; 254
    3472:	80 81       	ld	r24, Z
    3474:	82 30       	cpi	r24, 0x02	; 2
    3476:	09 f4       	brne	.+2      	; 0x347a <SSDLT_enuDisableCommon+0x74>
    3478:	95 c0       	rjmp	.+298    	; 0x35a4 <SSDLT_enuDisableCommon+0x19e>
				SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin != NOT_CONNECTED)
		{
			if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    347a:	8a 81       	ldd	r24, Y+2	; 0x02
    347c:	48 2f       	mov	r20, r24
    347e:	50 e0       	ldi	r21, 0x00	; 0
    3480:	ca 01       	movw	r24, r20
    3482:	88 0f       	add	r24, r24
    3484:	99 1f       	adc	r25, r25
    3486:	9c 01       	movw	r18, r24
    3488:	22 0f       	add	r18, r18
    348a:	33 1f       	adc	r19, r19
    348c:	22 0f       	add	r18, r18
    348e:	33 1f       	adc	r19, r19
    3490:	22 0f       	add	r18, r18
    3492:	33 1f       	adc	r19, r19
    3494:	82 0f       	add	r24, r18
    3496:	93 1f       	adc	r25, r19
    3498:	84 0f       	add	r24, r20
    349a:	95 1f       	adc	r25, r21
    349c:	fc 01       	movw	r30, r24
    349e:	ed 56       	subi	r30, 0x6D	; 109
    34a0:	fe 4f       	sbci	r31, 0xFE	; 254
    34a2:	80 81       	ld	r24, Z
    34a4:	81 30       	cpi	r24, 0x01	; 1
    34a6:	89 f5       	brne	.+98     	; 0x350a <SSDLT_enuDisableCommon+0x104>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port,
    34a8:	8a 81       	ldd	r24, Y+2	; 0x02
    34aa:	48 2f       	mov	r20, r24
    34ac:	50 e0       	ldi	r21, 0x00	; 0
    34ae:	ca 01       	movw	r24, r20
    34b0:	88 0f       	add	r24, r24
    34b2:	99 1f       	adc	r25, r25
    34b4:	9c 01       	movw	r18, r24
    34b6:	22 0f       	add	r18, r18
    34b8:	33 1f       	adc	r19, r19
    34ba:	22 0f       	add	r18, r18
    34bc:	33 1f       	adc	r19, r19
    34be:	22 0f       	add	r18, r18
    34c0:	33 1f       	adc	r19, r19
    34c2:	82 0f       	add	r24, r18
    34c4:	93 1f       	adc	r25, r19
    34c6:	84 0f       	add	r24, r20
    34c8:	95 1f       	adc	r25, r21
    34ca:	fc 01       	movw	r30, r24
    34cc:	e1 57       	subi	r30, 0x71	; 113
    34ce:	fe 4f       	sbci	r31, 0xFE	; 254
    34d0:	60 81       	ld	r22, Z
    34d2:	8a 81       	ldd	r24, Y+2	; 0x02
    34d4:	48 2f       	mov	r20, r24
    34d6:	50 e0       	ldi	r21, 0x00	; 0
    34d8:	ca 01       	movw	r24, r20
    34da:	88 0f       	add	r24, r24
    34dc:	99 1f       	adc	r25, r25
    34de:	9c 01       	movw	r18, r24
    34e0:	22 0f       	add	r18, r18
    34e2:	33 1f       	adc	r19, r19
    34e4:	22 0f       	add	r18, r18
    34e6:	33 1f       	adc	r19, r19
    34e8:	22 0f       	add	r18, r18
    34ea:	33 1f       	adc	r19, r19
    34ec:	82 0f       	add	r24, r18
    34ee:	93 1f       	adc	r25, r19
    34f0:	84 0f       	add	r24, r20
    34f2:	95 1f       	adc	r25, r21
    34f4:	fc 01       	movw	r30, r24
    34f6:	e0 57       	subi	r30, 0x70	; 112
    34f8:	fe 4f       	sbci	r31, 0xFE	; 254
    34fa:	90 81       	ld	r25, Z
    34fc:	86 2f       	mov	r24, r22
    34fe:	69 2f       	mov	r22, r25
    3500:	41 e0       	ldi	r20, 0x01	; 1
    3502:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    3506:	89 83       	std	Y+1, r24	; 0x01
    3508:	4d c0       	rjmp	.+154    	; 0x35a4 <SSDLT_enuDisableCommon+0x19e>
														 SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin, DIO_u8HIGH);
			}
			else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    350a:	8a 81       	ldd	r24, Y+2	; 0x02
    350c:	48 2f       	mov	r20, r24
    350e:	50 e0       	ldi	r21, 0x00	; 0
    3510:	ca 01       	movw	r24, r20
    3512:	88 0f       	add	r24, r24
    3514:	99 1f       	adc	r25, r25
    3516:	9c 01       	movw	r18, r24
    3518:	22 0f       	add	r18, r18
    351a:	33 1f       	adc	r19, r19
    351c:	22 0f       	add	r18, r18
    351e:	33 1f       	adc	r19, r19
    3520:	22 0f       	add	r18, r18
    3522:	33 1f       	adc	r19, r19
    3524:	82 0f       	add	r24, r18
    3526:	93 1f       	adc	r25, r19
    3528:	84 0f       	add	r24, r20
    352a:	95 1f       	adc	r25, r21
    352c:	fc 01       	movw	r30, r24
    352e:	ed 56       	subi	r30, 0x6D	; 109
    3530:	fe 4f       	sbci	r31, 0xFE	; 254
    3532:	80 81       	ld	r24, Z
    3534:	88 23       	and	r24, r24
    3536:	89 f5       	brne	.+98     	; 0x359a <SSDLT_enuDisableCommon+0x194>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port,
    3538:	8a 81       	ldd	r24, Y+2	; 0x02
    353a:	48 2f       	mov	r20, r24
    353c:	50 e0       	ldi	r21, 0x00	; 0
    353e:	ca 01       	movw	r24, r20
    3540:	88 0f       	add	r24, r24
    3542:	99 1f       	adc	r25, r25
    3544:	9c 01       	movw	r18, r24
    3546:	22 0f       	add	r18, r18
    3548:	33 1f       	adc	r19, r19
    354a:	22 0f       	add	r18, r18
    354c:	33 1f       	adc	r19, r19
    354e:	22 0f       	add	r18, r18
    3550:	33 1f       	adc	r19, r19
    3552:	82 0f       	add	r24, r18
    3554:	93 1f       	adc	r25, r19
    3556:	84 0f       	add	r24, r20
    3558:	95 1f       	adc	r25, r21
    355a:	fc 01       	movw	r30, r24
    355c:	e1 57       	subi	r30, 0x71	; 113
    355e:	fe 4f       	sbci	r31, 0xFE	; 254
    3560:	60 81       	ld	r22, Z
    3562:	8a 81       	ldd	r24, Y+2	; 0x02
    3564:	48 2f       	mov	r20, r24
    3566:	50 e0       	ldi	r21, 0x00	; 0
    3568:	ca 01       	movw	r24, r20
    356a:	88 0f       	add	r24, r24
    356c:	99 1f       	adc	r25, r25
    356e:	9c 01       	movw	r18, r24
    3570:	22 0f       	add	r18, r18
    3572:	33 1f       	adc	r19, r19
    3574:	22 0f       	add	r18, r18
    3576:	33 1f       	adc	r19, r19
    3578:	22 0f       	add	r18, r18
    357a:	33 1f       	adc	r19, r19
    357c:	82 0f       	add	r24, r18
    357e:	93 1f       	adc	r25, r19
    3580:	84 0f       	add	r24, r20
    3582:	95 1f       	adc	r25, r21
    3584:	fc 01       	movw	r30, r24
    3586:	e0 57       	subi	r30, 0x70	; 112
    3588:	fe 4f       	sbci	r31, 0xFE	; 254
    358a:	90 81       	ld	r25, Z
    358c:	86 2f       	mov	r24, r22
    358e:	69 2f       	mov	r22, r25
    3590:	40 e0       	ldi	r20, 0x00	; 0
    3592:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    3596:	89 83       	std	Y+1, r24	; 0x01
    3598:	05 c0       	rjmp	.+10     	; 0x35a4 <SSDLT_enuDisableCommon+0x19e>
														SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin, DIO_u8LOW);
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    359a:	83 e0       	ldi	r24, 0x03	; 3
    359c:	89 83       	std	Y+1, r24	; 0x01
    359e:	02 c0       	rjmp	.+4      	; 0x35a4 <SSDLT_enuDisableCommon+0x19e>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    35a0:	83 e0       	ldi	r24, 0x03	; 3
    35a2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    35a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    35a6:	0f 90       	pop	r0
    35a8:	0f 90       	pop	r0
    35aa:	cf 91       	pop	r28
    35ac:	df 91       	pop	r29
    35ae:	08 95       	ret

000035b0 <SSDLT_enuEnableDot>:

ES_t SSDLT_enuEnableDot(u8 Copy_u8SegID)
{
    35b0:	df 93       	push	r29
    35b2:	cf 93       	push	r28
    35b4:	00 d0       	rcall	.+0      	; 0x35b6 <SSDLT_enuEnableDot+0x6>
    35b6:	cd b7       	in	r28, 0x3d	; 61
    35b8:	de b7       	in	r29, 0x3e	; 62
    35ba:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    35bc:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8SegID < SEG_NUM)
    35be:	8a 81       	ldd	r24, Y+2	; 0x02
    35c0:	82 30       	cpi	r24, 0x02	; 2
    35c2:	08 f0       	brcs	.+2      	; 0x35c6 <SSDLT_enuEnableDot+0x16>
    35c4:	c2 c0       	rjmp	.+388    	; 0x374a <SSDLT_enuEnableDot+0x19a>
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port != NOT_CONNECTED ||
    35c6:	8a 81       	ldd	r24, Y+2	; 0x02
    35c8:	48 2f       	mov	r20, r24
    35ca:	50 e0       	ldi	r21, 0x00	; 0
    35cc:	ca 01       	movw	r24, r20
    35ce:	88 0f       	add	r24, r24
    35d0:	99 1f       	adc	r25, r25
    35d2:	9c 01       	movw	r18, r24
    35d4:	22 0f       	add	r18, r18
    35d6:	33 1f       	adc	r19, r19
    35d8:	22 0f       	add	r18, r18
    35da:	33 1f       	adc	r19, r19
    35dc:	22 0f       	add	r18, r18
    35de:	33 1f       	adc	r19, r19
    35e0:	82 0f       	add	r24, r18
    35e2:	93 1f       	adc	r25, r19
    35e4:	84 0f       	add	r24, r20
    35e6:	95 1f       	adc	r25, r21
    35e8:	fc 01       	movw	r30, r24
    35ea:	ef 56       	subi	r30, 0x6F	; 111
    35ec:	fe 4f       	sbci	r31, 0xFE	; 254
    35ee:	80 81       	ld	r24, Z
    35f0:	82 30       	cpi	r24, 0x02	; 2
    35f2:	c1 f4       	brne	.+48     	; 0x3624 <SSDLT_enuEnableDot+0x74>
    35f4:	8a 81       	ldd	r24, Y+2	; 0x02
    35f6:	48 2f       	mov	r20, r24
    35f8:	50 e0       	ldi	r21, 0x00	; 0
    35fa:	ca 01       	movw	r24, r20
    35fc:	88 0f       	add	r24, r24
    35fe:	99 1f       	adc	r25, r25
    3600:	9c 01       	movw	r18, r24
    3602:	22 0f       	add	r18, r18
    3604:	33 1f       	adc	r19, r19
    3606:	22 0f       	add	r18, r18
    3608:	33 1f       	adc	r19, r19
    360a:	22 0f       	add	r18, r18
    360c:	33 1f       	adc	r19, r19
    360e:	82 0f       	add	r24, r18
    3610:	93 1f       	adc	r25, r19
    3612:	84 0f       	add	r24, r20
    3614:	95 1f       	adc	r25, r21
    3616:	fc 01       	movw	r30, r24
    3618:	ee 56       	subi	r30, 0x6E	; 110
    361a:	fe 4f       	sbci	r31, 0xFE	; 254
    361c:	80 81       	ld	r24, Z
    361e:	82 30       	cpi	r24, 0x02	; 2
    3620:	09 f4       	brne	.+2      	; 0x3624 <SSDLT_enuEnableDot+0x74>
    3622:	95 c0       	rjmp	.+298    	; 0x374e <SSDLT_enuEnableDot+0x19e>
				SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin != NOT_CONNECTED)
		{
			if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    3624:	8a 81       	ldd	r24, Y+2	; 0x02
    3626:	48 2f       	mov	r20, r24
    3628:	50 e0       	ldi	r21, 0x00	; 0
    362a:	ca 01       	movw	r24, r20
    362c:	88 0f       	add	r24, r24
    362e:	99 1f       	adc	r25, r25
    3630:	9c 01       	movw	r18, r24
    3632:	22 0f       	add	r18, r18
    3634:	33 1f       	adc	r19, r19
    3636:	22 0f       	add	r18, r18
    3638:	33 1f       	adc	r19, r19
    363a:	22 0f       	add	r18, r18
    363c:	33 1f       	adc	r19, r19
    363e:	82 0f       	add	r24, r18
    3640:	93 1f       	adc	r25, r19
    3642:	84 0f       	add	r24, r20
    3644:	95 1f       	adc	r25, r21
    3646:	fc 01       	movw	r30, r24
    3648:	ed 56       	subi	r30, 0x6D	; 109
    364a:	fe 4f       	sbci	r31, 0xFE	; 254
    364c:	80 81       	ld	r24, Z
    364e:	81 30       	cpi	r24, 0x01	; 1
    3650:	89 f5       	brne	.+98     	; 0x36b4 <SSDLT_enuEnableDot+0x104>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port,
    3652:	8a 81       	ldd	r24, Y+2	; 0x02
    3654:	48 2f       	mov	r20, r24
    3656:	50 e0       	ldi	r21, 0x00	; 0
    3658:	ca 01       	movw	r24, r20
    365a:	88 0f       	add	r24, r24
    365c:	99 1f       	adc	r25, r25
    365e:	9c 01       	movw	r18, r24
    3660:	22 0f       	add	r18, r18
    3662:	33 1f       	adc	r19, r19
    3664:	22 0f       	add	r18, r18
    3666:	33 1f       	adc	r19, r19
    3668:	22 0f       	add	r18, r18
    366a:	33 1f       	adc	r19, r19
    366c:	82 0f       	add	r24, r18
    366e:	93 1f       	adc	r25, r19
    3670:	84 0f       	add	r24, r20
    3672:	95 1f       	adc	r25, r21
    3674:	fc 01       	movw	r30, r24
    3676:	ef 56       	subi	r30, 0x6F	; 111
    3678:	fe 4f       	sbci	r31, 0xFE	; 254
    367a:	60 81       	ld	r22, Z
    367c:	8a 81       	ldd	r24, Y+2	; 0x02
    367e:	48 2f       	mov	r20, r24
    3680:	50 e0       	ldi	r21, 0x00	; 0
    3682:	ca 01       	movw	r24, r20
    3684:	88 0f       	add	r24, r24
    3686:	99 1f       	adc	r25, r25
    3688:	9c 01       	movw	r18, r24
    368a:	22 0f       	add	r18, r18
    368c:	33 1f       	adc	r19, r19
    368e:	22 0f       	add	r18, r18
    3690:	33 1f       	adc	r19, r19
    3692:	22 0f       	add	r18, r18
    3694:	33 1f       	adc	r19, r19
    3696:	82 0f       	add	r24, r18
    3698:	93 1f       	adc	r25, r19
    369a:	84 0f       	add	r24, r20
    369c:	95 1f       	adc	r25, r21
    369e:	fc 01       	movw	r30, r24
    36a0:	ee 56       	subi	r30, 0x6E	; 110
    36a2:	fe 4f       	sbci	r31, 0xFE	; 254
    36a4:	90 81       	ld	r25, Z
    36a6:	86 2f       	mov	r24, r22
    36a8:	69 2f       	mov	r22, r25
    36aa:	41 e0       	ldi	r20, 0x01	; 1
    36ac:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    36b0:	89 83       	std	Y+1, r24	; 0x01
    36b2:	4d c0       	rjmp	.+154    	; 0x374e <SSDLT_enuEnableDot+0x19e>
														 SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin, DIO_u8HIGH);
			}
			else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    36b4:	8a 81       	ldd	r24, Y+2	; 0x02
    36b6:	48 2f       	mov	r20, r24
    36b8:	50 e0       	ldi	r21, 0x00	; 0
    36ba:	ca 01       	movw	r24, r20
    36bc:	88 0f       	add	r24, r24
    36be:	99 1f       	adc	r25, r25
    36c0:	9c 01       	movw	r18, r24
    36c2:	22 0f       	add	r18, r18
    36c4:	33 1f       	adc	r19, r19
    36c6:	22 0f       	add	r18, r18
    36c8:	33 1f       	adc	r19, r19
    36ca:	22 0f       	add	r18, r18
    36cc:	33 1f       	adc	r19, r19
    36ce:	82 0f       	add	r24, r18
    36d0:	93 1f       	adc	r25, r19
    36d2:	84 0f       	add	r24, r20
    36d4:	95 1f       	adc	r25, r21
    36d6:	fc 01       	movw	r30, r24
    36d8:	ed 56       	subi	r30, 0x6D	; 109
    36da:	fe 4f       	sbci	r31, 0xFE	; 254
    36dc:	80 81       	ld	r24, Z
    36de:	88 23       	and	r24, r24
    36e0:	89 f5       	brne	.+98     	; 0x3744 <SSDLT_enuEnableDot+0x194>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port,
    36e2:	8a 81       	ldd	r24, Y+2	; 0x02
    36e4:	48 2f       	mov	r20, r24
    36e6:	50 e0       	ldi	r21, 0x00	; 0
    36e8:	ca 01       	movw	r24, r20
    36ea:	88 0f       	add	r24, r24
    36ec:	99 1f       	adc	r25, r25
    36ee:	9c 01       	movw	r18, r24
    36f0:	22 0f       	add	r18, r18
    36f2:	33 1f       	adc	r19, r19
    36f4:	22 0f       	add	r18, r18
    36f6:	33 1f       	adc	r19, r19
    36f8:	22 0f       	add	r18, r18
    36fa:	33 1f       	adc	r19, r19
    36fc:	82 0f       	add	r24, r18
    36fe:	93 1f       	adc	r25, r19
    3700:	84 0f       	add	r24, r20
    3702:	95 1f       	adc	r25, r21
    3704:	fc 01       	movw	r30, r24
    3706:	ef 56       	subi	r30, 0x6F	; 111
    3708:	fe 4f       	sbci	r31, 0xFE	; 254
    370a:	60 81       	ld	r22, Z
    370c:	8a 81       	ldd	r24, Y+2	; 0x02
    370e:	48 2f       	mov	r20, r24
    3710:	50 e0       	ldi	r21, 0x00	; 0
    3712:	ca 01       	movw	r24, r20
    3714:	88 0f       	add	r24, r24
    3716:	99 1f       	adc	r25, r25
    3718:	9c 01       	movw	r18, r24
    371a:	22 0f       	add	r18, r18
    371c:	33 1f       	adc	r19, r19
    371e:	22 0f       	add	r18, r18
    3720:	33 1f       	adc	r19, r19
    3722:	22 0f       	add	r18, r18
    3724:	33 1f       	adc	r19, r19
    3726:	82 0f       	add	r24, r18
    3728:	93 1f       	adc	r25, r19
    372a:	84 0f       	add	r24, r20
    372c:	95 1f       	adc	r25, r21
    372e:	fc 01       	movw	r30, r24
    3730:	ee 56       	subi	r30, 0x6E	; 110
    3732:	fe 4f       	sbci	r31, 0xFE	; 254
    3734:	90 81       	ld	r25, Z
    3736:	86 2f       	mov	r24, r22
    3738:	69 2f       	mov	r22, r25
    373a:	40 e0       	ldi	r20, 0x00	; 0
    373c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    3740:	89 83       	std	Y+1, r24	; 0x01
    3742:	05 c0       	rjmp	.+10     	; 0x374e <SSDLT_enuEnableDot+0x19e>
														SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin, DIO_u8LOW);
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    3744:	83 e0       	ldi	r24, 0x03	; 3
    3746:	89 83       	std	Y+1, r24	; 0x01
    3748:	02 c0       	rjmp	.+4      	; 0x374e <SSDLT_enuEnableDot+0x19e>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    374a:	83 e0       	ldi	r24, 0x03	; 3
    374c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    374e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3750:	0f 90       	pop	r0
    3752:	0f 90       	pop	r0
    3754:	cf 91       	pop	r28
    3756:	df 91       	pop	r29
    3758:	08 95       	ret

0000375a <SSDLT_enuDisableDot>:

ES_t SSDLT_enuDisableDot(u8 Copy_u8SegID)
{
    375a:	df 93       	push	r29
    375c:	cf 93       	push	r28
    375e:	00 d0       	rcall	.+0      	; 0x3760 <SSDLT_enuDisableDot+0x6>
    3760:	0f 92       	push	r0
    3762:	cd b7       	in	r28, 0x3d	; 61
    3764:	de b7       	in	r29, 0x3e	; 62
    3766:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3768:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8SegID < SEG_NUM)
    376a:	8a 81       	ldd	r24, Y+2	; 0x02
    376c:	82 30       	cpi	r24, 0x02	; 2
    376e:	08 f0       	brcs	.+2      	; 0x3772 <SSDLT_enuDisableDot+0x18>
    3770:	c5 c0       	rjmp	.+394    	; 0x38fc <SSDLT_enuDisableDot+0x1a2>
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port != NOT_CONNECTED ||
    3772:	8a 81       	ldd	r24, Y+2	; 0x02
    3774:	48 2f       	mov	r20, r24
    3776:	50 e0       	ldi	r21, 0x00	; 0
    3778:	ca 01       	movw	r24, r20
    377a:	88 0f       	add	r24, r24
    377c:	99 1f       	adc	r25, r25
    377e:	9c 01       	movw	r18, r24
    3780:	22 0f       	add	r18, r18
    3782:	33 1f       	adc	r19, r19
    3784:	22 0f       	add	r18, r18
    3786:	33 1f       	adc	r19, r19
    3788:	22 0f       	add	r18, r18
    378a:	33 1f       	adc	r19, r19
    378c:	82 0f       	add	r24, r18
    378e:	93 1f       	adc	r25, r19
    3790:	84 0f       	add	r24, r20
    3792:	95 1f       	adc	r25, r21
    3794:	fc 01       	movw	r30, r24
    3796:	ef 56       	subi	r30, 0x6F	; 111
    3798:	fe 4f       	sbci	r31, 0xFE	; 254
    379a:	80 81       	ld	r24, Z
    379c:	82 30       	cpi	r24, 0x02	; 2
    379e:	c1 f4       	brne	.+48     	; 0x37d0 <SSDLT_enuDisableDot+0x76>
    37a0:	8a 81       	ldd	r24, Y+2	; 0x02
    37a2:	48 2f       	mov	r20, r24
    37a4:	50 e0       	ldi	r21, 0x00	; 0
    37a6:	ca 01       	movw	r24, r20
    37a8:	88 0f       	add	r24, r24
    37aa:	99 1f       	adc	r25, r25
    37ac:	9c 01       	movw	r18, r24
    37ae:	22 0f       	add	r18, r18
    37b0:	33 1f       	adc	r19, r19
    37b2:	22 0f       	add	r18, r18
    37b4:	33 1f       	adc	r19, r19
    37b6:	22 0f       	add	r18, r18
    37b8:	33 1f       	adc	r19, r19
    37ba:	82 0f       	add	r24, r18
    37bc:	93 1f       	adc	r25, r19
    37be:	84 0f       	add	r24, r20
    37c0:	95 1f       	adc	r25, r21
    37c2:	fc 01       	movw	r30, r24
    37c4:	ee 56       	subi	r30, 0x6E	; 110
    37c6:	fe 4f       	sbci	r31, 0xFE	; 254
    37c8:	80 81       	ld	r24, Z
    37ca:	82 30       	cpi	r24, 0x02	; 2
    37cc:	09 f4       	brne	.+2      	; 0x37d0 <SSDLT_enuDisableDot+0x76>
    37ce:	93 c0       	rjmp	.+294    	; 0x38f6 <SSDLT_enuDisableDot+0x19c>
				SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin != NOT_CONNECTED)
		{
			if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    37d0:	8a 81       	ldd	r24, Y+2	; 0x02
    37d2:	48 2f       	mov	r20, r24
    37d4:	50 e0       	ldi	r21, 0x00	; 0
    37d6:	ca 01       	movw	r24, r20
    37d8:	88 0f       	add	r24, r24
    37da:	99 1f       	adc	r25, r25
    37dc:	9c 01       	movw	r18, r24
    37de:	22 0f       	add	r18, r18
    37e0:	33 1f       	adc	r19, r19
    37e2:	22 0f       	add	r18, r18
    37e4:	33 1f       	adc	r19, r19
    37e6:	22 0f       	add	r18, r18
    37e8:	33 1f       	adc	r19, r19
    37ea:	82 0f       	add	r24, r18
    37ec:	93 1f       	adc	r25, r19
    37ee:	84 0f       	add	r24, r20
    37f0:	95 1f       	adc	r25, r21
    37f2:	fc 01       	movw	r30, r24
    37f4:	ed 56       	subi	r30, 0x6D	; 109
    37f6:	fe 4f       	sbci	r31, 0xFE	; 254
    37f8:	80 81       	ld	r24, Z
    37fa:	81 30       	cpi	r24, 0x01	; 1
    37fc:	89 f5       	brne	.+98     	; 0x3860 <SSDLT_enuDisableDot+0x106>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port,
    37fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3800:	48 2f       	mov	r20, r24
    3802:	50 e0       	ldi	r21, 0x00	; 0
    3804:	ca 01       	movw	r24, r20
    3806:	88 0f       	add	r24, r24
    3808:	99 1f       	adc	r25, r25
    380a:	9c 01       	movw	r18, r24
    380c:	22 0f       	add	r18, r18
    380e:	33 1f       	adc	r19, r19
    3810:	22 0f       	add	r18, r18
    3812:	33 1f       	adc	r19, r19
    3814:	22 0f       	add	r18, r18
    3816:	33 1f       	adc	r19, r19
    3818:	82 0f       	add	r24, r18
    381a:	93 1f       	adc	r25, r19
    381c:	84 0f       	add	r24, r20
    381e:	95 1f       	adc	r25, r21
    3820:	fc 01       	movw	r30, r24
    3822:	ef 56       	subi	r30, 0x6F	; 111
    3824:	fe 4f       	sbci	r31, 0xFE	; 254
    3826:	60 81       	ld	r22, Z
    3828:	8a 81       	ldd	r24, Y+2	; 0x02
    382a:	48 2f       	mov	r20, r24
    382c:	50 e0       	ldi	r21, 0x00	; 0
    382e:	ca 01       	movw	r24, r20
    3830:	88 0f       	add	r24, r24
    3832:	99 1f       	adc	r25, r25
    3834:	9c 01       	movw	r18, r24
    3836:	22 0f       	add	r18, r18
    3838:	33 1f       	adc	r19, r19
    383a:	22 0f       	add	r18, r18
    383c:	33 1f       	adc	r19, r19
    383e:	22 0f       	add	r18, r18
    3840:	33 1f       	adc	r19, r19
    3842:	82 0f       	add	r24, r18
    3844:	93 1f       	adc	r25, r19
    3846:	84 0f       	add	r24, r20
    3848:	95 1f       	adc	r25, r21
    384a:	fc 01       	movw	r30, r24
    384c:	ee 56       	subi	r30, 0x6E	; 110
    384e:	fe 4f       	sbci	r31, 0xFE	; 254
    3850:	90 81       	ld	r25, Z
    3852:	86 2f       	mov	r24, r22
    3854:	69 2f       	mov	r22, r25
    3856:	40 e0       	ldi	r20, 0x00	; 0
    3858:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    385c:	89 83       	std	Y+1, r24	; 0x01
    385e:	4b c0       	rjmp	.+150    	; 0x38f6 <SSDLT_enuDisableDot+0x19c>
														 SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin, DIO_u8LOW);
			}
			else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    3860:	8a 81       	ldd	r24, Y+2	; 0x02
    3862:	48 2f       	mov	r20, r24
    3864:	50 e0       	ldi	r21, 0x00	; 0
    3866:	ca 01       	movw	r24, r20
    3868:	88 0f       	add	r24, r24
    386a:	99 1f       	adc	r25, r25
    386c:	9c 01       	movw	r18, r24
    386e:	22 0f       	add	r18, r18
    3870:	33 1f       	adc	r19, r19
    3872:	22 0f       	add	r18, r18
    3874:	33 1f       	adc	r19, r19
    3876:	22 0f       	add	r18, r18
    3878:	33 1f       	adc	r19, r19
    387a:	82 0f       	add	r24, r18
    387c:	93 1f       	adc	r25, r19
    387e:	84 0f       	add	r24, r20
    3880:	95 1f       	adc	r25, r21
    3882:	fc 01       	movw	r30, r24
    3884:	ed 56       	subi	r30, 0x6D	; 109
    3886:	fe 4f       	sbci	r31, 0xFE	; 254
    3888:	80 81       	ld	r24, Z
    388a:	88 23       	and	r24, r24
    388c:	89 f5       	brne	.+98     	; 0x38f0 <SSDLT_enuDisableDot+0x196>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port,
    388e:	8a 81       	ldd	r24, Y+2	; 0x02
    3890:	48 2f       	mov	r20, r24
    3892:	50 e0       	ldi	r21, 0x00	; 0
    3894:	ca 01       	movw	r24, r20
    3896:	88 0f       	add	r24, r24
    3898:	99 1f       	adc	r25, r25
    389a:	9c 01       	movw	r18, r24
    389c:	22 0f       	add	r18, r18
    389e:	33 1f       	adc	r19, r19
    38a0:	22 0f       	add	r18, r18
    38a2:	33 1f       	adc	r19, r19
    38a4:	22 0f       	add	r18, r18
    38a6:	33 1f       	adc	r19, r19
    38a8:	82 0f       	add	r24, r18
    38aa:	93 1f       	adc	r25, r19
    38ac:	84 0f       	add	r24, r20
    38ae:	95 1f       	adc	r25, r21
    38b0:	fc 01       	movw	r30, r24
    38b2:	ef 56       	subi	r30, 0x6F	; 111
    38b4:	fe 4f       	sbci	r31, 0xFE	; 254
    38b6:	60 81       	ld	r22, Z
    38b8:	8a 81       	ldd	r24, Y+2	; 0x02
    38ba:	48 2f       	mov	r20, r24
    38bc:	50 e0       	ldi	r21, 0x00	; 0
    38be:	ca 01       	movw	r24, r20
    38c0:	88 0f       	add	r24, r24
    38c2:	99 1f       	adc	r25, r25
    38c4:	9c 01       	movw	r18, r24
    38c6:	22 0f       	add	r18, r18
    38c8:	33 1f       	adc	r19, r19
    38ca:	22 0f       	add	r18, r18
    38cc:	33 1f       	adc	r19, r19
    38ce:	22 0f       	add	r18, r18
    38d0:	33 1f       	adc	r19, r19
    38d2:	82 0f       	add	r24, r18
    38d4:	93 1f       	adc	r25, r19
    38d6:	84 0f       	add	r24, r20
    38d8:	95 1f       	adc	r25, r21
    38da:	fc 01       	movw	r30, r24
    38dc:	ee 56       	subi	r30, 0x6E	; 110
    38de:	fe 4f       	sbci	r31, 0xFE	; 254
    38e0:	90 81       	ld	r25, Z
    38e2:	86 2f       	mov	r24, r22
    38e4:	69 2f       	mov	r22, r25
    38e6:	41 e0       	ldi	r20, 0x01	; 1
    38e8:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    38ec:	89 83       	std	Y+1, r24	; 0x01
    38ee:	03 c0       	rjmp	.+6      	; 0x38f6 <SSDLT_enuDisableDot+0x19c>
														SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin, DIO_u8HIGH);
			}
			else
			{
				return ES_OUT_OF_RANGE;
    38f0:	83 e0       	ldi	r24, 0x03	; 3
    38f2:	8b 83       	std	Y+3, r24	; 0x03
    38f4:	05 c0       	rjmp	.+10     	; 0x3900 <SSDLT_enuDisableDot+0x1a6>
	}
	else
	{
		return ES_OUT_OF_RANGE;
	}
	return Local_enuErrorState;
    38f6:	89 81       	ldd	r24, Y+1	; 0x01
    38f8:	8b 83       	std	Y+3, r24	; 0x03
    38fa:	02 c0       	rjmp	.+4      	; 0x3900 <SSDLT_enuDisableDot+0x1a6>
			}
		}
	}
	else
	{
		return ES_OUT_OF_RANGE;
    38fc:	83 e0       	ldi	r24, 0x03	; 3
    38fe:	8b 83       	std	Y+3, r24	; 0x03
    3900:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return Local_enuErrorState;
}
    3902:	0f 90       	pop	r0
    3904:	0f 90       	pop	r0
    3906:	0f 90       	pop	r0
    3908:	cf 91       	pop	r28
    390a:	df 91       	pop	r29
    390c:	08 95       	ret

0000390e <SSDLT_enuClearDisplay>:

ES_t SSDLT_enuClearDisplay(u8 Copy_u8SegID)
{
    390e:	ef 92       	push	r14
    3910:	ff 92       	push	r15
    3912:	0f 93       	push	r16
    3914:	1f 93       	push	r17
    3916:	df 93       	push	r29
    3918:	cf 93       	push	r28
    391a:	cd b7       	in	r28, 0x3d	; 61
    391c:	de b7       	in	r29, 0x3e	; 62
    391e:	29 97       	sbiw	r28, 0x09	; 9
    3920:	0f b6       	in	r0, 0x3f	; 63
    3922:	f8 94       	cli
    3924:	de bf       	out	0x3e, r29	; 62
    3926:	0f be       	out	0x3f, r0	; 63
    3928:	cd bf       	out	0x3d, r28	; 61
    392a:	88 87       	std	Y+8, r24	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    392c:	1f 82       	std	Y+7, r1	; 0x07

	u8 Local_u8Iterator = 0;
    392e:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8LastBit = 0;
    3930:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Check = 0;
    3932:	19 82       	std	Y+1, r1	; 0x01
    3934:	1a 82       	std	Y+2, r1	; 0x02
    3936:	1b 82       	std	Y+3, r1	; 0x03
    3938:	1c 82       	std	Y+4, r1	; 0x04

	if(Copy_u8SegID < SEG_NUM)
    393a:	88 85       	ldd	r24, Y+8	; 0x08
    393c:	82 30       	cpi	r24, 0x02	; 2
    393e:	08 f0       	brcs	.+2      	; 0x3942 <SSDLT_enuClearDisplay+0x34>
    3940:	33 c4       	rjmp	.+2150   	; 0x41a8 <SSDLT_enuClearDisplay+0x89a>
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    3942:	88 85       	ldd	r24, Y+8	; 0x08
    3944:	48 2f       	mov	r20, r24
    3946:	50 e0       	ldi	r21, 0x00	; 0
    3948:	ca 01       	movw	r24, r20
    394a:	88 0f       	add	r24, r24
    394c:	99 1f       	adc	r25, r25
    394e:	9c 01       	movw	r18, r24
    3950:	22 0f       	add	r18, r18
    3952:	33 1f       	adc	r19, r19
    3954:	22 0f       	add	r18, r18
    3956:	33 1f       	adc	r19, r19
    3958:	22 0f       	add	r18, r18
    395a:	33 1f       	adc	r19, r19
    395c:	82 0f       	add	r24, r18
    395e:	93 1f       	adc	r25, r19
    3960:	84 0f       	add	r24, r20
    3962:	95 1f       	adc	r25, r21
    3964:	fc 01       	movw	r30, r24
    3966:	ed 56       	subi	r30, 0x6D	; 109
    3968:	fe 4f       	sbci	r31, 0xFE	; 254
    396a:	80 81       	ld	r24, Z
    396c:	81 30       	cpi	r24, 0x01	; 1
    396e:	09 f0       	breq	.+2      	; 0x3972 <SSDLT_enuClearDisplay+0x64>
    3970:	f4 c1       	rjmp	.+1000   	; 0x3d5a <SSDLT_enuClearDisplay+0x44c>
		{
			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APort,
    3972:	88 85       	ldd	r24, Y+8	; 0x08
    3974:	48 2f       	mov	r20, r24
    3976:	50 e0       	ldi	r21, 0x00	; 0
    3978:	ca 01       	movw	r24, r20
    397a:	88 0f       	add	r24, r24
    397c:	99 1f       	adc	r25, r25
    397e:	9c 01       	movw	r18, r24
    3980:	22 0f       	add	r18, r18
    3982:	33 1f       	adc	r19, r19
    3984:	22 0f       	add	r18, r18
    3986:	33 1f       	adc	r19, r19
    3988:	22 0f       	add	r18, r18
    398a:	33 1f       	adc	r19, r19
    398c:	82 0f       	add	r24, r18
    398e:	93 1f       	adc	r25, r19
    3990:	84 0f       	add	r24, r20
    3992:	95 1f       	adc	r25, r21
    3994:	fc 01       	movw	r30, r24
    3996:	ef 57       	subi	r30, 0x7F	; 127
    3998:	fe 4f       	sbci	r31, 0xFE	; 254
    399a:	60 81       	ld	r22, Z
    399c:	88 85       	ldd	r24, Y+8	; 0x08
    399e:	48 2f       	mov	r20, r24
    39a0:	50 e0       	ldi	r21, 0x00	; 0
    39a2:	ca 01       	movw	r24, r20
    39a4:	88 0f       	add	r24, r24
    39a6:	99 1f       	adc	r25, r25
    39a8:	9c 01       	movw	r18, r24
    39aa:	22 0f       	add	r18, r18
    39ac:	33 1f       	adc	r19, r19
    39ae:	22 0f       	add	r18, r18
    39b0:	33 1f       	adc	r19, r19
    39b2:	22 0f       	add	r18, r18
    39b4:	33 1f       	adc	r19, r19
    39b6:	82 0f       	add	r24, r18
    39b8:	93 1f       	adc	r25, r19
    39ba:	84 0f       	add	r24, r20
    39bc:	95 1f       	adc	r25, r21
    39be:	fc 01       	movw	r30, r24
    39c0:	ee 57       	subi	r30, 0x7E	; 126
    39c2:	fe 4f       	sbci	r31, 0xFE	; 254
    39c4:	90 81       	ld	r25, Z
    39c6:	86 2f       	mov	r24, r22
    39c8:	69 2f       	mov	r22, r25
    39ca:	40 e0       	ldi	r20, 0x00	; 0
    39cc:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    39d0:	28 2f       	mov	r18, r24
    39d2:	30 e0       	ldi	r19, 0x00	; 0
    39d4:	40 e0       	ldi	r20, 0x00	; 0
    39d6:	50 e0       	ldi	r21, 0x00	; 0
    39d8:	89 81       	ldd	r24, Y+1	; 0x01
    39da:	9a 81       	ldd	r25, Y+2	; 0x02
    39dc:	ab 81       	ldd	r26, Y+3	; 0x03
    39de:	bc 81       	ldd	r27, Y+4	; 0x04
    39e0:	82 2b       	or	r24, r18
    39e2:	93 2b       	or	r25, r19
    39e4:	a4 2b       	or	r26, r20
    39e6:	b5 2b       	or	r27, r21
    39e8:	89 83       	std	Y+1, r24	; 0x01
    39ea:	9a 83       	std	Y+2, r25	; 0x02
    39ec:	ab 83       	std	Y+3, r26	; 0x03
    39ee:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	      SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APin,
											   	  DIO_u8LOW) << 0);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPort,
    39f0:	88 85       	ldd	r24, Y+8	; 0x08
    39f2:	48 2f       	mov	r20, r24
    39f4:	50 e0       	ldi	r21, 0x00	; 0
    39f6:	ca 01       	movw	r24, r20
    39f8:	88 0f       	add	r24, r24
    39fa:	99 1f       	adc	r25, r25
    39fc:	9c 01       	movw	r18, r24
    39fe:	22 0f       	add	r18, r18
    3a00:	33 1f       	adc	r19, r19
    3a02:	22 0f       	add	r18, r18
    3a04:	33 1f       	adc	r19, r19
    3a06:	22 0f       	add	r18, r18
    3a08:	33 1f       	adc	r19, r19
    3a0a:	82 0f       	add	r24, r18
    3a0c:	93 1f       	adc	r25, r19
    3a0e:	84 0f       	add	r24, r20
    3a10:	95 1f       	adc	r25, r21
    3a12:	fc 01       	movw	r30, r24
    3a14:	ed 57       	subi	r30, 0x7D	; 125
    3a16:	fe 4f       	sbci	r31, 0xFE	; 254
    3a18:	60 81       	ld	r22, Z
    3a1a:	88 85       	ldd	r24, Y+8	; 0x08
    3a1c:	48 2f       	mov	r20, r24
    3a1e:	50 e0       	ldi	r21, 0x00	; 0
    3a20:	ca 01       	movw	r24, r20
    3a22:	88 0f       	add	r24, r24
    3a24:	99 1f       	adc	r25, r25
    3a26:	9c 01       	movw	r18, r24
    3a28:	22 0f       	add	r18, r18
    3a2a:	33 1f       	adc	r19, r19
    3a2c:	22 0f       	add	r18, r18
    3a2e:	33 1f       	adc	r19, r19
    3a30:	22 0f       	add	r18, r18
    3a32:	33 1f       	adc	r19, r19
    3a34:	82 0f       	add	r24, r18
    3a36:	93 1f       	adc	r25, r19
    3a38:	84 0f       	add	r24, r20
    3a3a:	95 1f       	adc	r25, r21
    3a3c:	fc 01       	movw	r30, r24
    3a3e:	ec 57       	subi	r30, 0x7C	; 124
    3a40:	fe 4f       	sbci	r31, 0xFE	; 254
    3a42:	90 81       	ld	r25, Z
    3a44:	86 2f       	mov	r24, r22
    3a46:	69 2f       	mov	r22, r25
    3a48:	40 e0       	ldi	r20, 0x00	; 0
    3a4a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    3a4e:	88 2f       	mov	r24, r24
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	88 0f       	add	r24, r24
    3a54:	99 1f       	adc	r25, r25
    3a56:	88 0f       	add	r24, r24
    3a58:	99 1f       	adc	r25, r25
    3a5a:	88 0f       	add	r24, r24
    3a5c:	99 1f       	adc	r25, r25
    3a5e:	9c 01       	movw	r18, r24
    3a60:	44 27       	eor	r20, r20
    3a62:	37 fd       	sbrc	r19, 7
    3a64:	40 95       	com	r20
    3a66:	54 2f       	mov	r21, r20
    3a68:	89 81       	ldd	r24, Y+1	; 0x01
    3a6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a6c:	ab 81       	ldd	r26, Y+3	; 0x03
    3a6e:	bc 81       	ldd	r27, Y+4	; 0x04
    3a70:	82 2b       	or	r24, r18
    3a72:	93 2b       	or	r25, r19
    3a74:	a4 2b       	or	r26, r20
    3a76:	b5 2b       	or	r27, r21
    3a78:	89 83       	std	Y+1, r24	; 0x01
    3a7a:	9a 83       	std	Y+2, r25	; 0x02
    3a7c:	ab 83       	std	Y+3, r26	; 0x03
    3a7e:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPin,
												  DIO_u8LOW) << 3);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPort,
    3a80:	88 85       	ldd	r24, Y+8	; 0x08
    3a82:	48 2f       	mov	r20, r24
    3a84:	50 e0       	ldi	r21, 0x00	; 0
    3a86:	ca 01       	movw	r24, r20
    3a88:	88 0f       	add	r24, r24
    3a8a:	99 1f       	adc	r25, r25
    3a8c:	9c 01       	movw	r18, r24
    3a8e:	22 0f       	add	r18, r18
    3a90:	33 1f       	adc	r19, r19
    3a92:	22 0f       	add	r18, r18
    3a94:	33 1f       	adc	r19, r19
    3a96:	22 0f       	add	r18, r18
    3a98:	33 1f       	adc	r19, r19
    3a9a:	82 0f       	add	r24, r18
    3a9c:	93 1f       	adc	r25, r19
    3a9e:	84 0f       	add	r24, r20
    3aa0:	95 1f       	adc	r25, r21
    3aa2:	fc 01       	movw	r30, r24
    3aa4:	eb 57       	subi	r30, 0x7B	; 123
    3aa6:	fe 4f       	sbci	r31, 0xFE	; 254
    3aa8:	60 81       	ld	r22, Z
    3aaa:	88 85       	ldd	r24, Y+8	; 0x08
    3aac:	48 2f       	mov	r20, r24
    3aae:	50 e0       	ldi	r21, 0x00	; 0
    3ab0:	ca 01       	movw	r24, r20
    3ab2:	88 0f       	add	r24, r24
    3ab4:	99 1f       	adc	r25, r25
    3ab6:	9c 01       	movw	r18, r24
    3ab8:	22 0f       	add	r18, r18
    3aba:	33 1f       	adc	r19, r19
    3abc:	22 0f       	add	r18, r18
    3abe:	33 1f       	adc	r19, r19
    3ac0:	22 0f       	add	r18, r18
    3ac2:	33 1f       	adc	r19, r19
    3ac4:	82 0f       	add	r24, r18
    3ac6:	93 1f       	adc	r25, r19
    3ac8:	84 0f       	add	r24, r20
    3aca:	95 1f       	adc	r25, r21
    3acc:	fc 01       	movw	r30, r24
    3ace:	ea 57       	subi	r30, 0x7A	; 122
    3ad0:	fe 4f       	sbci	r31, 0xFE	; 254
    3ad2:	90 81       	ld	r25, Z
    3ad4:	86 2f       	mov	r24, r22
    3ad6:	69 2f       	mov	r22, r25
    3ad8:	40 e0       	ldi	r20, 0x00	; 0
    3ada:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    3ade:	88 2f       	mov	r24, r24
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	00 24       	eor	r0, r0
    3ae4:	96 95       	lsr	r25
    3ae6:	87 95       	ror	r24
    3ae8:	07 94       	ror	r0
    3aea:	96 95       	lsr	r25
    3aec:	87 95       	ror	r24
    3aee:	07 94       	ror	r0
    3af0:	98 2f       	mov	r25, r24
    3af2:	80 2d       	mov	r24, r0
    3af4:	9c 01       	movw	r18, r24
    3af6:	44 27       	eor	r20, r20
    3af8:	37 fd       	sbrc	r19, 7
    3afa:	40 95       	com	r20
    3afc:	54 2f       	mov	r21, r20
    3afe:	89 81       	ldd	r24, Y+1	; 0x01
    3b00:	9a 81       	ldd	r25, Y+2	; 0x02
    3b02:	ab 81       	ldd	r26, Y+3	; 0x03
    3b04:	bc 81       	ldd	r27, Y+4	; 0x04
    3b06:	82 2b       	or	r24, r18
    3b08:	93 2b       	or	r25, r19
    3b0a:	a4 2b       	or	r26, r20
    3b0c:	b5 2b       	or	r27, r21
    3b0e:	89 83       	std	Y+1, r24	; 0x01
    3b10:	9a 83       	std	Y+2, r25	; 0x02
    3b12:	ab 83       	std	Y+3, r26	; 0x03
    3b14:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPin,
												  DIO_u8LOW) << 6);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPort,
    3b16:	88 85       	ldd	r24, Y+8	; 0x08
    3b18:	48 2f       	mov	r20, r24
    3b1a:	50 e0       	ldi	r21, 0x00	; 0
    3b1c:	ca 01       	movw	r24, r20
    3b1e:	88 0f       	add	r24, r24
    3b20:	99 1f       	adc	r25, r25
    3b22:	9c 01       	movw	r18, r24
    3b24:	22 0f       	add	r18, r18
    3b26:	33 1f       	adc	r19, r19
    3b28:	22 0f       	add	r18, r18
    3b2a:	33 1f       	adc	r19, r19
    3b2c:	22 0f       	add	r18, r18
    3b2e:	33 1f       	adc	r19, r19
    3b30:	82 0f       	add	r24, r18
    3b32:	93 1f       	adc	r25, r19
    3b34:	84 0f       	add	r24, r20
    3b36:	95 1f       	adc	r25, r21
    3b38:	fc 01       	movw	r30, r24
    3b3a:	e9 57       	subi	r30, 0x79	; 121
    3b3c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b3e:	60 81       	ld	r22, Z
    3b40:	88 85       	ldd	r24, Y+8	; 0x08
    3b42:	48 2f       	mov	r20, r24
    3b44:	50 e0       	ldi	r21, 0x00	; 0
    3b46:	ca 01       	movw	r24, r20
    3b48:	88 0f       	add	r24, r24
    3b4a:	99 1f       	adc	r25, r25
    3b4c:	9c 01       	movw	r18, r24
    3b4e:	22 0f       	add	r18, r18
    3b50:	33 1f       	adc	r19, r19
    3b52:	22 0f       	add	r18, r18
    3b54:	33 1f       	adc	r19, r19
    3b56:	22 0f       	add	r18, r18
    3b58:	33 1f       	adc	r19, r19
    3b5a:	82 0f       	add	r24, r18
    3b5c:	93 1f       	adc	r25, r19
    3b5e:	84 0f       	add	r24, r20
    3b60:	95 1f       	adc	r25, r21
    3b62:	fc 01       	movw	r30, r24
    3b64:	e8 57       	subi	r30, 0x78	; 120
    3b66:	fe 4f       	sbci	r31, 0xFE	; 254
    3b68:	90 81       	ld	r25, Z
    3b6a:	86 2f       	mov	r24, r22
    3b6c:	69 2f       	mov	r22, r25
    3b6e:	40 e0       	ldi	r20, 0x00	; 0
    3b70:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    3b74:	88 2f       	mov	r24, r24
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	98 2f       	mov	r25, r24
    3b7a:	88 27       	eor	r24, r24
    3b7c:	99 0f       	add	r25, r25
    3b7e:	9c 01       	movw	r18, r24
    3b80:	44 27       	eor	r20, r20
    3b82:	37 fd       	sbrc	r19, 7
    3b84:	40 95       	com	r20
    3b86:	54 2f       	mov	r21, r20
    3b88:	89 81       	ldd	r24, Y+1	; 0x01
    3b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b8c:	ab 81       	ldd	r26, Y+3	; 0x03
    3b8e:	bc 81       	ldd	r27, Y+4	; 0x04
    3b90:	82 2b       	or	r24, r18
    3b92:	93 2b       	or	r25, r19
    3b94:	a4 2b       	or	r26, r20
    3b96:	b5 2b       	or	r27, r21
    3b98:	89 83       	std	Y+1, r24	; 0x01
    3b9a:	9a 83       	std	Y+2, r25	; 0x02
    3b9c:	ab 83       	std	Y+3, r26	; 0x03
    3b9e:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPin,
												  DIO_u8LOW) << 9) ;

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPort,
    3ba0:	88 85       	ldd	r24, Y+8	; 0x08
    3ba2:	48 2f       	mov	r20, r24
    3ba4:	50 e0       	ldi	r21, 0x00	; 0
    3ba6:	ca 01       	movw	r24, r20
    3ba8:	88 0f       	add	r24, r24
    3baa:	99 1f       	adc	r25, r25
    3bac:	9c 01       	movw	r18, r24
    3bae:	22 0f       	add	r18, r18
    3bb0:	33 1f       	adc	r19, r19
    3bb2:	22 0f       	add	r18, r18
    3bb4:	33 1f       	adc	r19, r19
    3bb6:	22 0f       	add	r18, r18
    3bb8:	33 1f       	adc	r19, r19
    3bba:	82 0f       	add	r24, r18
    3bbc:	93 1f       	adc	r25, r19
    3bbe:	84 0f       	add	r24, r20
    3bc0:	95 1f       	adc	r25, r21
    3bc2:	fc 01       	movw	r30, r24
    3bc4:	e7 57       	subi	r30, 0x77	; 119
    3bc6:	fe 4f       	sbci	r31, 0xFE	; 254
    3bc8:	60 81       	ld	r22, Z
    3bca:	88 85       	ldd	r24, Y+8	; 0x08
    3bcc:	48 2f       	mov	r20, r24
    3bce:	50 e0       	ldi	r21, 0x00	; 0
    3bd0:	ca 01       	movw	r24, r20
    3bd2:	88 0f       	add	r24, r24
    3bd4:	99 1f       	adc	r25, r25
    3bd6:	9c 01       	movw	r18, r24
    3bd8:	22 0f       	add	r18, r18
    3bda:	33 1f       	adc	r19, r19
    3bdc:	22 0f       	add	r18, r18
    3bde:	33 1f       	adc	r19, r19
    3be0:	22 0f       	add	r18, r18
    3be2:	33 1f       	adc	r19, r19
    3be4:	82 0f       	add	r24, r18
    3be6:	93 1f       	adc	r25, r19
    3be8:	84 0f       	add	r24, r20
    3bea:	95 1f       	adc	r25, r21
    3bec:	fc 01       	movw	r30, r24
    3bee:	e6 57       	subi	r30, 0x76	; 118
    3bf0:	fe 4f       	sbci	r31, 0xFE	; 254
    3bf2:	90 81       	ld	r25, Z
    3bf4:	86 2f       	mov	r24, r22
    3bf6:	69 2f       	mov	r22, r25
    3bf8:	40 e0       	ldi	r20, 0x00	; 0
    3bfa:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    3bfe:	88 2f       	mov	r24, r24
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	98 2f       	mov	r25, r24
    3c04:	88 27       	eor	r24, r24
    3c06:	92 95       	swap	r25
    3c08:	90 7f       	andi	r25, 0xF0	; 240
    3c0a:	9c 01       	movw	r18, r24
    3c0c:	44 27       	eor	r20, r20
    3c0e:	37 fd       	sbrc	r19, 7
    3c10:	40 95       	com	r20
    3c12:	54 2f       	mov	r21, r20
    3c14:	89 81       	ldd	r24, Y+1	; 0x01
    3c16:	9a 81       	ldd	r25, Y+2	; 0x02
    3c18:	ab 81       	ldd	r26, Y+3	; 0x03
    3c1a:	bc 81       	ldd	r27, Y+4	; 0x04
    3c1c:	82 2b       	or	r24, r18
    3c1e:	93 2b       	or	r25, r19
    3c20:	a4 2b       	or	r26, r20
    3c22:	b5 2b       	or	r27, r21
    3c24:	89 83       	std	Y+1, r24	; 0x01
    3c26:	9a 83       	std	Y+2, r25	; 0x02
    3c28:	ab 83       	std	Y+3, r26	; 0x03
    3c2a:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPin,
												  DIO_u8LOW) << 12);

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPort,
    3c2c:	88 85       	ldd	r24, Y+8	; 0x08
    3c2e:	48 2f       	mov	r20, r24
    3c30:	50 e0       	ldi	r21, 0x00	; 0
    3c32:	ca 01       	movw	r24, r20
    3c34:	88 0f       	add	r24, r24
    3c36:	99 1f       	adc	r25, r25
    3c38:	9c 01       	movw	r18, r24
    3c3a:	22 0f       	add	r18, r18
    3c3c:	33 1f       	adc	r19, r19
    3c3e:	22 0f       	add	r18, r18
    3c40:	33 1f       	adc	r19, r19
    3c42:	22 0f       	add	r18, r18
    3c44:	33 1f       	adc	r19, r19
    3c46:	82 0f       	add	r24, r18
    3c48:	93 1f       	adc	r25, r19
    3c4a:	84 0f       	add	r24, r20
    3c4c:	95 1f       	adc	r25, r21
    3c4e:	fc 01       	movw	r30, r24
    3c50:	e5 57       	subi	r30, 0x75	; 117
    3c52:	fe 4f       	sbci	r31, 0xFE	; 254
    3c54:	60 81       	ld	r22, Z
    3c56:	88 85       	ldd	r24, Y+8	; 0x08
    3c58:	48 2f       	mov	r20, r24
    3c5a:	50 e0       	ldi	r21, 0x00	; 0
    3c5c:	ca 01       	movw	r24, r20
    3c5e:	88 0f       	add	r24, r24
    3c60:	99 1f       	adc	r25, r25
    3c62:	9c 01       	movw	r18, r24
    3c64:	22 0f       	add	r18, r18
    3c66:	33 1f       	adc	r19, r19
    3c68:	22 0f       	add	r18, r18
    3c6a:	33 1f       	adc	r19, r19
    3c6c:	22 0f       	add	r18, r18
    3c6e:	33 1f       	adc	r19, r19
    3c70:	82 0f       	add	r24, r18
    3c72:	93 1f       	adc	r25, r19
    3c74:	84 0f       	add	r24, r20
    3c76:	95 1f       	adc	r25, r21
    3c78:	fc 01       	movw	r30, r24
    3c7a:	e4 57       	subi	r30, 0x74	; 116
    3c7c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c7e:	90 81       	ld	r25, Z
    3c80:	86 2f       	mov	r24, r22
    3c82:	69 2f       	mov	r22, r25
    3c84:	40 e0       	ldi	r20, 0x00	; 0
    3c86:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    3c8a:	88 2f       	mov	r24, r24
    3c8c:	90 e0       	ldi	r25, 0x00	; 0
    3c8e:	a0 e0       	ldi	r26, 0x00	; 0
    3c90:	b0 e0       	ldi	r27, 0x00	; 0
    3c92:	9c 01       	movw	r18, r24
    3c94:	ad 01       	movw	r20, r26
    3c96:	01 2e       	mov	r0, r17
    3c98:	1f e0       	ldi	r17, 0x0F	; 15
    3c9a:	22 0f       	add	r18, r18
    3c9c:	33 1f       	adc	r19, r19
    3c9e:	44 1f       	adc	r20, r20
    3ca0:	55 1f       	adc	r21, r21
    3ca2:	1a 95       	dec	r17
    3ca4:	d1 f7       	brne	.-12     	; 0x3c9a <SSDLT_enuClearDisplay+0x38c>
    3ca6:	10 2d       	mov	r17, r0
    3ca8:	89 81       	ldd	r24, Y+1	; 0x01
    3caa:	9a 81       	ldd	r25, Y+2	; 0x02
    3cac:	ab 81       	ldd	r26, Y+3	; 0x03
    3cae:	bc 81       	ldd	r27, Y+4	; 0x04
    3cb0:	82 2b       	or	r24, r18
    3cb2:	93 2b       	or	r25, r19
    3cb4:	a4 2b       	or	r26, r20
    3cb6:	b5 2b       	or	r27, r21
    3cb8:	89 83       	std	Y+1, r24	; 0x01
    3cba:	9a 83       	std	Y+2, r25	; 0x02
    3cbc:	ab 83       	std	Y+3, r26	; 0x03
    3cbe:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPin,
												  DIO_u8LOW) << 15));

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPort,
    3cc0:	88 85       	ldd	r24, Y+8	; 0x08
    3cc2:	48 2f       	mov	r20, r24
    3cc4:	50 e0       	ldi	r21, 0x00	; 0
    3cc6:	ca 01       	movw	r24, r20
    3cc8:	88 0f       	add	r24, r24
    3cca:	99 1f       	adc	r25, r25
    3ccc:	9c 01       	movw	r18, r24
    3cce:	22 0f       	add	r18, r18
    3cd0:	33 1f       	adc	r19, r19
    3cd2:	22 0f       	add	r18, r18
    3cd4:	33 1f       	adc	r19, r19
    3cd6:	22 0f       	add	r18, r18
    3cd8:	33 1f       	adc	r19, r19
    3cda:	82 0f       	add	r24, r18
    3cdc:	93 1f       	adc	r25, r19
    3cde:	84 0f       	add	r24, r20
    3ce0:	95 1f       	adc	r25, r21
    3ce2:	fc 01       	movw	r30, r24
    3ce4:	e3 57       	subi	r30, 0x73	; 115
    3ce6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ce8:	60 81       	ld	r22, Z
    3cea:	88 85       	ldd	r24, Y+8	; 0x08
    3cec:	48 2f       	mov	r20, r24
    3cee:	50 e0       	ldi	r21, 0x00	; 0
    3cf0:	ca 01       	movw	r24, r20
    3cf2:	88 0f       	add	r24, r24
    3cf4:	99 1f       	adc	r25, r25
    3cf6:	9c 01       	movw	r18, r24
    3cf8:	22 0f       	add	r18, r18
    3cfa:	33 1f       	adc	r19, r19
    3cfc:	22 0f       	add	r18, r18
    3cfe:	33 1f       	adc	r19, r19
    3d00:	22 0f       	add	r18, r18
    3d02:	33 1f       	adc	r19, r19
    3d04:	82 0f       	add	r24, r18
    3d06:	93 1f       	adc	r25, r19
    3d08:	84 0f       	add	r24, r20
    3d0a:	95 1f       	adc	r25, r21
    3d0c:	fc 01       	movw	r30, r24
    3d0e:	e2 57       	subi	r30, 0x72	; 114
    3d10:	fe 4f       	sbci	r31, 0xFE	; 254
    3d12:	90 81       	ld	r25, Z
    3d14:	86 2f       	mov	r24, r22
    3d16:	69 2f       	mov	r22, r25
    3d18:	40 e0       	ldi	r20, 0x00	; 0
    3d1a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    3d1e:	88 2f       	mov	r24, r24
    3d20:	90 e0       	ldi	r25, 0x00	; 0
    3d22:	a0 e0       	ldi	r26, 0x00	; 0
    3d24:	b0 e0       	ldi	r27, 0x00	; 0
    3d26:	9c 01       	movw	r18, r24
    3d28:	ad 01       	movw	r20, r26
    3d2a:	01 2e       	mov	r0, r17
    3d2c:	12 e1       	ldi	r17, 0x12	; 18
    3d2e:	22 0f       	add	r18, r18
    3d30:	33 1f       	adc	r19, r19
    3d32:	44 1f       	adc	r20, r20
    3d34:	55 1f       	adc	r21, r21
    3d36:	1a 95       	dec	r17
    3d38:	d1 f7       	brne	.-12     	; 0x3d2e <SSDLT_enuClearDisplay+0x420>
    3d3a:	10 2d       	mov	r17, r0
    3d3c:	89 81       	ldd	r24, Y+1	; 0x01
    3d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d40:	ab 81       	ldd	r26, Y+3	; 0x03
    3d42:	bc 81       	ldd	r27, Y+4	; 0x04
    3d44:	82 2b       	or	r24, r18
    3d46:	93 2b       	or	r25, r19
    3d48:	a4 2b       	or	r26, r20
    3d4a:	b5 2b       	or	r27, r21
    3d4c:	89 83       	std	Y+1, r24	; 0x01
    3d4e:	9a 83       	std	Y+2, r25	; 0x02
    3d50:	ab 83       	std	Y+3, r26	; 0x03
    3d52:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPin,
												  DIO_u8LOW) << 18));
			Local_u8LastBit = 21;
    3d54:	85 e1       	ldi	r24, 0x15	; 21
    3d56:	8d 83       	std	Y+5, r24	; 0x05
    3d58:	0f c2       	rjmp	.+1054   	; 0x4178 <SSDLT_enuClearDisplay+0x86a>
		}
		else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    3d5a:	88 85       	ldd	r24, Y+8	; 0x08
    3d5c:	48 2f       	mov	r20, r24
    3d5e:	50 e0       	ldi	r21, 0x00	; 0
    3d60:	ca 01       	movw	r24, r20
    3d62:	88 0f       	add	r24, r24
    3d64:	99 1f       	adc	r25, r25
    3d66:	9c 01       	movw	r18, r24
    3d68:	22 0f       	add	r18, r18
    3d6a:	33 1f       	adc	r19, r19
    3d6c:	22 0f       	add	r18, r18
    3d6e:	33 1f       	adc	r19, r19
    3d70:	22 0f       	add	r18, r18
    3d72:	33 1f       	adc	r19, r19
    3d74:	82 0f       	add	r24, r18
    3d76:	93 1f       	adc	r25, r19
    3d78:	84 0f       	add	r24, r20
    3d7a:	95 1f       	adc	r25, r21
    3d7c:	fc 01       	movw	r30, r24
    3d7e:	ed 56       	subi	r30, 0x6D	; 109
    3d80:	fe 4f       	sbci	r31, 0xFE	; 254
    3d82:	80 81       	ld	r24, Z
    3d84:	88 23       	and	r24, r24
    3d86:	09 f0       	breq	.+2      	; 0x3d8a <SSDLT_enuClearDisplay+0x47c>
    3d88:	f4 c1       	rjmp	.+1000   	; 0x4172 <SSDLT_enuClearDisplay+0x864>
		{
			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APort,
    3d8a:	88 85       	ldd	r24, Y+8	; 0x08
    3d8c:	48 2f       	mov	r20, r24
    3d8e:	50 e0       	ldi	r21, 0x00	; 0
    3d90:	ca 01       	movw	r24, r20
    3d92:	88 0f       	add	r24, r24
    3d94:	99 1f       	adc	r25, r25
    3d96:	9c 01       	movw	r18, r24
    3d98:	22 0f       	add	r18, r18
    3d9a:	33 1f       	adc	r19, r19
    3d9c:	22 0f       	add	r18, r18
    3d9e:	33 1f       	adc	r19, r19
    3da0:	22 0f       	add	r18, r18
    3da2:	33 1f       	adc	r19, r19
    3da4:	82 0f       	add	r24, r18
    3da6:	93 1f       	adc	r25, r19
    3da8:	84 0f       	add	r24, r20
    3daa:	95 1f       	adc	r25, r21
    3dac:	fc 01       	movw	r30, r24
    3dae:	ef 57       	subi	r30, 0x7F	; 127
    3db0:	fe 4f       	sbci	r31, 0xFE	; 254
    3db2:	60 81       	ld	r22, Z
    3db4:	88 85       	ldd	r24, Y+8	; 0x08
    3db6:	48 2f       	mov	r20, r24
    3db8:	50 e0       	ldi	r21, 0x00	; 0
    3dba:	ca 01       	movw	r24, r20
    3dbc:	88 0f       	add	r24, r24
    3dbe:	99 1f       	adc	r25, r25
    3dc0:	9c 01       	movw	r18, r24
    3dc2:	22 0f       	add	r18, r18
    3dc4:	33 1f       	adc	r19, r19
    3dc6:	22 0f       	add	r18, r18
    3dc8:	33 1f       	adc	r19, r19
    3dca:	22 0f       	add	r18, r18
    3dcc:	33 1f       	adc	r19, r19
    3dce:	82 0f       	add	r24, r18
    3dd0:	93 1f       	adc	r25, r19
    3dd2:	84 0f       	add	r24, r20
    3dd4:	95 1f       	adc	r25, r21
    3dd6:	fc 01       	movw	r30, r24
    3dd8:	ee 57       	subi	r30, 0x7E	; 126
    3dda:	fe 4f       	sbci	r31, 0xFE	; 254
    3ddc:	90 81       	ld	r25, Z
    3dde:	86 2f       	mov	r24, r22
    3de0:	69 2f       	mov	r22, r25
    3de2:	41 e0       	ldi	r20, 0x01	; 1
    3de4:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    3de8:	28 2f       	mov	r18, r24
    3dea:	30 e0       	ldi	r19, 0x00	; 0
    3dec:	40 e0       	ldi	r20, 0x00	; 0
    3dee:	50 e0       	ldi	r21, 0x00	; 0
    3df0:	89 81       	ldd	r24, Y+1	; 0x01
    3df2:	9a 81       	ldd	r25, Y+2	; 0x02
    3df4:	ab 81       	ldd	r26, Y+3	; 0x03
    3df6:	bc 81       	ldd	r27, Y+4	; 0x04
    3df8:	82 2b       	or	r24, r18
    3dfa:	93 2b       	or	r25, r19
    3dfc:	a4 2b       	or	r26, r20
    3dfe:	b5 2b       	or	r27, r21
    3e00:	89 83       	std	Y+1, r24	; 0x01
    3e02:	9a 83       	std	Y+2, r25	; 0x02
    3e04:	ab 83       	std	Y+3, r26	; 0x03
    3e06:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	      SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APin,
											   	  DIO_u8HIGH) << 0);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPort,
    3e08:	88 85       	ldd	r24, Y+8	; 0x08
    3e0a:	48 2f       	mov	r20, r24
    3e0c:	50 e0       	ldi	r21, 0x00	; 0
    3e0e:	ca 01       	movw	r24, r20
    3e10:	88 0f       	add	r24, r24
    3e12:	99 1f       	adc	r25, r25
    3e14:	9c 01       	movw	r18, r24
    3e16:	22 0f       	add	r18, r18
    3e18:	33 1f       	adc	r19, r19
    3e1a:	22 0f       	add	r18, r18
    3e1c:	33 1f       	adc	r19, r19
    3e1e:	22 0f       	add	r18, r18
    3e20:	33 1f       	adc	r19, r19
    3e22:	82 0f       	add	r24, r18
    3e24:	93 1f       	adc	r25, r19
    3e26:	84 0f       	add	r24, r20
    3e28:	95 1f       	adc	r25, r21
    3e2a:	fc 01       	movw	r30, r24
    3e2c:	ed 57       	subi	r30, 0x7D	; 125
    3e2e:	fe 4f       	sbci	r31, 0xFE	; 254
    3e30:	60 81       	ld	r22, Z
    3e32:	88 85       	ldd	r24, Y+8	; 0x08
    3e34:	48 2f       	mov	r20, r24
    3e36:	50 e0       	ldi	r21, 0x00	; 0
    3e38:	ca 01       	movw	r24, r20
    3e3a:	88 0f       	add	r24, r24
    3e3c:	99 1f       	adc	r25, r25
    3e3e:	9c 01       	movw	r18, r24
    3e40:	22 0f       	add	r18, r18
    3e42:	33 1f       	adc	r19, r19
    3e44:	22 0f       	add	r18, r18
    3e46:	33 1f       	adc	r19, r19
    3e48:	22 0f       	add	r18, r18
    3e4a:	33 1f       	adc	r19, r19
    3e4c:	82 0f       	add	r24, r18
    3e4e:	93 1f       	adc	r25, r19
    3e50:	84 0f       	add	r24, r20
    3e52:	95 1f       	adc	r25, r21
    3e54:	fc 01       	movw	r30, r24
    3e56:	ec 57       	subi	r30, 0x7C	; 124
    3e58:	fe 4f       	sbci	r31, 0xFE	; 254
    3e5a:	90 81       	ld	r25, Z
    3e5c:	86 2f       	mov	r24, r22
    3e5e:	69 2f       	mov	r22, r25
    3e60:	41 e0       	ldi	r20, 0x01	; 1
    3e62:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    3e66:	88 2f       	mov	r24, r24
    3e68:	90 e0       	ldi	r25, 0x00	; 0
    3e6a:	88 0f       	add	r24, r24
    3e6c:	99 1f       	adc	r25, r25
    3e6e:	88 0f       	add	r24, r24
    3e70:	99 1f       	adc	r25, r25
    3e72:	88 0f       	add	r24, r24
    3e74:	99 1f       	adc	r25, r25
    3e76:	9c 01       	movw	r18, r24
    3e78:	44 27       	eor	r20, r20
    3e7a:	37 fd       	sbrc	r19, 7
    3e7c:	40 95       	com	r20
    3e7e:	54 2f       	mov	r21, r20
    3e80:	89 81       	ldd	r24, Y+1	; 0x01
    3e82:	9a 81       	ldd	r25, Y+2	; 0x02
    3e84:	ab 81       	ldd	r26, Y+3	; 0x03
    3e86:	bc 81       	ldd	r27, Y+4	; 0x04
    3e88:	82 2b       	or	r24, r18
    3e8a:	93 2b       	or	r25, r19
    3e8c:	a4 2b       	or	r26, r20
    3e8e:	b5 2b       	or	r27, r21
    3e90:	89 83       	std	Y+1, r24	; 0x01
    3e92:	9a 83       	std	Y+2, r25	; 0x02
    3e94:	ab 83       	std	Y+3, r26	; 0x03
    3e96:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPin,
												  DIO_u8HIGH) << 3);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPort,
    3e98:	88 85       	ldd	r24, Y+8	; 0x08
    3e9a:	48 2f       	mov	r20, r24
    3e9c:	50 e0       	ldi	r21, 0x00	; 0
    3e9e:	ca 01       	movw	r24, r20
    3ea0:	88 0f       	add	r24, r24
    3ea2:	99 1f       	adc	r25, r25
    3ea4:	9c 01       	movw	r18, r24
    3ea6:	22 0f       	add	r18, r18
    3ea8:	33 1f       	adc	r19, r19
    3eaa:	22 0f       	add	r18, r18
    3eac:	33 1f       	adc	r19, r19
    3eae:	22 0f       	add	r18, r18
    3eb0:	33 1f       	adc	r19, r19
    3eb2:	82 0f       	add	r24, r18
    3eb4:	93 1f       	adc	r25, r19
    3eb6:	84 0f       	add	r24, r20
    3eb8:	95 1f       	adc	r25, r21
    3eba:	fc 01       	movw	r30, r24
    3ebc:	eb 57       	subi	r30, 0x7B	; 123
    3ebe:	fe 4f       	sbci	r31, 0xFE	; 254
    3ec0:	60 81       	ld	r22, Z
    3ec2:	88 85       	ldd	r24, Y+8	; 0x08
    3ec4:	48 2f       	mov	r20, r24
    3ec6:	50 e0       	ldi	r21, 0x00	; 0
    3ec8:	ca 01       	movw	r24, r20
    3eca:	88 0f       	add	r24, r24
    3ecc:	99 1f       	adc	r25, r25
    3ece:	9c 01       	movw	r18, r24
    3ed0:	22 0f       	add	r18, r18
    3ed2:	33 1f       	adc	r19, r19
    3ed4:	22 0f       	add	r18, r18
    3ed6:	33 1f       	adc	r19, r19
    3ed8:	22 0f       	add	r18, r18
    3eda:	33 1f       	adc	r19, r19
    3edc:	82 0f       	add	r24, r18
    3ede:	93 1f       	adc	r25, r19
    3ee0:	84 0f       	add	r24, r20
    3ee2:	95 1f       	adc	r25, r21
    3ee4:	fc 01       	movw	r30, r24
    3ee6:	ea 57       	subi	r30, 0x7A	; 122
    3ee8:	fe 4f       	sbci	r31, 0xFE	; 254
    3eea:	90 81       	ld	r25, Z
    3eec:	86 2f       	mov	r24, r22
    3eee:	69 2f       	mov	r22, r25
    3ef0:	41 e0       	ldi	r20, 0x01	; 1
    3ef2:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    3ef6:	88 2f       	mov	r24, r24
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	00 24       	eor	r0, r0
    3efc:	96 95       	lsr	r25
    3efe:	87 95       	ror	r24
    3f00:	07 94       	ror	r0
    3f02:	96 95       	lsr	r25
    3f04:	87 95       	ror	r24
    3f06:	07 94       	ror	r0
    3f08:	98 2f       	mov	r25, r24
    3f0a:	80 2d       	mov	r24, r0
    3f0c:	9c 01       	movw	r18, r24
    3f0e:	44 27       	eor	r20, r20
    3f10:	37 fd       	sbrc	r19, 7
    3f12:	40 95       	com	r20
    3f14:	54 2f       	mov	r21, r20
    3f16:	89 81       	ldd	r24, Y+1	; 0x01
    3f18:	9a 81       	ldd	r25, Y+2	; 0x02
    3f1a:	ab 81       	ldd	r26, Y+3	; 0x03
    3f1c:	bc 81       	ldd	r27, Y+4	; 0x04
    3f1e:	82 2b       	or	r24, r18
    3f20:	93 2b       	or	r25, r19
    3f22:	a4 2b       	or	r26, r20
    3f24:	b5 2b       	or	r27, r21
    3f26:	89 83       	std	Y+1, r24	; 0x01
    3f28:	9a 83       	std	Y+2, r25	; 0x02
    3f2a:	ab 83       	std	Y+3, r26	; 0x03
    3f2c:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPin,
												  DIO_u8HIGH) << 6);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPort,
    3f2e:	88 85       	ldd	r24, Y+8	; 0x08
    3f30:	48 2f       	mov	r20, r24
    3f32:	50 e0       	ldi	r21, 0x00	; 0
    3f34:	ca 01       	movw	r24, r20
    3f36:	88 0f       	add	r24, r24
    3f38:	99 1f       	adc	r25, r25
    3f3a:	9c 01       	movw	r18, r24
    3f3c:	22 0f       	add	r18, r18
    3f3e:	33 1f       	adc	r19, r19
    3f40:	22 0f       	add	r18, r18
    3f42:	33 1f       	adc	r19, r19
    3f44:	22 0f       	add	r18, r18
    3f46:	33 1f       	adc	r19, r19
    3f48:	82 0f       	add	r24, r18
    3f4a:	93 1f       	adc	r25, r19
    3f4c:	84 0f       	add	r24, r20
    3f4e:	95 1f       	adc	r25, r21
    3f50:	fc 01       	movw	r30, r24
    3f52:	e9 57       	subi	r30, 0x79	; 121
    3f54:	fe 4f       	sbci	r31, 0xFE	; 254
    3f56:	60 81       	ld	r22, Z
    3f58:	88 85       	ldd	r24, Y+8	; 0x08
    3f5a:	48 2f       	mov	r20, r24
    3f5c:	50 e0       	ldi	r21, 0x00	; 0
    3f5e:	ca 01       	movw	r24, r20
    3f60:	88 0f       	add	r24, r24
    3f62:	99 1f       	adc	r25, r25
    3f64:	9c 01       	movw	r18, r24
    3f66:	22 0f       	add	r18, r18
    3f68:	33 1f       	adc	r19, r19
    3f6a:	22 0f       	add	r18, r18
    3f6c:	33 1f       	adc	r19, r19
    3f6e:	22 0f       	add	r18, r18
    3f70:	33 1f       	adc	r19, r19
    3f72:	82 0f       	add	r24, r18
    3f74:	93 1f       	adc	r25, r19
    3f76:	84 0f       	add	r24, r20
    3f78:	95 1f       	adc	r25, r21
    3f7a:	fc 01       	movw	r30, r24
    3f7c:	e8 57       	subi	r30, 0x78	; 120
    3f7e:	fe 4f       	sbci	r31, 0xFE	; 254
    3f80:	90 81       	ld	r25, Z
    3f82:	86 2f       	mov	r24, r22
    3f84:	69 2f       	mov	r22, r25
    3f86:	41 e0       	ldi	r20, 0x01	; 1
    3f88:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    3f8c:	88 2f       	mov	r24, r24
    3f8e:	90 e0       	ldi	r25, 0x00	; 0
    3f90:	98 2f       	mov	r25, r24
    3f92:	88 27       	eor	r24, r24
    3f94:	99 0f       	add	r25, r25
    3f96:	9c 01       	movw	r18, r24
    3f98:	44 27       	eor	r20, r20
    3f9a:	37 fd       	sbrc	r19, 7
    3f9c:	40 95       	com	r20
    3f9e:	54 2f       	mov	r21, r20
    3fa0:	89 81       	ldd	r24, Y+1	; 0x01
    3fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    3fa4:	ab 81       	ldd	r26, Y+3	; 0x03
    3fa6:	bc 81       	ldd	r27, Y+4	; 0x04
    3fa8:	82 2b       	or	r24, r18
    3faa:	93 2b       	or	r25, r19
    3fac:	a4 2b       	or	r26, r20
    3fae:	b5 2b       	or	r27, r21
    3fb0:	89 83       	std	Y+1, r24	; 0x01
    3fb2:	9a 83       	std	Y+2, r25	; 0x02
    3fb4:	ab 83       	std	Y+3, r26	; 0x03
    3fb6:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPin,
												  DIO_u8HIGH) << 9) ;

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPort,
    3fb8:	88 85       	ldd	r24, Y+8	; 0x08
    3fba:	48 2f       	mov	r20, r24
    3fbc:	50 e0       	ldi	r21, 0x00	; 0
    3fbe:	ca 01       	movw	r24, r20
    3fc0:	88 0f       	add	r24, r24
    3fc2:	99 1f       	adc	r25, r25
    3fc4:	9c 01       	movw	r18, r24
    3fc6:	22 0f       	add	r18, r18
    3fc8:	33 1f       	adc	r19, r19
    3fca:	22 0f       	add	r18, r18
    3fcc:	33 1f       	adc	r19, r19
    3fce:	22 0f       	add	r18, r18
    3fd0:	33 1f       	adc	r19, r19
    3fd2:	82 0f       	add	r24, r18
    3fd4:	93 1f       	adc	r25, r19
    3fd6:	84 0f       	add	r24, r20
    3fd8:	95 1f       	adc	r25, r21
    3fda:	fc 01       	movw	r30, r24
    3fdc:	e7 57       	subi	r30, 0x77	; 119
    3fde:	fe 4f       	sbci	r31, 0xFE	; 254
    3fe0:	60 81       	ld	r22, Z
    3fe2:	88 85       	ldd	r24, Y+8	; 0x08
    3fe4:	48 2f       	mov	r20, r24
    3fe6:	50 e0       	ldi	r21, 0x00	; 0
    3fe8:	ca 01       	movw	r24, r20
    3fea:	88 0f       	add	r24, r24
    3fec:	99 1f       	adc	r25, r25
    3fee:	9c 01       	movw	r18, r24
    3ff0:	22 0f       	add	r18, r18
    3ff2:	33 1f       	adc	r19, r19
    3ff4:	22 0f       	add	r18, r18
    3ff6:	33 1f       	adc	r19, r19
    3ff8:	22 0f       	add	r18, r18
    3ffa:	33 1f       	adc	r19, r19
    3ffc:	82 0f       	add	r24, r18
    3ffe:	93 1f       	adc	r25, r19
    4000:	84 0f       	add	r24, r20
    4002:	95 1f       	adc	r25, r21
    4004:	fc 01       	movw	r30, r24
    4006:	e6 57       	subi	r30, 0x76	; 118
    4008:	fe 4f       	sbci	r31, 0xFE	; 254
    400a:	90 81       	ld	r25, Z
    400c:	86 2f       	mov	r24, r22
    400e:	69 2f       	mov	r22, r25
    4010:	41 e0       	ldi	r20, 0x01	; 1
    4012:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4016:	88 2f       	mov	r24, r24
    4018:	90 e0       	ldi	r25, 0x00	; 0
    401a:	98 2f       	mov	r25, r24
    401c:	88 27       	eor	r24, r24
    401e:	92 95       	swap	r25
    4020:	90 7f       	andi	r25, 0xF0	; 240
    4022:	9c 01       	movw	r18, r24
    4024:	44 27       	eor	r20, r20
    4026:	37 fd       	sbrc	r19, 7
    4028:	40 95       	com	r20
    402a:	54 2f       	mov	r21, r20
    402c:	89 81       	ldd	r24, Y+1	; 0x01
    402e:	9a 81       	ldd	r25, Y+2	; 0x02
    4030:	ab 81       	ldd	r26, Y+3	; 0x03
    4032:	bc 81       	ldd	r27, Y+4	; 0x04
    4034:	82 2b       	or	r24, r18
    4036:	93 2b       	or	r25, r19
    4038:	a4 2b       	or	r26, r20
    403a:	b5 2b       	or	r27, r21
    403c:	89 83       	std	Y+1, r24	; 0x01
    403e:	9a 83       	std	Y+2, r25	; 0x02
    4040:	ab 83       	std	Y+3, r26	; 0x03
    4042:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPin,
												  DIO_u8HIGH) << 12);

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPort,
    4044:	88 85       	ldd	r24, Y+8	; 0x08
    4046:	48 2f       	mov	r20, r24
    4048:	50 e0       	ldi	r21, 0x00	; 0
    404a:	ca 01       	movw	r24, r20
    404c:	88 0f       	add	r24, r24
    404e:	99 1f       	adc	r25, r25
    4050:	9c 01       	movw	r18, r24
    4052:	22 0f       	add	r18, r18
    4054:	33 1f       	adc	r19, r19
    4056:	22 0f       	add	r18, r18
    4058:	33 1f       	adc	r19, r19
    405a:	22 0f       	add	r18, r18
    405c:	33 1f       	adc	r19, r19
    405e:	82 0f       	add	r24, r18
    4060:	93 1f       	adc	r25, r19
    4062:	84 0f       	add	r24, r20
    4064:	95 1f       	adc	r25, r21
    4066:	fc 01       	movw	r30, r24
    4068:	e5 57       	subi	r30, 0x75	; 117
    406a:	fe 4f       	sbci	r31, 0xFE	; 254
    406c:	60 81       	ld	r22, Z
    406e:	88 85       	ldd	r24, Y+8	; 0x08
    4070:	48 2f       	mov	r20, r24
    4072:	50 e0       	ldi	r21, 0x00	; 0
    4074:	ca 01       	movw	r24, r20
    4076:	88 0f       	add	r24, r24
    4078:	99 1f       	adc	r25, r25
    407a:	9c 01       	movw	r18, r24
    407c:	22 0f       	add	r18, r18
    407e:	33 1f       	adc	r19, r19
    4080:	22 0f       	add	r18, r18
    4082:	33 1f       	adc	r19, r19
    4084:	22 0f       	add	r18, r18
    4086:	33 1f       	adc	r19, r19
    4088:	82 0f       	add	r24, r18
    408a:	93 1f       	adc	r25, r19
    408c:	84 0f       	add	r24, r20
    408e:	95 1f       	adc	r25, r21
    4090:	fc 01       	movw	r30, r24
    4092:	e4 57       	subi	r30, 0x74	; 116
    4094:	fe 4f       	sbci	r31, 0xFE	; 254
    4096:	90 81       	ld	r25, Z
    4098:	86 2f       	mov	r24, r22
    409a:	69 2f       	mov	r22, r25
    409c:	41 e0       	ldi	r20, 0x01	; 1
    409e:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    40a2:	88 2f       	mov	r24, r24
    40a4:	90 e0       	ldi	r25, 0x00	; 0
    40a6:	a0 e0       	ldi	r26, 0x00	; 0
    40a8:	b0 e0       	ldi	r27, 0x00	; 0
    40aa:	9c 01       	movw	r18, r24
    40ac:	ad 01       	movw	r20, r26
    40ae:	01 2e       	mov	r0, r17
    40b0:	1f e0       	ldi	r17, 0x0F	; 15
    40b2:	22 0f       	add	r18, r18
    40b4:	33 1f       	adc	r19, r19
    40b6:	44 1f       	adc	r20, r20
    40b8:	55 1f       	adc	r21, r21
    40ba:	1a 95       	dec	r17
    40bc:	d1 f7       	brne	.-12     	; 0x40b2 <SSDLT_enuClearDisplay+0x7a4>
    40be:	10 2d       	mov	r17, r0
    40c0:	89 81       	ldd	r24, Y+1	; 0x01
    40c2:	9a 81       	ldd	r25, Y+2	; 0x02
    40c4:	ab 81       	ldd	r26, Y+3	; 0x03
    40c6:	bc 81       	ldd	r27, Y+4	; 0x04
    40c8:	82 2b       	or	r24, r18
    40ca:	93 2b       	or	r25, r19
    40cc:	a4 2b       	or	r26, r20
    40ce:	b5 2b       	or	r27, r21
    40d0:	89 83       	std	Y+1, r24	; 0x01
    40d2:	9a 83       	std	Y+2, r25	; 0x02
    40d4:	ab 83       	std	Y+3, r26	; 0x03
    40d6:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPin,
												  DIO_u8HIGH) << 15));

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPort,
    40d8:	88 85       	ldd	r24, Y+8	; 0x08
    40da:	48 2f       	mov	r20, r24
    40dc:	50 e0       	ldi	r21, 0x00	; 0
    40de:	ca 01       	movw	r24, r20
    40e0:	88 0f       	add	r24, r24
    40e2:	99 1f       	adc	r25, r25
    40e4:	9c 01       	movw	r18, r24
    40e6:	22 0f       	add	r18, r18
    40e8:	33 1f       	adc	r19, r19
    40ea:	22 0f       	add	r18, r18
    40ec:	33 1f       	adc	r19, r19
    40ee:	22 0f       	add	r18, r18
    40f0:	33 1f       	adc	r19, r19
    40f2:	82 0f       	add	r24, r18
    40f4:	93 1f       	adc	r25, r19
    40f6:	84 0f       	add	r24, r20
    40f8:	95 1f       	adc	r25, r21
    40fa:	fc 01       	movw	r30, r24
    40fc:	e3 57       	subi	r30, 0x73	; 115
    40fe:	fe 4f       	sbci	r31, 0xFE	; 254
    4100:	60 81       	ld	r22, Z
    4102:	88 85       	ldd	r24, Y+8	; 0x08
    4104:	48 2f       	mov	r20, r24
    4106:	50 e0       	ldi	r21, 0x00	; 0
    4108:	ca 01       	movw	r24, r20
    410a:	88 0f       	add	r24, r24
    410c:	99 1f       	adc	r25, r25
    410e:	9c 01       	movw	r18, r24
    4110:	22 0f       	add	r18, r18
    4112:	33 1f       	adc	r19, r19
    4114:	22 0f       	add	r18, r18
    4116:	33 1f       	adc	r19, r19
    4118:	22 0f       	add	r18, r18
    411a:	33 1f       	adc	r19, r19
    411c:	82 0f       	add	r24, r18
    411e:	93 1f       	adc	r25, r19
    4120:	84 0f       	add	r24, r20
    4122:	95 1f       	adc	r25, r21
    4124:	fc 01       	movw	r30, r24
    4126:	e2 57       	subi	r30, 0x72	; 114
    4128:	fe 4f       	sbci	r31, 0xFE	; 254
    412a:	90 81       	ld	r25, Z
    412c:	86 2f       	mov	r24, r22
    412e:	69 2f       	mov	r22, r25
    4130:	41 e0       	ldi	r20, 0x01	; 1
    4132:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4136:	88 2f       	mov	r24, r24
    4138:	90 e0       	ldi	r25, 0x00	; 0
    413a:	a0 e0       	ldi	r26, 0x00	; 0
    413c:	b0 e0       	ldi	r27, 0x00	; 0
    413e:	9c 01       	movw	r18, r24
    4140:	ad 01       	movw	r20, r26
    4142:	01 2e       	mov	r0, r17
    4144:	12 e1       	ldi	r17, 0x12	; 18
    4146:	22 0f       	add	r18, r18
    4148:	33 1f       	adc	r19, r19
    414a:	44 1f       	adc	r20, r20
    414c:	55 1f       	adc	r21, r21
    414e:	1a 95       	dec	r17
    4150:	d1 f7       	brne	.-12     	; 0x4146 <SSDLT_enuClearDisplay+0x838>
    4152:	10 2d       	mov	r17, r0
    4154:	89 81       	ldd	r24, Y+1	; 0x01
    4156:	9a 81       	ldd	r25, Y+2	; 0x02
    4158:	ab 81       	ldd	r26, Y+3	; 0x03
    415a:	bc 81       	ldd	r27, Y+4	; 0x04
    415c:	82 2b       	or	r24, r18
    415e:	93 2b       	or	r25, r19
    4160:	a4 2b       	or	r26, r20
    4162:	b5 2b       	or	r27, r21
    4164:	89 83       	std	Y+1, r24	; 0x01
    4166:	9a 83       	std	Y+2, r25	; 0x02
    4168:	ab 83       	std	Y+3, r26	; 0x03
    416a:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPin,
												  DIO_u8HIGH) << 18));
			Local_u8LastBit = 21;
    416c:	85 e1       	ldi	r24, 0x15	; 21
    416e:	8d 83       	std	Y+5, r24	; 0x05
    4170:	03 c0       	rjmp	.+6      	; 0x4178 <SSDLT_enuClearDisplay+0x86a>
		}
		else
		{
			return ES_OUT_OF_RANGE;
    4172:	03 e0       	ldi	r16, 0x03	; 3
    4174:	09 87       	std	Y+9, r16	; 0x09
    4176:	23 c1       	rjmp	.+582    	; 0x43be <SSDLT_enuClearDisplay+0xab0>
	else
	{
		return ES_OUT_OF_RANGE;
	}

	if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port != NOT_CONNECTED ||
    4178:	88 85       	ldd	r24, Y+8	; 0x08
    417a:	48 2f       	mov	r20, r24
    417c:	50 e0       	ldi	r21, 0x00	; 0
    417e:	ca 01       	movw	r24, r20
    4180:	88 0f       	add	r24, r24
    4182:	99 1f       	adc	r25, r25
    4184:	9c 01       	movw	r18, r24
    4186:	22 0f       	add	r18, r18
    4188:	33 1f       	adc	r19, r19
    418a:	22 0f       	add	r18, r18
    418c:	33 1f       	adc	r19, r19
    418e:	22 0f       	add	r18, r18
    4190:	33 1f       	adc	r19, r19
    4192:	82 0f       	add	r24, r18
    4194:	93 1f       	adc	r25, r19
    4196:	84 0f       	add	r24, r20
    4198:	95 1f       	adc	r25, r21
    419a:	fc 01       	movw	r30, r24
    419c:	ef 56       	subi	r30, 0x6F	; 111
    419e:	fe 4f       	sbci	r31, 0xFE	; 254
    41a0:	80 81       	ld	r24, Z
    41a2:	82 30       	cpi	r24, 0x02	; 2
    41a4:	e1 f4       	brne	.+56     	; 0x41de <SSDLT_enuClearDisplay+0x8d0>
    41a6:	03 c0       	rjmp	.+6      	; 0x41ae <SSDLT_enuClearDisplay+0x8a0>
			return ES_OUT_OF_RANGE;
		}
	}
	else
	{
		return ES_OUT_OF_RANGE;
    41a8:	13 e0       	ldi	r17, 0x03	; 3
    41aa:	19 87       	std	Y+9, r17	; 0x09
    41ac:	08 c1       	rjmp	.+528    	; 0x43be <SSDLT_enuClearDisplay+0xab0>
	}

	if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port != NOT_CONNECTED ||
    41ae:	88 85       	ldd	r24, Y+8	; 0x08
    41b0:	48 2f       	mov	r20, r24
    41b2:	50 e0       	ldi	r21, 0x00	; 0
    41b4:	ca 01       	movw	r24, r20
    41b6:	88 0f       	add	r24, r24
    41b8:	99 1f       	adc	r25, r25
    41ba:	9c 01       	movw	r18, r24
    41bc:	22 0f       	add	r18, r18
    41be:	33 1f       	adc	r19, r19
    41c0:	22 0f       	add	r18, r18
    41c2:	33 1f       	adc	r19, r19
    41c4:	22 0f       	add	r18, r18
    41c6:	33 1f       	adc	r19, r19
    41c8:	82 0f       	add	r24, r18
    41ca:	93 1f       	adc	r25, r19
    41cc:	84 0f       	add	r24, r20
    41ce:	95 1f       	adc	r25, r21
    41d0:	fc 01       	movw	r30, r24
    41d2:	ee 56       	subi	r30, 0x6E	; 110
    41d4:	fe 4f       	sbci	r31, 0xFE	; 254
    41d6:	80 81       	ld	r24, Z
    41d8:	82 30       	cpi	r24, 0x02	; 2
    41da:	09 f4       	brne	.+2      	; 0x41de <SSDLT_enuClearDisplay+0x8d0>
    41dc:	c7 c0       	rjmp	.+398    	; 0x436c <SSDLT_enuClearDisplay+0xa5e>
		SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin != NOT_CONNECTED)
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    41de:	88 85       	ldd	r24, Y+8	; 0x08
    41e0:	48 2f       	mov	r20, r24
    41e2:	50 e0       	ldi	r21, 0x00	; 0
    41e4:	ca 01       	movw	r24, r20
    41e6:	88 0f       	add	r24, r24
    41e8:	99 1f       	adc	r25, r25
    41ea:	9c 01       	movw	r18, r24
    41ec:	22 0f       	add	r18, r18
    41ee:	33 1f       	adc	r19, r19
    41f0:	22 0f       	add	r18, r18
    41f2:	33 1f       	adc	r19, r19
    41f4:	22 0f       	add	r18, r18
    41f6:	33 1f       	adc	r19, r19
    41f8:	82 0f       	add	r24, r18
    41fa:	93 1f       	adc	r25, r19
    41fc:	84 0f       	add	r24, r20
    41fe:	95 1f       	adc	r25, r21
    4200:	fc 01       	movw	r30, r24
    4202:	ed 56       	subi	r30, 0x6D	; 109
    4204:	fe 4f       	sbci	r31, 0xFE	; 254
    4206:	80 81       	ld	r24, Z
    4208:	81 30       	cpi	r24, 0x01	; 1
    420a:	09 f0       	breq	.+2      	; 0x420e <SSDLT_enuClearDisplay+0x900>
    420c:	49 c0       	rjmp	.+146    	; 0x42a0 <SSDLT_enuClearDisplay+0x992>
		{
			Local_enuErrorState |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port,
    420e:	88 85       	ldd	r24, Y+8	; 0x08
    4210:	48 2f       	mov	r20, r24
    4212:	50 e0       	ldi	r21, 0x00	; 0
    4214:	ca 01       	movw	r24, r20
    4216:	88 0f       	add	r24, r24
    4218:	99 1f       	adc	r25, r25
    421a:	9c 01       	movw	r18, r24
    421c:	22 0f       	add	r18, r18
    421e:	33 1f       	adc	r19, r19
    4220:	22 0f       	add	r18, r18
    4222:	33 1f       	adc	r19, r19
    4224:	22 0f       	add	r18, r18
    4226:	33 1f       	adc	r19, r19
    4228:	82 0f       	add	r24, r18
    422a:	93 1f       	adc	r25, r19
    422c:	84 0f       	add	r24, r20
    422e:	95 1f       	adc	r25, r21
    4230:	fc 01       	movw	r30, r24
    4232:	ef 56       	subi	r30, 0x6F	; 111
    4234:	fe 4f       	sbci	r31, 0xFE	; 254
    4236:	60 81       	ld	r22, Z
    4238:	88 85       	ldd	r24, Y+8	; 0x08
    423a:	48 2f       	mov	r20, r24
    423c:	50 e0       	ldi	r21, 0x00	; 0
    423e:	ca 01       	movw	r24, r20
    4240:	88 0f       	add	r24, r24
    4242:	99 1f       	adc	r25, r25
    4244:	9c 01       	movw	r18, r24
    4246:	22 0f       	add	r18, r18
    4248:	33 1f       	adc	r19, r19
    424a:	22 0f       	add	r18, r18
    424c:	33 1f       	adc	r19, r19
    424e:	22 0f       	add	r18, r18
    4250:	33 1f       	adc	r19, r19
    4252:	82 0f       	add	r24, r18
    4254:	93 1f       	adc	r25, r19
    4256:	84 0f       	add	r24, r20
    4258:	95 1f       	adc	r25, r21
    425a:	fc 01       	movw	r30, r24
    425c:	ee 56       	subi	r30, 0x6E	; 110
    425e:	fe 4f       	sbci	r31, 0xFE	; 254
    4260:	90 81       	ld	r25, Z
    4262:	86 2f       	mov	r24, r22
    4264:	69 2f       	mov	r22, r25
    4266:	40 e0       	ldi	r20, 0x00	; 0
    4268:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    426c:	28 2f       	mov	r18, r24
    426e:	30 e0       	ldi	r19, 0x00	; 0
    4270:	40 e0       	ldi	r20, 0x00	; 0
    4272:	50 e0       	ldi	r21, 0x00	; 0
    4274:	8d 81       	ldd	r24, Y+5	; 0x05
    4276:	88 2f       	mov	r24, r24
    4278:	90 e0       	ldi	r25, 0x00	; 0
    427a:	79 01       	movw	r14, r18
    427c:	8a 01       	movw	r16, r20
    427e:	04 c0       	rjmp	.+8      	; 0x4288 <SSDLT_enuClearDisplay+0x97a>
    4280:	ee 0c       	add	r14, r14
    4282:	ff 1c       	adc	r15, r15
    4284:	00 1f       	adc	r16, r16
    4286:	11 1f       	adc	r17, r17
    4288:	8a 95       	dec	r24
    428a:	d2 f7       	brpl	.-12     	; 0x4280 <SSDLT_enuClearDisplay+0x972>
    428c:	d8 01       	movw	r26, r16
    428e:	c7 01       	movw	r24, r14
    4290:	98 2f       	mov	r25, r24
    4292:	8f 81       	ldd	r24, Y+7	; 0x07
    4294:	89 2b       	or	r24, r25
    4296:	8f 83       	std	Y+7, r24	; 0x07
													 SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin, DIO_u8LOW) << Local_u8LastBit));
			Local_u8LastBit += 3;
    4298:	8d 81       	ldd	r24, Y+5	; 0x05
    429a:	8d 5f       	subi	r24, 0xFD	; 253
    429c:	8d 83       	std	Y+5, r24	; 0x05
    429e:	64 c0       	rjmp	.+200    	; 0x4368 <SSDLT_enuClearDisplay+0xa5a>
		}
		else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    42a0:	88 85       	ldd	r24, Y+8	; 0x08
    42a2:	48 2f       	mov	r20, r24
    42a4:	50 e0       	ldi	r21, 0x00	; 0
    42a6:	ca 01       	movw	r24, r20
    42a8:	88 0f       	add	r24, r24
    42aa:	99 1f       	adc	r25, r25
    42ac:	9c 01       	movw	r18, r24
    42ae:	22 0f       	add	r18, r18
    42b0:	33 1f       	adc	r19, r19
    42b2:	22 0f       	add	r18, r18
    42b4:	33 1f       	adc	r19, r19
    42b6:	22 0f       	add	r18, r18
    42b8:	33 1f       	adc	r19, r19
    42ba:	82 0f       	add	r24, r18
    42bc:	93 1f       	adc	r25, r19
    42be:	84 0f       	add	r24, r20
    42c0:	95 1f       	adc	r25, r21
    42c2:	fc 01       	movw	r30, r24
    42c4:	ed 56       	subi	r30, 0x6D	; 109
    42c6:	fe 4f       	sbci	r31, 0xFE	; 254
    42c8:	80 81       	ld	r24, Z
    42ca:	88 23       	and	r24, r24
    42cc:	09 f0       	breq	.+2      	; 0x42d0 <SSDLT_enuClearDisplay+0x9c2>
    42ce:	49 c0       	rjmp	.+146    	; 0x4362 <SSDLT_enuClearDisplay+0xa54>
		{
			Local_enuErrorState |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port,
    42d0:	88 85       	ldd	r24, Y+8	; 0x08
    42d2:	48 2f       	mov	r20, r24
    42d4:	50 e0       	ldi	r21, 0x00	; 0
    42d6:	ca 01       	movw	r24, r20
    42d8:	88 0f       	add	r24, r24
    42da:	99 1f       	adc	r25, r25
    42dc:	9c 01       	movw	r18, r24
    42de:	22 0f       	add	r18, r18
    42e0:	33 1f       	adc	r19, r19
    42e2:	22 0f       	add	r18, r18
    42e4:	33 1f       	adc	r19, r19
    42e6:	22 0f       	add	r18, r18
    42e8:	33 1f       	adc	r19, r19
    42ea:	82 0f       	add	r24, r18
    42ec:	93 1f       	adc	r25, r19
    42ee:	84 0f       	add	r24, r20
    42f0:	95 1f       	adc	r25, r21
    42f2:	fc 01       	movw	r30, r24
    42f4:	ef 56       	subi	r30, 0x6F	; 111
    42f6:	fe 4f       	sbci	r31, 0xFE	; 254
    42f8:	60 81       	ld	r22, Z
    42fa:	88 85       	ldd	r24, Y+8	; 0x08
    42fc:	48 2f       	mov	r20, r24
    42fe:	50 e0       	ldi	r21, 0x00	; 0
    4300:	ca 01       	movw	r24, r20
    4302:	88 0f       	add	r24, r24
    4304:	99 1f       	adc	r25, r25
    4306:	9c 01       	movw	r18, r24
    4308:	22 0f       	add	r18, r18
    430a:	33 1f       	adc	r19, r19
    430c:	22 0f       	add	r18, r18
    430e:	33 1f       	adc	r19, r19
    4310:	22 0f       	add	r18, r18
    4312:	33 1f       	adc	r19, r19
    4314:	82 0f       	add	r24, r18
    4316:	93 1f       	adc	r25, r19
    4318:	84 0f       	add	r24, r20
    431a:	95 1f       	adc	r25, r21
    431c:	fc 01       	movw	r30, r24
    431e:	ee 56       	subi	r30, 0x6E	; 110
    4320:	fe 4f       	sbci	r31, 0xFE	; 254
    4322:	90 81       	ld	r25, Z
    4324:	86 2f       	mov	r24, r22
    4326:	69 2f       	mov	r22, r25
    4328:	41 e0       	ldi	r20, 0x01	; 1
    432a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    432e:	28 2f       	mov	r18, r24
    4330:	30 e0       	ldi	r19, 0x00	; 0
    4332:	40 e0       	ldi	r20, 0x00	; 0
    4334:	50 e0       	ldi	r21, 0x00	; 0
    4336:	8d 81       	ldd	r24, Y+5	; 0x05
    4338:	88 2f       	mov	r24, r24
    433a:	90 e0       	ldi	r25, 0x00	; 0
    433c:	79 01       	movw	r14, r18
    433e:	8a 01       	movw	r16, r20
    4340:	04 c0       	rjmp	.+8      	; 0x434a <SSDLT_enuClearDisplay+0xa3c>
    4342:	ee 0c       	add	r14, r14
    4344:	ff 1c       	adc	r15, r15
    4346:	00 1f       	adc	r16, r16
    4348:	11 1f       	adc	r17, r17
    434a:	8a 95       	dec	r24
    434c:	d2 f7       	brpl	.-12     	; 0x4342 <SSDLT_enuClearDisplay+0xa34>
    434e:	d8 01       	movw	r26, r16
    4350:	c7 01       	movw	r24, r14
    4352:	98 2f       	mov	r25, r24
    4354:	8f 81       	ldd	r24, Y+7	; 0x07
    4356:	89 2b       	or	r24, r25
    4358:	8f 83       	std	Y+7, r24	; 0x07
													SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin, DIO_u8HIGH) << Local_u8LastBit));
			Local_u8LastBit += 3;
    435a:	8d 81       	ldd	r24, Y+5	; 0x05
    435c:	8d 5f       	subi	r24, 0xFD	; 253
    435e:	8d 83       	std	Y+5, r24	; 0x05
    4360:	03 c0       	rjmp	.+6      	; 0x4368 <SSDLT_enuClearDisplay+0xa5a>
		}
		else
		{
			return ES_OUT_OF_RANGE;
    4362:	03 e0       	ldi	r16, 0x03	; 3
    4364:	09 87       	std	Y+9, r16	; 0x09
    4366:	2b c0       	rjmp	.+86     	; 0x43be <SSDLT_enuClearDisplay+0xab0>
	else
	{
		return ES_OUT_OF_RANGE;
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < Local_u8LastBit; Local_u8Iterator += 3)
    4368:	1e 82       	std	Y+6, r1	; 0x06
    436a:	21 c0       	rjmp	.+66     	; 0x43ae <SSDLT_enuClearDisplay+0xaa0>
		}

	}
	else
	{
		return ES_OUT_OF_RANGE;
    436c:	13 e0       	ldi	r17, 0x03	; 3
    436e:	19 87       	std	Y+9, r17	; 0x09
    4370:	26 c0       	rjmp	.+76     	; 0x43be <SSDLT_enuClearDisplay+0xab0>
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < Local_u8LastBit; Local_u8Iterator += 3)
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
    4372:	8e 81       	ldd	r24, Y+6	; 0x06
    4374:	28 2f       	mov	r18, r24
    4376:	30 e0       	ldi	r19, 0x00	; 0
    4378:	89 81       	ldd	r24, Y+1	; 0x01
    437a:	9a 81       	ldd	r25, Y+2	; 0x02
    437c:	ab 81       	ldd	r26, Y+3	; 0x03
    437e:	bc 81       	ldd	r27, Y+4	; 0x04
    4380:	02 2e       	mov	r0, r18
    4382:	04 c0       	rjmp	.+8      	; 0x438c <SSDLT_enuClearDisplay+0xa7e>
    4384:	b6 95       	lsr	r27
    4386:	a7 95       	ror	r26
    4388:	97 95       	ror	r25
    438a:	87 95       	ror	r24
    438c:	0a 94       	dec	r0
    438e:	d2 f7       	brpl	.-12     	; 0x4384 <SSDLT_enuClearDisplay+0xa76>
    4390:	87 70       	andi	r24, 0x07	; 7
    4392:	90 70       	andi	r25, 0x00	; 0
    4394:	a0 70       	andi	r26, 0x00	; 0
    4396:	b0 70       	andi	r27, 0x00	; 0
    4398:	81 30       	cpi	r24, 0x01	; 1
    439a:	91 05       	cpc	r25, r1
    439c:	a1 05       	cpc	r26, r1
    439e:	b1 05       	cpc	r27, r1
    43a0:	19 f0       	breq	.+6      	; 0x43a8 <SSDLT_enuClearDisplay+0xa9a>
		{
			return Local_enuErrorState;
    43a2:	8f 81       	ldd	r24, Y+7	; 0x07
    43a4:	89 87       	std	Y+9, r24	; 0x09
    43a6:	0b c0       	rjmp	.+22     	; 0x43be <SSDLT_enuClearDisplay+0xab0>
	else
	{
		return ES_OUT_OF_RANGE;
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < Local_u8LastBit; Local_u8Iterator += 3)
    43a8:	8e 81       	ldd	r24, Y+6	; 0x06
    43aa:	8d 5f       	subi	r24, 0xFD	; 253
    43ac:	8e 83       	std	Y+6, r24	; 0x06
    43ae:	9e 81       	ldd	r25, Y+6	; 0x06
    43b0:	8d 81       	ldd	r24, Y+5	; 0x05
    43b2:	98 17       	cp	r25, r24
    43b4:	f0 f2       	brcs	.-68     	; 0x4372 <SSDLT_enuClearDisplay+0xa64>
		{
			return Local_enuErrorState;
		}
	}

	Local_enuErrorState = ES_OK;
    43b6:	81 e0       	ldi	r24, 0x01	; 1
    43b8:	8f 83       	std	Y+7, r24	; 0x07

	return Local_enuErrorState;
    43ba:	ef 80       	ldd	r14, Y+7	; 0x07
    43bc:	e9 86       	std	Y+9, r14	; 0x09
    43be:	89 85       	ldd	r24, Y+9	; 0x09
}
    43c0:	29 96       	adiw	r28, 0x09	; 9
    43c2:	0f b6       	in	r0, 0x3f	; 63
    43c4:	f8 94       	cli
    43c6:	de bf       	out	0x3e, r29	; 62
    43c8:	0f be       	out	0x3f, r0	; 63
    43ca:	cd bf       	out	0x3d, r28	; 61
    43cc:	cf 91       	pop	r28
    43ce:	df 91       	pop	r29
    43d0:	1f 91       	pop	r17
    43d2:	0f 91       	pop	r16
    43d4:	ff 90       	pop	r15
    43d6:	ef 90       	pop	r14
    43d8:	08 95       	ret

000043da <SSD_enuInit>:
#include "SSD_config.h"
#include "SSD_private.h"
/***********************	Includes Section End	***********************/

ES_t SSD_enuInit(void)
{
    43da:	df 93       	push	r29
    43dc:	cf 93       	push	r28
    43de:	cd b7       	in	r28, 0x3d	; 61
    43e0:	de b7       	in	r29, 0x3e	; 62
    43e2:	27 97       	sbiw	r28, 0x07	; 7
    43e4:	0f b6       	in	r0, 0x3f	; 63
    43e6:	f8 94       	cli
    43e8:	de bf       	out	0x3e, r29	; 62
    43ea:	0f be       	out	0x3f, r0	; 63
    43ec:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    43ee:	1e 82       	std	Y+6, r1	; 0x06

	u32 Local_u32Check = 0;
    43f0:	1a 82       	std	Y+2, r1	; 0x02
    43f2:	1b 82       	std	Y+3, r1	; 0x03
    43f4:	1c 82       	std	Y+4, r1	; 0x04
    43f6:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8Iterator = 0;
    43f8:	19 82       	std	Y+1, r1	; 0x01

	Local_u32Check |= (DIO_enuSetPinDirection(SEG_APORT, SEG_APIN, DIO_u8OUTPUT) << 0);
    43fa:	80 e0       	ldi	r24, 0x00	; 0
    43fc:	60 e0       	ldi	r22, 0x00	; 0
    43fe:	41 e0       	ldi	r20, 0x01	; 1
    4400:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    4404:	28 2f       	mov	r18, r24
    4406:	30 e0       	ldi	r19, 0x00	; 0
    4408:	40 e0       	ldi	r20, 0x00	; 0
    440a:	50 e0       	ldi	r21, 0x00	; 0
    440c:	8a 81       	ldd	r24, Y+2	; 0x02
    440e:	9b 81       	ldd	r25, Y+3	; 0x03
    4410:	ac 81       	ldd	r26, Y+4	; 0x04
    4412:	bd 81       	ldd	r27, Y+5	; 0x05
    4414:	82 2b       	or	r24, r18
    4416:	93 2b       	or	r25, r19
    4418:	a4 2b       	or	r26, r20
    441a:	b5 2b       	or	r27, r21
    441c:	8a 83       	std	Y+2, r24	; 0x02
    441e:	9b 83       	std	Y+3, r25	; 0x03
    4420:	ac 83       	std	Y+4, r26	; 0x04
    4422:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (DIO_enuSetPinDirection(SEG_BPORT, SEG_BPIN, DIO_u8OUTPUT) << 3);
    4424:	80 e0       	ldi	r24, 0x00	; 0
    4426:	61 e0       	ldi	r22, 0x01	; 1
    4428:	41 e0       	ldi	r20, 0x01	; 1
    442a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    442e:	88 2f       	mov	r24, r24
    4430:	90 e0       	ldi	r25, 0x00	; 0
    4432:	88 0f       	add	r24, r24
    4434:	99 1f       	adc	r25, r25
    4436:	88 0f       	add	r24, r24
    4438:	99 1f       	adc	r25, r25
    443a:	88 0f       	add	r24, r24
    443c:	99 1f       	adc	r25, r25
    443e:	9c 01       	movw	r18, r24
    4440:	44 27       	eor	r20, r20
    4442:	37 fd       	sbrc	r19, 7
    4444:	40 95       	com	r20
    4446:	54 2f       	mov	r21, r20
    4448:	8a 81       	ldd	r24, Y+2	; 0x02
    444a:	9b 81       	ldd	r25, Y+3	; 0x03
    444c:	ac 81       	ldd	r26, Y+4	; 0x04
    444e:	bd 81       	ldd	r27, Y+5	; 0x05
    4450:	82 2b       	or	r24, r18
    4452:	93 2b       	or	r25, r19
    4454:	a4 2b       	or	r26, r20
    4456:	b5 2b       	or	r27, r21
    4458:	8a 83       	std	Y+2, r24	; 0x02
    445a:	9b 83       	std	Y+3, r25	; 0x03
    445c:	ac 83       	std	Y+4, r26	; 0x04
    445e:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (DIO_enuSetPinDirection(SEG_CPORT, SEG_CPIN, DIO_u8OUTPUT) << 6);
    4460:	80 e0       	ldi	r24, 0x00	; 0
    4462:	62 e0       	ldi	r22, 0x02	; 2
    4464:	41 e0       	ldi	r20, 0x01	; 1
    4466:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    446a:	88 2f       	mov	r24, r24
    446c:	90 e0       	ldi	r25, 0x00	; 0
    446e:	00 24       	eor	r0, r0
    4470:	96 95       	lsr	r25
    4472:	87 95       	ror	r24
    4474:	07 94       	ror	r0
    4476:	96 95       	lsr	r25
    4478:	87 95       	ror	r24
    447a:	07 94       	ror	r0
    447c:	98 2f       	mov	r25, r24
    447e:	80 2d       	mov	r24, r0
    4480:	9c 01       	movw	r18, r24
    4482:	44 27       	eor	r20, r20
    4484:	37 fd       	sbrc	r19, 7
    4486:	40 95       	com	r20
    4488:	54 2f       	mov	r21, r20
    448a:	8a 81       	ldd	r24, Y+2	; 0x02
    448c:	9b 81       	ldd	r25, Y+3	; 0x03
    448e:	ac 81       	ldd	r26, Y+4	; 0x04
    4490:	bd 81       	ldd	r27, Y+5	; 0x05
    4492:	82 2b       	or	r24, r18
    4494:	93 2b       	or	r25, r19
    4496:	a4 2b       	or	r26, r20
    4498:	b5 2b       	or	r27, r21
    449a:	8a 83       	std	Y+2, r24	; 0x02
    449c:	9b 83       	std	Y+3, r25	; 0x03
    449e:	ac 83       	std	Y+4, r26	; 0x04
    44a0:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (DIO_enuSetPinDirection(SEG_DPORT, SEG_DPIN, DIO_u8OUTPUT) << 9);
    44a2:	81 e0       	ldi	r24, 0x01	; 1
    44a4:	60 e0       	ldi	r22, 0x00	; 0
    44a6:	41 e0       	ldi	r20, 0x01	; 1
    44a8:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    44ac:	88 2f       	mov	r24, r24
    44ae:	90 e0       	ldi	r25, 0x00	; 0
    44b0:	98 2f       	mov	r25, r24
    44b2:	88 27       	eor	r24, r24
    44b4:	99 0f       	add	r25, r25
    44b6:	9c 01       	movw	r18, r24
    44b8:	44 27       	eor	r20, r20
    44ba:	37 fd       	sbrc	r19, 7
    44bc:	40 95       	com	r20
    44be:	54 2f       	mov	r21, r20
    44c0:	8a 81       	ldd	r24, Y+2	; 0x02
    44c2:	9b 81       	ldd	r25, Y+3	; 0x03
    44c4:	ac 81       	ldd	r26, Y+4	; 0x04
    44c6:	bd 81       	ldd	r27, Y+5	; 0x05
    44c8:	82 2b       	or	r24, r18
    44ca:	93 2b       	or	r25, r19
    44cc:	a4 2b       	or	r26, r20
    44ce:	b5 2b       	or	r27, r21
    44d0:	8a 83       	std	Y+2, r24	; 0x02
    44d2:	9b 83       	std	Y+3, r25	; 0x03
    44d4:	ac 83       	std	Y+4, r26	; 0x04
    44d6:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (DIO_enuSetPinDirection(SEG_EPORT, SEG_EPIN, DIO_u8OUTPUT) << 12);
    44d8:	81 e0       	ldi	r24, 0x01	; 1
    44da:	61 e0       	ldi	r22, 0x01	; 1
    44dc:	41 e0       	ldi	r20, 0x01	; 1
    44de:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    44e2:	88 2f       	mov	r24, r24
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	98 2f       	mov	r25, r24
    44e8:	88 27       	eor	r24, r24
    44ea:	92 95       	swap	r25
    44ec:	90 7f       	andi	r25, 0xF0	; 240
    44ee:	9c 01       	movw	r18, r24
    44f0:	44 27       	eor	r20, r20
    44f2:	37 fd       	sbrc	r19, 7
    44f4:	40 95       	com	r20
    44f6:	54 2f       	mov	r21, r20
    44f8:	8a 81       	ldd	r24, Y+2	; 0x02
    44fa:	9b 81       	ldd	r25, Y+3	; 0x03
    44fc:	ac 81       	ldd	r26, Y+4	; 0x04
    44fe:	bd 81       	ldd	r27, Y+5	; 0x05
    4500:	82 2b       	or	r24, r18
    4502:	93 2b       	or	r25, r19
    4504:	a4 2b       	or	r26, r20
    4506:	b5 2b       	or	r27, r21
    4508:	8a 83       	std	Y+2, r24	; 0x02
    450a:	9b 83       	std	Y+3, r25	; 0x03
    450c:	ac 83       	std	Y+4, r26	; 0x04
    450e:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (((u32)DIO_enuSetPinDirection(SEG_GPORT, SEG_GPIN, DIO_u8OUTPUT)) << 15);
    4510:	81 e0       	ldi	r24, 0x01	; 1
    4512:	63 e0       	ldi	r22, 0x03	; 3
    4514:	41 e0       	ldi	r20, 0x01	; 1
    4516:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    451a:	88 2f       	mov	r24, r24
    451c:	90 e0       	ldi	r25, 0x00	; 0
    451e:	a0 e0       	ldi	r26, 0x00	; 0
    4520:	b0 e0       	ldi	r27, 0x00	; 0
    4522:	9c 01       	movw	r18, r24
    4524:	ad 01       	movw	r20, r26
    4526:	01 2e       	mov	r0, r17
    4528:	1f e0       	ldi	r17, 0x0F	; 15
    452a:	22 0f       	add	r18, r18
    452c:	33 1f       	adc	r19, r19
    452e:	44 1f       	adc	r20, r20
    4530:	55 1f       	adc	r21, r21
    4532:	1a 95       	dec	r17
    4534:	d1 f7       	brne	.-12     	; 0x452a <SSD_enuInit+0x150>
    4536:	10 2d       	mov	r17, r0
    4538:	8a 81       	ldd	r24, Y+2	; 0x02
    453a:	9b 81       	ldd	r25, Y+3	; 0x03
    453c:	ac 81       	ldd	r26, Y+4	; 0x04
    453e:	bd 81       	ldd	r27, Y+5	; 0x05
    4540:	82 2b       	or	r24, r18
    4542:	93 2b       	or	r25, r19
    4544:	a4 2b       	or	r26, r20
    4546:	b5 2b       	or	r27, r21
    4548:	8a 83       	std	Y+2, r24	; 0x02
    454a:	9b 83       	std	Y+3, r25	; 0x03
    454c:	ac 83       	std	Y+4, r26	; 0x04
    454e:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (((u32)DIO_enuSetPinDirection(SEG_GPORT, SEG_GPIN, DIO_u8OUTPUT)) << 18);
    4550:	81 e0       	ldi	r24, 0x01	; 1
    4552:	63 e0       	ldi	r22, 0x03	; 3
    4554:	41 e0       	ldi	r20, 0x01	; 1
    4556:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    455a:	88 2f       	mov	r24, r24
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	a0 e0       	ldi	r26, 0x00	; 0
    4560:	b0 e0       	ldi	r27, 0x00	; 0
    4562:	9c 01       	movw	r18, r24
    4564:	ad 01       	movw	r20, r26
    4566:	01 2e       	mov	r0, r17
    4568:	12 e1       	ldi	r17, 0x12	; 18
    456a:	22 0f       	add	r18, r18
    456c:	33 1f       	adc	r19, r19
    456e:	44 1f       	adc	r20, r20
    4570:	55 1f       	adc	r21, r21
    4572:	1a 95       	dec	r17
    4574:	d1 f7       	brne	.-12     	; 0x456a <SSD_enuInit+0x190>
    4576:	10 2d       	mov	r17, r0
    4578:	8a 81       	ldd	r24, Y+2	; 0x02
    457a:	9b 81       	ldd	r25, Y+3	; 0x03
    457c:	ac 81       	ldd	r26, Y+4	; 0x04
    457e:	bd 81       	ldd	r27, Y+5	; 0x05
    4580:	82 2b       	or	r24, r18
    4582:	93 2b       	or	r25, r19
    4584:	a4 2b       	or	r26, r20
    4586:	b5 2b       	or	r27, r21
    4588:	8a 83       	std	Y+2, r24	; 0x02
    458a:	9b 83       	std	Y+3, r25	; 0x03
    458c:	ac 83       	std	Y+4, r26	; 0x04
    458e:	bd 83       	std	Y+5, r27	; 0x05
	 *  	0000 0000 0000 0100 1001 0010 0100 1001
	 * */

	//Because we work as pre compile config we will use #if
	#if SEG_CMN_PIN <= DIO_u8PIN7 && SEG_CMN_PORT <= DIO_u8PORTD
		Local_u32Check |= (((u32)DIO_enuSetPinDirection(SEG_CMN_PORT, SEG_CMN_PIN, DIO_u8OUTPUT)) << 21);
    4590:	82 e0       	ldi	r24, 0x02	; 2
    4592:	62 e0       	ldi	r22, 0x02	; 2
    4594:	41 e0       	ldi	r20, 0x01	; 1
    4596:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    459a:	88 2f       	mov	r24, r24
    459c:	90 e0       	ldi	r25, 0x00	; 0
    459e:	a0 e0       	ldi	r26, 0x00	; 0
    45a0:	b0 e0       	ldi	r27, 0x00	; 0
    45a2:	9c 01       	movw	r18, r24
    45a4:	ad 01       	movw	r20, r26
    45a6:	01 2e       	mov	r0, r17
    45a8:	15 e1       	ldi	r17, 0x15	; 21
    45aa:	22 0f       	add	r18, r18
    45ac:	33 1f       	adc	r19, r19
    45ae:	44 1f       	adc	r20, r20
    45b0:	55 1f       	adc	r21, r21
    45b2:	1a 95       	dec	r17
    45b4:	d1 f7       	brne	.-12     	; 0x45aa <SSD_enuInit+0x1d0>
    45b6:	10 2d       	mov	r17, r0
    45b8:	8a 81       	ldd	r24, Y+2	; 0x02
    45ba:	9b 81       	ldd	r25, Y+3	; 0x03
    45bc:	ac 81       	ldd	r26, Y+4	; 0x04
    45be:	bd 81       	ldd	r27, Y+5	; 0x05
    45c0:	82 2b       	or	r24, r18
    45c2:	93 2b       	or	r25, r19
    45c4:	a4 2b       	or	r26, r20
    45c6:	b5 2b       	or	r27, r21
    45c8:	8a 83       	std	Y+2, r24	; 0x02
    45ca:	9b 83       	std	Y+3, r25	; 0x03
    45cc:	ac 83       	std	Y+4, r26	; 0x04
    45ce:	bd 83       	std	Y+5, r27	; 0x05
	#else
		#error "Your Common pin has a wrong selection!"
	#endif

	#if SEG_DOT_PIN <= DIO_u8PIN7 && SEG_DOT_PORT <= DIO_u8PORTD
		Local_u32Check |= (((u32)DIO_enuSetPinDirection(SEG_DOT_PORT, SEG_DOT_PIN, DIO_u8OUTPUT)) << 24);
    45d0:	82 e0       	ldi	r24, 0x02	; 2
    45d2:	62 e0       	ldi	r22, 0x02	; 2
    45d4:	41 e0       	ldi	r20, 0x01	; 1
    45d6:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    45da:	88 2f       	mov	r24, r24
    45dc:	90 e0       	ldi	r25, 0x00	; 0
    45de:	a0 e0       	ldi	r26, 0x00	; 0
    45e0:	b0 e0       	ldi	r27, 0x00	; 0
    45e2:	58 2f       	mov	r21, r24
    45e4:	44 27       	eor	r20, r20
    45e6:	33 27       	eor	r19, r19
    45e8:	22 27       	eor	r18, r18
    45ea:	8a 81       	ldd	r24, Y+2	; 0x02
    45ec:	9b 81       	ldd	r25, Y+3	; 0x03
    45ee:	ac 81       	ldd	r26, Y+4	; 0x04
    45f0:	bd 81       	ldd	r27, Y+5	; 0x05
    45f2:	82 2b       	or	r24, r18
    45f4:	93 2b       	or	r25, r19
    45f6:	a4 2b       	or	r26, r20
    45f8:	b5 2b       	or	r27, r21
    45fa:	8a 83       	std	Y+2, r24	; 0x02
    45fc:	9b 83       	std	Y+3, r25	; 0x03
    45fe:	ac 83       	std	Y+4, r26	; 0x04
    4600:	bd 83       	std	Y+5, r27	; 0x05
	#else
		#error "Your DOT pin has a wrong selection!"
	#endif


	for(Local_u8Iterator = 0; Local_u8Iterator < 27; Local_u8Iterator += 3)
    4602:	19 82       	std	Y+1, r1	; 0x01
    4604:	1e c0       	rjmp	.+60     	; 0x4642 <SSD_enuInit+0x268>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
    4606:	89 81       	ldd	r24, Y+1	; 0x01
    4608:	28 2f       	mov	r18, r24
    460a:	30 e0       	ldi	r19, 0x00	; 0
    460c:	8a 81       	ldd	r24, Y+2	; 0x02
    460e:	9b 81       	ldd	r25, Y+3	; 0x03
    4610:	ac 81       	ldd	r26, Y+4	; 0x04
    4612:	bd 81       	ldd	r27, Y+5	; 0x05
    4614:	02 2e       	mov	r0, r18
    4616:	04 c0       	rjmp	.+8      	; 0x4620 <SSD_enuInit+0x246>
    4618:	b6 95       	lsr	r27
    461a:	a7 95       	ror	r26
    461c:	97 95       	ror	r25
    461e:	87 95       	ror	r24
    4620:	0a 94       	dec	r0
    4622:	d2 f7       	brpl	.-12     	; 0x4618 <SSD_enuInit+0x23e>
    4624:	87 70       	andi	r24, 0x07	; 7
    4626:	90 70       	andi	r25, 0x00	; 0
    4628:	a0 70       	andi	r26, 0x00	; 0
    462a:	b0 70       	andi	r27, 0x00	; 0
    462c:	81 30       	cpi	r24, 0x01	; 1
    462e:	91 05       	cpc	r25, r1
    4630:	a1 05       	cpc	r26, r1
    4632:	b1 05       	cpc	r27, r1
    4634:	19 f0       	breq	.+6      	; 0x463c <SSD_enuInit+0x262>
		{
			return Local_enuErrorState;
    4636:	8e 81       	ldd	r24, Y+6	; 0x06
    4638:	8f 83       	std	Y+7, r24	; 0x07
    463a:	0a c0       	rjmp	.+20     	; 0x4650 <SSD_enuInit+0x276>
	#else
		#error "Your DOT pin has a wrong selection!"
	#endif


	for(Local_u8Iterator = 0; Local_u8Iterator < 27; Local_u8Iterator += 3)
    463c:	89 81       	ldd	r24, Y+1	; 0x01
    463e:	8d 5f       	subi	r24, 0xFD	; 253
    4640:	89 83       	std	Y+1, r24	; 0x01
    4642:	89 81       	ldd	r24, Y+1	; 0x01
    4644:	8b 31       	cpi	r24, 0x1B	; 27
    4646:	f8 f2       	brcs	.-66     	; 0x4606 <SSD_enuInit+0x22c>
		{
			return Local_enuErrorState;
		}
	}

	Local_enuErrorState = ES_OK;
    4648:	81 e0       	ldi	r24, 0x01	; 1
    464a:	8e 83       	std	Y+6, r24	; 0x06

	return Local_enuErrorState;
    464c:	8e 81       	ldd	r24, Y+6	; 0x06
    464e:	8f 83       	std	Y+7, r24	; 0x07
    4650:	8f 81       	ldd	r24, Y+7	; 0x07
}
    4652:	27 96       	adiw	r28, 0x07	; 7
    4654:	0f b6       	in	r0, 0x3f	; 63
    4656:	f8 94       	cli
    4658:	de bf       	out	0x3e, r29	; 62
    465a:	0f be       	out	0x3f, r0	; 63
    465c:	cd bf       	out	0x3d, r28	; 61
    465e:	cf 91       	pop	r28
    4660:	df 91       	pop	r29
    4662:	08 95       	ret

00004664 <SSD_enuDisplayNum>:

ES_t SSD_enuDisplayNum(u8 Copy_u8Number)
{
    4664:	df 93       	push	r29
    4666:	cf 93       	push	r28
    4668:	cd b7       	in	r28, 0x3d	; 61
    466a:	de b7       	in	r29, 0x3e	; 62
    466c:	28 97       	sbiw	r28, 0x08	; 8
    466e:	0f b6       	in	r0, 0x3f	; 63
    4670:	f8 94       	cli
    4672:	de bf       	out	0x3e, r29	; 62
    4674:	0f be       	out	0x3f, r0	; 63
    4676:	cd bf       	out	0x3d, r28	; 61
    4678:	8f 83       	std	Y+7, r24	; 0x07
	ES_t Local_enuErrorState = ES_NOK;
    467a:	1e 82       	std	Y+6, r1	; 0x06

	u32 Local_u32Check = 0;
    467c:	1a 82       	std	Y+2, r1	; 0x02
    467e:	1b 82       	std	Y+3, r1	; 0x03
    4680:	1c 82       	std	Y+4, r1	; 0x04
    4682:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8Iterator = 0;
    4684:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Number < 10)
    4686:	8f 81       	ldd	r24, Y+7	; 0x07
    4688:	8a 30       	cpi	r24, 0x0A	; 10
    468a:	08 f0       	brcs	.+2      	; 0x468e <SSD_enuDisplayNum+0x2a>
    468c:	1b c1       	rjmp	.+566    	; 0x48c4 <SSD_enuDisplayNum+0x260>
	{
		#if SEG_TYPE == COMMON_CATHODE
			Local_u32Check |= (DIO_enuSetPinValue(SEG_APORT, SEG_APIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 0) & 1)) << 0);
    468e:	8f 81       	ldd	r24, Y+7	; 0x07
    4690:	88 2f       	mov	r24, r24
    4692:	90 e0       	ldi	r25, 0x00	; 0
    4694:	fc 01       	movw	r30, r24
    4696:	ef 54       	subi	r30, 0x4F	; 79
    4698:	fe 4f       	sbci	r31, 0xFE	; 254
    469a:	80 81       	ld	r24, Z
    469c:	98 2f       	mov	r25, r24
    469e:	91 70       	andi	r25, 0x01	; 1
    46a0:	80 e0       	ldi	r24, 0x00	; 0
    46a2:	60 e0       	ldi	r22, 0x00	; 0
    46a4:	49 2f       	mov	r20, r25
    46a6:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    46aa:	28 2f       	mov	r18, r24
    46ac:	30 e0       	ldi	r19, 0x00	; 0
    46ae:	40 e0       	ldi	r20, 0x00	; 0
    46b0:	50 e0       	ldi	r21, 0x00	; 0
    46b2:	8a 81       	ldd	r24, Y+2	; 0x02
    46b4:	9b 81       	ldd	r25, Y+3	; 0x03
    46b6:	ac 81       	ldd	r26, Y+4	; 0x04
    46b8:	bd 81       	ldd	r27, Y+5	; 0x05
    46ba:	82 2b       	or	r24, r18
    46bc:	93 2b       	or	r25, r19
    46be:	a4 2b       	or	r26, r20
    46c0:	b5 2b       	or	r27, r21
    46c2:	8a 83       	std	Y+2, r24	; 0x02
    46c4:	9b 83       	std	Y+3, r25	; 0x03
    46c6:	ac 83       	std	Y+4, r26	; 0x04
    46c8:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (DIO_enuSetPinValue(SEG_BPORT, SEG_BPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 1) & 1)) << 3);
    46ca:	8f 81       	ldd	r24, Y+7	; 0x07
    46cc:	88 2f       	mov	r24, r24
    46ce:	90 e0       	ldi	r25, 0x00	; 0
    46d0:	fc 01       	movw	r30, r24
    46d2:	ef 54       	subi	r30, 0x4F	; 79
    46d4:	fe 4f       	sbci	r31, 0xFE	; 254
    46d6:	80 81       	ld	r24, Z
    46d8:	86 95       	lsr	r24
    46da:	98 2f       	mov	r25, r24
    46dc:	91 70       	andi	r25, 0x01	; 1
    46de:	80 e0       	ldi	r24, 0x00	; 0
    46e0:	61 e0       	ldi	r22, 0x01	; 1
    46e2:	49 2f       	mov	r20, r25
    46e4:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    46e8:	88 2f       	mov	r24, r24
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	88 0f       	add	r24, r24
    46ee:	99 1f       	adc	r25, r25
    46f0:	88 0f       	add	r24, r24
    46f2:	99 1f       	adc	r25, r25
    46f4:	88 0f       	add	r24, r24
    46f6:	99 1f       	adc	r25, r25
    46f8:	9c 01       	movw	r18, r24
    46fa:	44 27       	eor	r20, r20
    46fc:	37 fd       	sbrc	r19, 7
    46fe:	40 95       	com	r20
    4700:	54 2f       	mov	r21, r20
    4702:	8a 81       	ldd	r24, Y+2	; 0x02
    4704:	9b 81       	ldd	r25, Y+3	; 0x03
    4706:	ac 81       	ldd	r26, Y+4	; 0x04
    4708:	bd 81       	ldd	r27, Y+5	; 0x05
    470a:	82 2b       	or	r24, r18
    470c:	93 2b       	or	r25, r19
    470e:	a4 2b       	or	r26, r20
    4710:	b5 2b       	or	r27, r21
    4712:	8a 83       	std	Y+2, r24	; 0x02
    4714:	9b 83       	std	Y+3, r25	; 0x03
    4716:	ac 83       	std	Y+4, r26	; 0x04
    4718:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (DIO_enuSetPinValue(SEG_CPORT, SEG_CPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 2) & 1)) << 6);
    471a:	8f 81       	ldd	r24, Y+7	; 0x07
    471c:	88 2f       	mov	r24, r24
    471e:	90 e0       	ldi	r25, 0x00	; 0
    4720:	fc 01       	movw	r30, r24
    4722:	ef 54       	subi	r30, 0x4F	; 79
    4724:	fe 4f       	sbci	r31, 0xFE	; 254
    4726:	80 81       	ld	r24, Z
    4728:	86 95       	lsr	r24
    472a:	86 95       	lsr	r24
    472c:	98 2f       	mov	r25, r24
    472e:	91 70       	andi	r25, 0x01	; 1
    4730:	80 e0       	ldi	r24, 0x00	; 0
    4732:	62 e0       	ldi	r22, 0x02	; 2
    4734:	49 2f       	mov	r20, r25
    4736:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    473a:	88 2f       	mov	r24, r24
    473c:	90 e0       	ldi	r25, 0x00	; 0
    473e:	00 24       	eor	r0, r0
    4740:	96 95       	lsr	r25
    4742:	87 95       	ror	r24
    4744:	07 94       	ror	r0
    4746:	96 95       	lsr	r25
    4748:	87 95       	ror	r24
    474a:	07 94       	ror	r0
    474c:	98 2f       	mov	r25, r24
    474e:	80 2d       	mov	r24, r0
    4750:	9c 01       	movw	r18, r24
    4752:	44 27       	eor	r20, r20
    4754:	37 fd       	sbrc	r19, 7
    4756:	40 95       	com	r20
    4758:	54 2f       	mov	r21, r20
    475a:	8a 81       	ldd	r24, Y+2	; 0x02
    475c:	9b 81       	ldd	r25, Y+3	; 0x03
    475e:	ac 81       	ldd	r26, Y+4	; 0x04
    4760:	bd 81       	ldd	r27, Y+5	; 0x05
    4762:	82 2b       	or	r24, r18
    4764:	93 2b       	or	r25, r19
    4766:	a4 2b       	or	r26, r20
    4768:	b5 2b       	or	r27, r21
    476a:	8a 83       	std	Y+2, r24	; 0x02
    476c:	9b 83       	std	Y+3, r25	; 0x03
    476e:	ac 83       	std	Y+4, r26	; 0x04
    4770:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (DIO_enuSetPinValue(SEG_DPORT, SEG_DPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 3) & 1)) << 9);
    4772:	8f 81       	ldd	r24, Y+7	; 0x07
    4774:	88 2f       	mov	r24, r24
    4776:	90 e0       	ldi	r25, 0x00	; 0
    4778:	fc 01       	movw	r30, r24
    477a:	ef 54       	subi	r30, 0x4F	; 79
    477c:	fe 4f       	sbci	r31, 0xFE	; 254
    477e:	80 81       	ld	r24, Z
    4780:	86 95       	lsr	r24
    4782:	86 95       	lsr	r24
    4784:	86 95       	lsr	r24
    4786:	98 2f       	mov	r25, r24
    4788:	91 70       	andi	r25, 0x01	; 1
    478a:	81 e0       	ldi	r24, 0x01	; 1
    478c:	60 e0       	ldi	r22, 0x00	; 0
    478e:	49 2f       	mov	r20, r25
    4790:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4794:	88 2f       	mov	r24, r24
    4796:	90 e0       	ldi	r25, 0x00	; 0
    4798:	98 2f       	mov	r25, r24
    479a:	88 27       	eor	r24, r24
    479c:	99 0f       	add	r25, r25
    479e:	9c 01       	movw	r18, r24
    47a0:	44 27       	eor	r20, r20
    47a2:	37 fd       	sbrc	r19, 7
    47a4:	40 95       	com	r20
    47a6:	54 2f       	mov	r21, r20
    47a8:	8a 81       	ldd	r24, Y+2	; 0x02
    47aa:	9b 81       	ldd	r25, Y+3	; 0x03
    47ac:	ac 81       	ldd	r26, Y+4	; 0x04
    47ae:	bd 81       	ldd	r27, Y+5	; 0x05
    47b0:	82 2b       	or	r24, r18
    47b2:	93 2b       	or	r25, r19
    47b4:	a4 2b       	or	r26, r20
    47b6:	b5 2b       	or	r27, r21
    47b8:	8a 83       	std	Y+2, r24	; 0x02
    47ba:	9b 83       	std	Y+3, r25	; 0x03
    47bc:	ac 83       	std	Y+4, r26	; 0x04
    47be:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (DIO_enuSetPinValue(SEG_EPORT, SEG_EPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 4) & 1)) << 12);
    47c0:	8f 81       	ldd	r24, Y+7	; 0x07
    47c2:	88 2f       	mov	r24, r24
    47c4:	90 e0       	ldi	r25, 0x00	; 0
    47c6:	fc 01       	movw	r30, r24
    47c8:	ef 54       	subi	r30, 0x4F	; 79
    47ca:	fe 4f       	sbci	r31, 0xFE	; 254
    47cc:	80 81       	ld	r24, Z
    47ce:	82 95       	swap	r24
    47d0:	8f 70       	andi	r24, 0x0F	; 15
    47d2:	98 2f       	mov	r25, r24
    47d4:	91 70       	andi	r25, 0x01	; 1
    47d6:	81 e0       	ldi	r24, 0x01	; 1
    47d8:	61 e0       	ldi	r22, 0x01	; 1
    47da:	49 2f       	mov	r20, r25
    47dc:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    47e0:	88 2f       	mov	r24, r24
    47e2:	90 e0       	ldi	r25, 0x00	; 0
    47e4:	98 2f       	mov	r25, r24
    47e6:	88 27       	eor	r24, r24
    47e8:	92 95       	swap	r25
    47ea:	90 7f       	andi	r25, 0xF0	; 240
    47ec:	9c 01       	movw	r18, r24
    47ee:	44 27       	eor	r20, r20
    47f0:	37 fd       	sbrc	r19, 7
    47f2:	40 95       	com	r20
    47f4:	54 2f       	mov	r21, r20
    47f6:	8a 81       	ldd	r24, Y+2	; 0x02
    47f8:	9b 81       	ldd	r25, Y+3	; 0x03
    47fa:	ac 81       	ldd	r26, Y+4	; 0x04
    47fc:	bd 81       	ldd	r27, Y+5	; 0x05
    47fe:	82 2b       	or	r24, r18
    4800:	93 2b       	or	r25, r19
    4802:	a4 2b       	or	r26, r20
    4804:	b5 2b       	or	r27, r21
    4806:	8a 83       	std	Y+2, r24	; 0x02
    4808:	9b 83       	std	Y+3, r25	; 0x03
    480a:	ac 83       	std	Y+4, r26	; 0x04
    480c:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_FPORT, SEG_FPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 5) & 1))) << 15);
    480e:	8f 81       	ldd	r24, Y+7	; 0x07
    4810:	88 2f       	mov	r24, r24
    4812:	90 e0       	ldi	r25, 0x00	; 0
    4814:	fc 01       	movw	r30, r24
    4816:	ef 54       	subi	r30, 0x4F	; 79
    4818:	fe 4f       	sbci	r31, 0xFE	; 254
    481a:	80 81       	ld	r24, Z
    481c:	82 95       	swap	r24
    481e:	86 95       	lsr	r24
    4820:	87 70       	andi	r24, 0x07	; 7
    4822:	98 2f       	mov	r25, r24
    4824:	91 70       	andi	r25, 0x01	; 1
    4826:	81 e0       	ldi	r24, 0x01	; 1
    4828:	62 e0       	ldi	r22, 0x02	; 2
    482a:	49 2f       	mov	r20, r25
    482c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4830:	88 2f       	mov	r24, r24
    4832:	90 e0       	ldi	r25, 0x00	; 0
    4834:	a0 e0       	ldi	r26, 0x00	; 0
    4836:	b0 e0       	ldi	r27, 0x00	; 0
    4838:	9c 01       	movw	r18, r24
    483a:	ad 01       	movw	r20, r26
    483c:	01 2e       	mov	r0, r17
    483e:	1f e0       	ldi	r17, 0x0F	; 15
    4840:	22 0f       	add	r18, r18
    4842:	33 1f       	adc	r19, r19
    4844:	44 1f       	adc	r20, r20
    4846:	55 1f       	adc	r21, r21
    4848:	1a 95       	dec	r17
    484a:	d1 f7       	brne	.-12     	; 0x4840 <SSD_enuDisplayNum+0x1dc>
    484c:	10 2d       	mov	r17, r0
    484e:	8a 81       	ldd	r24, Y+2	; 0x02
    4850:	9b 81       	ldd	r25, Y+3	; 0x03
    4852:	ac 81       	ldd	r26, Y+4	; 0x04
    4854:	bd 81       	ldd	r27, Y+5	; 0x05
    4856:	82 2b       	or	r24, r18
    4858:	93 2b       	or	r25, r19
    485a:	a4 2b       	or	r26, r20
    485c:	b5 2b       	or	r27, r21
    485e:	8a 83       	std	Y+2, r24	; 0x02
    4860:	9b 83       	std	Y+3, r25	; 0x03
    4862:	ac 83       	std	Y+4, r26	; 0x04
    4864:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_GPORT, SEG_GPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 6) & 1))) << 18);
    4866:	8f 81       	ldd	r24, Y+7	; 0x07
    4868:	88 2f       	mov	r24, r24
    486a:	90 e0       	ldi	r25, 0x00	; 0
    486c:	fc 01       	movw	r30, r24
    486e:	ef 54       	subi	r30, 0x4F	; 79
    4870:	fe 4f       	sbci	r31, 0xFE	; 254
    4872:	80 81       	ld	r24, Z
    4874:	82 95       	swap	r24
    4876:	86 95       	lsr	r24
    4878:	86 95       	lsr	r24
    487a:	83 70       	andi	r24, 0x03	; 3
    487c:	98 2f       	mov	r25, r24
    487e:	91 70       	andi	r25, 0x01	; 1
    4880:	81 e0       	ldi	r24, 0x01	; 1
    4882:	63 e0       	ldi	r22, 0x03	; 3
    4884:	49 2f       	mov	r20, r25
    4886:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    488a:	88 2f       	mov	r24, r24
    488c:	90 e0       	ldi	r25, 0x00	; 0
    488e:	a0 e0       	ldi	r26, 0x00	; 0
    4890:	b0 e0       	ldi	r27, 0x00	; 0
    4892:	9c 01       	movw	r18, r24
    4894:	ad 01       	movw	r20, r26
    4896:	01 2e       	mov	r0, r17
    4898:	12 e1       	ldi	r17, 0x12	; 18
    489a:	22 0f       	add	r18, r18
    489c:	33 1f       	adc	r19, r19
    489e:	44 1f       	adc	r20, r20
    48a0:	55 1f       	adc	r21, r21
    48a2:	1a 95       	dec	r17
    48a4:	d1 f7       	brne	.-12     	; 0x489a <SSD_enuDisplayNum+0x236>
    48a6:	10 2d       	mov	r17, r0
    48a8:	8a 81       	ldd	r24, Y+2	; 0x02
    48aa:	9b 81       	ldd	r25, Y+3	; 0x03
    48ac:	ac 81       	ldd	r26, Y+4	; 0x04
    48ae:	bd 81       	ldd	r27, Y+5	; 0x05
    48b0:	82 2b       	or	r24, r18
    48b2:	93 2b       	or	r25, r19
    48b4:	a4 2b       	or	r26, r20
    48b6:	b5 2b       	or	r27, r21
    48b8:	8a 83       	std	Y+2, r24	; 0x02
    48ba:	9b 83       	std	Y+3, r25	; 0x03
    48bc:	ac 83       	std	Y+4, r26	; 0x04
    48be:	bd 83       	std	Y+5, r27	; 0x05
	else
	{
		return ES_OUT_OF_RANGE;
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    48c0:	19 82       	std	Y+1, r1	; 0x01
    48c2:	21 c0       	rjmp	.+66     	; 0x4906 <SSD_enuDisplayNum+0x2a2>
			#error "Your type selection is invalid!"
		#endif
	}
	else
	{
		return ES_OUT_OF_RANGE;
    48c4:	83 e0       	ldi	r24, 0x03	; 3
    48c6:	88 87       	std	Y+8, r24	; 0x08
    48c8:	25 c0       	rjmp	.+74     	; 0x4914 <SSD_enuDisplayNum+0x2b0>
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
    48ca:	89 81       	ldd	r24, Y+1	; 0x01
    48cc:	28 2f       	mov	r18, r24
    48ce:	30 e0       	ldi	r19, 0x00	; 0
    48d0:	8a 81       	ldd	r24, Y+2	; 0x02
    48d2:	9b 81       	ldd	r25, Y+3	; 0x03
    48d4:	ac 81       	ldd	r26, Y+4	; 0x04
    48d6:	bd 81       	ldd	r27, Y+5	; 0x05
    48d8:	02 2e       	mov	r0, r18
    48da:	04 c0       	rjmp	.+8      	; 0x48e4 <SSD_enuDisplayNum+0x280>
    48dc:	b6 95       	lsr	r27
    48de:	a7 95       	ror	r26
    48e0:	97 95       	ror	r25
    48e2:	87 95       	ror	r24
    48e4:	0a 94       	dec	r0
    48e6:	d2 f7       	brpl	.-12     	; 0x48dc <SSD_enuDisplayNum+0x278>
    48e8:	87 70       	andi	r24, 0x07	; 7
    48ea:	90 70       	andi	r25, 0x00	; 0
    48ec:	a0 70       	andi	r26, 0x00	; 0
    48ee:	b0 70       	andi	r27, 0x00	; 0
    48f0:	81 30       	cpi	r24, 0x01	; 1
    48f2:	91 05       	cpc	r25, r1
    48f4:	a1 05       	cpc	r26, r1
    48f6:	b1 05       	cpc	r27, r1
    48f8:	19 f0       	breq	.+6      	; 0x4900 <SSD_enuDisplayNum+0x29c>
		{
			return Local_enuErrorState;
    48fa:	8e 81       	ldd	r24, Y+6	; 0x06
    48fc:	88 87       	std	Y+8, r24	; 0x08
    48fe:	0a c0       	rjmp	.+20     	; 0x4914 <SSD_enuDisplayNum+0x2b0>
	else
	{
		return ES_OUT_OF_RANGE;
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    4900:	89 81       	ldd	r24, Y+1	; 0x01
    4902:	8d 5f       	subi	r24, 0xFD	; 253
    4904:	89 83       	std	Y+1, r24	; 0x01
    4906:	89 81       	ldd	r24, Y+1	; 0x01
    4908:	85 31       	cpi	r24, 0x15	; 21
    490a:	f8 f2       	brcs	.-66     	; 0x48ca <SSD_enuDisplayNum+0x266>
		{
			return Local_enuErrorState;
		}
	}

	Local_enuErrorState = ES_OK;
    490c:	81 e0       	ldi	r24, 0x01	; 1
    490e:	8e 83       	std	Y+6, r24	; 0x06

	return Local_enuErrorState;
    4910:	8e 81       	ldd	r24, Y+6	; 0x06
    4912:	88 87       	std	Y+8, r24	; 0x08
    4914:	88 85       	ldd	r24, Y+8	; 0x08
}
    4916:	28 96       	adiw	r28, 0x08	; 8
    4918:	0f b6       	in	r0, 0x3f	; 63
    491a:	f8 94       	cli
    491c:	de bf       	out	0x3e, r29	; 62
    491e:	0f be       	out	0x3f, r0	; 63
    4920:	cd bf       	out	0x3d, r28	; 61
    4922:	cf 91       	pop	r28
    4924:	df 91       	pop	r29
    4926:	08 95       	ret

00004928 <SSD_enuEnableCommon>:

ES_t SSD_enuEnableCommon(void)
{
    4928:	df 93       	push	r29
    492a:	cf 93       	push	r28
    492c:	0f 92       	push	r0
    492e:	cd b7       	in	r28, 0x3d	; 61
    4930:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    4932:	19 82       	std	Y+1, r1	; 0x01

	#if SEG_CMN_PIN <= DIO_u8PIN7 && SEG_CMN_PORT <= DIO_u8PORTD
		#if SEG_TYPE == COMMON_CATHODE
			Local_enuErrorState = DIO_enuSetPinValue(SEG_CMN_PORT, SEG_CMN_PIN, DIO_u8LOW);
    4934:	82 e0       	ldi	r24, 0x02	; 2
    4936:	62 e0       	ldi	r22, 0x02	; 2
    4938:	40 e0       	ldi	r20, 0x00	; 0
    493a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    493e:	89 83       	std	Y+1, r24	; 0x01

	#else
		#error "Your Common pin has a wrong selection!"
	#endif

	return Local_enuErrorState;
    4940:	89 81       	ldd	r24, Y+1	; 0x01
}
    4942:	0f 90       	pop	r0
    4944:	cf 91       	pop	r28
    4946:	df 91       	pop	r29
    4948:	08 95       	ret

0000494a <SSD_enuDisableCommon>:

ES_t SSD_enuDisableCommon(void)
{
    494a:	df 93       	push	r29
    494c:	cf 93       	push	r28
    494e:	0f 92       	push	r0
    4950:	cd b7       	in	r28, 0x3d	; 61
    4952:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    4954:	19 82       	std	Y+1, r1	; 0x01

	#if SEG_CMN_PIN <= DIO_u8PIN7 && SEG_CMN_PORT <= DIO_u8PORTD
		#if SEG_TYPE == COMMON_CATHODE
			Local_enuErrorState = DIO_enuSetPinValue(SEG_CMN_PORT, SEG_CMN_PIN, DIO_u8HIGH);
    4956:	82 e0       	ldi	r24, 0x02	; 2
    4958:	62 e0       	ldi	r22, 0x02	; 2
    495a:	41 e0       	ldi	r20, 0x01	; 1
    495c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4960:	89 83       	std	Y+1, r24	; 0x01

	#else
		#error "Your Common pin has a wrong selection!"
	#endif

	return Local_enuErrorState;
    4962:	89 81       	ldd	r24, Y+1	; 0x01
}
    4964:	0f 90       	pop	r0
    4966:	cf 91       	pop	r28
    4968:	df 91       	pop	r29
    496a:	08 95       	ret

0000496c <SSD_enuEnableDot>:

ES_t SSD_enuEnableDot(void)
{
    496c:	df 93       	push	r29
    496e:	cf 93       	push	r28
    4970:	0f 92       	push	r0
    4972:	cd b7       	in	r28, 0x3d	; 61
    4974:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    4976:	19 82       	std	Y+1, r1	; 0x01

	#if SEG_DOT_PIN <= DIO_u8PIN7 && SEG_DOT_PORT <= DIO_u8PORTD
		#if SEG_TYPE == COMMON_CATHODE
			Local_enuErrorState = DIO_enuSetPinValue(SEG_DOT_PORT, SEG_DOT_PIN, DIO_u8HIGH);
    4978:	82 e0       	ldi	r24, 0x02	; 2
    497a:	62 e0       	ldi	r22, 0x02	; 2
    497c:	41 e0       	ldi	r20, 0x01	; 1
    497e:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4982:	89 83       	std	Y+1, r24	; 0x01

	#else
		#error "Your DOT pin has a wrong selection!"
	#endif

	return Local_enuErrorState;
    4984:	89 81       	ldd	r24, Y+1	; 0x01
}
    4986:	0f 90       	pop	r0
    4988:	cf 91       	pop	r28
    498a:	df 91       	pop	r29
    498c:	08 95       	ret

0000498e <SSD_enuDisableDot>:

ES_t SSD_enuDisableDot(void)
{
    498e:	df 93       	push	r29
    4990:	cf 93       	push	r28
    4992:	0f 92       	push	r0
    4994:	cd b7       	in	r28, 0x3d	; 61
    4996:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    4998:	19 82       	std	Y+1, r1	; 0x01

	#if SEG_DOT_PIN <= DIO_u8PIN7 && SEG_DOT_PORT <= DIO_u8PORTD
		#if SEG_TYPE == COMMON_CATHODE
			Local_enuErrorState = DIO_enuSetPinValue(SEG_DOT_PORT, SEG_DOT_PIN, DIO_u8LOW);
    499a:	82 e0       	ldi	r24, 0x02	; 2
    499c:	62 e0       	ldi	r22, 0x02	; 2
    499e:	40 e0       	ldi	r20, 0x00	; 0
    49a0:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    49a4:	89 83       	std	Y+1, r24	; 0x01

	#else
		#error "Your DOT pin has a wrong selection!"
	#endif

	return Local_enuErrorState;
    49a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    49a8:	0f 90       	pop	r0
    49aa:	cf 91       	pop	r28
    49ac:	df 91       	pop	r29
    49ae:	08 95       	ret

000049b0 <SSD_enuClearDisplay>:

ES_t SSD_enuClearDisplay(void)
{
    49b0:	df 93       	push	r29
    49b2:	cf 93       	push	r28
    49b4:	cd b7       	in	r28, 0x3d	; 61
    49b6:	de b7       	in	r29, 0x3e	; 62
    49b8:	27 97       	sbiw	r28, 0x07	; 7
    49ba:	0f b6       	in	r0, 0x3f	; 63
    49bc:	f8 94       	cli
    49be:	de bf       	out	0x3e, r29	; 62
    49c0:	0f be       	out	0x3f, r0	; 63
    49c2:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    49c4:	1e 82       	std	Y+6, r1	; 0x06

	u32 Local_u32Check = 0;
    49c6:	1a 82       	std	Y+2, r1	; 0x02
    49c8:	1b 82       	std	Y+3, r1	; 0x03
    49ca:	1c 82       	std	Y+4, r1	; 0x04
    49cc:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8Iterator = 0;
    49ce:	19 82       	std	Y+1, r1	; 0x01

	#if SEG_TYPE == COMMON_CATHODE
		Local_u32Check |= (DIO_enuSetPinValue(SEG_APORT, SEG_APIN,DIO_u8LOW) << 0);
    49d0:	80 e0       	ldi	r24, 0x00	; 0
    49d2:	60 e0       	ldi	r22, 0x00	; 0
    49d4:	40 e0       	ldi	r20, 0x00	; 0
    49d6:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    49da:	28 2f       	mov	r18, r24
    49dc:	30 e0       	ldi	r19, 0x00	; 0
    49de:	40 e0       	ldi	r20, 0x00	; 0
    49e0:	50 e0       	ldi	r21, 0x00	; 0
    49e2:	8a 81       	ldd	r24, Y+2	; 0x02
    49e4:	9b 81       	ldd	r25, Y+3	; 0x03
    49e6:	ac 81       	ldd	r26, Y+4	; 0x04
    49e8:	bd 81       	ldd	r27, Y+5	; 0x05
    49ea:	82 2b       	or	r24, r18
    49ec:	93 2b       	or	r25, r19
    49ee:	a4 2b       	or	r26, r20
    49f0:	b5 2b       	or	r27, r21
    49f2:	8a 83       	std	Y+2, r24	; 0x02
    49f4:	9b 83       	std	Y+3, r25	; 0x03
    49f6:	ac 83       	std	Y+4, r26	; 0x04
    49f8:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (DIO_enuSetPinValue(SEG_BPORT, SEG_BPIN,DIO_u8LOW) << 3);
    49fa:	80 e0       	ldi	r24, 0x00	; 0
    49fc:	61 e0       	ldi	r22, 0x01	; 1
    49fe:	40 e0       	ldi	r20, 0x00	; 0
    4a00:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4a04:	88 2f       	mov	r24, r24
    4a06:	90 e0       	ldi	r25, 0x00	; 0
    4a08:	88 0f       	add	r24, r24
    4a0a:	99 1f       	adc	r25, r25
    4a0c:	88 0f       	add	r24, r24
    4a0e:	99 1f       	adc	r25, r25
    4a10:	88 0f       	add	r24, r24
    4a12:	99 1f       	adc	r25, r25
    4a14:	9c 01       	movw	r18, r24
    4a16:	44 27       	eor	r20, r20
    4a18:	37 fd       	sbrc	r19, 7
    4a1a:	40 95       	com	r20
    4a1c:	54 2f       	mov	r21, r20
    4a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a20:	9b 81       	ldd	r25, Y+3	; 0x03
    4a22:	ac 81       	ldd	r26, Y+4	; 0x04
    4a24:	bd 81       	ldd	r27, Y+5	; 0x05
    4a26:	82 2b       	or	r24, r18
    4a28:	93 2b       	or	r25, r19
    4a2a:	a4 2b       	or	r26, r20
    4a2c:	b5 2b       	or	r27, r21
    4a2e:	8a 83       	std	Y+2, r24	; 0x02
    4a30:	9b 83       	std	Y+3, r25	; 0x03
    4a32:	ac 83       	std	Y+4, r26	; 0x04
    4a34:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (DIO_enuSetPinValue(SEG_CPORT, SEG_CPIN,DIO_u8LOW) << 6);
    4a36:	80 e0       	ldi	r24, 0x00	; 0
    4a38:	62 e0       	ldi	r22, 0x02	; 2
    4a3a:	40 e0       	ldi	r20, 0x00	; 0
    4a3c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4a40:	88 2f       	mov	r24, r24
    4a42:	90 e0       	ldi	r25, 0x00	; 0
    4a44:	00 24       	eor	r0, r0
    4a46:	96 95       	lsr	r25
    4a48:	87 95       	ror	r24
    4a4a:	07 94       	ror	r0
    4a4c:	96 95       	lsr	r25
    4a4e:	87 95       	ror	r24
    4a50:	07 94       	ror	r0
    4a52:	98 2f       	mov	r25, r24
    4a54:	80 2d       	mov	r24, r0
    4a56:	9c 01       	movw	r18, r24
    4a58:	44 27       	eor	r20, r20
    4a5a:	37 fd       	sbrc	r19, 7
    4a5c:	40 95       	com	r20
    4a5e:	54 2f       	mov	r21, r20
    4a60:	8a 81       	ldd	r24, Y+2	; 0x02
    4a62:	9b 81       	ldd	r25, Y+3	; 0x03
    4a64:	ac 81       	ldd	r26, Y+4	; 0x04
    4a66:	bd 81       	ldd	r27, Y+5	; 0x05
    4a68:	82 2b       	or	r24, r18
    4a6a:	93 2b       	or	r25, r19
    4a6c:	a4 2b       	or	r26, r20
    4a6e:	b5 2b       	or	r27, r21
    4a70:	8a 83       	std	Y+2, r24	; 0x02
    4a72:	9b 83       	std	Y+3, r25	; 0x03
    4a74:	ac 83       	std	Y+4, r26	; 0x04
    4a76:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (DIO_enuSetPinValue(SEG_DPORT, SEG_DPIN,DIO_u8LOW) << 9);
    4a78:	81 e0       	ldi	r24, 0x01	; 1
    4a7a:	60 e0       	ldi	r22, 0x00	; 0
    4a7c:	40 e0       	ldi	r20, 0x00	; 0
    4a7e:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4a82:	88 2f       	mov	r24, r24
    4a84:	90 e0       	ldi	r25, 0x00	; 0
    4a86:	98 2f       	mov	r25, r24
    4a88:	88 27       	eor	r24, r24
    4a8a:	99 0f       	add	r25, r25
    4a8c:	9c 01       	movw	r18, r24
    4a8e:	44 27       	eor	r20, r20
    4a90:	37 fd       	sbrc	r19, 7
    4a92:	40 95       	com	r20
    4a94:	54 2f       	mov	r21, r20
    4a96:	8a 81       	ldd	r24, Y+2	; 0x02
    4a98:	9b 81       	ldd	r25, Y+3	; 0x03
    4a9a:	ac 81       	ldd	r26, Y+4	; 0x04
    4a9c:	bd 81       	ldd	r27, Y+5	; 0x05
    4a9e:	82 2b       	or	r24, r18
    4aa0:	93 2b       	or	r25, r19
    4aa2:	a4 2b       	or	r26, r20
    4aa4:	b5 2b       	or	r27, r21
    4aa6:	8a 83       	std	Y+2, r24	; 0x02
    4aa8:	9b 83       	std	Y+3, r25	; 0x03
    4aaa:	ac 83       	std	Y+4, r26	; 0x04
    4aac:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (DIO_enuSetPinValue(SEG_EPORT, SEG_EPIN,DIO_u8LOW) << 12);
    4aae:	81 e0       	ldi	r24, 0x01	; 1
    4ab0:	61 e0       	ldi	r22, 0x01	; 1
    4ab2:	40 e0       	ldi	r20, 0x00	; 0
    4ab4:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4ab8:	88 2f       	mov	r24, r24
    4aba:	90 e0       	ldi	r25, 0x00	; 0
    4abc:	98 2f       	mov	r25, r24
    4abe:	88 27       	eor	r24, r24
    4ac0:	92 95       	swap	r25
    4ac2:	90 7f       	andi	r25, 0xF0	; 240
    4ac4:	9c 01       	movw	r18, r24
    4ac6:	44 27       	eor	r20, r20
    4ac8:	37 fd       	sbrc	r19, 7
    4aca:	40 95       	com	r20
    4acc:	54 2f       	mov	r21, r20
    4ace:	8a 81       	ldd	r24, Y+2	; 0x02
    4ad0:	9b 81       	ldd	r25, Y+3	; 0x03
    4ad2:	ac 81       	ldd	r26, Y+4	; 0x04
    4ad4:	bd 81       	ldd	r27, Y+5	; 0x05
    4ad6:	82 2b       	or	r24, r18
    4ad8:	93 2b       	or	r25, r19
    4ada:	a4 2b       	or	r26, r20
    4adc:	b5 2b       	or	r27, r21
    4ade:	8a 83       	std	Y+2, r24	; 0x02
    4ae0:	9b 83       	std	Y+3, r25	; 0x03
    4ae2:	ac 83       	std	Y+4, r26	; 0x04
    4ae4:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_FPORT, SEG_FPIN,DIO_u8LOW)) << 15);
    4ae6:	81 e0       	ldi	r24, 0x01	; 1
    4ae8:	62 e0       	ldi	r22, 0x02	; 2
    4aea:	40 e0       	ldi	r20, 0x00	; 0
    4aec:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4af0:	88 2f       	mov	r24, r24
    4af2:	90 e0       	ldi	r25, 0x00	; 0
    4af4:	a0 e0       	ldi	r26, 0x00	; 0
    4af6:	b0 e0       	ldi	r27, 0x00	; 0
    4af8:	9c 01       	movw	r18, r24
    4afa:	ad 01       	movw	r20, r26
    4afc:	01 2e       	mov	r0, r17
    4afe:	1f e0       	ldi	r17, 0x0F	; 15
    4b00:	22 0f       	add	r18, r18
    4b02:	33 1f       	adc	r19, r19
    4b04:	44 1f       	adc	r20, r20
    4b06:	55 1f       	adc	r21, r21
    4b08:	1a 95       	dec	r17
    4b0a:	d1 f7       	brne	.-12     	; 0x4b00 <SSD_enuClearDisplay+0x150>
    4b0c:	10 2d       	mov	r17, r0
    4b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b10:	9b 81       	ldd	r25, Y+3	; 0x03
    4b12:	ac 81       	ldd	r26, Y+4	; 0x04
    4b14:	bd 81       	ldd	r27, Y+5	; 0x05
    4b16:	82 2b       	or	r24, r18
    4b18:	93 2b       	or	r25, r19
    4b1a:	a4 2b       	or	r26, r20
    4b1c:	b5 2b       	or	r27, r21
    4b1e:	8a 83       	std	Y+2, r24	; 0x02
    4b20:	9b 83       	std	Y+3, r25	; 0x03
    4b22:	ac 83       	std	Y+4, r26	; 0x04
    4b24:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_GPORT, SEG_GPIN,DIO_u8LOW)) << 18);
    4b26:	81 e0       	ldi	r24, 0x01	; 1
    4b28:	63 e0       	ldi	r22, 0x03	; 3
    4b2a:	40 e0       	ldi	r20, 0x00	; 0
    4b2c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4b30:	88 2f       	mov	r24, r24
    4b32:	90 e0       	ldi	r25, 0x00	; 0
    4b34:	a0 e0       	ldi	r26, 0x00	; 0
    4b36:	b0 e0       	ldi	r27, 0x00	; 0
    4b38:	9c 01       	movw	r18, r24
    4b3a:	ad 01       	movw	r20, r26
    4b3c:	01 2e       	mov	r0, r17
    4b3e:	12 e1       	ldi	r17, 0x12	; 18
    4b40:	22 0f       	add	r18, r18
    4b42:	33 1f       	adc	r19, r19
    4b44:	44 1f       	adc	r20, r20
    4b46:	55 1f       	adc	r21, r21
    4b48:	1a 95       	dec	r17
    4b4a:	d1 f7       	brne	.-12     	; 0x4b40 <SSD_enuClearDisplay+0x190>
    4b4c:	10 2d       	mov	r17, r0
    4b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b50:	9b 81       	ldd	r25, Y+3	; 0x03
    4b52:	ac 81       	ldd	r26, Y+4	; 0x04
    4b54:	bd 81       	ldd	r27, Y+5	; 0x05
    4b56:	82 2b       	or	r24, r18
    4b58:	93 2b       	or	r25, r19
    4b5a:	a4 2b       	or	r26, r20
    4b5c:	b5 2b       	or	r27, r21
    4b5e:	8a 83       	std	Y+2, r24	; 0x02
    4b60:	9b 83       	std	Y+3, r25	; 0x03
    4b62:	ac 83       	std	Y+4, r26	; 0x04
    4b64:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_GPORT, SEG_GPIN,DIO_u8HIGH)) << 18);
	#else
		#error "Your type selection is invalid!"
	#endif

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    4b66:	19 82       	std	Y+1, r1	; 0x01
    4b68:	1e c0       	rjmp	.+60     	; 0x4ba6 <SSD_enuClearDisplay+0x1f6>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
    4b6a:	89 81       	ldd	r24, Y+1	; 0x01
    4b6c:	28 2f       	mov	r18, r24
    4b6e:	30 e0       	ldi	r19, 0x00	; 0
    4b70:	8a 81       	ldd	r24, Y+2	; 0x02
    4b72:	9b 81       	ldd	r25, Y+3	; 0x03
    4b74:	ac 81       	ldd	r26, Y+4	; 0x04
    4b76:	bd 81       	ldd	r27, Y+5	; 0x05
    4b78:	02 2e       	mov	r0, r18
    4b7a:	04 c0       	rjmp	.+8      	; 0x4b84 <SSD_enuClearDisplay+0x1d4>
    4b7c:	b6 95       	lsr	r27
    4b7e:	a7 95       	ror	r26
    4b80:	97 95       	ror	r25
    4b82:	87 95       	ror	r24
    4b84:	0a 94       	dec	r0
    4b86:	d2 f7       	brpl	.-12     	; 0x4b7c <SSD_enuClearDisplay+0x1cc>
    4b88:	87 70       	andi	r24, 0x07	; 7
    4b8a:	90 70       	andi	r25, 0x00	; 0
    4b8c:	a0 70       	andi	r26, 0x00	; 0
    4b8e:	b0 70       	andi	r27, 0x00	; 0
    4b90:	81 30       	cpi	r24, 0x01	; 1
    4b92:	91 05       	cpc	r25, r1
    4b94:	a1 05       	cpc	r26, r1
    4b96:	b1 05       	cpc	r27, r1
    4b98:	19 f0       	breq	.+6      	; 0x4ba0 <SSD_enuClearDisplay+0x1f0>
		{
			return Local_enuErrorState;
    4b9a:	8e 81       	ldd	r24, Y+6	; 0x06
    4b9c:	8f 83       	std	Y+7, r24	; 0x07
    4b9e:	0a c0       	rjmp	.+20     	; 0x4bb4 <SSD_enuClearDisplay+0x204>
		Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_GPORT, SEG_GPIN,DIO_u8HIGH)) << 18);
	#else
		#error "Your type selection is invalid!"
	#endif

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    4ba0:	89 81       	ldd	r24, Y+1	; 0x01
    4ba2:	8d 5f       	subi	r24, 0xFD	; 253
    4ba4:	89 83       	std	Y+1, r24	; 0x01
    4ba6:	89 81       	ldd	r24, Y+1	; 0x01
    4ba8:	85 31       	cpi	r24, 0x15	; 21
    4baa:	f8 f2       	brcs	.-66     	; 0x4b6a <SSD_enuClearDisplay+0x1ba>
		{
			return Local_enuErrorState;
		}
	}

	Local_enuErrorState = ES_OK;
    4bac:	81 e0       	ldi	r24, 0x01	; 1
    4bae:	8e 83       	std	Y+6, r24	; 0x06
	return Local_enuErrorState;
    4bb0:	8e 81       	ldd	r24, Y+6	; 0x06
    4bb2:	8f 83       	std	Y+7, r24	; 0x07
    4bb4:	8f 81       	ldd	r24, Y+7	; 0x07
}
    4bb6:	27 96       	adiw	r28, 0x07	; 7
    4bb8:	0f b6       	in	r0, 0x3f	; 63
    4bba:	f8 94       	cli
    4bbc:	de bf       	out	0x3e, r29	; 62
    4bbe:	0f be       	out	0x3f, r0	; 63
    4bc0:	cd bf       	out	0x3d, r28	; 61
    4bc2:	cf 91       	pop	r28
    4bc4:	df 91       	pop	r29
    4bc6:	08 95       	ret

00004bc8 <LED_enuInit>:

extern u8 LED_num;
/***********************	Includes Section End	***********************/

ES_t LED_enuInit(LED_t * Copy_pstrLedConfiguration)
{
    4bc8:	df 93       	push	r29
    4bca:	cf 93       	push	r28
    4bcc:	00 d0       	rcall	.+0      	; 0x4bce <LED_enuInit+0x6>
    4bce:	00 d0       	rcall	.+0      	; 0x4bd0 <LED_enuInit+0x8>
    4bd0:	0f 92       	push	r0
    4bd2:	cd b7       	in	r28, 0x3d	; 61
    4bd4:	de b7       	in	r29, 0x3e	; 62
    4bd6:	9c 83       	std	Y+4, r25	; 0x04
    4bd8:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    4bda:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_pstrLedConfiguration != NULL)
    4bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    4bde:	9c 81       	ldd	r25, Y+4	; 0x04
    4be0:	00 97       	sbiw	r24, 0x00	; 0
    4be2:	09 f4       	brne	.+2      	; 0x4be6 <LED_enuInit+0x1e>
    4be4:	26 c1       	rjmp	.+588    	; 0x4e32 <LED_enuInit+0x26a>
	{
		u8 Local_u8Iterator = 0;
    4be6:	19 82       	std	Y+1, r1	; 0x01

		for(Local_u8Iterator = 0; Local_u8Iterator < LED_num; Local_u8Iterator++)
    4be8:	19 82       	std	Y+1, r1	; 0x01
    4bea:	1c c1       	rjmp	.+568    	; 0x4e24 <LED_enuInit+0x25c>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PortID,
    4bec:	89 81       	ldd	r24, Y+1	; 0x01
    4bee:	88 2f       	mov	r24, r24
    4bf0:	90 e0       	ldi	r25, 0x00	; 0
    4bf2:	9c 01       	movw	r18, r24
    4bf4:	22 0f       	add	r18, r18
    4bf6:	33 1f       	adc	r19, r19
    4bf8:	22 0f       	add	r18, r18
    4bfa:	33 1f       	adc	r19, r19
    4bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    4bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    4c00:	fc 01       	movw	r30, r24
    4c02:	e2 0f       	add	r30, r18
    4c04:	f3 1f       	adc	r31, r19
    4c06:	40 81       	ld	r20, Z
    4c08:	89 81       	ldd	r24, Y+1	; 0x01
    4c0a:	88 2f       	mov	r24, r24
    4c0c:	90 e0       	ldi	r25, 0x00	; 0
    4c0e:	9c 01       	movw	r18, r24
    4c10:	22 0f       	add	r18, r18
    4c12:	33 1f       	adc	r19, r19
    4c14:	22 0f       	add	r18, r18
    4c16:	33 1f       	adc	r19, r19
    4c18:	8b 81       	ldd	r24, Y+3	; 0x03
    4c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    4c1c:	fc 01       	movw	r30, r24
    4c1e:	e2 0f       	add	r30, r18
    4c20:	f3 1f       	adc	r31, r19
    4c22:	91 81       	ldd	r25, Z+1	; 0x01
    4c24:	84 2f       	mov	r24, r20
    4c26:	69 2f       	mov	r22, r25
    4c28:	41 e0       	ldi	r20, 0x01	; 1
    4c2a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    4c2e:	8a 83       	std	Y+2, r24	; 0x02
														 Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PinID,
														 DIO_u8OUTPUT
														);

			if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8Connection == LED_u8SINK)
    4c30:	89 81       	ldd	r24, Y+1	; 0x01
    4c32:	88 2f       	mov	r24, r24
    4c34:	90 e0       	ldi	r25, 0x00	; 0
    4c36:	9c 01       	movw	r18, r24
    4c38:	22 0f       	add	r18, r18
    4c3a:	33 1f       	adc	r19, r19
    4c3c:	22 0f       	add	r18, r18
    4c3e:	33 1f       	adc	r19, r19
    4c40:	8b 81       	ldd	r24, Y+3	; 0x03
    4c42:	9c 81       	ldd	r25, Y+4	; 0x04
    4c44:	fc 01       	movw	r30, r24
    4c46:	e2 0f       	add	r30, r18
    4c48:	f3 1f       	adc	r31, r19
    4c4a:	82 81       	ldd	r24, Z+2	; 0x02
    4c4c:	88 30       	cpi	r24, 0x08	; 8
    4c4e:	09 f0       	breq	.+2      	; 0x4c52 <LED_enuInit+0x8a>
    4c50:	69 c0       	rjmp	.+210    	; 0x4d24 <LED_enuInit+0x15c>
			{
				if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8InitState == LED_u8ON)
    4c52:	89 81       	ldd	r24, Y+1	; 0x01
    4c54:	88 2f       	mov	r24, r24
    4c56:	90 e0       	ldi	r25, 0x00	; 0
    4c58:	9c 01       	movw	r18, r24
    4c5a:	22 0f       	add	r18, r18
    4c5c:	33 1f       	adc	r19, r19
    4c5e:	22 0f       	add	r18, r18
    4c60:	33 1f       	adc	r19, r19
    4c62:	8b 81       	ldd	r24, Y+3	; 0x03
    4c64:	9c 81       	ldd	r25, Y+4	; 0x04
    4c66:	fc 01       	movw	r30, r24
    4c68:	e2 0f       	add	r30, r18
    4c6a:	f3 1f       	adc	r31, r19
    4c6c:	83 81       	ldd	r24, Z+3	; 0x03
    4c6e:	8a 30       	cpi	r24, 0x0A	; 10
    4c70:	19 f5       	brne	.+70     	; 0x4cb8 <LED_enuInit+0xf0>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PortID,
    4c72:	89 81       	ldd	r24, Y+1	; 0x01
    4c74:	88 2f       	mov	r24, r24
    4c76:	90 e0       	ldi	r25, 0x00	; 0
    4c78:	9c 01       	movw	r18, r24
    4c7a:	22 0f       	add	r18, r18
    4c7c:	33 1f       	adc	r19, r19
    4c7e:	22 0f       	add	r18, r18
    4c80:	33 1f       	adc	r19, r19
    4c82:	8b 81       	ldd	r24, Y+3	; 0x03
    4c84:	9c 81       	ldd	r25, Y+4	; 0x04
    4c86:	fc 01       	movw	r30, r24
    4c88:	e2 0f       	add	r30, r18
    4c8a:	f3 1f       	adc	r31, r19
    4c8c:	40 81       	ld	r20, Z
    4c8e:	89 81       	ldd	r24, Y+1	; 0x01
    4c90:	88 2f       	mov	r24, r24
    4c92:	90 e0       	ldi	r25, 0x00	; 0
    4c94:	9c 01       	movw	r18, r24
    4c96:	22 0f       	add	r18, r18
    4c98:	33 1f       	adc	r19, r19
    4c9a:	22 0f       	add	r18, r18
    4c9c:	33 1f       	adc	r19, r19
    4c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    4ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    4ca2:	fc 01       	movw	r30, r24
    4ca4:	e2 0f       	add	r30, r18
    4ca6:	f3 1f       	adc	r31, r19
    4ca8:	91 81       	ldd	r25, Z+1	; 0x01
    4caa:	84 2f       	mov	r24, r20
    4cac:	69 2f       	mov	r22, r25
    4cae:	40 e0       	ldi	r20, 0x00	; 0
    4cb0:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4cb4:	8a 83       	std	Y+2, r24	; 0x02
    4cb6:	b3 c0       	rjmp	.+358    	; 0x4e1e <LED_enuInit+0x256>
							           	   	   	   	   	     Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PinID,
															 DIO_u8LOW);

				}
				else if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8InitState == LED_u8OFF)
    4cb8:	89 81       	ldd	r24, Y+1	; 0x01
    4cba:	88 2f       	mov	r24, r24
    4cbc:	90 e0       	ldi	r25, 0x00	; 0
    4cbe:	9c 01       	movw	r18, r24
    4cc0:	22 0f       	add	r18, r18
    4cc2:	33 1f       	adc	r19, r19
    4cc4:	22 0f       	add	r18, r18
    4cc6:	33 1f       	adc	r19, r19
    4cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    4cca:	9c 81       	ldd	r25, Y+4	; 0x04
    4ccc:	fc 01       	movw	r30, r24
    4cce:	e2 0f       	add	r30, r18
    4cd0:	f3 1f       	adc	r31, r19
    4cd2:	83 81       	ldd	r24, Z+3	; 0x03
    4cd4:	8b 30       	cpi	r24, 0x0B	; 11
    4cd6:	19 f5       	brne	.+70     	; 0x4d1e <LED_enuInit+0x156>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PortID,
    4cd8:	89 81       	ldd	r24, Y+1	; 0x01
    4cda:	88 2f       	mov	r24, r24
    4cdc:	90 e0       	ldi	r25, 0x00	; 0
    4cde:	9c 01       	movw	r18, r24
    4ce0:	22 0f       	add	r18, r18
    4ce2:	33 1f       	adc	r19, r19
    4ce4:	22 0f       	add	r18, r18
    4ce6:	33 1f       	adc	r19, r19
    4ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    4cea:	9c 81       	ldd	r25, Y+4	; 0x04
    4cec:	fc 01       	movw	r30, r24
    4cee:	e2 0f       	add	r30, r18
    4cf0:	f3 1f       	adc	r31, r19
    4cf2:	40 81       	ld	r20, Z
    4cf4:	89 81       	ldd	r24, Y+1	; 0x01
    4cf6:	88 2f       	mov	r24, r24
    4cf8:	90 e0       	ldi	r25, 0x00	; 0
    4cfa:	9c 01       	movw	r18, r24
    4cfc:	22 0f       	add	r18, r18
    4cfe:	33 1f       	adc	r19, r19
    4d00:	22 0f       	add	r18, r18
    4d02:	33 1f       	adc	r19, r19
    4d04:	8b 81       	ldd	r24, Y+3	; 0x03
    4d06:	9c 81       	ldd	r25, Y+4	; 0x04
    4d08:	fc 01       	movw	r30, r24
    4d0a:	e2 0f       	add	r30, r18
    4d0c:	f3 1f       	adc	r31, r19
    4d0e:	91 81       	ldd	r25, Z+1	; 0x01
    4d10:	84 2f       	mov	r24, r20
    4d12:	69 2f       	mov	r22, r25
    4d14:	41 e0       	ldi	r20, 0x01	; 1
    4d16:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4d1a:	8a 83       	std	Y+2, r24	; 0x02
    4d1c:	80 c0       	rjmp	.+256    	; 0x4e1e <LED_enuInit+0x256>
							           	   	   	   	   	   	 Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PinID,
															 DIO_u8HIGH);
				}
				else
				{
					return ES_OUT_OF_RANGE;
    4d1e:	83 e0       	ldi	r24, 0x03	; 3
    4d20:	8d 83       	std	Y+5, r24	; 0x05
    4d22:	8b c0       	rjmp	.+278    	; 0x4e3a <LED_enuInit+0x272>
				}
			}
			else if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8Connection == LED_u8SOURCE)
    4d24:	89 81       	ldd	r24, Y+1	; 0x01
    4d26:	88 2f       	mov	r24, r24
    4d28:	90 e0       	ldi	r25, 0x00	; 0
    4d2a:	9c 01       	movw	r18, r24
    4d2c:	22 0f       	add	r18, r18
    4d2e:	33 1f       	adc	r19, r19
    4d30:	22 0f       	add	r18, r18
    4d32:	33 1f       	adc	r19, r19
    4d34:	8b 81       	ldd	r24, Y+3	; 0x03
    4d36:	9c 81       	ldd	r25, Y+4	; 0x04
    4d38:	fc 01       	movw	r30, r24
    4d3a:	e2 0f       	add	r30, r18
    4d3c:	f3 1f       	adc	r31, r19
    4d3e:	82 81       	ldd	r24, Z+2	; 0x02
    4d40:	89 30       	cpi	r24, 0x09	; 9
    4d42:	09 f0       	breq	.+2      	; 0x4d46 <LED_enuInit+0x17e>
    4d44:	69 c0       	rjmp	.+210    	; 0x4e18 <LED_enuInit+0x250>
			{
				if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8InitState == LED_u8ON)
    4d46:	89 81       	ldd	r24, Y+1	; 0x01
    4d48:	88 2f       	mov	r24, r24
    4d4a:	90 e0       	ldi	r25, 0x00	; 0
    4d4c:	9c 01       	movw	r18, r24
    4d4e:	22 0f       	add	r18, r18
    4d50:	33 1f       	adc	r19, r19
    4d52:	22 0f       	add	r18, r18
    4d54:	33 1f       	adc	r19, r19
    4d56:	8b 81       	ldd	r24, Y+3	; 0x03
    4d58:	9c 81       	ldd	r25, Y+4	; 0x04
    4d5a:	fc 01       	movw	r30, r24
    4d5c:	e2 0f       	add	r30, r18
    4d5e:	f3 1f       	adc	r31, r19
    4d60:	83 81       	ldd	r24, Z+3	; 0x03
    4d62:	8a 30       	cpi	r24, 0x0A	; 10
    4d64:	19 f5       	brne	.+70     	; 0x4dac <LED_enuInit+0x1e4>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PortID,
    4d66:	89 81       	ldd	r24, Y+1	; 0x01
    4d68:	88 2f       	mov	r24, r24
    4d6a:	90 e0       	ldi	r25, 0x00	; 0
    4d6c:	9c 01       	movw	r18, r24
    4d6e:	22 0f       	add	r18, r18
    4d70:	33 1f       	adc	r19, r19
    4d72:	22 0f       	add	r18, r18
    4d74:	33 1f       	adc	r19, r19
    4d76:	8b 81       	ldd	r24, Y+3	; 0x03
    4d78:	9c 81       	ldd	r25, Y+4	; 0x04
    4d7a:	fc 01       	movw	r30, r24
    4d7c:	e2 0f       	add	r30, r18
    4d7e:	f3 1f       	adc	r31, r19
    4d80:	40 81       	ld	r20, Z
    4d82:	89 81       	ldd	r24, Y+1	; 0x01
    4d84:	88 2f       	mov	r24, r24
    4d86:	90 e0       	ldi	r25, 0x00	; 0
    4d88:	9c 01       	movw	r18, r24
    4d8a:	22 0f       	add	r18, r18
    4d8c:	33 1f       	adc	r19, r19
    4d8e:	22 0f       	add	r18, r18
    4d90:	33 1f       	adc	r19, r19
    4d92:	8b 81       	ldd	r24, Y+3	; 0x03
    4d94:	9c 81       	ldd	r25, Y+4	; 0x04
    4d96:	fc 01       	movw	r30, r24
    4d98:	e2 0f       	add	r30, r18
    4d9a:	f3 1f       	adc	r31, r19
    4d9c:	91 81       	ldd	r25, Z+1	; 0x01
    4d9e:	84 2f       	mov	r24, r20
    4da0:	69 2f       	mov	r22, r25
    4da2:	41 e0       	ldi	r20, 0x01	; 1
    4da4:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4da8:	8a 83       	std	Y+2, r24	; 0x02
    4daa:	39 c0       	rjmp	.+114    	; 0x4e1e <LED_enuInit+0x256>
							           	   	   	   	   	     Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PinID,
															 DIO_u8HIGH);

				}
				else if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8InitState == LED_u8OFF)
    4dac:	89 81       	ldd	r24, Y+1	; 0x01
    4dae:	88 2f       	mov	r24, r24
    4db0:	90 e0       	ldi	r25, 0x00	; 0
    4db2:	9c 01       	movw	r18, r24
    4db4:	22 0f       	add	r18, r18
    4db6:	33 1f       	adc	r19, r19
    4db8:	22 0f       	add	r18, r18
    4dba:	33 1f       	adc	r19, r19
    4dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    4dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    4dc0:	fc 01       	movw	r30, r24
    4dc2:	e2 0f       	add	r30, r18
    4dc4:	f3 1f       	adc	r31, r19
    4dc6:	83 81       	ldd	r24, Z+3	; 0x03
    4dc8:	8b 30       	cpi	r24, 0x0B	; 11
    4dca:	19 f5       	brne	.+70     	; 0x4e12 <LED_enuInit+0x24a>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PortID,
    4dcc:	89 81       	ldd	r24, Y+1	; 0x01
    4dce:	88 2f       	mov	r24, r24
    4dd0:	90 e0       	ldi	r25, 0x00	; 0
    4dd2:	9c 01       	movw	r18, r24
    4dd4:	22 0f       	add	r18, r18
    4dd6:	33 1f       	adc	r19, r19
    4dd8:	22 0f       	add	r18, r18
    4dda:	33 1f       	adc	r19, r19
    4ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    4dde:	9c 81       	ldd	r25, Y+4	; 0x04
    4de0:	fc 01       	movw	r30, r24
    4de2:	e2 0f       	add	r30, r18
    4de4:	f3 1f       	adc	r31, r19
    4de6:	40 81       	ld	r20, Z
    4de8:	89 81       	ldd	r24, Y+1	; 0x01
    4dea:	88 2f       	mov	r24, r24
    4dec:	90 e0       	ldi	r25, 0x00	; 0
    4dee:	9c 01       	movw	r18, r24
    4df0:	22 0f       	add	r18, r18
    4df2:	33 1f       	adc	r19, r19
    4df4:	22 0f       	add	r18, r18
    4df6:	33 1f       	adc	r19, r19
    4df8:	8b 81       	ldd	r24, Y+3	; 0x03
    4dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    4dfc:	fc 01       	movw	r30, r24
    4dfe:	e2 0f       	add	r30, r18
    4e00:	f3 1f       	adc	r31, r19
    4e02:	91 81       	ldd	r25, Z+1	; 0x01
    4e04:	84 2f       	mov	r24, r20
    4e06:	69 2f       	mov	r22, r25
    4e08:	40 e0       	ldi	r20, 0x00	; 0
    4e0a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4e0e:	8a 83       	std	Y+2, r24	; 0x02
    4e10:	06 c0       	rjmp	.+12     	; 0x4e1e <LED_enuInit+0x256>
							           	   	   	   	   	   	 Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PinID,
															 DIO_u8LOW);
				}
				else
				{
					return ES_OUT_OF_RANGE;
    4e12:	83 e0       	ldi	r24, 0x03	; 3
    4e14:	8d 83       	std	Y+5, r24	; 0x05
    4e16:	11 c0       	rjmp	.+34     	; 0x4e3a <LED_enuInit+0x272>
				}
			}
			else
			{
				return ES_OUT_OF_RANGE;
    4e18:	83 e0       	ldi	r24, 0x03	; 3
    4e1a:	8d 83       	std	Y+5, r24	; 0x05
    4e1c:	0e c0       	rjmp	.+28     	; 0x4e3a <LED_enuInit+0x272>

	if(Copy_pstrLedConfiguration != NULL)
	{
		u8 Local_u8Iterator = 0;

		for(Local_u8Iterator = 0; Local_u8Iterator < LED_num; Local_u8Iterator++)
    4e1e:	89 81       	ldd	r24, Y+1	; 0x01
    4e20:	8f 5f       	subi	r24, 0xFF	; 255
    4e22:	89 83       	std	Y+1, r24	; 0x01
    4e24:	90 91 bb 01 	lds	r25, 0x01BB
    4e28:	89 81       	ldd	r24, Y+1	; 0x01
    4e2a:	89 17       	cp	r24, r25
    4e2c:	08 f4       	brcc	.+2      	; 0x4e30 <LED_enuInit+0x268>
    4e2e:	de ce       	rjmp	.-580    	; 0x4bec <LED_enuInit+0x24>
    4e30:	02 c0       	rjmp	.+4      	; 0x4e36 <LED_enuInit+0x26e>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    4e32:	82 e0       	ldi	r24, 0x02	; 2
    4e34:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    4e36:	8a 81       	ldd	r24, Y+2	; 0x02
    4e38:	8d 83       	std	Y+5, r24	; 0x05
    4e3a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4e3c:	0f 90       	pop	r0
    4e3e:	0f 90       	pop	r0
    4e40:	0f 90       	pop	r0
    4e42:	0f 90       	pop	r0
    4e44:	0f 90       	pop	r0
    4e46:	cf 91       	pop	r28
    4e48:	df 91       	pop	r29
    4e4a:	08 95       	ret

00004e4c <LED_enuTurnON>:

ES_t LED_enuTurnON(LED_t * Copy_pstrLedID)
{
    4e4c:	df 93       	push	r29
    4e4e:	cf 93       	push	r28
    4e50:	00 d0       	rcall	.+0      	; 0x4e52 <LED_enuTurnON+0x6>
    4e52:	00 d0       	rcall	.+0      	; 0x4e54 <LED_enuTurnON+0x8>
    4e54:	cd b7       	in	r28, 0x3d	; 61
    4e56:	de b7       	in	r29, 0x3e	; 62
    4e58:	9b 83       	std	Y+3, r25	; 0x03
    4e5a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4e5c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pstrLedID != NULL)
    4e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e60:	9b 81       	ldd	r25, Y+3	; 0x03
    4e62:	00 97       	sbiw	r24, 0x00	; 0
    4e64:	41 f1       	breq	.+80     	; 0x4eb6 <LED_enuTurnON+0x6a>
	{
		if(Copy_pstrLedID->LED_u8Connection == LED_u8SINK)
    4e66:	ea 81       	ldd	r30, Y+2	; 0x02
    4e68:	fb 81       	ldd	r31, Y+3	; 0x03
    4e6a:	82 81       	ldd	r24, Z+2	; 0x02
    4e6c:	88 30       	cpi	r24, 0x08	; 8
    4e6e:	61 f4       	brne	.+24     	; 0x4e88 <LED_enuTurnON+0x3c>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8LOW);
    4e70:	ea 81       	ldd	r30, Y+2	; 0x02
    4e72:	fb 81       	ldd	r31, Y+3	; 0x03
    4e74:	80 81       	ld	r24, Z
    4e76:	ea 81       	ldd	r30, Y+2	; 0x02
    4e78:	fb 81       	ldd	r31, Y+3	; 0x03
    4e7a:	91 81       	ldd	r25, Z+1	; 0x01
    4e7c:	69 2f       	mov	r22, r25
    4e7e:	40 e0       	ldi	r20, 0x00	; 0
    4e80:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4e84:	89 83       	std	Y+1, r24	; 0x01
    4e86:	14 c0       	rjmp	.+40     	; 0x4eb0 <LED_enuTurnON+0x64>
		}
		else if(Copy_pstrLedID->LED_u8Connection == LED_u8SOURCE)
    4e88:	ea 81       	ldd	r30, Y+2	; 0x02
    4e8a:	fb 81       	ldd	r31, Y+3	; 0x03
    4e8c:	82 81       	ldd	r24, Z+2	; 0x02
    4e8e:	89 30       	cpi	r24, 0x09	; 9
    4e90:	61 f4       	brne	.+24     	; 0x4eaa <LED_enuTurnON+0x5e>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8HIGH);
    4e92:	ea 81       	ldd	r30, Y+2	; 0x02
    4e94:	fb 81       	ldd	r31, Y+3	; 0x03
    4e96:	80 81       	ld	r24, Z
    4e98:	ea 81       	ldd	r30, Y+2	; 0x02
    4e9a:	fb 81       	ldd	r31, Y+3	; 0x03
    4e9c:	91 81       	ldd	r25, Z+1	; 0x01
    4e9e:	69 2f       	mov	r22, r25
    4ea0:	41 e0       	ldi	r20, 0x01	; 1
    4ea2:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4ea6:	89 83       	std	Y+1, r24	; 0x01
    4ea8:	03 c0       	rjmp	.+6      	; 0x4eb0 <LED_enuTurnON+0x64>
		}
		else
		{
			return ES_OUT_OF_RANGE;
    4eaa:	83 e0       	ldi	r24, 0x03	; 3
    4eac:	8c 83       	std	Y+4, r24	; 0x04
    4eae:	05 c0       	rjmp	.+10     	; 0x4eba <LED_enuTurnON+0x6e>
	else
	{
		return ES_NULL_POINTER;
	}

	return Local_enuErrorState;
    4eb0:	89 81       	ldd	r24, Y+1	; 0x01
    4eb2:	8c 83       	std	Y+4, r24	; 0x04
    4eb4:	02 c0       	rjmp	.+4      	; 0x4eba <LED_enuTurnON+0x6e>
			return ES_OUT_OF_RANGE;
		}
	}
	else
	{
		return ES_NULL_POINTER;
    4eb6:	82 e0       	ldi	r24, 0x02	; 2
    4eb8:	8c 83       	std	Y+4, r24	; 0x04
    4eba:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return Local_enuErrorState;
}
    4ebc:	0f 90       	pop	r0
    4ebe:	0f 90       	pop	r0
    4ec0:	0f 90       	pop	r0
    4ec2:	0f 90       	pop	r0
    4ec4:	cf 91       	pop	r28
    4ec6:	df 91       	pop	r29
    4ec8:	08 95       	ret

00004eca <LED_enuTurnOFF>:

ES_t LED_enuTurnOFF(LED_t * Copy_pstrLedID)
{
    4eca:	df 93       	push	r29
    4ecc:	cf 93       	push	r28
    4ece:	00 d0       	rcall	.+0      	; 0x4ed0 <LED_enuTurnOFF+0x6>
    4ed0:	00 d0       	rcall	.+0      	; 0x4ed2 <LED_enuTurnOFF+0x8>
    4ed2:	cd b7       	in	r28, 0x3d	; 61
    4ed4:	de b7       	in	r29, 0x3e	; 62
    4ed6:	9b 83       	std	Y+3, r25	; 0x03
    4ed8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4eda:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pstrLedID != NULL)
    4edc:	8a 81       	ldd	r24, Y+2	; 0x02
    4ede:	9b 81       	ldd	r25, Y+3	; 0x03
    4ee0:	00 97       	sbiw	r24, 0x00	; 0
    4ee2:	41 f1       	breq	.+80     	; 0x4f34 <LED_enuTurnOFF+0x6a>
	{
		if(Copy_pstrLedID->LED_u8Connection == LED_u8SINK)
    4ee4:	ea 81       	ldd	r30, Y+2	; 0x02
    4ee6:	fb 81       	ldd	r31, Y+3	; 0x03
    4ee8:	82 81       	ldd	r24, Z+2	; 0x02
    4eea:	88 30       	cpi	r24, 0x08	; 8
    4eec:	61 f4       	brne	.+24     	; 0x4f06 <LED_enuTurnOFF+0x3c>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8HIGH);
    4eee:	ea 81       	ldd	r30, Y+2	; 0x02
    4ef0:	fb 81       	ldd	r31, Y+3	; 0x03
    4ef2:	80 81       	ld	r24, Z
    4ef4:	ea 81       	ldd	r30, Y+2	; 0x02
    4ef6:	fb 81       	ldd	r31, Y+3	; 0x03
    4ef8:	91 81       	ldd	r25, Z+1	; 0x01
    4efa:	69 2f       	mov	r22, r25
    4efc:	41 e0       	ldi	r20, 0x01	; 1
    4efe:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4f02:	89 83       	std	Y+1, r24	; 0x01
    4f04:	14 c0       	rjmp	.+40     	; 0x4f2e <LED_enuTurnOFF+0x64>
		}
		else if(Copy_pstrLedID->LED_u8Connection == LED_u8SOURCE)
    4f06:	ea 81       	ldd	r30, Y+2	; 0x02
    4f08:	fb 81       	ldd	r31, Y+3	; 0x03
    4f0a:	82 81       	ldd	r24, Z+2	; 0x02
    4f0c:	89 30       	cpi	r24, 0x09	; 9
    4f0e:	61 f4       	brne	.+24     	; 0x4f28 <LED_enuTurnOFF+0x5e>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8LOW);
    4f10:	ea 81       	ldd	r30, Y+2	; 0x02
    4f12:	fb 81       	ldd	r31, Y+3	; 0x03
    4f14:	80 81       	ld	r24, Z
    4f16:	ea 81       	ldd	r30, Y+2	; 0x02
    4f18:	fb 81       	ldd	r31, Y+3	; 0x03
    4f1a:	91 81       	ldd	r25, Z+1	; 0x01
    4f1c:	69 2f       	mov	r22, r25
    4f1e:	40 e0       	ldi	r20, 0x00	; 0
    4f20:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4f24:	89 83       	std	Y+1, r24	; 0x01
    4f26:	03 c0       	rjmp	.+6      	; 0x4f2e <LED_enuTurnOFF+0x64>
		}
		else
		{
			return ES_OUT_OF_RANGE;
    4f28:	83 e0       	ldi	r24, 0x03	; 3
    4f2a:	8c 83       	std	Y+4, r24	; 0x04
    4f2c:	05 c0       	rjmp	.+10     	; 0x4f38 <LED_enuTurnOFF+0x6e>
	else
	{
		return ES_NULL_POINTER;
	}

	return Local_enuErrorState;
    4f2e:	89 81       	ldd	r24, Y+1	; 0x01
    4f30:	8c 83       	std	Y+4, r24	; 0x04
    4f32:	02 c0       	rjmp	.+4      	; 0x4f38 <LED_enuTurnOFF+0x6e>
			return ES_OUT_OF_RANGE;
		}
	}
	else
	{
		return ES_NULL_POINTER;
    4f34:	82 e0       	ldi	r24, 0x02	; 2
    4f36:	8c 83       	std	Y+4, r24	; 0x04
    4f38:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return Local_enuErrorState;
}
    4f3a:	0f 90       	pop	r0
    4f3c:	0f 90       	pop	r0
    4f3e:	0f 90       	pop	r0
    4f40:	0f 90       	pop	r0
    4f42:	cf 91       	pop	r28
    4f44:	df 91       	pop	r29
    4f46:	08 95       	ret

00004f48 <LCD_enuInit>:
#include "LCD_private.h"
#include <util/delay.h>
/***********************	Includes Section End	***********************/

ES_t LCD_enuInit(void)
{
    4f48:	df 93       	push	r29
    4f4a:	cf 93       	push	r28
    4f4c:	cd b7       	in	r28, 0x3d	; 61
    4f4e:	de b7       	in	r29, 0x3e	; 62
    4f50:	e9 97       	sbiw	r28, 0x39	; 57
    4f52:	0f b6       	in	r0, 0x3f	; 63
    4f54:	f8 94       	cli
    4f56:	de bf       	out	0x3e, r29	; 62
    4f58:	0f be       	out	0x3f, r0	; 63
    4f5a:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    4f5c:	19 ae       	std	Y+57, r1	; 0x39

	/* Shared configuration in two LCD modes */
	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    4f5e:	80 e0       	ldi	r24, 0x00	; 0
    4f60:	60 e0       	ldi	r22, 0x00	; 0
    4f62:	41 e0       	ldi	r20, 0x01	; 1
    4f64:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    4f68:	80 e0       	ldi	r24, 0x00	; 0
    4f6a:	61 e0       	ldi	r22, 0x01	; 1
    4f6c:	41 e0       	ldi	r20, 0x01	; 1
    4f6e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    4f72:	80 e0       	ldi	r24, 0x00	; 0
    4f74:	62 e0       	ldi	r22, 0x02	; 2
    4f76:	41 e0       	ldi	r20, 0x01	; 1
    4f78:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    4f7c:	81 e0       	ldi	r24, 0x01	; 1
    4f7e:	67 e0       	ldi	r22, 0x07	; 7
    4f80:	41 e0       	ldi	r20, 0x01	; 1
    4f82:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    4f86:	81 e0       	ldi	r24, 0x01	; 1
    4f88:	66 e0       	ldi	r22, 0x06	; 6
    4f8a:	41 e0       	ldi	r20, 0x01	; 1
    4f8c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    4f90:	81 e0       	ldi	r24, 0x01	; 1
    4f92:	65 e0       	ldi	r22, 0x05	; 5
    4f94:	41 e0       	ldi	r20, 0x01	; 1
    4f96:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    4f9a:	81 e0       	ldi	r24, 0x01	; 1
    4f9c:	64 e0       	ldi	r22, 0x04	; 4
    4f9e:	41 e0       	ldi	r20, 0x01	; 1
    4fa0:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    4fa4:	80 e0       	ldi	r24, 0x00	; 0
    4fa6:	90 e0       	ldi	r25, 0x00	; 0
    4fa8:	ac e0       	ldi	r26, 0x0C	; 12
    4faa:	b2 e4       	ldi	r27, 0x42	; 66
    4fac:	8d ab       	std	Y+53, r24	; 0x35
    4fae:	9e ab       	std	Y+54, r25	; 0x36
    4fb0:	af ab       	std	Y+55, r26	; 0x37
    4fb2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fb4:	6d a9       	ldd	r22, Y+53	; 0x35
    4fb6:	7e a9       	ldd	r23, Y+54	; 0x36
    4fb8:	8f a9       	ldd	r24, Y+55	; 0x37
    4fba:	98 ad       	ldd	r25, Y+56	; 0x38
    4fbc:	20 e0       	ldi	r18, 0x00	; 0
    4fbe:	30 e0       	ldi	r19, 0x00	; 0
    4fc0:	4a e7       	ldi	r20, 0x7A	; 122
    4fc2:	53 e4       	ldi	r21, 0x43	; 67
    4fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fc8:	dc 01       	movw	r26, r24
    4fca:	cb 01       	movw	r24, r22
    4fcc:	89 ab       	std	Y+49, r24	; 0x31
    4fce:	9a ab       	std	Y+50, r25	; 0x32
    4fd0:	ab ab       	std	Y+51, r26	; 0x33
    4fd2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4fd4:	69 a9       	ldd	r22, Y+49	; 0x31
    4fd6:	7a a9       	ldd	r23, Y+50	; 0x32
    4fd8:	8b a9       	ldd	r24, Y+51	; 0x33
    4fda:	9c a9       	ldd	r25, Y+52	; 0x34
    4fdc:	20 e0       	ldi	r18, 0x00	; 0
    4fde:	30 e0       	ldi	r19, 0x00	; 0
    4fe0:	40 e8       	ldi	r20, 0x80	; 128
    4fe2:	5f e3       	ldi	r21, 0x3F	; 63
    4fe4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4fe8:	88 23       	and	r24, r24
    4fea:	2c f4       	brge	.+10     	; 0x4ff6 <LCD_enuInit+0xae>
		__ticks = 1;
    4fec:	81 e0       	ldi	r24, 0x01	; 1
    4fee:	90 e0       	ldi	r25, 0x00	; 0
    4ff0:	98 ab       	std	Y+48, r25	; 0x30
    4ff2:	8f a7       	std	Y+47, r24	; 0x2f
    4ff4:	3f c0       	rjmp	.+126    	; 0x5074 <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    4ff6:	69 a9       	ldd	r22, Y+49	; 0x31
    4ff8:	7a a9       	ldd	r23, Y+50	; 0x32
    4ffa:	8b a9       	ldd	r24, Y+51	; 0x33
    4ffc:	9c a9       	ldd	r25, Y+52	; 0x34
    4ffe:	20 e0       	ldi	r18, 0x00	; 0
    5000:	3f ef       	ldi	r19, 0xFF	; 255
    5002:	4f e7       	ldi	r20, 0x7F	; 127
    5004:	57 e4       	ldi	r21, 0x47	; 71
    5006:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    500a:	18 16       	cp	r1, r24
    500c:	4c f5       	brge	.+82     	; 0x5060 <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    500e:	6d a9       	ldd	r22, Y+53	; 0x35
    5010:	7e a9       	ldd	r23, Y+54	; 0x36
    5012:	8f a9       	ldd	r24, Y+55	; 0x37
    5014:	98 ad       	ldd	r25, Y+56	; 0x38
    5016:	20 e0       	ldi	r18, 0x00	; 0
    5018:	30 e0       	ldi	r19, 0x00	; 0
    501a:	40 e2       	ldi	r20, 0x20	; 32
    501c:	51 e4       	ldi	r21, 0x41	; 65
    501e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5022:	dc 01       	movw	r26, r24
    5024:	cb 01       	movw	r24, r22
    5026:	bc 01       	movw	r22, r24
    5028:	cd 01       	movw	r24, r26
    502a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    502e:	dc 01       	movw	r26, r24
    5030:	cb 01       	movw	r24, r22
    5032:	98 ab       	std	Y+48, r25	; 0x30
    5034:	8f a7       	std	Y+47, r24	; 0x2f
    5036:	0f c0       	rjmp	.+30     	; 0x5056 <LCD_enuInit+0x10e>
    5038:	89 e1       	ldi	r24, 0x19	; 25
    503a:	90 e0       	ldi	r25, 0x00	; 0
    503c:	9e a7       	std	Y+46, r25	; 0x2e
    503e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5040:	8d a5       	ldd	r24, Y+45	; 0x2d
    5042:	9e a5       	ldd	r25, Y+46	; 0x2e
    5044:	01 97       	sbiw	r24, 0x01	; 1
    5046:	f1 f7       	brne	.-4      	; 0x5044 <LCD_enuInit+0xfc>
    5048:	9e a7       	std	Y+46, r25	; 0x2e
    504a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    504c:	8f a5       	ldd	r24, Y+47	; 0x2f
    504e:	98 a9       	ldd	r25, Y+48	; 0x30
    5050:	01 97       	sbiw	r24, 0x01	; 1
    5052:	98 ab       	std	Y+48, r25	; 0x30
    5054:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5056:	8f a5       	ldd	r24, Y+47	; 0x2f
    5058:	98 a9       	ldd	r25, Y+48	; 0x30
    505a:	00 97       	sbiw	r24, 0x00	; 0
    505c:	69 f7       	brne	.-38     	; 0x5038 <LCD_enuInit+0xf0>
    505e:	14 c0       	rjmp	.+40     	; 0x5088 <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5060:	69 a9       	ldd	r22, Y+49	; 0x31
    5062:	7a a9       	ldd	r23, Y+50	; 0x32
    5064:	8b a9       	ldd	r24, Y+51	; 0x33
    5066:	9c a9       	ldd	r25, Y+52	; 0x34
    5068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    506c:	dc 01       	movw	r26, r24
    506e:	cb 01       	movw	r24, r22
    5070:	98 ab       	std	Y+48, r25	; 0x30
    5072:	8f a7       	std	Y+47, r24	; 0x2f
    5074:	8f a5       	ldd	r24, Y+47	; 0x2f
    5076:	98 a9       	ldd	r25, Y+48	; 0x30
    5078:	9c a7       	std	Y+44, r25	; 0x2c
    507a:	8b a7       	std	Y+43, r24	; 0x2b
    507c:	8b a5       	ldd	r24, Y+43	; 0x2b
    507e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5080:	01 97       	sbiw	r24, 0x01	; 1
    5082:	f1 f7       	brne	.-4      	; 0x5080 <LCD_enuInit+0x138>
    5084:	9c a7       	std	Y+44, r25	; 0x2c
    5086:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);


	#if LCD_MODE == EIGHT_BIT
		DIO_enuSetPinDirection(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    5088:	82 e0       	ldi	r24, 0x02	; 2
    508a:	63 e0       	ldi	r22, 0x03	; 3
    508c:	41 e0       	ldi	r20, 0x01	; 1
    508e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    5092:	82 e0       	ldi	r24, 0x02	; 2
    5094:	62 e0       	ldi	r22, 0x02	; 2
    5096:	41 e0       	ldi	r20, 0x01	; 1
    5098:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    509c:	82 e0       	ldi	r24, 0x02	; 2
    509e:	61 e0       	ldi	r22, 0x01	; 1
    50a0:	41 e0       	ldi	r20, 0x01	; 1
    50a2:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    50a6:	82 e0       	ldi	r24, 0x02	; 2
    50a8:	60 e0       	ldi	r22, 0x00	; 0
    50aa:	41 e0       	ldi	r20, 0x01	; 1
    50ac:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>

		/* Function Set */
		LCD_invoidSendCommand(0x38);
    50b0:	88 e3       	ldi	r24, 0x38	; 56
    50b2:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <LCD_invoidSendCommand>
    50b6:	80 e0       	ldi	r24, 0x00	; 0
    50b8:	90 e0       	ldi	r25, 0x00	; 0
    50ba:	a0 e8       	ldi	r26, 0x80	; 128
    50bc:	bf e3       	ldi	r27, 0x3F	; 63
    50be:	8f a3       	std	Y+39, r24	; 0x27
    50c0:	98 a7       	std	Y+40, r25	; 0x28
    50c2:	a9 a7       	std	Y+41, r26	; 0x29
    50c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50c6:	6f a1       	ldd	r22, Y+39	; 0x27
    50c8:	78 a5       	ldd	r23, Y+40	; 0x28
    50ca:	89 a5       	ldd	r24, Y+41	; 0x29
    50cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    50ce:	20 e0       	ldi	r18, 0x00	; 0
    50d0:	30 e0       	ldi	r19, 0x00	; 0
    50d2:	4a e7       	ldi	r20, 0x7A	; 122
    50d4:	53 e4       	ldi	r21, 0x43	; 67
    50d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50da:	dc 01       	movw	r26, r24
    50dc:	cb 01       	movw	r24, r22
    50de:	8b a3       	std	Y+35, r24	; 0x23
    50e0:	9c a3       	std	Y+36, r25	; 0x24
    50e2:	ad a3       	std	Y+37, r26	; 0x25
    50e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    50e6:	6b a1       	ldd	r22, Y+35	; 0x23
    50e8:	7c a1       	ldd	r23, Y+36	; 0x24
    50ea:	8d a1       	ldd	r24, Y+37	; 0x25
    50ec:	9e a1       	ldd	r25, Y+38	; 0x26
    50ee:	20 e0       	ldi	r18, 0x00	; 0
    50f0:	30 e0       	ldi	r19, 0x00	; 0
    50f2:	40 e8       	ldi	r20, 0x80	; 128
    50f4:	5f e3       	ldi	r21, 0x3F	; 63
    50f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    50fa:	88 23       	and	r24, r24
    50fc:	2c f4       	brge	.+10     	; 0x5108 <LCD_enuInit+0x1c0>
		__ticks = 1;
    50fe:	81 e0       	ldi	r24, 0x01	; 1
    5100:	90 e0       	ldi	r25, 0x00	; 0
    5102:	9a a3       	std	Y+34, r25	; 0x22
    5104:	89 a3       	std	Y+33, r24	; 0x21
    5106:	3f c0       	rjmp	.+126    	; 0x5186 <LCD_enuInit+0x23e>
	else if (__tmp > 65535)
    5108:	6b a1       	ldd	r22, Y+35	; 0x23
    510a:	7c a1       	ldd	r23, Y+36	; 0x24
    510c:	8d a1       	ldd	r24, Y+37	; 0x25
    510e:	9e a1       	ldd	r25, Y+38	; 0x26
    5110:	20 e0       	ldi	r18, 0x00	; 0
    5112:	3f ef       	ldi	r19, 0xFF	; 255
    5114:	4f e7       	ldi	r20, 0x7F	; 127
    5116:	57 e4       	ldi	r21, 0x47	; 71
    5118:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    511c:	18 16       	cp	r1, r24
    511e:	4c f5       	brge	.+82     	; 0x5172 <LCD_enuInit+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5120:	6f a1       	ldd	r22, Y+39	; 0x27
    5122:	78 a5       	ldd	r23, Y+40	; 0x28
    5124:	89 a5       	ldd	r24, Y+41	; 0x29
    5126:	9a a5       	ldd	r25, Y+42	; 0x2a
    5128:	20 e0       	ldi	r18, 0x00	; 0
    512a:	30 e0       	ldi	r19, 0x00	; 0
    512c:	40 e2       	ldi	r20, 0x20	; 32
    512e:	51 e4       	ldi	r21, 0x41	; 65
    5130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5134:	dc 01       	movw	r26, r24
    5136:	cb 01       	movw	r24, r22
    5138:	bc 01       	movw	r22, r24
    513a:	cd 01       	movw	r24, r26
    513c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5140:	dc 01       	movw	r26, r24
    5142:	cb 01       	movw	r24, r22
    5144:	9a a3       	std	Y+34, r25	; 0x22
    5146:	89 a3       	std	Y+33, r24	; 0x21
    5148:	0f c0       	rjmp	.+30     	; 0x5168 <LCD_enuInit+0x220>
    514a:	89 e1       	ldi	r24, 0x19	; 25
    514c:	90 e0       	ldi	r25, 0x00	; 0
    514e:	98 a3       	std	Y+32, r25	; 0x20
    5150:	8f 8f       	std	Y+31, r24	; 0x1f
    5152:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5154:	98 a1       	ldd	r25, Y+32	; 0x20
    5156:	01 97       	sbiw	r24, 0x01	; 1
    5158:	f1 f7       	brne	.-4      	; 0x5156 <LCD_enuInit+0x20e>
    515a:	98 a3       	std	Y+32, r25	; 0x20
    515c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    515e:	89 a1       	ldd	r24, Y+33	; 0x21
    5160:	9a a1       	ldd	r25, Y+34	; 0x22
    5162:	01 97       	sbiw	r24, 0x01	; 1
    5164:	9a a3       	std	Y+34, r25	; 0x22
    5166:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5168:	89 a1       	ldd	r24, Y+33	; 0x21
    516a:	9a a1       	ldd	r25, Y+34	; 0x22
    516c:	00 97       	sbiw	r24, 0x00	; 0
    516e:	69 f7       	brne	.-38     	; 0x514a <LCD_enuInit+0x202>
    5170:	14 c0       	rjmp	.+40     	; 0x519a <LCD_enuInit+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5172:	6b a1       	ldd	r22, Y+35	; 0x23
    5174:	7c a1       	ldd	r23, Y+36	; 0x24
    5176:	8d a1       	ldd	r24, Y+37	; 0x25
    5178:	9e a1       	ldd	r25, Y+38	; 0x26
    517a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    517e:	dc 01       	movw	r26, r24
    5180:	cb 01       	movw	r24, r22
    5182:	9a a3       	std	Y+34, r25	; 0x22
    5184:	89 a3       	std	Y+33, r24	; 0x21
    5186:	89 a1       	ldd	r24, Y+33	; 0x21
    5188:	9a a1       	ldd	r25, Y+34	; 0x22
    518a:	9e 8f       	std	Y+30, r25	; 0x1e
    518c:	8d 8f       	std	Y+29, r24	; 0x1d
    518e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5190:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5192:	01 97       	sbiw	r24, 0x01	; 1
    5194:	f1 f7       	brne	.-4      	; 0x5192 <LCD_enuInit+0x24a>
    5196:	9e 8f       	std	Y+30, r25	; 0x1e
    5198:	8d 8f       	std	Y+29, r24	; 0x1d
		#error "Invalid LCD Mode"
	#endif

		_delay_ms(1);
		/* Display ON Cursor Blink*/
		LCD_invoidSendCommand(0x0F);
    519a:	8f e0       	ldi	r24, 0x0F	; 15
    519c:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <LCD_invoidSendCommand>
    51a0:	80 e0       	ldi	r24, 0x00	; 0
    51a2:	90 e0       	ldi	r25, 0x00	; 0
    51a4:	a0 e8       	ldi	r26, 0x80	; 128
    51a6:	bf e3       	ldi	r27, 0x3F	; 63
    51a8:	89 8f       	std	Y+25, r24	; 0x19
    51aa:	9a 8f       	std	Y+26, r25	; 0x1a
    51ac:	ab 8f       	std	Y+27, r26	; 0x1b
    51ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51b0:	69 8d       	ldd	r22, Y+25	; 0x19
    51b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    51b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    51b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    51b8:	20 e0       	ldi	r18, 0x00	; 0
    51ba:	30 e0       	ldi	r19, 0x00	; 0
    51bc:	4a e7       	ldi	r20, 0x7A	; 122
    51be:	53 e4       	ldi	r21, 0x43	; 67
    51c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51c4:	dc 01       	movw	r26, r24
    51c6:	cb 01       	movw	r24, r22
    51c8:	8d 8b       	std	Y+21, r24	; 0x15
    51ca:	9e 8b       	std	Y+22, r25	; 0x16
    51cc:	af 8b       	std	Y+23, r26	; 0x17
    51ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    51d0:	6d 89       	ldd	r22, Y+21	; 0x15
    51d2:	7e 89       	ldd	r23, Y+22	; 0x16
    51d4:	8f 89       	ldd	r24, Y+23	; 0x17
    51d6:	98 8d       	ldd	r25, Y+24	; 0x18
    51d8:	20 e0       	ldi	r18, 0x00	; 0
    51da:	30 e0       	ldi	r19, 0x00	; 0
    51dc:	40 e8       	ldi	r20, 0x80	; 128
    51de:	5f e3       	ldi	r21, 0x3F	; 63
    51e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51e4:	88 23       	and	r24, r24
    51e6:	2c f4       	brge	.+10     	; 0x51f2 <LCD_enuInit+0x2aa>
		__ticks = 1;
    51e8:	81 e0       	ldi	r24, 0x01	; 1
    51ea:	90 e0       	ldi	r25, 0x00	; 0
    51ec:	9c 8b       	std	Y+20, r25	; 0x14
    51ee:	8b 8b       	std	Y+19, r24	; 0x13
    51f0:	3f c0       	rjmp	.+126    	; 0x5270 <LCD_enuInit+0x328>
	else if (__tmp > 65535)
    51f2:	6d 89       	ldd	r22, Y+21	; 0x15
    51f4:	7e 89       	ldd	r23, Y+22	; 0x16
    51f6:	8f 89       	ldd	r24, Y+23	; 0x17
    51f8:	98 8d       	ldd	r25, Y+24	; 0x18
    51fa:	20 e0       	ldi	r18, 0x00	; 0
    51fc:	3f ef       	ldi	r19, 0xFF	; 255
    51fe:	4f e7       	ldi	r20, 0x7F	; 127
    5200:	57 e4       	ldi	r21, 0x47	; 71
    5202:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5206:	18 16       	cp	r1, r24
    5208:	4c f5       	brge	.+82     	; 0x525c <LCD_enuInit+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    520a:	69 8d       	ldd	r22, Y+25	; 0x19
    520c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    520e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5210:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5212:	20 e0       	ldi	r18, 0x00	; 0
    5214:	30 e0       	ldi	r19, 0x00	; 0
    5216:	40 e2       	ldi	r20, 0x20	; 32
    5218:	51 e4       	ldi	r21, 0x41	; 65
    521a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    521e:	dc 01       	movw	r26, r24
    5220:	cb 01       	movw	r24, r22
    5222:	bc 01       	movw	r22, r24
    5224:	cd 01       	movw	r24, r26
    5226:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    522a:	dc 01       	movw	r26, r24
    522c:	cb 01       	movw	r24, r22
    522e:	9c 8b       	std	Y+20, r25	; 0x14
    5230:	8b 8b       	std	Y+19, r24	; 0x13
    5232:	0f c0       	rjmp	.+30     	; 0x5252 <LCD_enuInit+0x30a>
    5234:	89 e1       	ldi	r24, 0x19	; 25
    5236:	90 e0       	ldi	r25, 0x00	; 0
    5238:	9a 8b       	std	Y+18, r25	; 0x12
    523a:	89 8b       	std	Y+17, r24	; 0x11
    523c:	89 89       	ldd	r24, Y+17	; 0x11
    523e:	9a 89       	ldd	r25, Y+18	; 0x12
    5240:	01 97       	sbiw	r24, 0x01	; 1
    5242:	f1 f7       	brne	.-4      	; 0x5240 <LCD_enuInit+0x2f8>
    5244:	9a 8b       	std	Y+18, r25	; 0x12
    5246:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5248:	8b 89       	ldd	r24, Y+19	; 0x13
    524a:	9c 89       	ldd	r25, Y+20	; 0x14
    524c:	01 97       	sbiw	r24, 0x01	; 1
    524e:	9c 8b       	std	Y+20, r25	; 0x14
    5250:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5252:	8b 89       	ldd	r24, Y+19	; 0x13
    5254:	9c 89       	ldd	r25, Y+20	; 0x14
    5256:	00 97       	sbiw	r24, 0x00	; 0
    5258:	69 f7       	brne	.-38     	; 0x5234 <LCD_enuInit+0x2ec>
    525a:	14 c0       	rjmp	.+40     	; 0x5284 <LCD_enuInit+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    525c:	6d 89       	ldd	r22, Y+21	; 0x15
    525e:	7e 89       	ldd	r23, Y+22	; 0x16
    5260:	8f 89       	ldd	r24, Y+23	; 0x17
    5262:	98 8d       	ldd	r25, Y+24	; 0x18
    5264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5268:	dc 01       	movw	r26, r24
    526a:	cb 01       	movw	r24, r22
    526c:	9c 8b       	std	Y+20, r25	; 0x14
    526e:	8b 8b       	std	Y+19, r24	; 0x13
    5270:	8b 89       	ldd	r24, Y+19	; 0x13
    5272:	9c 89       	ldd	r25, Y+20	; 0x14
    5274:	98 8b       	std	Y+16, r25	; 0x10
    5276:	8f 87       	std	Y+15, r24	; 0x0f
    5278:	8f 85       	ldd	r24, Y+15	; 0x0f
    527a:	98 89       	ldd	r25, Y+16	; 0x10
    527c:	01 97       	sbiw	r24, 0x01	; 1
    527e:	f1 f7       	brne	.-4      	; 0x527c <LCD_enuInit+0x334>
    5280:	98 8b       	std	Y+16, r25	; 0x10
    5282:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		/* Clear Display */
		LCD_invoidSendCommand(0x01);
    5284:	81 e0       	ldi	r24, 0x01	; 1
    5286:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <LCD_invoidSendCommand>
    528a:	80 e0       	ldi	r24, 0x00	; 0
    528c:	90 e0       	ldi	r25, 0x00	; 0
    528e:	a0 e0       	ldi	r26, 0x00	; 0
    5290:	b0 e4       	ldi	r27, 0x40	; 64
    5292:	8b 87       	std	Y+11, r24	; 0x0b
    5294:	9c 87       	std	Y+12, r25	; 0x0c
    5296:	ad 87       	std	Y+13, r26	; 0x0d
    5298:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    529a:	6b 85       	ldd	r22, Y+11	; 0x0b
    529c:	7c 85       	ldd	r23, Y+12	; 0x0c
    529e:	8d 85       	ldd	r24, Y+13	; 0x0d
    52a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    52a2:	20 e0       	ldi	r18, 0x00	; 0
    52a4:	30 e0       	ldi	r19, 0x00	; 0
    52a6:	4a e7       	ldi	r20, 0x7A	; 122
    52a8:	53 e4       	ldi	r21, 0x43	; 67
    52aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52ae:	dc 01       	movw	r26, r24
    52b0:	cb 01       	movw	r24, r22
    52b2:	8f 83       	std	Y+7, r24	; 0x07
    52b4:	98 87       	std	Y+8, r25	; 0x08
    52b6:	a9 87       	std	Y+9, r26	; 0x09
    52b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    52ba:	6f 81       	ldd	r22, Y+7	; 0x07
    52bc:	78 85       	ldd	r23, Y+8	; 0x08
    52be:	89 85       	ldd	r24, Y+9	; 0x09
    52c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    52c2:	20 e0       	ldi	r18, 0x00	; 0
    52c4:	30 e0       	ldi	r19, 0x00	; 0
    52c6:	40 e8       	ldi	r20, 0x80	; 128
    52c8:	5f e3       	ldi	r21, 0x3F	; 63
    52ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    52ce:	88 23       	and	r24, r24
    52d0:	2c f4       	brge	.+10     	; 0x52dc <LCD_enuInit+0x394>
		__ticks = 1;
    52d2:	81 e0       	ldi	r24, 0x01	; 1
    52d4:	90 e0       	ldi	r25, 0x00	; 0
    52d6:	9e 83       	std	Y+6, r25	; 0x06
    52d8:	8d 83       	std	Y+5, r24	; 0x05
    52da:	3f c0       	rjmp	.+126    	; 0x535a <LCD_enuInit+0x412>
	else if (__tmp > 65535)
    52dc:	6f 81       	ldd	r22, Y+7	; 0x07
    52de:	78 85       	ldd	r23, Y+8	; 0x08
    52e0:	89 85       	ldd	r24, Y+9	; 0x09
    52e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    52e4:	20 e0       	ldi	r18, 0x00	; 0
    52e6:	3f ef       	ldi	r19, 0xFF	; 255
    52e8:	4f e7       	ldi	r20, 0x7F	; 127
    52ea:	57 e4       	ldi	r21, 0x47	; 71
    52ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    52f0:	18 16       	cp	r1, r24
    52f2:	4c f5       	brge	.+82     	; 0x5346 <LCD_enuInit+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    52f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    52f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    52fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    52fc:	20 e0       	ldi	r18, 0x00	; 0
    52fe:	30 e0       	ldi	r19, 0x00	; 0
    5300:	40 e2       	ldi	r20, 0x20	; 32
    5302:	51 e4       	ldi	r21, 0x41	; 65
    5304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5308:	dc 01       	movw	r26, r24
    530a:	cb 01       	movw	r24, r22
    530c:	bc 01       	movw	r22, r24
    530e:	cd 01       	movw	r24, r26
    5310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5314:	dc 01       	movw	r26, r24
    5316:	cb 01       	movw	r24, r22
    5318:	9e 83       	std	Y+6, r25	; 0x06
    531a:	8d 83       	std	Y+5, r24	; 0x05
    531c:	0f c0       	rjmp	.+30     	; 0x533c <LCD_enuInit+0x3f4>
    531e:	89 e1       	ldi	r24, 0x19	; 25
    5320:	90 e0       	ldi	r25, 0x00	; 0
    5322:	9c 83       	std	Y+4, r25	; 0x04
    5324:	8b 83       	std	Y+3, r24	; 0x03
    5326:	8b 81       	ldd	r24, Y+3	; 0x03
    5328:	9c 81       	ldd	r25, Y+4	; 0x04
    532a:	01 97       	sbiw	r24, 0x01	; 1
    532c:	f1 f7       	brne	.-4      	; 0x532a <LCD_enuInit+0x3e2>
    532e:	9c 83       	std	Y+4, r25	; 0x04
    5330:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5332:	8d 81       	ldd	r24, Y+5	; 0x05
    5334:	9e 81       	ldd	r25, Y+6	; 0x06
    5336:	01 97       	sbiw	r24, 0x01	; 1
    5338:	9e 83       	std	Y+6, r25	; 0x06
    533a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    533c:	8d 81       	ldd	r24, Y+5	; 0x05
    533e:	9e 81       	ldd	r25, Y+6	; 0x06
    5340:	00 97       	sbiw	r24, 0x00	; 0
    5342:	69 f7       	brne	.-38     	; 0x531e <LCD_enuInit+0x3d6>
    5344:	14 c0       	rjmp	.+40     	; 0x536e <LCD_enuInit+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5346:	6f 81       	ldd	r22, Y+7	; 0x07
    5348:	78 85       	ldd	r23, Y+8	; 0x08
    534a:	89 85       	ldd	r24, Y+9	; 0x09
    534c:	9a 85       	ldd	r25, Y+10	; 0x0a
    534e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5352:	dc 01       	movw	r26, r24
    5354:	cb 01       	movw	r24, r22
    5356:	9e 83       	std	Y+6, r25	; 0x06
    5358:	8d 83       	std	Y+5, r24	; 0x05
    535a:	8d 81       	ldd	r24, Y+5	; 0x05
    535c:	9e 81       	ldd	r25, Y+6	; 0x06
    535e:	9a 83       	std	Y+2, r25	; 0x02
    5360:	89 83       	std	Y+1, r24	; 0x01
    5362:	89 81       	ldd	r24, Y+1	; 0x01
    5364:	9a 81       	ldd	r25, Y+2	; 0x02
    5366:	01 97       	sbiw	r24, 0x01	; 1
    5368:	f1 f7       	brne	.-4      	; 0x5366 <LCD_enuInit+0x41e>
    536a:	9a 83       	std	Y+2, r25	; 0x02
    536c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		/* Entry Mode */
		LCD_invoidSendCommand(0x06);
    536e:	86 e0       	ldi	r24, 0x06	; 6
    5370:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <LCD_invoidSendCommand>

	return Local_enuErrorState;
    5374:	89 ad       	ldd	r24, Y+57	; 0x39
}
    5376:	e9 96       	adiw	r28, 0x39	; 57
    5378:	0f b6       	in	r0, 0x3f	; 63
    537a:	f8 94       	cli
    537c:	de bf       	out	0x3e, r29	; 62
    537e:	0f be       	out	0x3f, r0	; 63
    5380:	cd bf       	out	0x3d, r28	; 61
    5382:	cf 91       	pop	r28
    5384:	df 91       	pop	r29
    5386:	08 95       	ret

00005388 <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    5388:	df 93       	push	r29
    538a:	cf 93       	push	r28
    538c:	00 d0       	rcall	.+0      	; 0x538e <LCD_enuSendCommand+0x6>
    538e:	cd b7       	in	r28, 0x3d	; 61
    5390:	de b7       	in	r29, 0x3e	; 62
    5392:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    5394:	19 82       	std	Y+1, r1	; 0x01

	/* Set RS as Command */
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    5396:	80 e0       	ldi	r24, 0x00	; 0
    5398:	60 e0       	ldi	r22, 0x00	; 0
    539a:	40 e0       	ldi	r20, 0x00	; 0
    539c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>

	LCD_voidLatch(Copy_u8Command);
    53a0:	8a 81       	ldd	r24, Y+2	; 0x02
    53a2:	0e 94 82 2b 	call	0x5704	; 0x5704 <LCD_voidLatch>

	return Local_enuErrorState;
    53a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    53a8:	0f 90       	pop	r0
    53aa:	0f 90       	pop	r0
    53ac:	cf 91       	pop	r28
    53ae:	df 91       	pop	r29
    53b0:	08 95       	ret

000053b2 <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Char)
{
    53b2:	df 93       	push	r29
    53b4:	cf 93       	push	r28
    53b6:	00 d0       	rcall	.+0      	; 0x53b8 <LCD_enuDisplayChar+0x6>
    53b8:	cd b7       	in	r28, 0x3d	; 61
    53ba:	de b7       	in	r29, 0x3e	; 62
    53bc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    53be:	19 82       	std	Y+1, r1	; 0x01

	/* Set RS as DATA */
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    53c0:	80 e0       	ldi	r24, 0x00	; 0
    53c2:	60 e0       	ldi	r22, 0x00	; 0
    53c4:	41 e0       	ldi	r20, 0x01	; 1
    53c6:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>

	LCD_voidLatch(Copy_u8Char);
    53ca:	8a 81       	ldd	r24, Y+2	; 0x02
    53cc:	0e 94 82 2b 	call	0x5704	; 0x5704 <LCD_voidLatch>

	return Local_enuErrorState;
    53d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    53d2:	0f 90       	pop	r0
    53d4:	0f 90       	pop	r0
    53d6:	cf 91       	pop	r28
    53d8:	df 91       	pop	r29
    53da:	08 95       	ret

000053dc <LCD_enuDisplayNumber>:

ES_t LCD_enuDisplayNumber(u32 Copy_u8Number)
{
    53dc:	df 93       	push	r29
    53de:	cf 93       	push	r28
    53e0:	cd b7       	in	r28, 0x3d	; 61
    53e2:	de b7       	in	r29, 0x3e	; 62
    53e4:	2a 97       	sbiw	r28, 0x0a	; 10
    53e6:	0f b6       	in	r0, 0x3f	; 63
    53e8:	f8 94       	cli
    53ea:	de bf       	out	0x3e, r29	; 62
    53ec:	0f be       	out	0x3f, r0	; 63
    53ee:	cd bf       	out	0x3d, r28	; 61
    53f0:	6f 83       	std	Y+7, r22	; 0x07
    53f2:	78 87       	std	Y+8, r23	; 0x08
    53f4:	89 87       	std	Y+9, r24	; 0x09
    53f6:	9a 87       	std	Y+10, r25	; 0x0a
	ES_t Local_enuErrorState = ES_NOK;
    53f8:	1e 82       	std	Y+6, r1	; 0x06

	u8 Local_u8Digit = 0;
    53fa:	1d 82       	std	Y+5, r1	; 0x05
	f64 Local_f64NumberOfDigits = 1;
    53fc:	80 e0       	ldi	r24, 0x00	; 0
    53fe:	90 e0       	ldi	r25, 0x00	; 0
    5400:	a0 e8       	ldi	r26, 0x80	; 128
    5402:	bf e3       	ldi	r27, 0x3F	; 63
    5404:	89 83       	std	Y+1, r24	; 0x01
    5406:	9a 83       	std	Y+2, r25	; 0x02
    5408:	ab 83       	std	Y+3, r26	; 0x03
    540a:	bc 83       	std	Y+4, r27	; 0x04

	/* Set RS as DATA */
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    540c:	80 e0       	ldi	r24, 0x00	; 0
    540e:	60 e0       	ldi	r22, 0x00	; 0
    5410:	41 e0       	ldi	r20, 0x01	; 1
    5412:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>

	if(Copy_u8Number < 10)
    5416:	8f 81       	ldd	r24, Y+7	; 0x07
    5418:	98 85       	ldd	r25, Y+8	; 0x08
    541a:	a9 85       	ldd	r26, Y+9	; 0x09
    541c:	ba 85       	ldd	r27, Y+10	; 0x0a
    541e:	8a 30       	cpi	r24, 0x0A	; 10
    5420:	91 05       	cpc	r25, r1
    5422:	a1 05       	cpc	r26, r1
    5424:	b1 05       	cpc	r27, r1
    5426:	08 f5       	brcc	.+66     	; 0x546a <LCD_enuDisplayNumber+0x8e>
	{
		Copy_u8Number += 48;
    5428:	8f 81       	ldd	r24, Y+7	; 0x07
    542a:	98 85       	ldd	r25, Y+8	; 0x08
    542c:	a9 85       	ldd	r26, Y+9	; 0x09
    542e:	ba 85       	ldd	r27, Y+10	; 0x0a
    5430:	c0 96       	adiw	r24, 0x30	; 48
    5432:	a1 1d       	adc	r26, r1
    5434:	b1 1d       	adc	r27, r1
    5436:	8f 83       	std	Y+7, r24	; 0x07
    5438:	98 87       	std	Y+8, r25	; 0x08
    543a:	a9 87       	std	Y+9, r26	; 0x09
    543c:	ba 87       	std	Y+10, r27	; 0x0a
		LCD_voidLatch(Copy_u8Number);
    543e:	8f 81       	ldd	r24, Y+7	; 0x07
    5440:	0e 94 82 2b 	call	0x5704	; 0x5704 <LCD_voidLatch>
		Local_enuErrorState = ES_OK;
    5444:	81 e0       	ldi	r24, 0x01	; 1
    5446:	8e 83       	std	Y+6, r24	; 0x06
    5448:	9a c0       	rjmp	.+308    	; 0x557e <LCD_enuDisplayNumber+0x1a2>
	else
	{
		/* Count digits of number log10 */
		while(Local_f64NumberOfDigits < Copy_u8Number)
		{
			Local_f64NumberOfDigits *= 10;
    544a:	69 81       	ldd	r22, Y+1	; 0x01
    544c:	7a 81       	ldd	r23, Y+2	; 0x02
    544e:	8b 81       	ldd	r24, Y+3	; 0x03
    5450:	9c 81       	ldd	r25, Y+4	; 0x04
    5452:	20 e0       	ldi	r18, 0x00	; 0
    5454:	30 e0       	ldi	r19, 0x00	; 0
    5456:	40 e2       	ldi	r20, 0x20	; 32
    5458:	51 e4       	ldi	r21, 0x41	; 65
    545a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    545e:	dc 01       	movw	r26, r24
    5460:	cb 01       	movw	r24, r22
    5462:	89 83       	std	Y+1, r24	; 0x01
    5464:	9a 83       	std	Y+2, r25	; 0x02
    5466:	ab 83       	std	Y+3, r26	; 0x03
    5468:	bc 83       	std	Y+4, r27	; 0x04
		Local_enuErrorState = ES_OK;
	}
	else
	{
		/* Count digits of number log10 */
		while(Local_f64NumberOfDigits < Copy_u8Number)
    546a:	6f 81       	ldd	r22, Y+7	; 0x07
    546c:	78 85       	ldd	r23, Y+8	; 0x08
    546e:	89 85       	ldd	r24, Y+9	; 0x09
    5470:	9a 85       	ldd	r25, Y+10	; 0x0a
    5472:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    5476:	dc 01       	movw	r26, r24
    5478:	cb 01       	movw	r24, r22
    547a:	bc 01       	movw	r22, r24
    547c:	cd 01       	movw	r24, r26
    547e:	29 81       	ldd	r18, Y+1	; 0x01
    5480:	3a 81       	ldd	r19, Y+2	; 0x02
    5482:	4b 81       	ldd	r20, Y+3	; 0x03
    5484:	5c 81       	ldd	r21, Y+4	; 0x04
    5486:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    548a:	18 16       	cp	r1, r24
    548c:	f4 f2       	brlt	.-68     	; 0x544a <LCD_enuDisplayNumber+0x6e>
		{
			Local_f64NumberOfDigits *= 10;
		}
		Local_f64NumberOfDigits /= 10;
    548e:	69 81       	ldd	r22, Y+1	; 0x01
    5490:	7a 81       	ldd	r23, Y+2	; 0x02
    5492:	8b 81       	ldd	r24, Y+3	; 0x03
    5494:	9c 81       	ldd	r25, Y+4	; 0x04
    5496:	20 e0       	ldi	r18, 0x00	; 0
    5498:	30 e0       	ldi	r19, 0x00	; 0
    549a:	40 e2       	ldi	r20, 0x20	; 32
    549c:	51 e4       	ldi	r21, 0x41	; 65
    549e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    54a2:	dc 01       	movw	r26, r24
    54a4:	cb 01       	movw	r24, r22
    54a6:	89 83       	std	Y+1, r24	; 0x01
    54a8:	9a 83       	std	Y+2, r25	; 0x02
    54aa:	ab 83       	std	Y+3, r26	; 0x03
    54ac:	bc 83       	std	Y+4, r27	; 0x04
    54ae:	58 c0       	rjmp	.+176    	; 0x5560 <LCD_enuDisplayNumber+0x184>

		while(Local_f64NumberOfDigits >= 1)
		{
			Local_u8Digit = (u8)(Copy_u8Number / Local_f64NumberOfDigits);
    54b0:	6f 81       	ldd	r22, Y+7	; 0x07
    54b2:	78 85       	ldd	r23, Y+8	; 0x08
    54b4:	89 85       	ldd	r24, Y+9	; 0x09
    54b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    54b8:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    54bc:	dc 01       	movw	r26, r24
    54be:	cb 01       	movw	r24, r22
    54c0:	bc 01       	movw	r22, r24
    54c2:	cd 01       	movw	r24, r26
    54c4:	29 81       	ldd	r18, Y+1	; 0x01
    54c6:	3a 81       	ldd	r19, Y+2	; 0x02
    54c8:	4b 81       	ldd	r20, Y+3	; 0x03
    54ca:	5c 81       	ldd	r21, Y+4	; 0x04
    54cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    54d0:	dc 01       	movw	r26, r24
    54d2:	cb 01       	movw	r24, r22
    54d4:	bc 01       	movw	r22, r24
    54d6:	cd 01       	movw	r24, r26
    54d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54dc:	dc 01       	movw	r26, r24
    54de:	cb 01       	movw	r24, r22
    54e0:	8d 83       	std	Y+5, r24	; 0x05
			Copy_u8Number -= ((u32)(Local_u8Digit * Local_f64NumberOfDigits));
    54e2:	8d 81       	ldd	r24, Y+5	; 0x05
    54e4:	88 2f       	mov	r24, r24
    54e6:	90 e0       	ldi	r25, 0x00	; 0
    54e8:	aa 27       	eor	r26, r26
    54ea:	97 fd       	sbrc	r25, 7
    54ec:	a0 95       	com	r26
    54ee:	ba 2f       	mov	r27, r26
    54f0:	bc 01       	movw	r22, r24
    54f2:	cd 01       	movw	r24, r26
    54f4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    54f8:	dc 01       	movw	r26, r24
    54fa:	cb 01       	movw	r24, r22
    54fc:	bc 01       	movw	r22, r24
    54fe:	cd 01       	movw	r24, r26
    5500:	29 81       	ldd	r18, Y+1	; 0x01
    5502:	3a 81       	ldd	r19, Y+2	; 0x02
    5504:	4b 81       	ldd	r20, Y+3	; 0x03
    5506:	5c 81       	ldd	r21, Y+4	; 0x04
    5508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    550c:	dc 01       	movw	r26, r24
    550e:	cb 01       	movw	r24, r22
    5510:	bc 01       	movw	r22, r24
    5512:	cd 01       	movw	r24, r26
    5514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5518:	9b 01       	movw	r18, r22
    551a:	ac 01       	movw	r20, r24
    551c:	8f 81       	ldd	r24, Y+7	; 0x07
    551e:	98 85       	ldd	r25, Y+8	; 0x08
    5520:	a9 85       	ldd	r26, Y+9	; 0x09
    5522:	ba 85       	ldd	r27, Y+10	; 0x0a
    5524:	82 1b       	sub	r24, r18
    5526:	93 0b       	sbc	r25, r19
    5528:	a4 0b       	sbc	r26, r20
    552a:	b5 0b       	sbc	r27, r21
    552c:	8f 83       	std	Y+7, r24	; 0x07
    552e:	98 87       	std	Y+8, r25	; 0x08
    5530:	a9 87       	std	Y+9, r26	; 0x09
    5532:	ba 87       	std	Y+10, r27	; 0x0a
			Local_u8Digit += 48;
    5534:	8d 81       	ldd	r24, Y+5	; 0x05
    5536:	80 5d       	subi	r24, 0xD0	; 208
    5538:	8d 83       	std	Y+5, r24	; 0x05
			Local_f64NumberOfDigits /= 10;
    553a:	69 81       	ldd	r22, Y+1	; 0x01
    553c:	7a 81       	ldd	r23, Y+2	; 0x02
    553e:	8b 81       	ldd	r24, Y+3	; 0x03
    5540:	9c 81       	ldd	r25, Y+4	; 0x04
    5542:	20 e0       	ldi	r18, 0x00	; 0
    5544:	30 e0       	ldi	r19, 0x00	; 0
    5546:	40 e2       	ldi	r20, 0x20	; 32
    5548:	51 e4       	ldi	r21, 0x41	; 65
    554a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    554e:	dc 01       	movw	r26, r24
    5550:	cb 01       	movw	r24, r22
    5552:	89 83       	std	Y+1, r24	; 0x01
    5554:	9a 83       	std	Y+2, r25	; 0x02
    5556:	ab 83       	std	Y+3, r26	; 0x03
    5558:	bc 83       	std	Y+4, r27	; 0x04

			LCD_voidLatch(Local_u8Digit);
    555a:	8d 81       	ldd	r24, Y+5	; 0x05
    555c:	0e 94 82 2b 	call	0x5704	; 0x5704 <LCD_voidLatch>
		{
			Local_f64NumberOfDigits *= 10;
		}
		Local_f64NumberOfDigits /= 10;

		while(Local_f64NumberOfDigits >= 1)
    5560:	69 81       	ldd	r22, Y+1	; 0x01
    5562:	7a 81       	ldd	r23, Y+2	; 0x02
    5564:	8b 81       	ldd	r24, Y+3	; 0x03
    5566:	9c 81       	ldd	r25, Y+4	; 0x04
    5568:	20 e0       	ldi	r18, 0x00	; 0
    556a:	30 e0       	ldi	r19, 0x00	; 0
    556c:	40 e8       	ldi	r20, 0x80	; 128
    556e:	5f e3       	ldi	r21, 0x3F	; 63
    5570:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    5574:	88 23       	and	r24, r24
    5576:	0c f0       	brlt	.+2      	; 0x557a <LCD_enuDisplayNumber+0x19e>
    5578:	9b cf       	rjmp	.-202    	; 0x54b0 <LCD_enuDisplayNumber+0xd4>
			Local_u8Digit += 48;
			Local_f64NumberOfDigits /= 10;

			LCD_voidLatch(Local_u8Digit);
		}
		Local_enuErrorState = ES_OK;
    557a:	81 e0       	ldi	r24, 0x01	; 1
    557c:	8e 83       	std	Y+6, r24	; 0x06
	}


	return Local_enuErrorState;
    557e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    5580:	2a 96       	adiw	r28, 0x0a	; 10
    5582:	0f b6       	in	r0, 0x3f	; 63
    5584:	f8 94       	cli
    5586:	de bf       	out	0x3e, r29	; 62
    5588:	0f be       	out	0x3f, r0	; 63
    558a:	cd bf       	out	0x3d, r28	; 61
    558c:	cf 91       	pop	r28
    558e:	df 91       	pop	r29
    5590:	08 95       	ret

00005592 <LCD_enuDisplaySpecialChar>:

ES_t LCD_enuDisplaySpecialChar(u8 Copy_u8RowPosition , u8 Copy_u8ColPosition, u8 *Copy_pu8ExtraChar)
{
    5592:	df 93       	push	r29
    5594:	cf 93       	push	r28
    5596:	00 d0       	rcall	.+0      	; 0x5598 <LCD_enuDisplaySpecialChar+0x6>
    5598:	00 d0       	rcall	.+0      	; 0x559a <LCD_enuDisplaySpecialChar+0x8>
    559a:	00 d0       	rcall	.+0      	; 0x559c <LCD_enuDisplaySpecialChar+0xa>
    559c:	cd b7       	in	r28, 0x3d	; 61
    559e:	de b7       	in	r29, 0x3e	; 62
    55a0:	8b 83       	std	Y+3, r24	; 0x03
    55a2:	6c 83       	std	Y+4, r22	; 0x04
    55a4:	5e 83       	std	Y+6, r21	; 0x06
    55a6:	4d 83       	std	Y+5, r20	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    55a8:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8Iterator = 0;
    55aa:	19 82       	std	Y+1, r1	; 0x01

		LCD_invoidSendCommand(0x40);
    55ac:	80 e4       	ldi	r24, 0x40	; 64
    55ae:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <LCD_invoidSendCommand>

		/* Set RS as DATA */
		DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    55b2:	80 e0       	ldi	r24, 0x00	; 0
    55b4:	60 e0       	ldi	r22, 0x00	; 0
    55b6:	41 e0       	ldi	r20, 0x01	; 1
    55b8:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>

		for(Local_u8Iterator = 0; Local_u8Iterator < 8; Local_u8Iterator++)
    55bc:	19 82       	std	Y+1, r1	; 0x01
    55be:	0e c0       	rjmp	.+28     	; 0x55dc <LCD_enuDisplaySpecialChar+0x4a>
		{
			LCD_voidLatch(Copy_pu8ExtraChar[Local_u8Iterator]);
    55c0:	89 81       	ldd	r24, Y+1	; 0x01
    55c2:	28 2f       	mov	r18, r24
    55c4:	30 e0       	ldi	r19, 0x00	; 0
    55c6:	8d 81       	ldd	r24, Y+5	; 0x05
    55c8:	9e 81       	ldd	r25, Y+6	; 0x06
    55ca:	fc 01       	movw	r30, r24
    55cc:	e2 0f       	add	r30, r18
    55ce:	f3 1f       	adc	r31, r19
    55d0:	80 81       	ld	r24, Z
    55d2:	0e 94 82 2b 	call	0x5704	; 0x5704 <LCD_voidLatch>
		LCD_invoidSendCommand(0x40);

		/* Set RS as DATA */
		DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);

		for(Local_u8Iterator = 0; Local_u8Iterator < 8; Local_u8Iterator++)
    55d6:	89 81       	ldd	r24, Y+1	; 0x01
    55d8:	8f 5f       	subi	r24, 0xFF	; 255
    55da:	89 83       	std	Y+1, r24	; 0x01
    55dc:	89 81       	ldd	r24, Y+1	; 0x01
    55de:	88 30       	cpi	r24, 0x08	; 8
    55e0:	78 f3       	brcs	.-34     	; 0x55c0 <LCD_enuDisplaySpecialChar+0x2e>
		{
			LCD_voidLatch(Copy_pu8ExtraChar[Local_u8Iterator]);
		}

		LCD_enuLocalGoToXY(Copy_u8RowPosition, Copy_u8ColPosition);
    55e2:	8b 81       	ldd	r24, Y+3	; 0x03
    55e4:	6c 81       	ldd	r22, Y+4	; 0x04
    55e6:	0e 94 5a 2b 	call	0x56b4	; 0x56b4 <LCD_enuLocalGoToXY>

		DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    55ea:	80 e0       	ldi	r24, 0x00	; 0
    55ec:	60 e0       	ldi	r22, 0x00	; 0
    55ee:	41 e0       	ldi	r20, 0x01	; 1
    55f0:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
		LCD_voidLatch(0);
    55f4:	80 e0       	ldi	r24, 0x00	; 0
    55f6:	0e 94 82 2b 	call	0x5704	; 0x5704 <LCD_voidLatch>

	return Local_enuErrorState;
    55fa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    55fc:	26 96       	adiw	r28, 0x06	; 6
    55fe:	0f b6       	in	r0, 0x3f	; 63
    5600:	f8 94       	cli
    5602:	de bf       	out	0x3e, r29	; 62
    5604:	0f be       	out	0x3f, r0	; 63
    5606:	cd bf       	out	0x3d, r28	; 61
    5608:	cf 91       	pop	r28
    560a:	df 91       	pop	r29
    560c:	08 95       	ret

0000560e <LCD_enuSendString>:



ES_t LCD_enuSendString(u8 *Copy_pu8string)
{
    560e:	df 93       	push	r29
    5610:	cf 93       	push	r28
    5612:	00 d0       	rcall	.+0      	; 0x5614 <LCD_enuSendString+0x6>
    5614:	00 d0       	rcall	.+0      	; 0x5616 <LCD_enuSendString+0x8>
    5616:	cd b7       	in	r28, 0x3d	; 61
    5618:	de b7       	in	r29, 0x3e	; 62
    561a:	9c 83       	std	Y+4, r25	; 0x04
    561c:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    561e:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8Counter = 0;
    5620:	19 82       	std	Y+1, r1	; 0x01
	/* Set RS as DATA */
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    5622:	80 e0       	ldi	r24, 0x00	; 0
    5624:	60 e0       	ldi	r22, 0x00	; 0
    5626:	41 e0       	ldi	r20, 0x01	; 1
    5628:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>

	if(Copy_pu8string != NULL)
    562c:	8b 81       	ldd	r24, Y+3	; 0x03
    562e:	9c 81       	ldd	r25, Y+4	; 0x04
    5630:	00 97       	sbiw	r24, 0x00	; 0
    5632:	09 f1       	breq	.+66     	; 0x5676 <LCD_enuSendString+0x68>
    5634:	18 c0       	rjmp	.+48     	; 0x5666 <LCD_enuSendString+0x58>
	{
		while(*Copy_pu8string)
		{
			LCD_voidLatch(*Copy_pu8string);
    5636:	eb 81       	ldd	r30, Y+3	; 0x03
    5638:	fc 81       	ldd	r31, Y+4	; 0x04
    563a:	80 81       	ld	r24, Z
    563c:	0e 94 82 2b 	call	0x5704	; 0x5704 <LCD_voidLatch>
			Copy_pu8string++;
    5640:	8b 81       	ldd	r24, Y+3	; 0x03
    5642:	9c 81       	ldd	r25, Y+4	; 0x04
    5644:	01 96       	adiw	r24, 0x01	; 1
    5646:	9c 83       	std	Y+4, r25	; 0x04
    5648:	8b 83       	std	Y+3, r24	; 0x03
			Local_u8Counter++;
    564a:	89 81       	ldd	r24, Y+1	; 0x01
    564c:	8f 5f       	subi	r24, 0xFF	; 255
    564e:	89 83       	std	Y+1, r24	; 0x01

			/* Go to Second Line */
			if(Local_u8Counter == 16)
    5650:	89 81       	ldd	r24, Y+1	; 0x01
    5652:	80 31       	cpi	r24, 0x10	; 16
    5654:	41 f4       	brne	.+16     	; 0x5666 <LCD_enuSendString+0x58>
			{
				LCD_invoidSendCommand(0xC0);
    5656:	80 ec       	ldi	r24, 0xC0	; 192
    5658:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <LCD_invoidSendCommand>
				DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    565c:	80 e0       	ldi	r24, 0x00	; 0
    565e:	60 e0       	ldi	r22, 0x00	; 0
    5660:	41 e0       	ldi	r20, 0x01	; 1
    5662:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
	/* Set RS as DATA */
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);

	if(Copy_pu8string != NULL)
	{
		while(*Copy_pu8string)
    5666:	eb 81       	ldd	r30, Y+3	; 0x03
    5668:	fc 81       	ldd	r31, Y+4	; 0x04
    566a:	80 81       	ld	r24, Z
    566c:	88 23       	and	r24, r24
    566e:	19 f7       	brne	.-58     	; 0x5636 <LCD_enuSendString+0x28>
			{
				LCD_invoidSendCommand(0xC0);
				DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
			}
		}
		Local_enuErrorState = ES_OK;
    5670:	81 e0       	ldi	r24, 0x01	; 1
    5672:	8a 83       	std	Y+2, r24	; 0x02
    5674:	02 c0       	rjmp	.+4      	; 0x567a <LCD_enuSendString+0x6c>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    5676:	82 e0       	ldi	r24, 0x02	; 2
    5678:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    567a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    567c:	0f 90       	pop	r0
    567e:	0f 90       	pop	r0
    5680:	0f 90       	pop	r0
    5682:	0f 90       	pop	r0
    5684:	cf 91       	pop	r28
    5686:	df 91       	pop	r29
    5688:	08 95       	ret

0000568a <LCD_enuSetPosition>:

ES_t LCD_enuSetPosition(u8 Copy_u8Row, u8 Copy_u8Column)
{
    568a:	df 93       	push	r29
    568c:	cf 93       	push	r28
    568e:	00 d0       	rcall	.+0      	; 0x5690 <LCD_enuSetPosition+0x6>
    5690:	0f 92       	push	r0
    5692:	cd b7       	in	r28, 0x3d	; 61
    5694:	de b7       	in	r29, 0x3e	; 62
    5696:	8a 83       	std	Y+2, r24	; 0x02
    5698:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    569a:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorState = LCD_enuLocalGoToXY(Copy_u8Row, Copy_u8Column);
    569c:	8a 81       	ldd	r24, Y+2	; 0x02
    569e:	6b 81       	ldd	r22, Y+3	; 0x03
    56a0:	0e 94 5a 2b 	call	0x56b4	; 0x56b4 <LCD_enuLocalGoToXY>
    56a4:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    56a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    56a8:	0f 90       	pop	r0
    56aa:	0f 90       	pop	r0
    56ac:	0f 90       	pop	r0
    56ae:	cf 91       	pop	r28
    56b0:	df 91       	pop	r29
    56b2:	08 95       	ret

000056b4 <LCD_enuLocalGoToXY>:

static ES_t LCD_enuLocalGoToXY(u8 Copy_u8Row, u8 Copy_u8Column)
{
    56b4:	df 93       	push	r29
    56b6:	cf 93       	push	r28
    56b8:	00 d0       	rcall	.+0      	; 0x56ba <LCD_enuLocalGoToXY+0x6>
    56ba:	00 d0       	rcall	.+0      	; 0x56bc <LCD_enuLocalGoToXY+0x8>
    56bc:	0f 92       	push	r0
    56be:	cd b7       	in	r28, 0x3d	; 61
    56c0:	de b7       	in	r29, 0x3e	; 62
    56c2:	8c 83       	std	Y+4, r24	; 0x04
    56c4:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    56c6:	19 82       	std	Y+1, r1	; 0x01

	u8 Local_u8RowLocation [] = {0x80 , 0xC0};
    56c8:	80 e8       	ldi	r24, 0x80	; 128
    56ca:	8a 83       	std	Y+2, r24	; 0x02
    56cc:	80 ec       	ldi	r24, 0xC0	; 192
    56ce:	8b 83       	std	Y+3, r24	; 0x03
	LCD_enuSendCommand(Local_u8RowLocation [Copy_u8Row-1]+(Copy_u8Column-1));
    56d0:	8c 81       	ldd	r24, Y+4	; 0x04
    56d2:	88 2f       	mov	r24, r24
    56d4:	90 e0       	ldi	r25, 0x00	; 0
    56d6:	9c 01       	movw	r18, r24
    56d8:	21 50       	subi	r18, 0x01	; 1
    56da:	30 40       	sbci	r19, 0x00	; 0
    56dc:	ce 01       	movw	r24, r28
    56de:	02 96       	adiw	r24, 0x02	; 2
    56e0:	fc 01       	movw	r30, r24
    56e2:	e2 0f       	add	r30, r18
    56e4:	f3 1f       	adc	r31, r19
    56e6:	90 81       	ld	r25, Z
    56e8:	8d 81       	ldd	r24, Y+5	; 0x05
    56ea:	89 0f       	add	r24, r25
    56ec:	81 50       	subi	r24, 0x01	; 1
    56ee:	0e 94 c4 29 	call	0x5388	; 0x5388 <LCD_enuSendCommand>

	return Local_enuErrorState;
    56f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    56f4:	0f 90       	pop	r0
    56f6:	0f 90       	pop	r0
    56f8:	0f 90       	pop	r0
    56fa:	0f 90       	pop	r0
    56fc:	0f 90       	pop	r0
    56fe:	cf 91       	pop	r28
    5700:	df 91       	pop	r29
    5702:	08 95       	ret

00005704 <LCD_voidLatch>:
static void LCD_voidLatch(u8 Copy_u8Data)
{
    5704:	df 93       	push	r29
    5706:	cf 93       	push	r28
    5708:	cd b7       	in	r28, 0x3d	; 61
    570a:	de b7       	in	r29, 0x3e	; 62
    570c:	6d 97       	sbiw	r28, 0x1d	; 29
    570e:	0f b6       	in	r0, 0x3f	; 63
    5710:	f8 94       	cli
    5712:	de bf       	out	0x3e, r29	; 62
    5714:	0f be       	out	0x3f, r0	; 63
    5716:	cd bf       	out	0x3d, r28	; 61
    5718:	8d 8f       	std	Y+29, r24	; 0x1d

	// Set RW as write operation, EN is Low
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    571a:	80 e0       	ldi	r24, 0x00	; 0
    571c:	61 e0       	ldi	r22, 0x01	; 1
    571e:	40 e0       	ldi	r20, 0x00	; 0
    5720:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
	//DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
	// Write Command or Data
	DIO_enuSetPinValue(D7_PORT, D7_PIN, ((Copy_u8Data >> 7) & 1));
    5724:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5726:	98 2f       	mov	r25, r24
    5728:	99 1f       	adc	r25, r25
    572a:	99 27       	eor	r25, r25
    572c:	99 1f       	adc	r25, r25
    572e:	81 e0       	ldi	r24, 0x01	; 1
    5730:	67 e0       	ldi	r22, 0x07	; 7
    5732:	49 2f       	mov	r20, r25
    5734:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT, D6_PIN, ((Copy_u8Data >> 6) & 1));
    5738:	8d 8d       	ldd	r24, Y+29	; 0x1d
    573a:	82 95       	swap	r24
    573c:	86 95       	lsr	r24
    573e:	86 95       	lsr	r24
    5740:	83 70       	andi	r24, 0x03	; 3
    5742:	98 2f       	mov	r25, r24
    5744:	91 70       	andi	r25, 0x01	; 1
    5746:	81 e0       	ldi	r24, 0x01	; 1
    5748:	66 e0       	ldi	r22, 0x06	; 6
    574a:	49 2f       	mov	r20, r25
    574c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT, D5_PIN, ((Copy_u8Data >> 5) & 1));
    5750:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5752:	82 95       	swap	r24
    5754:	86 95       	lsr	r24
    5756:	87 70       	andi	r24, 0x07	; 7
    5758:	98 2f       	mov	r25, r24
    575a:	91 70       	andi	r25, 0x01	; 1
    575c:	81 e0       	ldi	r24, 0x01	; 1
    575e:	65 e0       	ldi	r22, 0x05	; 5
    5760:	49 2f       	mov	r20, r25
    5762:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT, D4_PIN, ((Copy_u8Data >> 4) & 1));
    5766:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5768:	82 95       	swap	r24
    576a:	8f 70       	andi	r24, 0x0F	; 15
    576c:	98 2f       	mov	r25, r24
    576e:	91 70       	andi	r25, 0x01	; 1
    5770:	81 e0       	ldi	r24, 0x01	; 1
    5772:	64 e0       	ldi	r22, 0x04	; 4
    5774:	49 2f       	mov	r20, r25
    5776:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
	#if LCD_MODE == EIGHT_BIT
		DIO_enuSetPinValue(D3_PORT, D3_PIN, ((Copy_u8Data >> 3) & 1));
    577a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    577c:	86 95       	lsr	r24
    577e:	86 95       	lsr	r24
    5780:	86 95       	lsr	r24
    5782:	98 2f       	mov	r25, r24
    5784:	91 70       	andi	r25, 0x01	; 1
    5786:	82 e0       	ldi	r24, 0x02	; 2
    5788:	63 e0       	ldi	r22, 0x03	; 3
    578a:	49 2f       	mov	r20, r25
    578c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D2_PORT, D2_PIN, ((Copy_u8Data >> 2) & 1));
    5790:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5792:	86 95       	lsr	r24
    5794:	86 95       	lsr	r24
    5796:	98 2f       	mov	r25, r24
    5798:	91 70       	andi	r25, 0x01	; 1
    579a:	82 e0       	ldi	r24, 0x02	; 2
    579c:	62 e0       	ldi	r22, 0x02	; 2
    579e:	49 2f       	mov	r20, r25
    57a0:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D1_PORT, D1_PIN, ((Copy_u8Data >> 1) & 1));
    57a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    57a6:	86 95       	lsr	r24
    57a8:	98 2f       	mov	r25, r24
    57aa:	91 70       	andi	r25, 0x01	; 1
    57ac:	82 e0       	ldi	r24, 0x02	; 2
    57ae:	61 e0       	ldi	r22, 0x01	; 1
    57b0:	49 2f       	mov	r20, r25
    57b2:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D0_PORT, D0_PIN, ((Copy_u8Data >> 0) & 1));
    57b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    57b8:	98 2f       	mov	r25, r24
    57ba:	91 70       	andi	r25, 0x01	; 1
    57bc:	82 e0       	ldi	r24, 0x02	; 2
    57be:	60 e0       	ldi	r22, 0x00	; 0
    57c0:	49 2f       	mov	r20, r25
    57c2:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT, D6_PIN, ((Copy_u8Data >> 2) & 1));
		DIO_enuSetPinValue(D5_PORT, D5_PIN, ((Copy_u8Data >> 1) & 1));
		DIO_enuSetPinValue(D4_PORT, D4_PIN, ((Copy_u8Data >> 0) & 1));
	#endif
	//Enable Latch "EN is High" because latch happen in rising edge
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8HIGH);
    57c6:	80 e0       	ldi	r24, 0x00	; 0
    57c8:	62 e0       	ldi	r22, 0x02	; 2
    57ca:	41 e0       	ldi	r20, 0x01	; 1
    57cc:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    57d0:	80 e0       	ldi	r24, 0x00	; 0
    57d2:	90 e0       	ldi	r25, 0x00	; 0
    57d4:	a0 e2       	ldi	r26, 0x20	; 32
    57d6:	b1 e4       	ldi	r27, 0x41	; 65
    57d8:	89 8f       	std	Y+25, r24	; 0x19
    57da:	9a 8f       	std	Y+26, r25	; 0x1a
    57dc:	ab 8f       	std	Y+27, r26	; 0x1b
    57de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57e0:	69 8d       	ldd	r22, Y+25	; 0x19
    57e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    57e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    57e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    57e8:	20 e0       	ldi	r18, 0x00	; 0
    57ea:	30 e0       	ldi	r19, 0x00	; 0
    57ec:	4a e7       	ldi	r20, 0x7A	; 122
    57ee:	53 e4       	ldi	r21, 0x43	; 67
    57f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57f4:	dc 01       	movw	r26, r24
    57f6:	cb 01       	movw	r24, r22
    57f8:	8d 8b       	std	Y+21, r24	; 0x15
    57fa:	9e 8b       	std	Y+22, r25	; 0x16
    57fc:	af 8b       	std	Y+23, r26	; 0x17
    57fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5800:	6d 89       	ldd	r22, Y+21	; 0x15
    5802:	7e 89       	ldd	r23, Y+22	; 0x16
    5804:	8f 89       	ldd	r24, Y+23	; 0x17
    5806:	98 8d       	ldd	r25, Y+24	; 0x18
    5808:	20 e0       	ldi	r18, 0x00	; 0
    580a:	30 e0       	ldi	r19, 0x00	; 0
    580c:	40 e8       	ldi	r20, 0x80	; 128
    580e:	5f e3       	ldi	r21, 0x3F	; 63
    5810:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5814:	88 23       	and	r24, r24
    5816:	2c f4       	brge	.+10     	; 0x5822 <LCD_voidLatch+0x11e>
		__ticks = 1;
    5818:	81 e0       	ldi	r24, 0x01	; 1
    581a:	90 e0       	ldi	r25, 0x00	; 0
    581c:	9c 8b       	std	Y+20, r25	; 0x14
    581e:	8b 8b       	std	Y+19, r24	; 0x13
    5820:	3f c0       	rjmp	.+126    	; 0x58a0 <LCD_voidLatch+0x19c>
	else if (__tmp > 65535)
    5822:	6d 89       	ldd	r22, Y+21	; 0x15
    5824:	7e 89       	ldd	r23, Y+22	; 0x16
    5826:	8f 89       	ldd	r24, Y+23	; 0x17
    5828:	98 8d       	ldd	r25, Y+24	; 0x18
    582a:	20 e0       	ldi	r18, 0x00	; 0
    582c:	3f ef       	ldi	r19, 0xFF	; 255
    582e:	4f e7       	ldi	r20, 0x7F	; 127
    5830:	57 e4       	ldi	r21, 0x47	; 71
    5832:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5836:	18 16       	cp	r1, r24
    5838:	4c f5       	brge	.+82     	; 0x588c <LCD_voidLatch+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    583a:	69 8d       	ldd	r22, Y+25	; 0x19
    583c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    583e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5840:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5842:	20 e0       	ldi	r18, 0x00	; 0
    5844:	30 e0       	ldi	r19, 0x00	; 0
    5846:	40 e2       	ldi	r20, 0x20	; 32
    5848:	51 e4       	ldi	r21, 0x41	; 65
    584a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    584e:	dc 01       	movw	r26, r24
    5850:	cb 01       	movw	r24, r22
    5852:	bc 01       	movw	r22, r24
    5854:	cd 01       	movw	r24, r26
    5856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    585a:	dc 01       	movw	r26, r24
    585c:	cb 01       	movw	r24, r22
    585e:	9c 8b       	std	Y+20, r25	; 0x14
    5860:	8b 8b       	std	Y+19, r24	; 0x13
    5862:	0f c0       	rjmp	.+30     	; 0x5882 <LCD_voidLatch+0x17e>
    5864:	89 e1       	ldi	r24, 0x19	; 25
    5866:	90 e0       	ldi	r25, 0x00	; 0
    5868:	9a 8b       	std	Y+18, r25	; 0x12
    586a:	89 8b       	std	Y+17, r24	; 0x11
    586c:	89 89       	ldd	r24, Y+17	; 0x11
    586e:	9a 89       	ldd	r25, Y+18	; 0x12
    5870:	01 97       	sbiw	r24, 0x01	; 1
    5872:	f1 f7       	brne	.-4      	; 0x5870 <LCD_voidLatch+0x16c>
    5874:	9a 8b       	std	Y+18, r25	; 0x12
    5876:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5878:	8b 89       	ldd	r24, Y+19	; 0x13
    587a:	9c 89       	ldd	r25, Y+20	; 0x14
    587c:	01 97       	sbiw	r24, 0x01	; 1
    587e:	9c 8b       	std	Y+20, r25	; 0x14
    5880:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5882:	8b 89       	ldd	r24, Y+19	; 0x13
    5884:	9c 89       	ldd	r25, Y+20	; 0x14
    5886:	00 97       	sbiw	r24, 0x00	; 0
    5888:	69 f7       	brne	.-38     	; 0x5864 <LCD_voidLatch+0x160>
    588a:	14 c0       	rjmp	.+40     	; 0x58b4 <LCD_voidLatch+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    588c:	6d 89       	ldd	r22, Y+21	; 0x15
    588e:	7e 89       	ldd	r23, Y+22	; 0x16
    5890:	8f 89       	ldd	r24, Y+23	; 0x17
    5892:	98 8d       	ldd	r25, Y+24	; 0x18
    5894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5898:	dc 01       	movw	r26, r24
    589a:	cb 01       	movw	r24, r22
    589c:	9c 8b       	std	Y+20, r25	; 0x14
    589e:	8b 8b       	std	Y+19, r24	; 0x13
    58a0:	8b 89       	ldd	r24, Y+19	; 0x13
    58a2:	9c 89       	ldd	r25, Y+20	; 0x14
    58a4:	98 8b       	std	Y+16, r25	; 0x10
    58a6:	8f 87       	std	Y+15, r24	; 0x0f
    58a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    58aa:	98 89       	ldd	r25, Y+16	; 0x10
    58ac:	01 97       	sbiw	r24, 0x01	; 1
    58ae:	f1 f7       	brne	.-4      	; 0x58ac <LCD_voidLatch+0x1a8>
    58b0:	98 8b       	std	Y+16, r25	; 0x10
    58b2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10); // Garbage Number
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    58b4:	80 e0       	ldi	r24, 0x00	; 0
    58b6:	62 e0       	ldi	r22, 0x02	; 2
    58b8:	40 e0       	ldi	r20, 0x00	; 0
    58ba:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    58be:	80 e0       	ldi	r24, 0x00	; 0
    58c0:	90 e0       	ldi	r25, 0x00	; 0
    58c2:	a0 e2       	ldi	r26, 0x20	; 32
    58c4:	b1 e4       	ldi	r27, 0x41	; 65
    58c6:	8b 87       	std	Y+11, r24	; 0x0b
    58c8:	9c 87       	std	Y+12, r25	; 0x0c
    58ca:	ad 87       	std	Y+13, r26	; 0x0d
    58cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    58d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    58d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    58d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    58d6:	20 e0       	ldi	r18, 0x00	; 0
    58d8:	30 e0       	ldi	r19, 0x00	; 0
    58da:	4a e7       	ldi	r20, 0x7A	; 122
    58dc:	53 e4       	ldi	r21, 0x43	; 67
    58de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58e2:	dc 01       	movw	r26, r24
    58e4:	cb 01       	movw	r24, r22
    58e6:	8f 83       	std	Y+7, r24	; 0x07
    58e8:	98 87       	std	Y+8, r25	; 0x08
    58ea:	a9 87       	std	Y+9, r26	; 0x09
    58ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    58ee:	6f 81       	ldd	r22, Y+7	; 0x07
    58f0:	78 85       	ldd	r23, Y+8	; 0x08
    58f2:	89 85       	ldd	r24, Y+9	; 0x09
    58f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    58f6:	20 e0       	ldi	r18, 0x00	; 0
    58f8:	30 e0       	ldi	r19, 0x00	; 0
    58fa:	40 e8       	ldi	r20, 0x80	; 128
    58fc:	5f e3       	ldi	r21, 0x3F	; 63
    58fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5902:	88 23       	and	r24, r24
    5904:	2c f4       	brge	.+10     	; 0x5910 <LCD_voidLatch+0x20c>
		__ticks = 1;
    5906:	81 e0       	ldi	r24, 0x01	; 1
    5908:	90 e0       	ldi	r25, 0x00	; 0
    590a:	9e 83       	std	Y+6, r25	; 0x06
    590c:	8d 83       	std	Y+5, r24	; 0x05
    590e:	3f c0       	rjmp	.+126    	; 0x598e <LCD_voidLatch+0x28a>
	else if (__tmp > 65535)
    5910:	6f 81       	ldd	r22, Y+7	; 0x07
    5912:	78 85       	ldd	r23, Y+8	; 0x08
    5914:	89 85       	ldd	r24, Y+9	; 0x09
    5916:	9a 85       	ldd	r25, Y+10	; 0x0a
    5918:	20 e0       	ldi	r18, 0x00	; 0
    591a:	3f ef       	ldi	r19, 0xFF	; 255
    591c:	4f e7       	ldi	r20, 0x7F	; 127
    591e:	57 e4       	ldi	r21, 0x47	; 71
    5920:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5924:	18 16       	cp	r1, r24
    5926:	4c f5       	brge	.+82     	; 0x597a <LCD_voidLatch+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5928:	6b 85       	ldd	r22, Y+11	; 0x0b
    592a:	7c 85       	ldd	r23, Y+12	; 0x0c
    592c:	8d 85       	ldd	r24, Y+13	; 0x0d
    592e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5930:	20 e0       	ldi	r18, 0x00	; 0
    5932:	30 e0       	ldi	r19, 0x00	; 0
    5934:	40 e2       	ldi	r20, 0x20	; 32
    5936:	51 e4       	ldi	r21, 0x41	; 65
    5938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    593c:	dc 01       	movw	r26, r24
    593e:	cb 01       	movw	r24, r22
    5940:	bc 01       	movw	r22, r24
    5942:	cd 01       	movw	r24, r26
    5944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5948:	dc 01       	movw	r26, r24
    594a:	cb 01       	movw	r24, r22
    594c:	9e 83       	std	Y+6, r25	; 0x06
    594e:	8d 83       	std	Y+5, r24	; 0x05
    5950:	0f c0       	rjmp	.+30     	; 0x5970 <LCD_voidLatch+0x26c>
    5952:	89 e1       	ldi	r24, 0x19	; 25
    5954:	90 e0       	ldi	r25, 0x00	; 0
    5956:	9c 83       	std	Y+4, r25	; 0x04
    5958:	8b 83       	std	Y+3, r24	; 0x03
    595a:	8b 81       	ldd	r24, Y+3	; 0x03
    595c:	9c 81       	ldd	r25, Y+4	; 0x04
    595e:	01 97       	sbiw	r24, 0x01	; 1
    5960:	f1 f7       	brne	.-4      	; 0x595e <LCD_voidLatch+0x25a>
    5962:	9c 83       	std	Y+4, r25	; 0x04
    5964:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5966:	8d 81       	ldd	r24, Y+5	; 0x05
    5968:	9e 81       	ldd	r25, Y+6	; 0x06
    596a:	01 97       	sbiw	r24, 0x01	; 1
    596c:	9e 83       	std	Y+6, r25	; 0x06
    596e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5970:	8d 81       	ldd	r24, Y+5	; 0x05
    5972:	9e 81       	ldd	r25, Y+6	; 0x06
    5974:	00 97       	sbiw	r24, 0x00	; 0
    5976:	69 f7       	brne	.-38     	; 0x5952 <LCD_voidLatch+0x24e>
    5978:	14 c0       	rjmp	.+40     	; 0x59a2 <LCD_voidLatch+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    597a:	6f 81       	ldd	r22, Y+7	; 0x07
    597c:	78 85       	ldd	r23, Y+8	; 0x08
    597e:	89 85       	ldd	r24, Y+9	; 0x09
    5980:	9a 85       	ldd	r25, Y+10	; 0x0a
    5982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5986:	dc 01       	movw	r26, r24
    5988:	cb 01       	movw	r24, r22
    598a:	9e 83       	std	Y+6, r25	; 0x06
    598c:	8d 83       	std	Y+5, r24	; 0x05
    598e:	8d 81       	ldd	r24, Y+5	; 0x05
    5990:	9e 81       	ldd	r25, Y+6	; 0x06
    5992:	9a 83       	std	Y+2, r25	; 0x02
    5994:	89 83       	std	Y+1, r24	; 0x01
    5996:	89 81       	ldd	r24, Y+1	; 0x01
    5998:	9a 81       	ldd	r25, Y+2	; 0x02
    599a:	01 97       	sbiw	r24, 0x01	; 1
    599c:	f1 f7       	brne	.-4      	; 0x599a <LCD_voidLatch+0x296>
    599e:	9a 83       	std	Y+2, r25	; 0x02
    59a0:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(10); //For speed difference between MC and LCD.

}
    59a2:	6d 96       	adiw	r28, 0x1d	; 29
    59a4:	0f b6       	in	r0, 0x3f	; 63
    59a6:	f8 94       	cli
    59a8:	de bf       	out	0x3e, r29	; 62
    59aa:	0f be       	out	0x3f, r0	; 63
    59ac:	cd bf       	out	0x3d, r28	; 61
    59ae:	cf 91       	pop	r28
    59b0:	df 91       	pop	r29
    59b2:	08 95       	ret

000059b4 <LCD_invoidSendCommand>:
static inline void LCD_invoidSendCommand(u8 Copy_u8Command)
{
    59b4:	df 93       	push	r29
    59b6:	cf 93       	push	r28
    59b8:	cd b7       	in	r28, 0x3d	; 61
    59ba:	de b7       	in	r29, 0x3e	; 62
    59bc:	6d 97       	sbiw	r28, 0x1d	; 29
    59be:	0f b6       	in	r0, 0x3f	; 63
    59c0:	f8 94       	cli
    59c2:	de bf       	out	0x3e, r29	; 62
    59c4:	0f be       	out	0x3f, r0	; 63
    59c6:	cd bf       	out	0x3d, r28	; 61
    59c8:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Set RS as Command, EN is Low */
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    59ca:	80 e0       	ldi	r24, 0x00	; 0
    59cc:	60 e0       	ldi	r22, 0x00	; 0
    59ce:	40 e0       	ldi	r20, 0x00	; 0
    59d0:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    59d4:	80 e0       	ldi	r24, 0x00	; 0
    59d6:	62 e0       	ldi	r22, 0x02	; 2
    59d8:	40 e0       	ldi	r20, 0x00	; 0
    59da:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>

	if(Copy_u8Command == 0x28)
    59de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    59e0:	88 32       	cpi	r24, 0x28	; 40
    59e2:	09 f0       	breq	.+2      	; 0x59e6 <LCD_invoidSendCommand+0x32>
    59e4:	19 c1       	rjmp	.+562    	; 0x5c18 <LCD_invoidSendCommand+0x264>
	{
		DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command >> 7) & 1));
    59e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    59e8:	98 2f       	mov	r25, r24
    59ea:	99 1f       	adc	r25, r25
    59ec:	99 27       	eor	r25, r25
    59ee:	99 1f       	adc	r25, r25
    59f0:	81 e0       	ldi	r24, 0x01	; 1
    59f2:	67 e0       	ldi	r22, 0x07	; 7
    59f4:	49 2f       	mov	r20, r25
    59f6:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command >> 6) & 1));
    59fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    59fc:	82 95       	swap	r24
    59fe:	86 95       	lsr	r24
    5a00:	86 95       	lsr	r24
    5a02:	83 70       	andi	r24, 0x03	; 3
    5a04:	98 2f       	mov	r25, r24
    5a06:	91 70       	andi	r25, 0x01	; 1
    5a08:	81 e0       	ldi	r24, 0x01	; 1
    5a0a:	66 e0       	ldi	r22, 0x06	; 6
    5a0c:	49 2f       	mov	r20, r25
    5a0e:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command >> 5) & 1));
    5a12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5a14:	82 95       	swap	r24
    5a16:	86 95       	lsr	r24
    5a18:	87 70       	andi	r24, 0x07	; 7
    5a1a:	98 2f       	mov	r25, r24
    5a1c:	91 70       	andi	r25, 0x01	; 1
    5a1e:	81 e0       	ldi	r24, 0x01	; 1
    5a20:	65 e0       	ldi	r22, 0x05	; 5
    5a22:	49 2f       	mov	r20, r25
    5a24:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command >> 4) & 1));
    5a28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5a2a:	82 95       	swap	r24
    5a2c:	8f 70       	andi	r24, 0x0F	; 15
    5a2e:	98 2f       	mov	r25, r24
    5a30:	91 70       	andi	r25, 0x01	; 1
    5a32:	81 e0       	ldi	r24, 0x01	; 1
    5a34:	64 e0       	ldi	r22, 0x04	; 4
    5a36:	49 2f       	mov	r20, r25
    5a38:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>

		// Enable Latch "EN is High" because latch happen in rising edge
		DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8HIGH);
    5a3c:	80 e0       	ldi	r24, 0x00	; 0
    5a3e:	62 e0       	ldi	r22, 0x02	; 2
    5a40:	41 e0       	ldi	r20, 0x01	; 1
    5a42:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    5a46:	80 e0       	ldi	r24, 0x00	; 0
    5a48:	90 e0       	ldi	r25, 0x00	; 0
    5a4a:	a0 e2       	ldi	r26, 0x20	; 32
    5a4c:	b1 e4       	ldi	r27, 0x41	; 65
    5a4e:	89 8f       	std	Y+25, r24	; 0x19
    5a50:	9a 8f       	std	Y+26, r25	; 0x1a
    5a52:	ab 8f       	std	Y+27, r26	; 0x1b
    5a54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a56:	69 8d       	ldd	r22, Y+25	; 0x19
    5a58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5a5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a5e:	20 e0       	ldi	r18, 0x00	; 0
    5a60:	30 e0       	ldi	r19, 0x00	; 0
    5a62:	4a e7       	ldi	r20, 0x7A	; 122
    5a64:	53 e4       	ldi	r21, 0x43	; 67
    5a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a6a:	dc 01       	movw	r26, r24
    5a6c:	cb 01       	movw	r24, r22
    5a6e:	8d 8b       	std	Y+21, r24	; 0x15
    5a70:	9e 8b       	std	Y+22, r25	; 0x16
    5a72:	af 8b       	std	Y+23, r26	; 0x17
    5a74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5a76:	6d 89       	ldd	r22, Y+21	; 0x15
    5a78:	7e 89       	ldd	r23, Y+22	; 0x16
    5a7a:	8f 89       	ldd	r24, Y+23	; 0x17
    5a7c:	98 8d       	ldd	r25, Y+24	; 0x18
    5a7e:	20 e0       	ldi	r18, 0x00	; 0
    5a80:	30 e0       	ldi	r19, 0x00	; 0
    5a82:	40 e8       	ldi	r20, 0x80	; 128
    5a84:	5f e3       	ldi	r21, 0x3F	; 63
    5a86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5a8a:	88 23       	and	r24, r24
    5a8c:	2c f4       	brge	.+10     	; 0x5a98 <LCD_invoidSendCommand+0xe4>
		__ticks = 1;
    5a8e:	81 e0       	ldi	r24, 0x01	; 1
    5a90:	90 e0       	ldi	r25, 0x00	; 0
    5a92:	9c 8b       	std	Y+20, r25	; 0x14
    5a94:	8b 8b       	std	Y+19, r24	; 0x13
    5a96:	3f c0       	rjmp	.+126    	; 0x5b16 <LCD_invoidSendCommand+0x162>
	else if (__tmp > 65535)
    5a98:	6d 89       	ldd	r22, Y+21	; 0x15
    5a9a:	7e 89       	ldd	r23, Y+22	; 0x16
    5a9c:	8f 89       	ldd	r24, Y+23	; 0x17
    5a9e:	98 8d       	ldd	r25, Y+24	; 0x18
    5aa0:	20 e0       	ldi	r18, 0x00	; 0
    5aa2:	3f ef       	ldi	r19, 0xFF	; 255
    5aa4:	4f e7       	ldi	r20, 0x7F	; 127
    5aa6:	57 e4       	ldi	r21, 0x47	; 71
    5aa8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5aac:	18 16       	cp	r1, r24
    5aae:	4c f5       	brge	.+82     	; 0x5b02 <LCD_invoidSendCommand+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ab0:	69 8d       	ldd	r22, Y+25	; 0x19
    5ab2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5ab4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5ab6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5ab8:	20 e0       	ldi	r18, 0x00	; 0
    5aba:	30 e0       	ldi	r19, 0x00	; 0
    5abc:	40 e2       	ldi	r20, 0x20	; 32
    5abe:	51 e4       	ldi	r21, 0x41	; 65
    5ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ac4:	dc 01       	movw	r26, r24
    5ac6:	cb 01       	movw	r24, r22
    5ac8:	bc 01       	movw	r22, r24
    5aca:	cd 01       	movw	r24, r26
    5acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ad0:	dc 01       	movw	r26, r24
    5ad2:	cb 01       	movw	r24, r22
    5ad4:	9c 8b       	std	Y+20, r25	; 0x14
    5ad6:	8b 8b       	std	Y+19, r24	; 0x13
    5ad8:	0f c0       	rjmp	.+30     	; 0x5af8 <LCD_invoidSendCommand+0x144>
    5ada:	89 e1       	ldi	r24, 0x19	; 25
    5adc:	90 e0       	ldi	r25, 0x00	; 0
    5ade:	9a 8b       	std	Y+18, r25	; 0x12
    5ae0:	89 8b       	std	Y+17, r24	; 0x11
    5ae2:	89 89       	ldd	r24, Y+17	; 0x11
    5ae4:	9a 89       	ldd	r25, Y+18	; 0x12
    5ae6:	01 97       	sbiw	r24, 0x01	; 1
    5ae8:	f1 f7       	brne	.-4      	; 0x5ae6 <LCD_invoidSendCommand+0x132>
    5aea:	9a 8b       	std	Y+18, r25	; 0x12
    5aec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5aee:	8b 89       	ldd	r24, Y+19	; 0x13
    5af0:	9c 89       	ldd	r25, Y+20	; 0x14
    5af2:	01 97       	sbiw	r24, 0x01	; 1
    5af4:	9c 8b       	std	Y+20, r25	; 0x14
    5af6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5af8:	8b 89       	ldd	r24, Y+19	; 0x13
    5afa:	9c 89       	ldd	r25, Y+20	; 0x14
    5afc:	00 97       	sbiw	r24, 0x00	; 0
    5afe:	69 f7       	brne	.-38     	; 0x5ada <LCD_invoidSendCommand+0x126>
    5b00:	14 c0       	rjmp	.+40     	; 0x5b2a <LCD_invoidSendCommand+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b02:	6d 89       	ldd	r22, Y+21	; 0x15
    5b04:	7e 89       	ldd	r23, Y+22	; 0x16
    5b06:	8f 89       	ldd	r24, Y+23	; 0x17
    5b08:	98 8d       	ldd	r25, Y+24	; 0x18
    5b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b0e:	dc 01       	movw	r26, r24
    5b10:	cb 01       	movw	r24, r22
    5b12:	9c 8b       	std	Y+20, r25	; 0x14
    5b14:	8b 8b       	std	Y+19, r24	; 0x13
    5b16:	8b 89       	ldd	r24, Y+19	; 0x13
    5b18:	9c 89       	ldd	r25, Y+20	; 0x14
    5b1a:	98 8b       	std	Y+16, r25	; 0x10
    5b1c:	8f 87       	std	Y+15, r24	; 0x0f
    5b1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5b20:	98 89       	ldd	r25, Y+16	; 0x10
    5b22:	01 97       	sbiw	r24, 0x01	; 1
    5b24:	f1 f7       	brne	.-4      	; 0x5b22 <LCD_invoidSendCommand+0x16e>
    5b26:	98 8b       	std	Y+16, r25	; 0x10
    5b28:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10); // Garbage Number
		DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    5b2a:	80 e0       	ldi	r24, 0x00	; 0
    5b2c:	62 e0       	ldi	r22, 0x02	; 2
    5b2e:	40 e0       	ldi	r20, 0x00	; 0
    5b30:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    5b34:	80 e0       	ldi	r24, 0x00	; 0
    5b36:	90 e0       	ldi	r25, 0x00	; 0
    5b38:	a8 e4       	ldi	r26, 0x48	; 72
    5b3a:	b2 e4       	ldi	r27, 0x42	; 66
    5b3c:	8b 87       	std	Y+11, r24	; 0x0b
    5b3e:	9c 87       	std	Y+12, r25	; 0x0c
    5b40:	ad 87       	std	Y+13, r26	; 0x0d
    5b42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b44:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b46:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b48:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b4c:	20 e0       	ldi	r18, 0x00	; 0
    5b4e:	30 e0       	ldi	r19, 0x00	; 0
    5b50:	4a e7       	ldi	r20, 0x7A	; 122
    5b52:	53 e4       	ldi	r21, 0x43	; 67
    5b54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b58:	dc 01       	movw	r26, r24
    5b5a:	cb 01       	movw	r24, r22
    5b5c:	8f 83       	std	Y+7, r24	; 0x07
    5b5e:	98 87       	std	Y+8, r25	; 0x08
    5b60:	a9 87       	std	Y+9, r26	; 0x09
    5b62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5b64:	6f 81       	ldd	r22, Y+7	; 0x07
    5b66:	78 85       	ldd	r23, Y+8	; 0x08
    5b68:	89 85       	ldd	r24, Y+9	; 0x09
    5b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b6c:	20 e0       	ldi	r18, 0x00	; 0
    5b6e:	30 e0       	ldi	r19, 0x00	; 0
    5b70:	40 e8       	ldi	r20, 0x80	; 128
    5b72:	5f e3       	ldi	r21, 0x3F	; 63
    5b74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b78:	88 23       	and	r24, r24
    5b7a:	2c f4       	brge	.+10     	; 0x5b86 <LCD_invoidSendCommand+0x1d2>
		__ticks = 1;
    5b7c:	81 e0       	ldi	r24, 0x01	; 1
    5b7e:	90 e0       	ldi	r25, 0x00	; 0
    5b80:	9e 83       	std	Y+6, r25	; 0x06
    5b82:	8d 83       	std	Y+5, r24	; 0x05
    5b84:	3f c0       	rjmp	.+126    	; 0x5c04 <LCD_invoidSendCommand+0x250>
	else if (__tmp > 65535)
    5b86:	6f 81       	ldd	r22, Y+7	; 0x07
    5b88:	78 85       	ldd	r23, Y+8	; 0x08
    5b8a:	89 85       	ldd	r24, Y+9	; 0x09
    5b8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b8e:	20 e0       	ldi	r18, 0x00	; 0
    5b90:	3f ef       	ldi	r19, 0xFF	; 255
    5b92:	4f e7       	ldi	r20, 0x7F	; 127
    5b94:	57 e4       	ldi	r21, 0x47	; 71
    5b96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b9a:	18 16       	cp	r1, r24
    5b9c:	4c f5       	brge	.+82     	; 0x5bf0 <LCD_invoidSendCommand+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ba0:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ba2:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ba4:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ba6:	20 e0       	ldi	r18, 0x00	; 0
    5ba8:	30 e0       	ldi	r19, 0x00	; 0
    5baa:	40 e2       	ldi	r20, 0x20	; 32
    5bac:	51 e4       	ldi	r21, 0x41	; 65
    5bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bb2:	dc 01       	movw	r26, r24
    5bb4:	cb 01       	movw	r24, r22
    5bb6:	bc 01       	movw	r22, r24
    5bb8:	cd 01       	movw	r24, r26
    5bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bbe:	dc 01       	movw	r26, r24
    5bc0:	cb 01       	movw	r24, r22
    5bc2:	9e 83       	std	Y+6, r25	; 0x06
    5bc4:	8d 83       	std	Y+5, r24	; 0x05
    5bc6:	0f c0       	rjmp	.+30     	; 0x5be6 <LCD_invoidSendCommand+0x232>
    5bc8:	89 e1       	ldi	r24, 0x19	; 25
    5bca:	90 e0       	ldi	r25, 0x00	; 0
    5bcc:	9c 83       	std	Y+4, r25	; 0x04
    5bce:	8b 83       	std	Y+3, r24	; 0x03
    5bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    5bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    5bd4:	01 97       	sbiw	r24, 0x01	; 1
    5bd6:	f1 f7       	brne	.-4      	; 0x5bd4 <LCD_invoidSendCommand+0x220>
    5bd8:	9c 83       	std	Y+4, r25	; 0x04
    5bda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    5bde:	9e 81       	ldd	r25, Y+6	; 0x06
    5be0:	01 97       	sbiw	r24, 0x01	; 1
    5be2:	9e 83       	std	Y+6, r25	; 0x06
    5be4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5be6:	8d 81       	ldd	r24, Y+5	; 0x05
    5be8:	9e 81       	ldd	r25, Y+6	; 0x06
    5bea:	00 97       	sbiw	r24, 0x00	; 0
    5bec:	69 f7       	brne	.-38     	; 0x5bc8 <LCD_invoidSendCommand+0x214>
    5bee:	14 c0       	rjmp	.+40     	; 0x5c18 <LCD_invoidSendCommand+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bf0:	6f 81       	ldd	r22, Y+7	; 0x07
    5bf2:	78 85       	ldd	r23, Y+8	; 0x08
    5bf4:	89 85       	ldd	r24, Y+9	; 0x09
    5bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bfc:	dc 01       	movw	r26, r24
    5bfe:	cb 01       	movw	r24, r22
    5c00:	9e 83       	std	Y+6, r25	; 0x06
    5c02:	8d 83       	std	Y+5, r24	; 0x05
    5c04:	8d 81       	ldd	r24, Y+5	; 0x05
    5c06:	9e 81       	ldd	r25, Y+6	; 0x06
    5c08:	9a 83       	std	Y+2, r25	; 0x02
    5c0a:	89 83       	std	Y+1, r24	; 0x01
    5c0c:	89 81       	ldd	r24, Y+1	; 0x01
    5c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    5c10:	01 97       	sbiw	r24, 0x01	; 1
    5c12:	f1 f7       	brne	.-4      	; 0x5c10 <LCD_invoidSendCommand+0x25c>
    5c14:	9a 83       	std	Y+2, r25	; 0x02
    5c16:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(50);
	}

	LCD_voidLatch(Copy_u8Command);
    5c18:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5c1a:	0e 94 82 2b 	call	0x5704	; 0x5704 <LCD_voidLatch>

}
    5c1e:	6d 96       	adiw	r28, 0x1d	; 29
    5c20:	0f b6       	in	r0, 0x3f	; 63
    5c22:	f8 94       	cli
    5c24:	de bf       	out	0x3e, r29	; 62
    5c26:	0f be       	out	0x3f, r0	; 63
    5c28:	cd bf       	out	0x3d, r28	; 61
    5c2a:	cf 91       	pop	r28
    5c2c:	df 91       	pop	r29
    5c2e:	08 95       	ret

00005c30 <KPAD_enuInit>:

#include "Keypad_private.h"
#include "Keypad_config.h"

ES_t KPAD_enuInit(void)
{
    5c30:	df 93       	push	r29
    5c32:	cf 93       	push	r28
    5c34:	cd b7       	in	r28, 0x3d	; 61
    5c36:	de b7       	in	r29, 0x3e	; 62
    5c38:	27 97       	sbiw	r28, 0x07	; 7
    5c3a:	0f b6       	in	r0, 0x3f	; 63
    5c3c:	f8 94       	cli
    5c3e:	de bf       	out	0x3e, r29	; 62
    5c40:	0f be       	out	0x3f, r0	; 63
    5c42:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    5c44:	1e 82       	std	Y+6, r1	; 0x06

	u8 Local_u8Iterator = KPAD_ZERO;
    5c46:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Check = KPAD_ZERO;
    5c48:	19 82       	std	Y+1, r1	; 0x01
    5c4a:	1a 82       	std	Y+2, r1	; 0x02
    5c4c:	1b 82       	std	Y+3, r1	; 0x03
    5c4e:	1c 82       	std	Y+4, r1	; 0x04

	Local_u32Check |= (DIO_enuSetPinDirection(ROW1_PORT, ROW1_PIN, DIO_u8INPUT) << KPAD_SHIFTBIT_ZERO);
    5c50:	80 e0       	ldi	r24, 0x00	; 0
    5c52:	64 e0       	ldi	r22, 0x04	; 4
    5c54:	40 e0       	ldi	r20, 0x00	; 0
    5c56:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    5c5a:	28 2f       	mov	r18, r24
    5c5c:	30 e0       	ldi	r19, 0x00	; 0
    5c5e:	40 e0       	ldi	r20, 0x00	; 0
    5c60:	50 e0       	ldi	r21, 0x00	; 0
    5c62:	89 81       	ldd	r24, Y+1	; 0x01
    5c64:	9a 81       	ldd	r25, Y+2	; 0x02
    5c66:	ab 81       	ldd	r26, Y+3	; 0x03
    5c68:	bc 81       	ldd	r27, Y+4	; 0x04
    5c6a:	82 2b       	or	r24, r18
    5c6c:	93 2b       	or	r25, r19
    5c6e:	a4 2b       	or	r26, r20
    5c70:	b5 2b       	or	r27, r21
    5c72:	89 83       	std	Y+1, r24	; 0x01
    5c74:	9a 83       	std	Y+2, r25	; 0x02
    5c76:	ab 83       	std	Y+3, r26	; 0x03
    5c78:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (DIO_enuSetPinDirection(ROW2_PORT, ROW2_PIN, DIO_u8INPUT) << KPAD_SHIFTBIT_THREE);
    5c7a:	80 e0       	ldi	r24, 0x00	; 0
    5c7c:	65 e0       	ldi	r22, 0x05	; 5
    5c7e:	40 e0       	ldi	r20, 0x00	; 0
    5c80:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    5c84:	88 2f       	mov	r24, r24
    5c86:	90 e0       	ldi	r25, 0x00	; 0
    5c88:	88 0f       	add	r24, r24
    5c8a:	99 1f       	adc	r25, r25
    5c8c:	88 0f       	add	r24, r24
    5c8e:	99 1f       	adc	r25, r25
    5c90:	88 0f       	add	r24, r24
    5c92:	99 1f       	adc	r25, r25
    5c94:	9c 01       	movw	r18, r24
    5c96:	44 27       	eor	r20, r20
    5c98:	37 fd       	sbrc	r19, 7
    5c9a:	40 95       	com	r20
    5c9c:	54 2f       	mov	r21, r20
    5c9e:	89 81       	ldd	r24, Y+1	; 0x01
    5ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    5ca2:	ab 81       	ldd	r26, Y+3	; 0x03
    5ca4:	bc 81       	ldd	r27, Y+4	; 0x04
    5ca6:	82 2b       	or	r24, r18
    5ca8:	93 2b       	or	r25, r19
    5caa:	a4 2b       	or	r26, r20
    5cac:	b5 2b       	or	r27, r21
    5cae:	89 83       	std	Y+1, r24	; 0x01
    5cb0:	9a 83       	std	Y+2, r25	; 0x02
    5cb2:	ab 83       	std	Y+3, r26	; 0x03
    5cb4:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (DIO_enuSetPinDirection(ROW3_PORT, ROW3_PIN, DIO_u8INPUT) << KPAD_SHIFTBIT_SIX);
    5cb6:	80 e0       	ldi	r24, 0x00	; 0
    5cb8:	66 e0       	ldi	r22, 0x06	; 6
    5cba:	40 e0       	ldi	r20, 0x00	; 0
    5cbc:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    5cc0:	88 2f       	mov	r24, r24
    5cc2:	90 e0       	ldi	r25, 0x00	; 0
    5cc4:	00 24       	eor	r0, r0
    5cc6:	96 95       	lsr	r25
    5cc8:	87 95       	ror	r24
    5cca:	07 94       	ror	r0
    5ccc:	96 95       	lsr	r25
    5cce:	87 95       	ror	r24
    5cd0:	07 94       	ror	r0
    5cd2:	98 2f       	mov	r25, r24
    5cd4:	80 2d       	mov	r24, r0
    5cd6:	9c 01       	movw	r18, r24
    5cd8:	44 27       	eor	r20, r20
    5cda:	37 fd       	sbrc	r19, 7
    5cdc:	40 95       	com	r20
    5cde:	54 2f       	mov	r21, r20
    5ce0:	89 81       	ldd	r24, Y+1	; 0x01
    5ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    5ce4:	ab 81       	ldd	r26, Y+3	; 0x03
    5ce6:	bc 81       	ldd	r27, Y+4	; 0x04
    5ce8:	82 2b       	or	r24, r18
    5cea:	93 2b       	or	r25, r19
    5cec:	a4 2b       	or	r26, r20
    5cee:	b5 2b       	or	r27, r21
    5cf0:	89 83       	std	Y+1, r24	; 0x01
    5cf2:	9a 83       	std	Y+2, r25	; 0x02
    5cf4:	ab 83       	std	Y+3, r26	; 0x03
    5cf6:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (DIO_enuSetPinDirection(ROW4_PORT, ROW4_PIN, DIO_u8INPUT) << KPAD_SHIFTBIT_NINE);
    5cf8:	80 e0       	ldi	r24, 0x00	; 0
    5cfa:	67 e0       	ldi	r22, 0x07	; 7
    5cfc:	40 e0       	ldi	r20, 0x00	; 0
    5cfe:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    5d02:	88 2f       	mov	r24, r24
    5d04:	90 e0       	ldi	r25, 0x00	; 0
    5d06:	98 2f       	mov	r25, r24
    5d08:	88 27       	eor	r24, r24
    5d0a:	99 0f       	add	r25, r25
    5d0c:	9c 01       	movw	r18, r24
    5d0e:	44 27       	eor	r20, r20
    5d10:	37 fd       	sbrc	r19, 7
    5d12:	40 95       	com	r20
    5d14:	54 2f       	mov	r21, r20
    5d16:	89 81       	ldd	r24, Y+1	; 0x01
    5d18:	9a 81       	ldd	r25, Y+2	; 0x02
    5d1a:	ab 81       	ldd	r26, Y+3	; 0x03
    5d1c:	bc 81       	ldd	r27, Y+4	; 0x04
    5d1e:	82 2b       	or	r24, r18
    5d20:	93 2b       	or	r25, r19
    5d22:	a4 2b       	or	r26, r20
    5d24:	b5 2b       	or	r27, r21
    5d26:	89 83       	std	Y+1, r24	; 0x01
    5d28:	9a 83       	std	Y+2, r25	; 0x02
    5d2a:	ab 83       	std	Y+3, r26	; 0x03
    5d2c:	bc 83       	std	Y+4, r27	; 0x04

	Local_u32Check |= (DIO_enuSetPinValue(ROW1_PORT, ROW1_PIN, DIO_u8PULL_UP) << KPAD_SHIFTBIT_TWELVE);
    5d2e:	80 e0       	ldi	r24, 0x00	; 0
    5d30:	64 e0       	ldi	r22, 0x04	; 4
    5d32:	41 e0       	ldi	r20, 0x01	; 1
    5d34:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    5d38:	88 2f       	mov	r24, r24
    5d3a:	90 e0       	ldi	r25, 0x00	; 0
    5d3c:	98 2f       	mov	r25, r24
    5d3e:	88 27       	eor	r24, r24
    5d40:	92 95       	swap	r25
    5d42:	90 7f       	andi	r25, 0xF0	; 240
    5d44:	9c 01       	movw	r18, r24
    5d46:	44 27       	eor	r20, r20
    5d48:	37 fd       	sbrc	r19, 7
    5d4a:	40 95       	com	r20
    5d4c:	54 2f       	mov	r21, r20
    5d4e:	89 81       	ldd	r24, Y+1	; 0x01
    5d50:	9a 81       	ldd	r25, Y+2	; 0x02
    5d52:	ab 81       	ldd	r26, Y+3	; 0x03
    5d54:	bc 81       	ldd	r27, Y+4	; 0x04
    5d56:	82 2b       	or	r24, r18
    5d58:	93 2b       	or	r25, r19
    5d5a:	a4 2b       	or	r26, r20
    5d5c:	b5 2b       	or	r27, r21
    5d5e:	89 83       	std	Y+1, r24	; 0x01
    5d60:	9a 83       	std	Y+2, r25	; 0x02
    5d62:	ab 83       	std	Y+3, r26	; 0x03
    5d64:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (((u32)DIO_enuSetPinValue(ROW2_PORT, ROW2_PIN, DIO_u8PULL_UP)) << KPAD_SHIFTBIT_FIFTEEN);
    5d66:	80 e0       	ldi	r24, 0x00	; 0
    5d68:	65 e0       	ldi	r22, 0x05	; 5
    5d6a:	41 e0       	ldi	r20, 0x01	; 1
    5d6c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    5d70:	88 2f       	mov	r24, r24
    5d72:	90 e0       	ldi	r25, 0x00	; 0
    5d74:	a0 e0       	ldi	r26, 0x00	; 0
    5d76:	b0 e0       	ldi	r27, 0x00	; 0
    5d78:	9c 01       	movw	r18, r24
    5d7a:	ad 01       	movw	r20, r26
    5d7c:	01 2e       	mov	r0, r17
    5d7e:	1f e0       	ldi	r17, 0x0F	; 15
    5d80:	22 0f       	add	r18, r18
    5d82:	33 1f       	adc	r19, r19
    5d84:	44 1f       	adc	r20, r20
    5d86:	55 1f       	adc	r21, r21
    5d88:	1a 95       	dec	r17
    5d8a:	d1 f7       	brne	.-12     	; 0x5d80 <KPAD_enuInit+0x150>
    5d8c:	10 2d       	mov	r17, r0
    5d8e:	89 81       	ldd	r24, Y+1	; 0x01
    5d90:	9a 81       	ldd	r25, Y+2	; 0x02
    5d92:	ab 81       	ldd	r26, Y+3	; 0x03
    5d94:	bc 81       	ldd	r27, Y+4	; 0x04
    5d96:	82 2b       	or	r24, r18
    5d98:	93 2b       	or	r25, r19
    5d9a:	a4 2b       	or	r26, r20
    5d9c:	b5 2b       	or	r27, r21
    5d9e:	89 83       	std	Y+1, r24	; 0x01
    5da0:	9a 83       	std	Y+2, r25	; 0x02
    5da2:	ab 83       	std	Y+3, r26	; 0x03
    5da4:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (((u32)DIO_enuSetPinValue(ROW3_PORT, ROW3_PIN, DIO_u8PULL_UP)) << KPAD_SHIFTBIT_EIGHTEEN);
    5da6:	80 e0       	ldi	r24, 0x00	; 0
    5da8:	66 e0       	ldi	r22, 0x06	; 6
    5daa:	41 e0       	ldi	r20, 0x01	; 1
    5dac:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    5db0:	88 2f       	mov	r24, r24
    5db2:	90 e0       	ldi	r25, 0x00	; 0
    5db4:	a0 e0       	ldi	r26, 0x00	; 0
    5db6:	b0 e0       	ldi	r27, 0x00	; 0
    5db8:	9c 01       	movw	r18, r24
    5dba:	ad 01       	movw	r20, r26
    5dbc:	01 2e       	mov	r0, r17
    5dbe:	12 e1       	ldi	r17, 0x12	; 18
    5dc0:	22 0f       	add	r18, r18
    5dc2:	33 1f       	adc	r19, r19
    5dc4:	44 1f       	adc	r20, r20
    5dc6:	55 1f       	adc	r21, r21
    5dc8:	1a 95       	dec	r17
    5dca:	d1 f7       	brne	.-12     	; 0x5dc0 <KPAD_enuInit+0x190>
    5dcc:	10 2d       	mov	r17, r0
    5dce:	89 81       	ldd	r24, Y+1	; 0x01
    5dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    5dd2:	ab 81       	ldd	r26, Y+3	; 0x03
    5dd4:	bc 81       	ldd	r27, Y+4	; 0x04
    5dd6:	82 2b       	or	r24, r18
    5dd8:	93 2b       	or	r25, r19
    5dda:	a4 2b       	or	r26, r20
    5ddc:	b5 2b       	or	r27, r21
    5dde:	89 83       	std	Y+1, r24	; 0x01
    5de0:	9a 83       	std	Y+2, r25	; 0x02
    5de2:	ab 83       	std	Y+3, r26	; 0x03
    5de4:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (((u32)DIO_enuSetPinValue(ROW4_PORT, ROW4_PIN, DIO_u8PULL_UP)) << KPAD_SHIFTBIT_TWENTYONE);
    5de6:	80 e0       	ldi	r24, 0x00	; 0
    5de8:	67 e0       	ldi	r22, 0x07	; 7
    5dea:	41 e0       	ldi	r20, 0x01	; 1
    5dec:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    5df0:	88 2f       	mov	r24, r24
    5df2:	90 e0       	ldi	r25, 0x00	; 0
    5df4:	a0 e0       	ldi	r26, 0x00	; 0
    5df6:	b0 e0       	ldi	r27, 0x00	; 0
    5df8:	9c 01       	movw	r18, r24
    5dfa:	ad 01       	movw	r20, r26
    5dfc:	01 2e       	mov	r0, r17
    5dfe:	15 e1       	ldi	r17, 0x15	; 21
    5e00:	22 0f       	add	r18, r18
    5e02:	33 1f       	adc	r19, r19
    5e04:	44 1f       	adc	r20, r20
    5e06:	55 1f       	adc	r21, r21
    5e08:	1a 95       	dec	r17
    5e0a:	d1 f7       	brne	.-12     	; 0x5e00 <KPAD_enuInit+0x1d0>
    5e0c:	10 2d       	mov	r17, r0
    5e0e:	89 81       	ldd	r24, Y+1	; 0x01
    5e10:	9a 81       	ldd	r25, Y+2	; 0x02
    5e12:	ab 81       	ldd	r26, Y+3	; 0x03
    5e14:	bc 81       	ldd	r27, Y+4	; 0x04
    5e16:	82 2b       	or	r24, r18
    5e18:	93 2b       	or	r25, r19
    5e1a:	a4 2b       	or	r26, r20
    5e1c:	b5 2b       	or	r27, r21
    5e1e:	89 83       	std	Y+1, r24	; 0x01
    5e20:	9a 83       	std	Y+2, r25	; 0x02
    5e22:	ab 83       	std	Y+3, r26	; 0x03
    5e24:	bc 83       	std	Y+4, r27	; 0x04

	for(Local_u8Iterator = KPAD_ZERO; Local_u8Iterator < KPAD_TWENTYFOUR; Local_u8Iterator += KPAD_THREE)
    5e26:	1d 82       	std	Y+5, r1	; 0x05
    5e28:	1e c0       	rjmp	.+60     	; 0x5e66 <KPAD_enuInit+0x236>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & KPAD_SEVEN) != ES_OK)
    5e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    5e2c:	28 2f       	mov	r18, r24
    5e2e:	30 e0       	ldi	r19, 0x00	; 0
    5e30:	89 81       	ldd	r24, Y+1	; 0x01
    5e32:	9a 81       	ldd	r25, Y+2	; 0x02
    5e34:	ab 81       	ldd	r26, Y+3	; 0x03
    5e36:	bc 81       	ldd	r27, Y+4	; 0x04
    5e38:	02 2e       	mov	r0, r18
    5e3a:	04 c0       	rjmp	.+8      	; 0x5e44 <KPAD_enuInit+0x214>
    5e3c:	b6 95       	lsr	r27
    5e3e:	a7 95       	ror	r26
    5e40:	97 95       	ror	r25
    5e42:	87 95       	ror	r24
    5e44:	0a 94       	dec	r0
    5e46:	d2 f7       	brpl	.-12     	; 0x5e3c <KPAD_enuInit+0x20c>
    5e48:	87 70       	andi	r24, 0x07	; 7
    5e4a:	90 70       	andi	r25, 0x00	; 0
    5e4c:	a0 70       	andi	r26, 0x00	; 0
    5e4e:	b0 70       	andi	r27, 0x00	; 0
    5e50:	81 30       	cpi	r24, 0x01	; 1
    5e52:	91 05       	cpc	r25, r1
    5e54:	a1 05       	cpc	r26, r1
    5e56:	b1 05       	cpc	r27, r1
    5e58:	19 f0       	breq	.+6      	; 0x5e60 <KPAD_enuInit+0x230>
		{
			return Local_enuErrorState;
    5e5a:	8e 81       	ldd	r24, Y+6	; 0x06
    5e5c:	8f 83       	std	Y+7, r24	; 0x07
    5e5e:	1c c1       	rjmp	.+568    	; 0x6098 <KPAD_enuInit+0x468>
	Local_u32Check |= (DIO_enuSetPinValue(ROW1_PORT, ROW1_PIN, DIO_u8PULL_UP) << KPAD_SHIFTBIT_TWELVE);
	Local_u32Check |= (((u32)DIO_enuSetPinValue(ROW2_PORT, ROW2_PIN, DIO_u8PULL_UP)) << KPAD_SHIFTBIT_FIFTEEN);
	Local_u32Check |= (((u32)DIO_enuSetPinValue(ROW3_PORT, ROW3_PIN, DIO_u8PULL_UP)) << KPAD_SHIFTBIT_EIGHTEEN);
	Local_u32Check |= (((u32)DIO_enuSetPinValue(ROW4_PORT, ROW4_PIN, DIO_u8PULL_UP)) << KPAD_SHIFTBIT_TWENTYONE);

	for(Local_u8Iterator = KPAD_ZERO; Local_u8Iterator < KPAD_TWENTYFOUR; Local_u8Iterator += KPAD_THREE)
    5e60:	8d 81       	ldd	r24, Y+5	; 0x05
    5e62:	8d 5f       	subi	r24, 0xFD	; 253
    5e64:	8d 83       	std	Y+5, r24	; 0x05
    5e66:	8d 81       	ldd	r24, Y+5	; 0x05
    5e68:	88 31       	cpi	r24, 0x18	; 24
    5e6a:	f8 f2       	brcs	.-66     	; 0x5e2a <KPAD_enuInit+0x1fa>
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & KPAD_SEVEN) != ES_OK)
		{
			return Local_enuErrorState;
		}
	}
	Local_u32Check = KPAD_ZERO;
    5e6c:	19 82       	std	Y+1, r1	; 0x01
    5e6e:	1a 82       	std	Y+2, r1	; 0x02
    5e70:	1b 82       	std	Y+3, r1	; 0x03
    5e72:	1c 82       	std	Y+4, r1	; 0x04

	Local_u32Check |= (DIO_enuSetPinDirection(COL1_PORT, COL1_PIN, DIO_u8OUTPUT) << KPAD_SHIFTBIT_ZERO);
    5e74:	81 e0       	ldi	r24, 0x01	; 1
    5e76:	60 e0       	ldi	r22, 0x00	; 0
    5e78:	41 e0       	ldi	r20, 0x01	; 1
    5e7a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    5e7e:	28 2f       	mov	r18, r24
    5e80:	30 e0       	ldi	r19, 0x00	; 0
    5e82:	40 e0       	ldi	r20, 0x00	; 0
    5e84:	50 e0       	ldi	r21, 0x00	; 0
    5e86:	89 81       	ldd	r24, Y+1	; 0x01
    5e88:	9a 81       	ldd	r25, Y+2	; 0x02
    5e8a:	ab 81       	ldd	r26, Y+3	; 0x03
    5e8c:	bc 81       	ldd	r27, Y+4	; 0x04
    5e8e:	82 2b       	or	r24, r18
    5e90:	93 2b       	or	r25, r19
    5e92:	a4 2b       	or	r26, r20
    5e94:	b5 2b       	or	r27, r21
    5e96:	89 83       	std	Y+1, r24	; 0x01
    5e98:	9a 83       	std	Y+2, r25	; 0x02
    5e9a:	ab 83       	std	Y+3, r26	; 0x03
    5e9c:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (DIO_enuSetPinDirection(COL2_PORT, COL2_PIN, DIO_u8OUTPUT) << KPAD_SHIFTBIT_THREE);
    5e9e:	81 e0       	ldi	r24, 0x01	; 1
    5ea0:	61 e0       	ldi	r22, 0x01	; 1
    5ea2:	41 e0       	ldi	r20, 0x01	; 1
    5ea4:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    5ea8:	88 2f       	mov	r24, r24
    5eaa:	90 e0       	ldi	r25, 0x00	; 0
    5eac:	88 0f       	add	r24, r24
    5eae:	99 1f       	adc	r25, r25
    5eb0:	88 0f       	add	r24, r24
    5eb2:	99 1f       	adc	r25, r25
    5eb4:	88 0f       	add	r24, r24
    5eb6:	99 1f       	adc	r25, r25
    5eb8:	9c 01       	movw	r18, r24
    5eba:	44 27       	eor	r20, r20
    5ebc:	37 fd       	sbrc	r19, 7
    5ebe:	40 95       	com	r20
    5ec0:	54 2f       	mov	r21, r20
    5ec2:	89 81       	ldd	r24, Y+1	; 0x01
    5ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ec6:	ab 81       	ldd	r26, Y+3	; 0x03
    5ec8:	bc 81       	ldd	r27, Y+4	; 0x04
    5eca:	82 2b       	or	r24, r18
    5ecc:	93 2b       	or	r25, r19
    5ece:	a4 2b       	or	r26, r20
    5ed0:	b5 2b       	or	r27, r21
    5ed2:	89 83       	std	Y+1, r24	; 0x01
    5ed4:	9a 83       	std	Y+2, r25	; 0x02
    5ed6:	ab 83       	std	Y+3, r26	; 0x03
    5ed8:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (DIO_enuSetPinDirection(COL3_PORT, COL3_PIN, DIO_u8OUTPUT) << KPAD_SHIFTBIT_SIX);
    5eda:	81 e0       	ldi	r24, 0x01	; 1
    5edc:	62 e0       	ldi	r22, 0x02	; 2
    5ede:	41 e0       	ldi	r20, 0x01	; 1
    5ee0:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    5ee4:	88 2f       	mov	r24, r24
    5ee6:	90 e0       	ldi	r25, 0x00	; 0
    5ee8:	00 24       	eor	r0, r0
    5eea:	96 95       	lsr	r25
    5eec:	87 95       	ror	r24
    5eee:	07 94       	ror	r0
    5ef0:	96 95       	lsr	r25
    5ef2:	87 95       	ror	r24
    5ef4:	07 94       	ror	r0
    5ef6:	98 2f       	mov	r25, r24
    5ef8:	80 2d       	mov	r24, r0
    5efa:	9c 01       	movw	r18, r24
    5efc:	44 27       	eor	r20, r20
    5efe:	37 fd       	sbrc	r19, 7
    5f00:	40 95       	com	r20
    5f02:	54 2f       	mov	r21, r20
    5f04:	89 81       	ldd	r24, Y+1	; 0x01
    5f06:	9a 81       	ldd	r25, Y+2	; 0x02
    5f08:	ab 81       	ldd	r26, Y+3	; 0x03
    5f0a:	bc 81       	ldd	r27, Y+4	; 0x04
    5f0c:	82 2b       	or	r24, r18
    5f0e:	93 2b       	or	r25, r19
    5f10:	a4 2b       	or	r26, r20
    5f12:	b5 2b       	or	r27, r21
    5f14:	89 83       	std	Y+1, r24	; 0x01
    5f16:	9a 83       	std	Y+2, r25	; 0x02
    5f18:	ab 83       	std	Y+3, r26	; 0x03
    5f1a:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (DIO_enuSetPinDirection(COL4_PORT, COL4_PIN, DIO_u8OUTPUT) << KPAD_SHIFTBIT_NINE);
    5f1c:	81 e0       	ldi	r24, 0x01	; 1
    5f1e:	63 e0       	ldi	r22, 0x03	; 3
    5f20:	41 e0       	ldi	r20, 0x01	; 1
    5f22:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    5f26:	88 2f       	mov	r24, r24
    5f28:	90 e0       	ldi	r25, 0x00	; 0
    5f2a:	98 2f       	mov	r25, r24
    5f2c:	88 27       	eor	r24, r24
    5f2e:	99 0f       	add	r25, r25
    5f30:	9c 01       	movw	r18, r24
    5f32:	44 27       	eor	r20, r20
    5f34:	37 fd       	sbrc	r19, 7
    5f36:	40 95       	com	r20
    5f38:	54 2f       	mov	r21, r20
    5f3a:	89 81       	ldd	r24, Y+1	; 0x01
    5f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    5f3e:	ab 81       	ldd	r26, Y+3	; 0x03
    5f40:	bc 81       	ldd	r27, Y+4	; 0x04
    5f42:	82 2b       	or	r24, r18
    5f44:	93 2b       	or	r25, r19
    5f46:	a4 2b       	or	r26, r20
    5f48:	b5 2b       	or	r27, r21
    5f4a:	89 83       	std	Y+1, r24	; 0x01
    5f4c:	9a 83       	std	Y+2, r25	; 0x02
    5f4e:	ab 83       	std	Y+3, r26	; 0x03
    5f50:	bc 83       	std	Y+4, r27	; 0x04

	Local_u32Check |= (DIO_enuSetPinValue(COL1_PORT, COL1_PIN, DIO_u8HIGH) << KPAD_SHIFTBIT_TWELVE);
    5f52:	81 e0       	ldi	r24, 0x01	; 1
    5f54:	60 e0       	ldi	r22, 0x00	; 0
    5f56:	41 e0       	ldi	r20, 0x01	; 1
    5f58:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    5f5c:	88 2f       	mov	r24, r24
    5f5e:	90 e0       	ldi	r25, 0x00	; 0
    5f60:	98 2f       	mov	r25, r24
    5f62:	88 27       	eor	r24, r24
    5f64:	92 95       	swap	r25
    5f66:	90 7f       	andi	r25, 0xF0	; 240
    5f68:	9c 01       	movw	r18, r24
    5f6a:	44 27       	eor	r20, r20
    5f6c:	37 fd       	sbrc	r19, 7
    5f6e:	40 95       	com	r20
    5f70:	54 2f       	mov	r21, r20
    5f72:	89 81       	ldd	r24, Y+1	; 0x01
    5f74:	9a 81       	ldd	r25, Y+2	; 0x02
    5f76:	ab 81       	ldd	r26, Y+3	; 0x03
    5f78:	bc 81       	ldd	r27, Y+4	; 0x04
    5f7a:	82 2b       	or	r24, r18
    5f7c:	93 2b       	or	r25, r19
    5f7e:	a4 2b       	or	r26, r20
    5f80:	b5 2b       	or	r27, r21
    5f82:	89 83       	std	Y+1, r24	; 0x01
    5f84:	9a 83       	std	Y+2, r25	; 0x02
    5f86:	ab 83       	std	Y+3, r26	; 0x03
    5f88:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (((u32)DIO_enuSetPinValue(COL2_PORT, COL2_PIN, DIO_u8HIGH)) << KPAD_SHIFTBIT_FIFTEEN);
    5f8a:	81 e0       	ldi	r24, 0x01	; 1
    5f8c:	61 e0       	ldi	r22, 0x01	; 1
    5f8e:	41 e0       	ldi	r20, 0x01	; 1
    5f90:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    5f94:	88 2f       	mov	r24, r24
    5f96:	90 e0       	ldi	r25, 0x00	; 0
    5f98:	a0 e0       	ldi	r26, 0x00	; 0
    5f9a:	b0 e0       	ldi	r27, 0x00	; 0
    5f9c:	9c 01       	movw	r18, r24
    5f9e:	ad 01       	movw	r20, r26
    5fa0:	01 2e       	mov	r0, r17
    5fa2:	1f e0       	ldi	r17, 0x0F	; 15
    5fa4:	22 0f       	add	r18, r18
    5fa6:	33 1f       	adc	r19, r19
    5fa8:	44 1f       	adc	r20, r20
    5faa:	55 1f       	adc	r21, r21
    5fac:	1a 95       	dec	r17
    5fae:	d1 f7       	brne	.-12     	; 0x5fa4 <KPAD_enuInit+0x374>
    5fb0:	10 2d       	mov	r17, r0
    5fb2:	89 81       	ldd	r24, Y+1	; 0x01
    5fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    5fb6:	ab 81       	ldd	r26, Y+3	; 0x03
    5fb8:	bc 81       	ldd	r27, Y+4	; 0x04
    5fba:	82 2b       	or	r24, r18
    5fbc:	93 2b       	or	r25, r19
    5fbe:	a4 2b       	or	r26, r20
    5fc0:	b5 2b       	or	r27, r21
    5fc2:	89 83       	std	Y+1, r24	; 0x01
    5fc4:	9a 83       	std	Y+2, r25	; 0x02
    5fc6:	ab 83       	std	Y+3, r26	; 0x03
    5fc8:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (((u32)DIO_enuSetPinValue(COL3_PORT, COL3_PIN, DIO_u8HIGH)) << KPAD_SHIFTBIT_EIGHTEEN);
    5fca:	81 e0       	ldi	r24, 0x01	; 1
    5fcc:	62 e0       	ldi	r22, 0x02	; 2
    5fce:	41 e0       	ldi	r20, 0x01	; 1
    5fd0:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    5fd4:	88 2f       	mov	r24, r24
    5fd6:	90 e0       	ldi	r25, 0x00	; 0
    5fd8:	a0 e0       	ldi	r26, 0x00	; 0
    5fda:	b0 e0       	ldi	r27, 0x00	; 0
    5fdc:	9c 01       	movw	r18, r24
    5fde:	ad 01       	movw	r20, r26
    5fe0:	01 2e       	mov	r0, r17
    5fe2:	12 e1       	ldi	r17, 0x12	; 18
    5fe4:	22 0f       	add	r18, r18
    5fe6:	33 1f       	adc	r19, r19
    5fe8:	44 1f       	adc	r20, r20
    5fea:	55 1f       	adc	r21, r21
    5fec:	1a 95       	dec	r17
    5fee:	d1 f7       	brne	.-12     	; 0x5fe4 <KPAD_enuInit+0x3b4>
    5ff0:	10 2d       	mov	r17, r0
    5ff2:	89 81       	ldd	r24, Y+1	; 0x01
    5ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ff6:	ab 81       	ldd	r26, Y+3	; 0x03
    5ff8:	bc 81       	ldd	r27, Y+4	; 0x04
    5ffa:	82 2b       	or	r24, r18
    5ffc:	93 2b       	or	r25, r19
    5ffe:	a4 2b       	or	r26, r20
    6000:	b5 2b       	or	r27, r21
    6002:	89 83       	std	Y+1, r24	; 0x01
    6004:	9a 83       	std	Y+2, r25	; 0x02
    6006:	ab 83       	std	Y+3, r26	; 0x03
    6008:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (((u32)DIO_enuSetPinValue(COL4_PORT, COL4_PIN, DIO_u8HIGH)) << KPAD_SHIFTBIT_TWENTYONE);
    600a:	81 e0       	ldi	r24, 0x01	; 1
    600c:	63 e0       	ldi	r22, 0x03	; 3
    600e:	41 e0       	ldi	r20, 0x01	; 1
    6010:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    6014:	88 2f       	mov	r24, r24
    6016:	90 e0       	ldi	r25, 0x00	; 0
    6018:	a0 e0       	ldi	r26, 0x00	; 0
    601a:	b0 e0       	ldi	r27, 0x00	; 0
    601c:	9c 01       	movw	r18, r24
    601e:	ad 01       	movw	r20, r26
    6020:	01 2e       	mov	r0, r17
    6022:	15 e1       	ldi	r17, 0x15	; 21
    6024:	22 0f       	add	r18, r18
    6026:	33 1f       	adc	r19, r19
    6028:	44 1f       	adc	r20, r20
    602a:	55 1f       	adc	r21, r21
    602c:	1a 95       	dec	r17
    602e:	d1 f7       	brne	.-12     	; 0x6024 <KPAD_enuInit+0x3f4>
    6030:	10 2d       	mov	r17, r0
    6032:	89 81       	ldd	r24, Y+1	; 0x01
    6034:	9a 81       	ldd	r25, Y+2	; 0x02
    6036:	ab 81       	ldd	r26, Y+3	; 0x03
    6038:	bc 81       	ldd	r27, Y+4	; 0x04
    603a:	82 2b       	or	r24, r18
    603c:	93 2b       	or	r25, r19
    603e:	a4 2b       	or	r26, r20
    6040:	b5 2b       	or	r27, r21
    6042:	89 83       	std	Y+1, r24	; 0x01
    6044:	9a 83       	std	Y+2, r25	; 0x02
    6046:	ab 83       	std	Y+3, r26	; 0x03
    6048:	bc 83       	std	Y+4, r27	; 0x04

	for(Local_u8Iterator = KPAD_ZERO; Local_u8Iterator < KPAD_TWENTYFOUR; Local_u8Iterator += KPAD_THREE)
    604a:	1d 82       	std	Y+5, r1	; 0x05
    604c:	1e c0       	rjmp	.+60     	; 0x608a <KPAD_enuInit+0x45a>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & KPAD_SEVEN) != ES_OK)
    604e:	8d 81       	ldd	r24, Y+5	; 0x05
    6050:	28 2f       	mov	r18, r24
    6052:	30 e0       	ldi	r19, 0x00	; 0
    6054:	89 81       	ldd	r24, Y+1	; 0x01
    6056:	9a 81       	ldd	r25, Y+2	; 0x02
    6058:	ab 81       	ldd	r26, Y+3	; 0x03
    605a:	bc 81       	ldd	r27, Y+4	; 0x04
    605c:	02 2e       	mov	r0, r18
    605e:	04 c0       	rjmp	.+8      	; 0x6068 <KPAD_enuInit+0x438>
    6060:	b6 95       	lsr	r27
    6062:	a7 95       	ror	r26
    6064:	97 95       	ror	r25
    6066:	87 95       	ror	r24
    6068:	0a 94       	dec	r0
    606a:	d2 f7       	brpl	.-12     	; 0x6060 <KPAD_enuInit+0x430>
    606c:	87 70       	andi	r24, 0x07	; 7
    606e:	90 70       	andi	r25, 0x00	; 0
    6070:	a0 70       	andi	r26, 0x00	; 0
    6072:	b0 70       	andi	r27, 0x00	; 0
    6074:	81 30       	cpi	r24, 0x01	; 1
    6076:	91 05       	cpc	r25, r1
    6078:	a1 05       	cpc	r26, r1
    607a:	b1 05       	cpc	r27, r1
    607c:	19 f0       	breq	.+6      	; 0x6084 <KPAD_enuInit+0x454>
		{
			return Local_enuErrorState;
    607e:	8e 81       	ldd	r24, Y+6	; 0x06
    6080:	8f 83       	std	Y+7, r24	; 0x07
    6082:	0a c0       	rjmp	.+20     	; 0x6098 <KPAD_enuInit+0x468>
	Local_u32Check |= (DIO_enuSetPinValue(COL1_PORT, COL1_PIN, DIO_u8HIGH) << KPAD_SHIFTBIT_TWELVE);
	Local_u32Check |= (((u32)DIO_enuSetPinValue(COL2_PORT, COL2_PIN, DIO_u8HIGH)) << KPAD_SHIFTBIT_FIFTEEN);
	Local_u32Check |= (((u32)DIO_enuSetPinValue(COL3_PORT, COL3_PIN, DIO_u8HIGH)) << KPAD_SHIFTBIT_EIGHTEEN);
	Local_u32Check |= (((u32)DIO_enuSetPinValue(COL4_PORT, COL4_PIN, DIO_u8HIGH)) << KPAD_SHIFTBIT_TWENTYONE);

	for(Local_u8Iterator = KPAD_ZERO; Local_u8Iterator < KPAD_TWENTYFOUR; Local_u8Iterator += KPAD_THREE)
    6084:	8d 81       	ldd	r24, Y+5	; 0x05
    6086:	8d 5f       	subi	r24, 0xFD	; 253
    6088:	8d 83       	std	Y+5, r24	; 0x05
    608a:	8d 81       	ldd	r24, Y+5	; 0x05
    608c:	88 31       	cpi	r24, 0x18	; 24
    608e:	f8 f2       	brcs	.-66     	; 0x604e <KPAD_enuInit+0x41e>
		{
			return Local_enuErrorState;
		}
	}

	Local_enuErrorState = ES_OK;
    6090:	81 e0       	ldi	r24, 0x01	; 1
    6092:	8e 83       	std	Y+6, r24	; 0x06

	return Local_enuErrorState;
    6094:	8e 81       	ldd	r24, Y+6	; 0x06
    6096:	8f 83       	std	Y+7, r24	; 0x07
    6098:	8f 81       	ldd	r24, Y+7	; 0x07
}
    609a:	27 96       	adiw	r28, 0x07	; 7
    609c:	0f b6       	in	r0, 0x3f	; 63
    609e:	f8 94       	cli
    60a0:	de bf       	out	0x3e, r29	; 62
    60a2:	0f be       	out	0x3f, r0	; 63
    60a4:	cd bf       	out	0x3d, r28	; 61
    60a6:	cf 91       	pop	r28
    60a8:	df 91       	pop	r29
    60aa:	08 95       	ret

000060ac <KPAD_enuGetPassedKey>:

ES_t KPAD_enuGetPassedKey(u8 *Copy_pu8KeyNumber)
{
    60ac:	df 93       	push	r29
    60ae:	cf 93       	push	r28
    60b0:	cd b7       	in	r28, 0x3d	; 61
    60b2:	de b7       	in	r29, 0x3e	; 62
    60b4:	2c 97       	sbiw	r28, 0x0c	; 12
    60b6:	0f b6       	in	r0, 0x3f	; 63
    60b8:	f8 94       	cli
    60ba:	de bf       	out	0x3e, r29	; 62
    60bc:	0f be       	out	0x3f, r0	; 63
    60be:	cd bf       	out	0x3d, r28	; 61
    60c0:	9b 87       	std	Y+11, r25	; 0x0b
    60c2:	8a 87       	std	Y+10, r24	; 0x0a
	ES_t Local_enuErrorState = ES_NOK;
    60c4:	18 86       	std	Y+8, r1	; 0x08
	u8 Local_u8ColIndex = KPAD_ZERO, Local_u8RowIndex = KPAD_ZERO, Local_u8KeyState = KPAD_ZERO;
    60c6:	1f 82       	std	Y+7, r1	; 0x07
    60c8:	1e 82       	std	Y+6, r1	; 0x06
    60ca:	19 86       	std	Y+9, r1	; 0x09
	u8 Local_u8Iterator = KPAD_ZERO;
    60cc:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Check = KPAD_ZERO;
    60ce:	19 82       	std	Y+1, r1	; 0x01
    60d0:	1a 82       	std	Y+2, r1	; 0x02
    60d2:	1b 82       	std	Y+3, r1	; 0x03
    60d4:	1c 82       	std	Y+4, r1	; 0x04


	static u8 Local_u8AKPADARR[KPAD_ROWNUM][KPAD_COLNUM] = KPAD_ARR_VAL;

	/* Initial value of key pressed */
	if(Copy_pu8KeyNumber != NULL)
    60d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    60d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    60da:	00 97       	sbiw	r24, 0x00	; 0
    60dc:	31 f0       	breq	.+12     	; 0x60ea <KPAD_enuGetPassedKey+0x3e>
	{
		*Copy_pu8KeyNumber = NO_PRESSED_KEY;
    60de:	ea 85       	ldd	r30, Y+10	; 0x0a
    60e0:	fb 85       	ldd	r31, Y+11	; 0x0b
    60e2:	8f ef       	ldi	r24, 0xFF	; 255
    60e4:	80 83       	st	Z, r24
	else
	{
		return ES_NULL_POINTER;
	}

	for(Local_u8ColIndex = KPAD_ZERO; Local_u8ColIndex < KPAD_COLNUM; Local_u8ColIndex++)
    60e6:	1f 82       	std	Y+7, r1	; 0x07
    60e8:	e9 c0       	rjmp	.+466    	; 0x62bc <KPAD_enuGetPassedKey+0x210>
	{
		*Copy_pu8KeyNumber = NO_PRESSED_KEY;
	}
	else
	{
		return ES_NULL_POINTER;
    60ea:	82 e0       	ldi	r24, 0x02	; 2
    60ec:	8c 87       	std	Y+12, r24	; 0x0c
    60ee:	11 c1       	rjmp	.+546    	; 0x6312 <KPAD_enuGetPassedKey+0x266>
	}

	for(Local_u8ColIndex = KPAD_ZERO; Local_u8ColIndex < KPAD_COLNUM; Local_u8ColIndex++)
	{
		/* Activate Column */
		Local_u32Check |= (DIO_enuSetPinValue(Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ZERO],
    60f0:	8f 81       	ldd	r24, Y+7	; 0x07
    60f2:	88 2f       	mov	r24, r24
    60f4:	90 e0       	ldi	r25, 0x00	; 0
    60f6:	88 0f       	add	r24, r24
    60f8:	99 1f       	adc	r25, r25
    60fa:	fc 01       	movw	r30, r24
    60fc:	e0 52       	subi	r30, 0x20	; 32
    60fe:	fe 4f       	sbci	r31, 0xFE	; 254
    6100:	20 81       	ld	r18, Z
    6102:	8f 81       	ldd	r24, Y+7	; 0x07
    6104:	88 2f       	mov	r24, r24
    6106:	90 e0       	ldi	r25, 0x00	; 0
    6108:	88 0f       	add	r24, r24
    610a:	99 1f       	adc	r25, r25
    610c:	fc 01       	movw	r30, r24
    610e:	ef 51       	subi	r30, 0x1F	; 31
    6110:	fe 4f       	sbci	r31, 0xFE	; 254
    6112:	90 81       	ld	r25, Z
    6114:	82 2f       	mov	r24, r18
    6116:	69 2f       	mov	r22, r25
    6118:	40 e0       	ldi	r20, 0x00	; 0
    611a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    611e:	28 2f       	mov	r18, r24
    6120:	30 e0       	ldi	r19, 0x00	; 0
    6122:	40 e0       	ldi	r20, 0x00	; 0
    6124:	50 e0       	ldi	r21, 0x00	; 0
    6126:	89 81       	ldd	r24, Y+1	; 0x01
    6128:	9a 81       	ldd	r25, Y+2	; 0x02
    612a:	ab 81       	ldd	r26, Y+3	; 0x03
    612c:	bc 81       	ldd	r27, Y+4	; 0x04
    612e:	82 2b       	or	r24, r18
    6130:	93 2b       	or	r25, r19
    6132:	a4 2b       	or	r26, r20
    6134:	b5 2b       	or	r27, r21
    6136:	89 83       	std	Y+1, r24	; 0x01
    6138:	9a 83       	std	Y+2, r25	; 0x02
    613a:	ab 83       	std	Y+3, r26	; 0x03
    613c:	bc 83       	std	Y+4, r27	; 0x04
						   Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ONE], DIO_u8LOW) << KPAD_SHIFTBIT_ZERO);

		for(Local_u8RowIndex = KPAD_ZERO; Local_u8RowIndex < KPAD_ROWNUM; Local_u8RowIndex++)
    613e:	1e 82       	std	Y+6, r1	; 0x06
    6140:	89 c0       	rjmp	.+274    	; 0x6254 <KPAD_enuGetPassedKey+0x1a8>
		{
			/* Read the current row */
			 Local_u32Check |= (DIO_enuGetPinValue(Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ZERO],
    6142:	8e 81       	ldd	r24, Y+6	; 0x06
    6144:	88 2f       	mov	r24, r24
    6146:	90 e0       	ldi	r25, 0x00	; 0
    6148:	88 0f       	add	r24, r24
    614a:	99 1f       	adc	r25, r25
    614c:	fc 01       	movw	r30, r24
    614e:	e8 52       	subi	r30, 0x28	; 40
    6150:	fe 4f       	sbci	r31, 0xFE	; 254
    6152:	40 81       	ld	r20, Z
    6154:	8e 81       	ldd	r24, Y+6	; 0x06
    6156:	88 2f       	mov	r24, r24
    6158:	90 e0       	ldi	r25, 0x00	; 0
    615a:	88 0f       	add	r24, r24
    615c:	99 1f       	adc	r25, r25
    615e:	fc 01       	movw	r30, r24
    6160:	e7 52       	subi	r30, 0x27	; 39
    6162:	fe 4f       	sbci	r31, 0xFE	; 254
    6164:	90 81       	ld	r25, Z
    6166:	9e 01       	movw	r18, r28
    6168:	27 5f       	subi	r18, 0xF7	; 247
    616a:	3f 4f       	sbci	r19, 0xFF	; 255
    616c:	84 2f       	mov	r24, r20
    616e:	69 2f       	mov	r22, r25
    6170:	a9 01       	movw	r20, r18
    6172:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <DIO_enuGetPinValue>
    6176:	88 2f       	mov	r24, r24
    6178:	90 e0       	ldi	r25, 0x00	; 0
    617a:	88 0f       	add	r24, r24
    617c:	99 1f       	adc	r25, r25
    617e:	88 0f       	add	r24, r24
    6180:	99 1f       	adc	r25, r25
    6182:	88 0f       	add	r24, r24
    6184:	99 1f       	adc	r25, r25
    6186:	9c 01       	movw	r18, r24
    6188:	44 27       	eor	r20, r20
    618a:	37 fd       	sbrc	r19, 7
    618c:	40 95       	com	r20
    618e:	54 2f       	mov	r21, r20
    6190:	89 81       	ldd	r24, Y+1	; 0x01
    6192:	9a 81       	ldd	r25, Y+2	; 0x02
    6194:	ab 81       	ldd	r26, Y+3	; 0x03
    6196:	bc 81       	ldd	r27, Y+4	; 0x04
    6198:	82 2b       	or	r24, r18
    619a:	93 2b       	or	r25, r19
    619c:	a4 2b       	or	r26, r20
    619e:	b5 2b       	or	r27, r21
    61a0:	89 83       	std	Y+1, r24	; 0x01
    61a2:	9a 83       	std	Y+2, r25	; 0x02
    61a4:	ab 83       	std	Y+3, r26	; 0x03
    61a6:	bc 83       	std	Y+4, r27	; 0x04
													Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ONE], &Local_u8KeyState) << KPAD_SHIFTBIT_THREE);
			 if(DIO_u8LOW == Local_u8KeyState)
    61a8:	89 85       	ldd	r24, Y+9	; 0x09
    61aa:	88 23       	and	r24, r24
    61ac:	09 f0       	breq	.+2      	; 0x61b0 <KPAD_enuGetPassedKey+0x104>
    61ae:	4f c0       	rjmp	.+158    	; 0x624e <KPAD_enuGetPassedKey+0x1a2>
    61b0:	36 c0       	rjmp	.+108    	; 0x621e <KPAD_enuGetPassedKey+0x172>
			 {
				 /* Polling (Busy waiting until the key is released) */
				 while(DIO_u8LOW == Local_u8KeyState)
				 {
					 Local_u32Check |= (DIO_enuGetPinValue(Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ZERO],
    61b2:	8e 81       	ldd	r24, Y+6	; 0x06
    61b4:	88 2f       	mov	r24, r24
    61b6:	90 e0       	ldi	r25, 0x00	; 0
    61b8:	88 0f       	add	r24, r24
    61ba:	99 1f       	adc	r25, r25
    61bc:	fc 01       	movw	r30, r24
    61be:	e8 52       	subi	r30, 0x28	; 40
    61c0:	fe 4f       	sbci	r31, 0xFE	; 254
    61c2:	40 81       	ld	r20, Z
    61c4:	8e 81       	ldd	r24, Y+6	; 0x06
    61c6:	88 2f       	mov	r24, r24
    61c8:	90 e0       	ldi	r25, 0x00	; 0
    61ca:	88 0f       	add	r24, r24
    61cc:	99 1f       	adc	r25, r25
    61ce:	fc 01       	movw	r30, r24
    61d0:	e7 52       	subi	r30, 0x27	; 39
    61d2:	fe 4f       	sbci	r31, 0xFE	; 254
    61d4:	90 81       	ld	r25, Z
    61d6:	9e 01       	movw	r18, r28
    61d8:	27 5f       	subi	r18, 0xF7	; 247
    61da:	3f 4f       	sbci	r19, 0xFF	; 255
    61dc:	84 2f       	mov	r24, r20
    61de:	69 2f       	mov	r22, r25
    61e0:	a9 01       	movw	r20, r18
    61e2:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <DIO_enuGetPinValue>
    61e6:	88 2f       	mov	r24, r24
    61e8:	90 e0       	ldi	r25, 0x00	; 0
    61ea:	00 24       	eor	r0, r0
    61ec:	96 95       	lsr	r25
    61ee:	87 95       	ror	r24
    61f0:	07 94       	ror	r0
    61f2:	96 95       	lsr	r25
    61f4:	87 95       	ror	r24
    61f6:	07 94       	ror	r0
    61f8:	98 2f       	mov	r25, r24
    61fa:	80 2d       	mov	r24, r0
    61fc:	9c 01       	movw	r18, r24
    61fe:	44 27       	eor	r20, r20
    6200:	37 fd       	sbrc	r19, 7
    6202:	40 95       	com	r20
    6204:	54 2f       	mov	r21, r20
    6206:	89 81       	ldd	r24, Y+1	; 0x01
    6208:	9a 81       	ldd	r25, Y+2	; 0x02
    620a:	ab 81       	ldd	r26, Y+3	; 0x03
    620c:	bc 81       	ldd	r27, Y+4	; 0x04
    620e:	82 2b       	or	r24, r18
    6210:	93 2b       	or	r25, r19
    6212:	a4 2b       	or	r26, r20
    6214:	b5 2b       	or	r27, r21
    6216:	89 83       	std	Y+1, r24	; 0x01
    6218:	9a 83       	std	Y+2, r25	; 0x02
    621a:	ab 83       	std	Y+3, r26	; 0x03
    621c:	bc 83       	std	Y+4, r27	; 0x04
			 Local_u32Check |= (DIO_enuGetPinValue(Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ZERO],
													Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ONE], &Local_u8KeyState) << KPAD_SHIFTBIT_THREE);
			 if(DIO_u8LOW == Local_u8KeyState)
			 {
				 /* Polling (Busy waiting until the key is released) */
				 while(DIO_u8LOW == Local_u8KeyState)
    621e:	89 85       	ldd	r24, Y+9	; 0x09
    6220:	88 23       	and	r24, r24
    6222:	39 f2       	breq	.-114    	; 0x61b2 <KPAD_enuGetPassedKey+0x106>
				 {
					 Local_u32Check |= (DIO_enuGetPinValue(Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ZERO],
															Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ONE], &Local_u8KeyState) << KPAD_SHIFTBIT_SIX);
				 }

				 *Copy_pu8KeyNumber = Local_u8AKPADARR[Local_u8RowIndex][Local_u8ColIndex];
    6224:	8e 81       	ldd	r24, Y+6	; 0x06
    6226:	48 2f       	mov	r20, r24
    6228:	50 e0       	ldi	r21, 0x00	; 0
    622a:	8f 81       	ldd	r24, Y+7	; 0x07
    622c:	28 2f       	mov	r18, r24
    622e:	30 e0       	ldi	r19, 0x00	; 0
    6230:	ca 01       	movw	r24, r20
    6232:	88 0f       	add	r24, r24
    6234:	99 1f       	adc	r25, r25
    6236:	88 0f       	add	r24, r24
    6238:	99 1f       	adc	r25, r25
    623a:	82 0f       	add	r24, r18
    623c:	93 1f       	adc	r25, r19
    623e:	fc 01       	movw	r30, r24
    6240:	e8 53       	subi	r30, 0x38	; 56
    6242:	fe 4f       	sbci	r31, 0xFE	; 254
    6244:	80 81       	ld	r24, Z
    6246:	ea 85       	ldd	r30, Y+10	; 0x0a
    6248:	fb 85       	ldd	r31, Y+11	; 0x0b
    624a:	80 83       	st	Z, r24
    624c:	07 c0       	rjmp	.+14     	; 0x625c <KPAD_enuGetPassedKey+0x1b0>
	{
		/* Activate Column */
		Local_u32Check |= (DIO_enuSetPinValue(Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ZERO],
						   Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ONE], DIO_u8LOW) << KPAD_SHIFTBIT_ZERO);

		for(Local_u8RowIndex = KPAD_ZERO; Local_u8RowIndex < KPAD_ROWNUM; Local_u8RowIndex++)
    624e:	8e 81       	ldd	r24, Y+6	; 0x06
    6250:	8f 5f       	subi	r24, 0xFF	; 255
    6252:	8e 83       	std	Y+6, r24	; 0x06
    6254:	8e 81       	ldd	r24, Y+6	; 0x06
    6256:	84 30       	cpi	r24, 0x04	; 4
    6258:	08 f4       	brcc	.+2      	; 0x625c <KPAD_enuGetPassedKey+0x1b0>
    625a:	73 cf       	rjmp	.-282    	; 0x6142 <KPAD_enuGetPassedKey+0x96>
				 break;
			 }
		}

		/* Deactivate Column */
		Local_u32Check |= (DIO_enuSetPinValue(Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ZERO],
    625c:	8f 81       	ldd	r24, Y+7	; 0x07
    625e:	88 2f       	mov	r24, r24
    6260:	90 e0       	ldi	r25, 0x00	; 0
    6262:	88 0f       	add	r24, r24
    6264:	99 1f       	adc	r25, r25
    6266:	fc 01       	movw	r30, r24
    6268:	e0 52       	subi	r30, 0x20	; 32
    626a:	fe 4f       	sbci	r31, 0xFE	; 254
    626c:	20 81       	ld	r18, Z
    626e:	8f 81       	ldd	r24, Y+7	; 0x07
    6270:	88 2f       	mov	r24, r24
    6272:	90 e0       	ldi	r25, 0x00	; 0
    6274:	88 0f       	add	r24, r24
    6276:	99 1f       	adc	r25, r25
    6278:	fc 01       	movw	r30, r24
    627a:	ef 51       	subi	r30, 0x1F	; 31
    627c:	fe 4f       	sbci	r31, 0xFE	; 254
    627e:	90 81       	ld	r25, Z
    6280:	82 2f       	mov	r24, r18
    6282:	69 2f       	mov	r22, r25
    6284:	41 e0       	ldi	r20, 0x01	; 1
    6286:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    628a:	88 2f       	mov	r24, r24
    628c:	90 e0       	ldi	r25, 0x00	; 0
    628e:	98 2f       	mov	r25, r24
    6290:	88 27       	eor	r24, r24
    6292:	99 0f       	add	r25, r25
    6294:	9c 01       	movw	r18, r24
    6296:	44 27       	eor	r20, r20
    6298:	37 fd       	sbrc	r19, 7
    629a:	40 95       	com	r20
    629c:	54 2f       	mov	r21, r20
    629e:	89 81       	ldd	r24, Y+1	; 0x01
    62a0:	9a 81       	ldd	r25, Y+2	; 0x02
    62a2:	ab 81       	ldd	r26, Y+3	; 0x03
    62a4:	bc 81       	ldd	r27, Y+4	; 0x04
    62a6:	82 2b       	or	r24, r18
    62a8:	93 2b       	or	r25, r19
    62aa:	a4 2b       	or	r26, r20
    62ac:	b5 2b       	or	r27, r21
    62ae:	89 83       	std	Y+1, r24	; 0x01
    62b0:	9a 83       	std	Y+2, r25	; 0x02
    62b2:	ab 83       	std	Y+3, r26	; 0x03
    62b4:	bc 83       	std	Y+4, r27	; 0x04
	else
	{
		return ES_NULL_POINTER;
	}

	for(Local_u8ColIndex = KPAD_ZERO; Local_u8ColIndex < KPAD_COLNUM; Local_u8ColIndex++)
    62b6:	8f 81       	ldd	r24, Y+7	; 0x07
    62b8:	8f 5f       	subi	r24, 0xFF	; 255
    62ba:	8f 83       	std	Y+7, r24	; 0x07
    62bc:	8f 81       	ldd	r24, Y+7	; 0x07
    62be:	84 30       	cpi	r24, 0x04	; 4
    62c0:	08 f4       	brcc	.+2      	; 0x62c4 <KPAD_enuGetPassedKey+0x218>
    62c2:	16 cf       	rjmp	.-468    	; 0x60f0 <KPAD_enuGetPassedKey+0x44>
		/* Deactivate Column */
		Local_u32Check |= (DIO_enuSetPinValue(Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ZERO],
						   	   	   	   	   	   Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ONE], DIO_u8HIGH) << KPAD_SHIFTBIT_NINE);
	}

	for(Local_u8Iterator = KPAD_ZERO; Local_u8Iterator < KPAD_TWELVE; Local_u8Iterator += KPAD_THREE)
    62c4:	1d 82       	std	Y+5, r1	; 0x05
    62c6:	1e c0       	rjmp	.+60     	; 0x6304 <KPAD_enuGetPassedKey+0x258>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & KPAD_SEVEN) != ES_OK)
    62c8:	8d 81       	ldd	r24, Y+5	; 0x05
    62ca:	28 2f       	mov	r18, r24
    62cc:	30 e0       	ldi	r19, 0x00	; 0
    62ce:	89 81       	ldd	r24, Y+1	; 0x01
    62d0:	9a 81       	ldd	r25, Y+2	; 0x02
    62d2:	ab 81       	ldd	r26, Y+3	; 0x03
    62d4:	bc 81       	ldd	r27, Y+4	; 0x04
    62d6:	02 2e       	mov	r0, r18
    62d8:	04 c0       	rjmp	.+8      	; 0x62e2 <KPAD_enuGetPassedKey+0x236>
    62da:	b6 95       	lsr	r27
    62dc:	a7 95       	ror	r26
    62de:	97 95       	ror	r25
    62e0:	87 95       	ror	r24
    62e2:	0a 94       	dec	r0
    62e4:	d2 f7       	brpl	.-12     	; 0x62da <KPAD_enuGetPassedKey+0x22e>
    62e6:	87 70       	andi	r24, 0x07	; 7
    62e8:	90 70       	andi	r25, 0x00	; 0
    62ea:	a0 70       	andi	r26, 0x00	; 0
    62ec:	b0 70       	andi	r27, 0x00	; 0
    62ee:	81 30       	cpi	r24, 0x01	; 1
    62f0:	91 05       	cpc	r25, r1
    62f2:	a1 05       	cpc	r26, r1
    62f4:	b1 05       	cpc	r27, r1
    62f6:	19 f0       	breq	.+6      	; 0x62fe <KPAD_enuGetPassedKey+0x252>
		{
			return Local_enuErrorState;
    62f8:	88 85       	ldd	r24, Y+8	; 0x08
    62fa:	8c 87       	std	Y+12, r24	; 0x0c
    62fc:	0a c0       	rjmp	.+20     	; 0x6312 <KPAD_enuGetPassedKey+0x266>
		/* Deactivate Column */
		Local_u32Check |= (DIO_enuSetPinValue(Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ZERO],
						   	   	   	   	   	   Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ONE], DIO_u8HIGH) << KPAD_SHIFTBIT_NINE);
	}

	for(Local_u8Iterator = KPAD_ZERO; Local_u8Iterator < KPAD_TWELVE; Local_u8Iterator += KPAD_THREE)
    62fe:	8d 81       	ldd	r24, Y+5	; 0x05
    6300:	8d 5f       	subi	r24, 0xFD	; 253
    6302:	8d 83       	std	Y+5, r24	; 0x05
    6304:	8d 81       	ldd	r24, Y+5	; 0x05
    6306:	8c 30       	cpi	r24, 0x0C	; 12
    6308:	f8 f2       	brcs	.-66     	; 0x62c8 <KPAD_enuGetPassedKey+0x21c>
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & KPAD_SEVEN) != ES_OK)
		{
			return Local_enuErrorState;
		}
	}
	Local_enuErrorState = ES_OK;
    630a:	81 e0       	ldi	r24, 0x01	; 1
    630c:	88 87       	std	Y+8, r24	; 0x08

	return Local_enuErrorState;
    630e:	88 85       	ldd	r24, Y+8	; 0x08
    6310:	8c 87       	std	Y+12, r24	; 0x0c
    6312:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    6314:	2c 96       	adiw	r28, 0x0c	; 12
    6316:	0f b6       	in	r0, 0x3f	; 63
    6318:	f8 94       	cli
    631a:	de bf       	out	0x3e, r29	; 62
    631c:	0f be       	out	0x3f, r0	; 63
    631e:	cd bf       	out	0x3d, r28	; 61
    6320:	cf 91       	pop	r28
    6322:	df 91       	pop	r29
    6324:	08 95       	ret

00006326 <main>:
volatile void tog(volatile void *Copy_pvoidParam);
extern EXTI_t EXTI_AstrEXTIConfig[3];
#define SREG  (*(volatile u8*) 0x5F)

int main(void)
{
    6326:	df 93       	push	r29
    6328:	cf 93       	push	r28
    632a:	0f 92       	push	r0
    632c:	cd b7       	in	r28, 0x3d	; 61
    632e:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPinDirection(DIO_u8PORTA, DIO_u8PIN2, DIO_u8OUTPUT);
    6330:	80 e0       	ldi	r24, 0x00	; 0
    6332:	62 e0       	ldi	r22, 0x02	; 2
    6334:	41 e0       	ldi	r20, 0x01	; 1
    6336:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8PORTD, DIO_u8PIN2, DIO_u8INPUT);
    633a:	83 e0       	ldi	r24, 0x03	; 3
    633c:	62 e0       	ldi	r22, 0x02	; 2
    633e:	40 e0       	ldi	r20, 0x00	; 0
    6340:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(DIO_u8PORTD, DIO_u8PIN2, DIO_u8PULL_UP);
    6344:	83 e0       	ldi	r24, 0x03	; 3
    6346:	62 e0       	ldi	r22, 0x02	; 2
    6348:	41 e0       	ldi	r20, 0x01	; 1
    634a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>

	u8 Local_u8Pin = DIO_u8PIN3;
    634e:	83 e0       	ldi	r24, 0x03	; 3
    6350:	89 83       	std	Y+1, r24	; 0x01
	EXTI_enuCallBack(tog, &Local_u8Pin, 0);
    6352:	8e eb       	ldi	r24, 0xBE	; 190
    6354:	91 e3       	ldi	r25, 0x31	; 49
    6356:	9e 01       	movw	r18, r28
    6358:	2f 5f       	subi	r18, 0xFF	; 255
    635a:	3f 4f       	sbci	r19, 0xFF	; 255
    635c:	b9 01       	movw	r22, r18
    635e:	40 e0       	ldi	r20, 0x00	; 0
    6360:	0e 94 65 0a 	call	0x14ca	; 0x14ca <EXTI_enuCallBack>
	EXTI_enuInit(EXTI_AstrEXTIConfig);
    6364:	88 e6       	ldi	r24, 0x68	; 104
    6366:	91 e0       	ldi	r25, 0x01	; 1
    6368:	0e 94 9d 07 	call	0xf3a	; 0xf3a <EXTI_enuInit>

	SREG |= (1<<7);
    636c:	af e5       	ldi	r26, 0x5F	; 95
    636e:	b0 e0       	ldi	r27, 0x00	; 0
    6370:	ef e5       	ldi	r30, 0x5F	; 95
    6372:	f0 e0       	ldi	r31, 0x00	; 0
    6374:	80 81       	ld	r24, Z
    6376:	80 68       	ori	r24, 0x80	; 128
    6378:	8c 93       	st	X, r24
    637a:	ff cf       	rjmp	.-2      	; 0x637a <main+0x54>

0000637c <tog>:

	return 0;
}

volatile void tog(volatile void *Copy_pvoidParam)
{
    637c:	df 93       	push	r29
    637e:	cf 93       	push	r28
    6380:	00 d0       	rcall	.+0      	; 0x6382 <tog+0x6>
    6382:	cd b7       	in	r28, 0x3d	; 61
    6384:	de b7       	in	r29, 0x3e	; 62
    6386:	9a 83       	std	Y+2, r25	; 0x02
    6388:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPinDirection(DIO_u8PORTA, *((u8*)Copy_pvoidParam), DIO_u8OUTPUT);
    638a:	e9 81       	ldd	r30, Y+1	; 0x01
    638c:	fa 81       	ldd	r31, Y+2	; 0x02
    638e:	90 81       	ld	r25, Z
    6390:	80 e0       	ldi	r24, 0x00	; 0
    6392:	69 2f       	mov	r22, r25
    6394:	41 e0       	ldi	r20, 0x01	; 1
    6396:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
	DIO_enuTogPinValue(DIO_u8PORTA, *((u8*)Copy_pvoidParam));
    639a:	e9 81       	ldd	r30, Y+1	; 0x01
    639c:	fa 81       	ldd	r31, Y+2	; 0x02
    639e:	90 81       	ld	r25, Z
    63a0:	80 e0       	ldi	r24, 0x00	; 0
    63a2:	69 2f       	mov	r22, r25
    63a4:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <DIO_enuTogPinValue>
}
    63a8:	0f 90       	pop	r0
    63aa:	0f 90       	pop	r0
    63ac:	cf 91       	pop	r28
    63ae:	df 91       	pop	r29
    63b0:	08 95       	ret

000063b2 <__prologue_saves__>:
    63b2:	2f 92       	push	r2
    63b4:	3f 92       	push	r3
    63b6:	4f 92       	push	r4
    63b8:	5f 92       	push	r5
    63ba:	6f 92       	push	r6
    63bc:	7f 92       	push	r7
    63be:	8f 92       	push	r8
    63c0:	9f 92       	push	r9
    63c2:	af 92       	push	r10
    63c4:	bf 92       	push	r11
    63c6:	cf 92       	push	r12
    63c8:	df 92       	push	r13
    63ca:	ef 92       	push	r14
    63cc:	ff 92       	push	r15
    63ce:	0f 93       	push	r16
    63d0:	1f 93       	push	r17
    63d2:	cf 93       	push	r28
    63d4:	df 93       	push	r29
    63d6:	cd b7       	in	r28, 0x3d	; 61
    63d8:	de b7       	in	r29, 0x3e	; 62
    63da:	ca 1b       	sub	r28, r26
    63dc:	db 0b       	sbc	r29, r27
    63de:	0f b6       	in	r0, 0x3f	; 63
    63e0:	f8 94       	cli
    63e2:	de bf       	out	0x3e, r29	; 62
    63e4:	0f be       	out	0x3f, r0	; 63
    63e6:	cd bf       	out	0x3d, r28	; 61
    63e8:	09 94       	ijmp

000063ea <__epilogue_restores__>:
    63ea:	2a 88       	ldd	r2, Y+18	; 0x12
    63ec:	39 88       	ldd	r3, Y+17	; 0x11
    63ee:	48 88       	ldd	r4, Y+16	; 0x10
    63f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    63f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    63f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    63f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    63f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    63fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    63fc:	b9 84       	ldd	r11, Y+9	; 0x09
    63fe:	c8 84       	ldd	r12, Y+8	; 0x08
    6400:	df 80       	ldd	r13, Y+7	; 0x07
    6402:	ee 80       	ldd	r14, Y+6	; 0x06
    6404:	fd 80       	ldd	r15, Y+5	; 0x05
    6406:	0c 81       	ldd	r16, Y+4	; 0x04
    6408:	1b 81       	ldd	r17, Y+3	; 0x03
    640a:	aa 81       	ldd	r26, Y+2	; 0x02
    640c:	b9 81       	ldd	r27, Y+1	; 0x01
    640e:	ce 0f       	add	r28, r30
    6410:	d1 1d       	adc	r29, r1
    6412:	0f b6       	in	r0, 0x3f	; 63
    6414:	f8 94       	cli
    6416:	de bf       	out	0x3e, r29	; 62
    6418:	0f be       	out	0x3f, r0	; 63
    641a:	cd bf       	out	0x3d, r28	; 61
    641c:	ed 01       	movw	r28, r26
    641e:	08 95       	ret

00006420 <_exit>:
    6420:	f8 94       	cli

00006422 <__stop_program>:
    6422:	ff cf       	rjmp	.-2      	; 0x6422 <__stop_program>
