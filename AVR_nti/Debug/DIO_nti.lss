
DIO_nti.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002366  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00002366  000023da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002058  00000000  00000000  00002404  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000010de  00000000  00000000  0000445c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000553a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000567a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000057ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007433  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000831e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000090cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000922c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000094b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009c87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e6       	ldi	r30, 0x66	; 102
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 71 10 	call	0x20e2	; 0x20e2 <main>
      7a:	0c 94 b1 11 	jmp	0x2362	; 0x2362 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 7a 11 	jmp	0x22f4	; 0x22f4 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 96 11 	jmp	0x232c	; 0x232c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 86 11 	jmp	0x230c	; 0x230c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 86 11 	jmp	0x230c	; 0x230c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 7a 11 	jmp	0x22f4	; 0x22f4 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 96 11 	jmp	0x232c	; 0x232c <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 86 11 	jmp	0x230c	; 0x230c <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 86 11 	jmp	0x230c	; 0x230c <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 86 11 	jmp	0x230c	; 0x230c <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 a6 11 	jmp	0x234c	; 0x234c <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_enuInit>:
#include "DIO_config.h"



ES_t DIO_enuInit(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	0f 92       	push	r0
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     b40:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR, PA_PIN6_DIR, PA_PIN5_DIR, PA_PIN4_DIR, PA_PIN3_DIR, PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
     b42:	ea e3       	ldi	r30, 0x3A	; 58
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	8f ef       	ldi	r24, 0xFF	; 255
     b48:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR, PB_PIN6_DIR, PB_PIN5_DIR, PB_PIN4_DIR, PB_PIN3_DIR, PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
     b4a:	e7 e3       	ldi	r30, 0x37	; 55
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	8f ef       	ldi	r24, 0xFF	; 255
     b50:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR, PC_PIN6_DIR, PC_PIN5_DIR, PC_PIN4_DIR, PC_PIN3_DIR, PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
     b52:	e4 e3       	ldi	r30, 0x34	; 52
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	8a ea       	ldi	r24, 0xAA	; 170
     b58:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR, PD_PIN6_DIR, PD_PIN5_DIR, PD_PIN4_DIR, PD_PIN3_DIR, PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
     b5a:	e1 e3       	ldi	r30, 0x31	; 49
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	8a ea       	ldi	r24, 0xAA	; 170
     b60:	80 83       	st	Z, r24

	PORTA = CONC(PA_PIN7_VAL, PA_PIN6_VAL, PA_PIN5_VAL, PA_PIN4_VAL, PA_PIN3_VAL, PA_PIN2_VAL, PA_PIN1_VAL, PA_PIN0_VAL);
     b62:	eb e3       	ldi	r30, 0x3B	; 59
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	10 82       	st	Z, r1
	PORTB = CONC(PB_PIN7_VAL, PB_PIN6_VAL, PB_PIN5_VAL, PB_PIN4_VAL, PB_PIN3_VAL, PB_PIN2_VAL, PB_PIN1_VAL, PB_PIN0_VAL);
     b68:	e8 e3       	ldi	r30, 0x38	; 56
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	10 82       	st	Z, r1
	PORTC = CONC(PC_PIN7_VAL, PC_PIN6_VAL, PC_PIN5_VAL, PC_PIN4_VAL, PC_PIN3_VAL, PC_PIN2_VAL, PC_PIN1_VAL, PC_PIN0_VAL);
     b6e:	e5 e3       	ldi	r30, 0x35	; 53
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	86 e6       	ldi	r24, 0x66	; 102
     b74:	80 83       	st	Z, r24
	PORTD = CONC(PD_PIN7_VAL, PD_PIN6_VAL, PD_PIN5_VAL, PD_PIN4_VAL, PD_PIN3_VAL, PD_PIN2_VAL, PD_PIN1_VAL, PD_PIN0_VAL);
     b76:	e2 e3       	ldi	r30, 0x32	; 50
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	86 e6       	ldi	r24, 0x66	; 102
     b7c:	80 83       	st	Z, r24

	Local_enuErrorState = ES_OK;
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
     b82:	89 81       	ldd	r24, Y+1	; 0x01
}
     b84:	0f 90       	pop	r0
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <DIO_enuSetPortDirection>:


ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value)
{
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	00 d0       	rcall	.+0      	; 0xb92 <DIO_enuSetPortDirection+0x6>
     b92:	00 d0       	rcall	.+0      	; 0xb94 <DIO_enuSetPortDirection+0x8>
     b94:	0f 92       	push	r0
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
     b9a:	8a 83       	std	Y+2, r24	; 0x02
     b9c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     b9e:	19 82       	std	Y+1, r1	; 0x01

	/*Range Check*/
	if(Copy_u8PortID <= DIO_PORTD)
     ba0:	8a 81       	ldd	r24, Y+2	; 0x02
     ba2:	84 30       	cpi	r24, 0x04	; 4
     ba4:	a8 f5       	brcc	.+106    	; 0xc10 <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
     ba6:	8a 81       	ldd	r24, Y+2	; 0x02
     ba8:	28 2f       	mov	r18, r24
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	3d 83       	std	Y+5, r19	; 0x05
     bae:	2c 83       	std	Y+4, r18	; 0x04
     bb0:	8c 81       	ldd	r24, Y+4	; 0x04
     bb2:	9d 81       	ldd	r25, Y+5	; 0x05
     bb4:	81 30       	cpi	r24, 0x01	; 1
     bb6:	91 05       	cpc	r25, r1
     bb8:	d1 f0       	breq	.+52     	; 0xbee <DIO_enuSetPortDirection+0x62>
     bba:	2c 81       	ldd	r18, Y+4	; 0x04
     bbc:	3d 81       	ldd	r19, Y+5	; 0x05
     bbe:	22 30       	cpi	r18, 0x02	; 2
     bc0:	31 05       	cpc	r19, r1
     bc2:	2c f4       	brge	.+10     	; 0xbce <DIO_enuSetPortDirection+0x42>
     bc4:	8c 81       	ldd	r24, Y+4	; 0x04
     bc6:	9d 81       	ldd	r25, Y+5	; 0x05
     bc8:	00 97       	sbiw	r24, 0x00	; 0
     bca:	61 f0       	breq	.+24     	; 0xbe4 <DIO_enuSetPortDirection+0x58>
     bcc:	1e c0       	rjmp	.+60     	; 0xc0a <DIO_enuSetPortDirection+0x7e>
     bce:	2c 81       	ldd	r18, Y+4	; 0x04
     bd0:	3d 81       	ldd	r19, Y+5	; 0x05
     bd2:	22 30       	cpi	r18, 0x02	; 2
     bd4:	31 05       	cpc	r19, r1
     bd6:	81 f0       	breq	.+32     	; 0xbf8 <DIO_enuSetPortDirection+0x6c>
     bd8:	8c 81       	ldd	r24, Y+4	; 0x04
     bda:	9d 81       	ldd	r25, Y+5	; 0x05
     bdc:	83 30       	cpi	r24, 0x03	; 3
     bde:	91 05       	cpc	r25, r1
     be0:	81 f0       	breq	.+32     	; 0xc02 <DIO_enuSetPortDirection+0x76>
     be2:	13 c0       	rjmp	.+38     	; 0xc0a <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
     be4:	ea e3       	ldi	r30, 0x3A	; 58
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	80 83       	st	Z, r24
     bec:	0e c0       	rjmp	.+28     	; 0xc0a <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
     bee:	e7 e3       	ldi	r30, 0x37	; 55
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	8b 81       	ldd	r24, Y+3	; 0x03
     bf4:	80 83       	st	Z, r24
     bf6:	09 c0       	rjmp	.+18     	; 0xc0a <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
     bf8:	e4 e3       	ldi	r30, 0x34	; 52
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	8b 81       	ldd	r24, Y+3	; 0x03
     bfe:	80 83       	st	Z, r24
     c00:	04 c0       	rjmp	.+8      	; 0xc0a <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
     c02:	e1 e3       	ldi	r30, 0x31	; 49
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	89 83       	std	Y+1, r24	; 0x01
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     c10:	83 e0       	ldi	r24, 0x03	; 3
     c12:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     c14:	89 81       	ldd	r24, Y+1	; 0x01
}
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	cf 91       	pop	r28
     c22:	df 91       	pop	r29
     c24:	08 95       	ret

00000c26 <DIO_enuSetPortValue>:


ES_t DIO_enuSetPortValue(u8 Copy_u8PortID, u8 Copy_u8Value)
{
     c26:	df 93       	push	r29
     c28:	cf 93       	push	r28
     c2a:	00 d0       	rcall	.+0      	; 0xc2c <DIO_enuSetPortValue+0x6>
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <DIO_enuSetPortValue+0x8>
     c2e:	0f 92       	push	r0
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	8a 83       	std	Y+2, r24	; 0x02
     c36:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     c38:	19 82       	std	Y+1, r1	; 0x01

	/* Range Check */
	if(Copy_u8PortID <= DIO_PORTD)
     c3a:	8a 81       	ldd	r24, Y+2	; 0x02
     c3c:	84 30       	cpi	r24, 0x04	; 4
     c3e:	a8 f5       	brcc	.+106    	; 0xcaa <DIO_enuSetPortValue+0x84>
	{
		switch(Copy_u8PortID)
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	3d 83       	std	Y+5, r19	; 0x05
     c48:	2c 83       	std	Y+4, r18	; 0x04
     c4a:	8c 81       	ldd	r24, Y+4	; 0x04
     c4c:	9d 81       	ldd	r25, Y+5	; 0x05
     c4e:	81 30       	cpi	r24, 0x01	; 1
     c50:	91 05       	cpc	r25, r1
     c52:	d1 f0       	breq	.+52     	; 0xc88 <DIO_enuSetPortValue+0x62>
     c54:	2c 81       	ldd	r18, Y+4	; 0x04
     c56:	3d 81       	ldd	r19, Y+5	; 0x05
     c58:	22 30       	cpi	r18, 0x02	; 2
     c5a:	31 05       	cpc	r19, r1
     c5c:	2c f4       	brge	.+10     	; 0xc68 <DIO_enuSetPortValue+0x42>
     c5e:	8c 81       	ldd	r24, Y+4	; 0x04
     c60:	9d 81       	ldd	r25, Y+5	; 0x05
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	61 f0       	breq	.+24     	; 0xc7e <DIO_enuSetPortValue+0x58>
     c66:	1e c0       	rjmp	.+60     	; 0xca4 <DIO_enuSetPortValue+0x7e>
     c68:	2c 81       	ldd	r18, Y+4	; 0x04
     c6a:	3d 81       	ldd	r19, Y+5	; 0x05
     c6c:	22 30       	cpi	r18, 0x02	; 2
     c6e:	31 05       	cpc	r19, r1
     c70:	81 f0       	breq	.+32     	; 0xc92 <DIO_enuSetPortValue+0x6c>
     c72:	8c 81       	ldd	r24, Y+4	; 0x04
     c74:	9d 81       	ldd	r25, Y+5	; 0x05
     c76:	83 30       	cpi	r24, 0x03	; 3
     c78:	91 05       	cpc	r25, r1
     c7a:	81 f0       	breq	.+32     	; 0xc9c <DIO_enuSetPortValue+0x76>
     c7c:	13 c0       	rjmp	.+38     	; 0xca4 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA = Copy_u8Value;
     c7e:	eb e3       	ldi	r30, 0x3B	; 59
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	8b 81       	ldd	r24, Y+3	; 0x03
     c84:	80 83       	st	Z, r24
     c86:	0e c0       	rjmp	.+28     	; 0xca4 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8Value;
     c88:	e8 e3       	ldi	r30, 0x38	; 56
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	8b 81       	ldd	r24, Y+3	; 0x03
     c8e:	80 83       	st	Z, r24
     c90:	09 c0       	rjmp	.+18     	; 0xca4 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8Value;
     c92:	e5 e3       	ldi	r30, 0x35	; 53
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	8b 81       	ldd	r24, Y+3	; 0x03
     c98:	80 83       	st	Z, r24
     c9a:	04 c0       	rjmp	.+8      	; 0xca4 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = Copy_u8Value;
     c9c:	e2 e3       	ldi	r30, 0x32	; 50
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	89 83       	std	Y+1, r24	; 0x01
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     caa:	83 e0       	ldi	r24, 0x03	; 3
     cac:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     cae:	89 81       	ldd	r24, Y+1	; 0x01
}
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	cf 91       	pop	r28
     cbc:	df 91       	pop	r29
     cbe:	08 95       	ret

00000cc0 <DIO_enuTogPortValue>:


ES_t DIO_enuTogPortValue(u8 Copy_u8PortID)
{
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <DIO_enuTogPortValue+0x6>
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <DIO_enuTogPortValue+0x8>
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     cce:	19 82       	std	Y+1, r1	; 0x01

	/* Range Check */
	if(Copy_u8PortID <= DIO_PORTD)
     cd0:	8a 81       	ldd	r24, Y+2	; 0x02
     cd2:	84 30       	cpi	r24, 0x04	; 4
     cd4:	08 f0       	brcs	.+2      	; 0xcd8 <DIO_enuTogPortValue+0x18>
     cd6:	41 c0       	rjmp	.+130    	; 0xd5a <DIO_enuTogPortValue+0x9a>
	{
		switch(Copy_u8PortID)
     cd8:	8a 81       	ldd	r24, Y+2	; 0x02
     cda:	28 2f       	mov	r18, r24
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	3c 83       	std	Y+4, r19	; 0x04
     ce0:	2b 83       	std	Y+3, r18	; 0x03
     ce2:	8b 81       	ldd	r24, Y+3	; 0x03
     ce4:	9c 81       	ldd	r25, Y+4	; 0x04
     ce6:	81 30       	cpi	r24, 0x01	; 1
     ce8:	91 05       	cpc	r25, r1
     cea:	e9 f0       	breq	.+58     	; 0xd26 <DIO_enuTogPortValue+0x66>
     cec:	2b 81       	ldd	r18, Y+3	; 0x03
     cee:	3c 81       	ldd	r19, Y+4	; 0x04
     cf0:	22 30       	cpi	r18, 0x02	; 2
     cf2:	31 05       	cpc	r19, r1
     cf4:	2c f4       	brge	.+10     	; 0xd00 <DIO_enuTogPortValue+0x40>
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	9c 81       	ldd	r25, Y+4	; 0x04
     cfa:	00 97       	sbiw	r24, 0x00	; 0
     cfc:	61 f0       	breq	.+24     	; 0xd16 <DIO_enuTogPortValue+0x56>
     cfe:	2a c0       	rjmp	.+84     	; 0xd54 <DIO_enuTogPortValue+0x94>
     d00:	2b 81       	ldd	r18, Y+3	; 0x03
     d02:	3c 81       	ldd	r19, Y+4	; 0x04
     d04:	22 30       	cpi	r18, 0x02	; 2
     d06:	31 05       	cpc	r19, r1
     d08:	b1 f0       	breq	.+44     	; 0xd36 <DIO_enuTogPortValue+0x76>
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	9c 81       	ldd	r25, Y+4	; 0x04
     d0e:	83 30       	cpi	r24, 0x03	; 3
     d10:	91 05       	cpc	r25, r1
     d12:	c9 f0       	breq	.+50     	; 0xd46 <DIO_enuTogPortValue+0x86>
     d14:	1f c0       	rjmp	.+62     	; 0xd54 <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA = ~PORTA;
     d16:	ab e3       	ldi	r26, 0x3B	; 59
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	eb e3       	ldi	r30, 0x3B	; 59
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	80 95       	com	r24
     d22:	8c 93       	st	X, r24
     d24:	17 c0       	rjmp	.+46     	; 0xd54 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB = ~PORTB;
     d26:	a8 e3       	ldi	r26, 0x38	; 56
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e8 e3       	ldi	r30, 0x38	; 56
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	80 95       	com	r24
     d32:	8c 93       	st	X, r24
     d34:	0f c0       	rjmp	.+30     	; 0xd54 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC = ~PORTC;
     d36:	a5 e3       	ldi	r26, 0x35	; 53
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e5 e3       	ldi	r30, 0x35	; 53
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	80 95       	com	r24
     d42:	8c 93       	st	X, r24
     d44:	07 c0       	rjmp	.+14     	; 0xd54 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD = ~PORTD;
     d46:	a2 e3       	ldi	r26, 0x32	; 50
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e2 e3       	ldi	r30, 0x32	; 50
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	80 95       	com	r24
     d52:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	89 83       	std	Y+1, r24	; 0x01
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <DIO_enuGetPortValue>:


ES_t DIO_enuGetPortValue(u8 Copy_u8PortID, u8 * Copy_pu8Value)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	00 d0       	rcall	.+0      	; 0xd74 <DIO_enuGetPortValue+0x6>
     d74:	00 d0       	rcall	.+0      	; 0xd76 <DIO_enuGetPortValue+0x8>
     d76:	00 d0       	rcall	.+0      	; 0xd78 <DIO_enuGetPortValue+0xa>
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	8a 83       	std	Y+2, r24	; 0x02
     d7e:	7c 83       	std	Y+4, r23	; 0x04
     d80:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     d82:	19 82       	std	Y+1, r1	; 0x01

	/* Check if wild pointer */
	if(Copy_pu8Value != NULL)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	9c 81       	ldd	r25, Y+4	; 0x04
     d88:	00 97       	sbiw	r24, 0x00	; 0
     d8a:	09 f4       	brne	.+2      	; 0xd8e <DIO_enuGetPortValue+0x20>
     d8c:	43 c0       	rjmp	.+134    	; 0xe14 <DIO_enuGetPortValue+0xa6>
	{
		/* Change Range */
		if(Copy_u8PortID <= DIO_PORTD)
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	84 30       	cpi	r24, 0x04	; 4
     d92:	e8 f5       	brcc	.+122    	; 0xe0e <DIO_enuGetPortValue+0xa0>
		{
			switch(Copy_u8PortID)
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	3e 83       	std	Y+6, r19	; 0x06
     d9c:	2d 83       	std	Y+5, r18	; 0x05
     d9e:	8d 81       	ldd	r24, Y+5	; 0x05
     da0:	9e 81       	ldd	r25, Y+6	; 0x06
     da2:	81 30       	cpi	r24, 0x01	; 1
     da4:	91 05       	cpc	r25, r1
     da6:	e1 f0       	breq	.+56     	; 0xde0 <DIO_enuGetPortValue+0x72>
     da8:	2d 81       	ldd	r18, Y+5	; 0x05
     daa:	3e 81       	ldd	r19, Y+6	; 0x06
     dac:	22 30       	cpi	r18, 0x02	; 2
     dae:	31 05       	cpc	r19, r1
     db0:	2c f4       	brge	.+10     	; 0xdbc <DIO_enuGetPortValue+0x4e>
     db2:	8d 81       	ldd	r24, Y+5	; 0x05
     db4:	9e 81       	ldd	r25, Y+6	; 0x06
     db6:	00 97       	sbiw	r24, 0x00	; 0
     db8:	61 f0       	breq	.+24     	; 0xdd2 <DIO_enuGetPortValue+0x64>
     dba:	26 c0       	rjmp	.+76     	; 0xe08 <DIO_enuGetPortValue+0x9a>
     dbc:	2d 81       	ldd	r18, Y+5	; 0x05
     dbe:	3e 81       	ldd	r19, Y+6	; 0x06
     dc0:	22 30       	cpi	r18, 0x02	; 2
     dc2:	31 05       	cpc	r19, r1
     dc4:	a1 f0       	breq	.+40     	; 0xdee <DIO_enuGetPortValue+0x80>
     dc6:	8d 81       	ldd	r24, Y+5	; 0x05
     dc8:	9e 81       	ldd	r25, Y+6	; 0x06
     dca:	83 30       	cpi	r24, 0x03	; 3
     dcc:	91 05       	cpc	r25, r1
     dce:	b1 f0       	breq	.+44     	; 0xdfc <DIO_enuGetPortValue+0x8e>
     dd0:	1b c0       	rjmp	.+54     	; 0xe08 <DIO_enuGetPortValue+0x9a>
			{
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
     dd2:	e9 e3       	ldi	r30, 0x39	; 57
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	eb 81       	ldd	r30, Y+3	; 0x03
     dda:	fc 81       	ldd	r31, Y+4	; 0x04
     ddc:	80 83       	st	Z, r24
     dde:	14 c0       	rjmp	.+40     	; 0xe08 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
     de0:	e6 e3       	ldi	r30, 0x36	; 54
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	eb 81       	ldd	r30, Y+3	; 0x03
     de8:	fc 81       	ldd	r31, Y+4	; 0x04
     dea:	80 83       	st	Z, r24
     dec:	0d c0       	rjmp	.+26     	; 0xe08 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
     dee:	e3 e3       	ldi	r30, 0x33	; 51
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	eb 81       	ldd	r30, Y+3	; 0x03
     df6:	fc 81       	ldd	r31, Y+4	; 0x04
     df8:	80 83       	st	Z, r24
     dfa:	06 c0       	rjmp	.+12     	; 0xe08 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
     dfc:	e0 e3       	ldi	r30, 0x30	; 48
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	eb 81       	ldd	r30, Y+3	; 0x03
     e04:	fc 81       	ldd	r31, Y+4	; 0x04
     e06:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	89 83       	std	Y+1, r24	; 0x01
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
     e0e:	83 e0       	ldi	r24, 0x03	; 3
     e10:	89 83       	std	Y+1, r24	; 0x01
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     e18:	89 81       	ldd	r24, Y+1	; 0x01
}
     e1a:	26 96       	adiw	r28, 0x06	; 6
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	de bf       	out	0x3e, r29	; 62
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	cd bf       	out	0x3d, r28	; 61
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	00 d0       	rcall	.+0      	; 0xe32 <DIO_enuSetPinDirection+0x6>
     e32:	00 d0       	rcall	.+0      	; 0xe34 <DIO_enuSetPinDirection+0x8>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <DIO_enuSetPinDirection+0xa>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	8a 83       	std	Y+2, r24	; 0x02
     e3c:	6b 83       	std	Y+3, r22	; 0x03
     e3e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     e40:	19 82       	std	Y+1, r1	; 0x01

	/* Check range */
	if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) && (Copy_u8Value <= OUTPUT))
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	84 30       	cpi	r24, 0x04	; 4
     e46:	08 f0       	brcs	.+2      	; 0xe4a <DIO_enuSetPinDirection+0x1e>
     e48:	d1 c0       	rjmp	.+418    	; 0xfec <DIO_enuSetPinDirection+0x1c0>
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	88 30       	cpi	r24, 0x08	; 8
     e4e:	08 f0       	brcs	.+2      	; 0xe52 <DIO_enuSetPinDirection+0x26>
     e50:	cd c0       	rjmp	.+410    	; 0xfec <DIO_enuSetPinDirection+0x1c0>
     e52:	8c 81       	ldd	r24, Y+4	; 0x04
     e54:	82 30       	cpi	r24, 0x02	; 2
     e56:	08 f0       	brcs	.+2      	; 0xe5a <DIO_enuSetPinDirection+0x2e>
     e58:	c9 c0       	rjmp	.+402    	; 0xfec <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	3e 83       	std	Y+6, r19	; 0x06
     e62:	2d 83       	std	Y+5, r18	; 0x05
     e64:	6d 81       	ldd	r22, Y+5	; 0x05
     e66:	7e 81       	ldd	r23, Y+6	; 0x06
     e68:	61 30       	cpi	r22, 0x01	; 1
     e6a:	71 05       	cpc	r23, r1
     e6c:	09 f4       	brne	.+2      	; 0xe70 <DIO_enuSetPinDirection+0x44>
     e6e:	41 c0       	rjmp	.+130    	; 0xef2 <DIO_enuSetPinDirection+0xc6>
     e70:	8d 81       	ldd	r24, Y+5	; 0x05
     e72:	9e 81       	ldd	r25, Y+6	; 0x06
     e74:	82 30       	cpi	r24, 0x02	; 2
     e76:	91 05       	cpc	r25, r1
     e78:	34 f4       	brge	.+12     	; 0xe86 <DIO_enuSetPinDirection+0x5a>
     e7a:	2d 81       	ldd	r18, Y+5	; 0x05
     e7c:	3e 81       	ldd	r19, Y+6	; 0x06
     e7e:	21 15       	cp	r18, r1
     e80:	31 05       	cpc	r19, r1
     e82:	71 f0       	breq	.+28     	; 0xea0 <DIO_enuSetPinDirection+0x74>
     e84:	b0 c0       	rjmp	.+352    	; 0xfe6 <DIO_enuSetPinDirection+0x1ba>
     e86:	6d 81       	ldd	r22, Y+5	; 0x05
     e88:	7e 81       	ldd	r23, Y+6	; 0x06
     e8a:	62 30       	cpi	r22, 0x02	; 2
     e8c:	71 05       	cpc	r23, r1
     e8e:	09 f4       	brne	.+2      	; 0xe92 <DIO_enuSetPinDirection+0x66>
     e90:	59 c0       	rjmp	.+178    	; 0xf44 <DIO_enuSetPinDirection+0x118>
     e92:	8d 81       	ldd	r24, Y+5	; 0x05
     e94:	9e 81       	ldd	r25, Y+6	; 0x06
     e96:	83 30       	cpi	r24, 0x03	; 3
     e98:	91 05       	cpc	r25, r1
     e9a:	09 f4       	brne	.+2      	; 0xe9e <DIO_enuSetPinDirection+0x72>
     e9c:	7c c0       	rjmp	.+248    	; 0xf96 <DIO_enuSetPinDirection+0x16a>
     e9e:	a3 c0       	rjmp	.+326    	; 0xfe6 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);             //Mask bit == Clear Bit
     ea0:	aa e3       	ldi	r26, 0x3A	; 58
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	ea e3       	ldi	r30, 0x3A	; 58
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	48 2f       	mov	r20, r24
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <DIO_enuSetPinDirection+0x90>
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	2a 95       	dec	r18
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <DIO_enuSetPinDirection+0x8c>
     ec0:	80 95       	com	r24
     ec2:	84 23       	and	r24, r20
     ec4:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID); //Write new value
     ec6:	aa e3       	ldi	r26, 0x3A	; 58
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	ea e3       	ldi	r30, 0x3A	; 58
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	48 2f       	mov	r20, r24
     ed2:	8c 81       	ldd	r24, Y+4	; 0x04
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	88 2f       	mov	r24, r24
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	b9 01       	movw	r22, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <DIO_enuSetPinDirection+0xba>
     ee2:	66 0f       	add	r22, r22
     ee4:	77 1f       	adc	r23, r23
     ee6:	8a 95       	dec	r24
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <DIO_enuSetPinDirection+0xb6>
     eea:	cb 01       	movw	r24, r22
     eec:	84 2b       	or	r24, r20
     eee:	8c 93       	st	X, r24
     ef0:	7a c0       	rjmp	.+244    	; 0xfe6 <DIO_enuSetPinDirection+0x1ba>
			 *      -> 101-0-1001 | 000-1-0000 (Write Value)
			 *      -> 101-1-1-1001 (Result)
			 */
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
     ef2:	a7 e3       	ldi	r26, 0x37	; 55
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e7 e3       	ldi	r30, 0x37	; 55
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	48 2f       	mov	r20, r24
     efe:	8b 81       	ldd	r24, Y+3	; 0x03
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <DIO_enuSetPinDirection+0xe2>
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	2a 95       	dec	r18
     f10:	e2 f7       	brpl	.-8      	; 0xf0a <DIO_enuSetPinDirection+0xde>
     f12:	80 95       	com	r24
     f14:	84 23       	and	r24, r20
     f16:	8c 93       	st	X, r24
			DDRB |= (Copy_u8Value << Copy_u8PinID);
     f18:	a7 e3       	ldi	r26, 0x37	; 55
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e7 e3       	ldi	r30, 0x37	; 55
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	48 2f       	mov	r20, r24
     f24:	8c 81       	ldd	r24, Y+4	; 0x04
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	88 2f       	mov	r24, r24
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	b9 01       	movw	r22, r18
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <DIO_enuSetPinDirection+0x10c>
     f34:	66 0f       	add	r22, r22
     f36:	77 1f       	adc	r23, r23
     f38:	8a 95       	dec	r24
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <DIO_enuSetPinDirection+0x108>
     f3c:	cb 01       	movw	r24, r22
     f3e:	84 2b       	or	r24, r20
     f40:	8c 93       	st	X, r24
     f42:	51 c0       	rjmp	.+162    	; 0xfe6 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
     f44:	a4 e3       	ldi	r26, 0x34	; 52
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e4 e3       	ldi	r30, 0x34	; 52
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	48 2f       	mov	r20, r24
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DIO_enuSetPinDirection+0x134>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	2a 95       	dec	r18
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DIO_enuSetPinDirection+0x130>
     f64:	80 95       	com	r24
     f66:	84 23       	and	r24, r20
     f68:	8c 93       	st	X, r24
			DDRC |= (Copy_u8Value << Copy_u8PinID);
     f6a:	a4 e3       	ldi	r26, 0x34	; 52
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e4 e3       	ldi	r30, 0x34	; 52
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	8c 81       	ldd	r24, Y+4	; 0x04
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	88 2f       	mov	r24, r24
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	b9 01       	movw	r22, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <DIO_enuSetPinDirection+0x15e>
     f86:	66 0f       	add	r22, r22
     f88:	77 1f       	adc	r23, r23
     f8a:	8a 95       	dec	r24
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <DIO_enuSetPinDirection+0x15a>
     f8e:	cb 01       	movw	r24, r22
     f90:	84 2b       	or	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	28 c0       	rjmp	.+80     	; 0xfe6 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
     f96:	a1 e3       	ldi	r26, 0x31	; 49
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e1 e3       	ldi	r30, 0x31	; 49
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_enuSetPinDirection+0x186>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	2a 95       	dec	r18
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <DIO_enuSetPinDirection+0x182>
     fb6:	80 95       	com	r24
     fb8:	84 23       	and	r24, r20
     fba:	8c 93       	st	X, r24
			DDRD |= (Copy_u8Value << Copy_u8PinID);
     fbc:	a1 e3       	ldi	r26, 0x31	; 49
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e1 e3       	ldi	r30, 0x31	; 49
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	48 2f       	mov	r20, r24
     fc8:	8c 81       	ldd	r24, Y+4	; 0x04
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	88 2f       	mov	r24, r24
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	b9 01       	movw	r22, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <DIO_enuSetPinDirection+0x1b0>
     fd8:	66 0f       	add	r22, r22
     fda:	77 1f       	adc	r23, r23
     fdc:	8a 95       	dec	r24
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <DIO_enuSetPinDirection+0x1ac>
     fe0:	cb 01       	movw	r24, r22
     fe2:	84 2b       	or	r24, r20
     fe4:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	89 83       	std	Y+1, r24	; 0x01
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     fec:	83 e0       	ldi	r24, 0x03	; 3
     fee:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ff2:	26 96       	adiw	r28, 0x06	; 6
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	00 d0       	rcall	.+0      	; 0x100a <DIO_enuSetPinValue+0x6>
    100a:	00 d0       	rcall	.+0      	; 0x100c <DIO_enuSetPinValue+0x8>
    100c:	00 d0       	rcall	.+0      	; 0x100e <DIO_enuSetPinValue+0xa>
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	8a 83       	std	Y+2, r24	; 0x02
    1014:	6b 83       	std	Y+3, r22	; 0x03
    1016:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1018:	19 82       	std	Y+1, r1	; 0x01

	/* Check range */
	if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) && (Copy_u8Value <= OUTPUT))
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	84 30       	cpi	r24, 0x04	; 4
    101e:	08 f0       	brcs	.+2      	; 0x1022 <DIO_enuSetPinValue+0x1e>
    1020:	d1 c0       	rjmp	.+418    	; 0x11c4 <DIO_enuSetPinValue+0x1c0>
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	88 30       	cpi	r24, 0x08	; 8
    1026:	08 f0       	brcs	.+2      	; 0x102a <DIO_enuSetPinValue+0x26>
    1028:	cd c0       	rjmp	.+410    	; 0x11c4 <DIO_enuSetPinValue+0x1c0>
    102a:	8c 81       	ldd	r24, Y+4	; 0x04
    102c:	82 30       	cpi	r24, 0x02	; 2
    102e:	08 f0       	brcs	.+2      	; 0x1032 <DIO_enuSetPinValue+0x2e>
    1030:	c9 c0       	rjmp	.+402    	; 0x11c4 <DIO_enuSetPinValue+0x1c0>
	{
		switch(Copy_u8PortID)
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	3e 83       	std	Y+6, r19	; 0x06
    103a:	2d 83       	std	Y+5, r18	; 0x05
    103c:	6d 81       	ldd	r22, Y+5	; 0x05
    103e:	7e 81       	ldd	r23, Y+6	; 0x06
    1040:	61 30       	cpi	r22, 0x01	; 1
    1042:	71 05       	cpc	r23, r1
    1044:	09 f4       	brne	.+2      	; 0x1048 <DIO_enuSetPinValue+0x44>
    1046:	41 c0       	rjmp	.+130    	; 0x10ca <DIO_enuSetPinValue+0xc6>
    1048:	8d 81       	ldd	r24, Y+5	; 0x05
    104a:	9e 81       	ldd	r25, Y+6	; 0x06
    104c:	82 30       	cpi	r24, 0x02	; 2
    104e:	91 05       	cpc	r25, r1
    1050:	34 f4       	brge	.+12     	; 0x105e <DIO_enuSetPinValue+0x5a>
    1052:	2d 81       	ldd	r18, Y+5	; 0x05
    1054:	3e 81       	ldd	r19, Y+6	; 0x06
    1056:	21 15       	cp	r18, r1
    1058:	31 05       	cpc	r19, r1
    105a:	71 f0       	breq	.+28     	; 0x1078 <DIO_enuSetPinValue+0x74>
    105c:	b0 c0       	rjmp	.+352    	; 0x11be <DIO_enuSetPinValue+0x1ba>
    105e:	6d 81       	ldd	r22, Y+5	; 0x05
    1060:	7e 81       	ldd	r23, Y+6	; 0x06
    1062:	62 30       	cpi	r22, 0x02	; 2
    1064:	71 05       	cpc	r23, r1
    1066:	09 f4       	brne	.+2      	; 0x106a <DIO_enuSetPinValue+0x66>
    1068:	59 c0       	rjmp	.+178    	; 0x111c <DIO_enuSetPinValue+0x118>
    106a:	8d 81       	ldd	r24, Y+5	; 0x05
    106c:	9e 81       	ldd	r25, Y+6	; 0x06
    106e:	83 30       	cpi	r24, 0x03	; 3
    1070:	91 05       	cpc	r25, r1
    1072:	09 f4       	brne	.+2      	; 0x1076 <DIO_enuSetPinValue+0x72>
    1074:	7c c0       	rjmp	.+248    	; 0x116e <DIO_enuSetPinValue+0x16a>
    1076:	a3 c0       	rjmp	.+326    	; 0x11be <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);             //Mask bit == Clear Bit
    1078:	ab e3       	ldi	r26, 0x3B	; 59
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	eb e3       	ldi	r30, 0x3B	; 59
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	48 2f       	mov	r20, r24
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <DIO_enuSetPinValue+0x90>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	2a 95       	dec	r18
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <DIO_enuSetPinValue+0x8c>
    1098:	80 95       	com	r24
    109a:	84 23       	and	r24, r20
    109c:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID); //Write new value
    109e:	ab e3       	ldi	r26, 0x3B	; 59
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	eb e3       	ldi	r30, 0x3B	; 59
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8c 81       	ldd	r24, Y+4	; 0x04
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	88 2f       	mov	r24, r24
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	b9 01       	movw	r22, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <DIO_enuSetPinValue+0xba>
    10ba:	66 0f       	add	r22, r22
    10bc:	77 1f       	adc	r23, r23
    10be:	8a 95       	dec	r24
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <DIO_enuSetPinValue+0xb6>
    10c2:	cb 01       	movw	r24, r22
    10c4:	84 2b       	or	r24, r20
    10c6:	8c 93       	st	X, r24
    10c8:	7a c0       	rjmp	.+244    	; 0x11be <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    10ca:	a8 e3       	ldi	r26, 0x38	; 56
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e8 e3       	ldi	r30, 0x38	; 56
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	48 2f       	mov	r20, r24
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <DIO_enuSetPinValue+0xe2>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	2a 95       	dec	r18
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <DIO_enuSetPinValue+0xde>
    10ea:	80 95       	com	r24
    10ec:	84 23       	and	r24, r20
    10ee:	8c 93       	st	X, r24
			PORTB |= (Copy_u8Value << Copy_u8PinID);
    10f0:	a8 e3       	ldi	r26, 0x38	; 56
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e8 e3       	ldi	r30, 0x38	; 56
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	48 2f       	mov	r20, r24
    10fc:	8c 81       	ldd	r24, Y+4	; 0x04
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	88 2f       	mov	r24, r24
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	b9 01       	movw	r22, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <DIO_enuSetPinValue+0x10c>
    110c:	66 0f       	add	r22, r22
    110e:	77 1f       	adc	r23, r23
    1110:	8a 95       	dec	r24
    1112:	e2 f7       	brpl	.-8      	; 0x110c <DIO_enuSetPinValue+0x108>
    1114:	cb 01       	movw	r24, r22
    1116:	84 2b       	or	r24, r20
    1118:	8c 93       	st	X, r24
    111a:	51 c0       	rjmp	.+162    	; 0x11be <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    111c:	a5 e3       	ldi	r26, 0x35	; 53
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e5 e3       	ldi	r30, 0x35	; 53
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <DIO_enuSetPinValue+0x134>
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	2a 95       	dec	r18
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <DIO_enuSetPinValue+0x130>
    113c:	80 95       	com	r24
    113e:	84 23       	and	r24, r20
    1140:	8c 93       	st	X, r24
			PORTC |= (Copy_u8Value << Copy_u8PinID);
    1142:	a5 e3       	ldi	r26, 0x35	; 53
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e5 e3       	ldi	r30, 0x35	; 53
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	48 2f       	mov	r20, r24
    114e:	8c 81       	ldd	r24, Y+4	; 0x04
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	88 2f       	mov	r24, r24
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	b9 01       	movw	r22, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <DIO_enuSetPinValue+0x15e>
    115e:	66 0f       	add	r22, r22
    1160:	77 1f       	adc	r23, r23
    1162:	8a 95       	dec	r24
    1164:	e2 f7       	brpl	.-8      	; 0x115e <DIO_enuSetPinValue+0x15a>
    1166:	cb 01       	movw	r24, r22
    1168:	84 2b       	or	r24, r20
    116a:	8c 93       	st	X, r24
    116c:	28 c0       	rjmp	.+80     	; 0x11be <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    116e:	a2 e3       	ldi	r26, 0x32	; 50
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e2 e3       	ldi	r30, 0x32	; 50
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	48 2f       	mov	r20, r24
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	02 c0       	rjmp	.+4      	; 0x118a <DIO_enuSetPinValue+0x186>
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	2a 95       	dec	r18
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <DIO_enuSetPinValue+0x182>
    118e:	80 95       	com	r24
    1190:	84 23       	and	r24, r20
    1192:	8c 93       	st	X, r24
			PORTD |= (Copy_u8Value << Copy_u8PinID);
    1194:	a2 e3       	ldi	r26, 0x32	; 50
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e2 e3       	ldi	r30, 0x32	; 50
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	48 2f       	mov	r20, r24
    11a0:	8c 81       	ldd	r24, Y+4	; 0x04
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	88 2f       	mov	r24, r24
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	b9 01       	movw	r22, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <DIO_enuSetPinValue+0x1b0>
    11b0:	66 0f       	add	r22, r22
    11b2:	77 1f       	adc	r23, r23
    11b4:	8a 95       	dec	r24
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <DIO_enuSetPinValue+0x1ac>
    11b8:	cb 01       	movw	r24, r22
    11ba:	84 2b       	or	r24, r20
    11bc:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	89 83       	std	Y+1, r24	; 0x01
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    11c4:	83 e0       	ldi	r24, 0x03	; 3
    11c6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ca:	26 96       	adiw	r28, 0x06	; 6
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID)
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <DIO_enuTogPinValue+0x6>
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <DIO_enuTogPinValue+0x8>
    11e4:	0f 92       	push	r0
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	8a 83       	std	Y+2, r24	; 0x02
    11ec:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    11ee:	19 82       	std	Y+1, r1	; 0x01

	/* Check range */
	if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7))
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	84 30       	cpi	r24, 0x04	; 4
    11f4:	08 f0       	brcs	.+2      	; 0x11f8 <DIO_enuTogPinValue+0x1c>
    11f6:	75 c0       	rjmp	.+234    	; 0x12e2 <DIO_enuTogPinValue+0x106>
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	88 30       	cpi	r24, 0x08	; 8
    11fc:	08 f0       	brcs	.+2      	; 0x1200 <DIO_enuTogPinValue+0x24>
    11fe:	71 c0       	rjmp	.+226    	; 0x12e2 <DIO_enuTogPinValue+0x106>
	{
		switch(Copy_u8PortID)
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	3d 83       	std	Y+5, r19	; 0x05
    1208:	2c 83       	std	Y+4, r18	; 0x04
    120a:	8c 81       	ldd	r24, Y+4	; 0x04
    120c:	9d 81       	ldd	r25, Y+5	; 0x05
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	91 05       	cpc	r25, r1
    1212:	49 f1       	breq	.+82     	; 0x1266 <DIO_enuTogPinValue+0x8a>
    1214:	2c 81       	ldd	r18, Y+4	; 0x04
    1216:	3d 81       	ldd	r19, Y+5	; 0x05
    1218:	22 30       	cpi	r18, 0x02	; 2
    121a:	31 05       	cpc	r19, r1
    121c:	2c f4       	brge	.+10     	; 0x1228 <DIO_enuTogPinValue+0x4c>
    121e:	8c 81       	ldd	r24, Y+4	; 0x04
    1220:	9d 81       	ldd	r25, Y+5	; 0x05
    1222:	00 97       	sbiw	r24, 0x00	; 0
    1224:	61 f0       	breq	.+24     	; 0x123e <DIO_enuTogPinValue+0x62>
    1226:	5a c0       	rjmp	.+180    	; 0x12dc <DIO_enuTogPinValue+0x100>
    1228:	2c 81       	ldd	r18, Y+4	; 0x04
    122a:	3d 81       	ldd	r19, Y+5	; 0x05
    122c:	22 30       	cpi	r18, 0x02	; 2
    122e:	31 05       	cpc	r19, r1
    1230:	71 f1       	breq	.+92     	; 0x128e <DIO_enuTogPinValue+0xb2>
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	9d 81       	ldd	r25, Y+5	; 0x05
    1236:	83 30       	cpi	r24, 0x03	; 3
    1238:	91 05       	cpc	r25, r1
    123a:	e9 f1       	breq	.+122    	; 0x12b6 <DIO_enuTogPinValue+0xda>
    123c:	4f c0       	rjmp	.+158    	; 0x12dc <DIO_enuTogPinValue+0x100>
		{
		case DIO_PORTA:
			PORTA ^=  (DIO_MASK_BIT << Copy_u8PinID);
    123e:	ab e3       	ldi	r26, 0x3B	; 59
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	eb e3       	ldi	r30, 0x3B	; 59
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	48 2f       	mov	r20, r24
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	02 2e       	mov	r0, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <DIO_enuTogPinValue+0x80>
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	0a 94       	dec	r0
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <DIO_enuTogPinValue+0x7c>
    1260:	84 27       	eor	r24, r20
    1262:	8c 93       	st	X, r24
    1264:	3b c0       	rjmp	.+118    	; 0x12dc <DIO_enuTogPinValue+0x100>
			 *       -> 000-1-0000
			 *       -> 101-0-1001
			 * */
			break;
		case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT << Copy_u8PinID);
    1266:	a8 e3       	ldi	r26, 0x38	; 56
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e8 e3       	ldi	r30, 0x38	; 56
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	48 2f       	mov	r20, r24
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	02 2e       	mov	r0, r18
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <DIO_enuTogPinValue+0xa8>
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	0a 94       	dec	r0
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <DIO_enuTogPinValue+0xa4>
    1288:	84 27       	eor	r24, r20
    128a:	8c 93       	st	X, r24
    128c:	27 c0       	rjmp	.+78     	; 0x12dc <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT << Copy_u8PinID);
    128e:	a5 e3       	ldi	r26, 0x35	; 53
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e5 e3       	ldi	r30, 0x35	; 53
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	48 2f       	mov	r20, r24
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	02 2e       	mov	r0, r18
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <DIO_enuTogPinValue+0xd0>
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	0a 94       	dec	r0
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <DIO_enuTogPinValue+0xcc>
    12b0:	84 27       	eor	r24, r20
    12b2:	8c 93       	st	X, r24
    12b4:	13 c0       	rjmp	.+38     	; 0x12dc <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT << Copy_u8PinID);
    12b6:	a2 e3       	ldi	r26, 0x32	; 50
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e2 e3       	ldi	r30, 0x32	; 50
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	48 2f       	mov	r20, r24
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	02 2e       	mov	r0, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <DIO_enuTogPinValue+0xf8>
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	0a 94       	dec	r0
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <DIO_enuTogPinValue+0xf4>
    12d8:	84 27       	eor	r24, r20
    12da:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	89 83       	std	Y+1, r24	; 0x01
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <DIO_enuTogPinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    12e2:	83 e0       	ldi	r24, 0x03	; 3
    12e4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	08 95       	ret

000012f8 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 * Copy_pu8Value)
{
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	27 97       	sbiw	r28, 0x07	; 7
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	f8 94       	cli
    1306:	de bf       	out	0x3e, r29	; 62
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	cd bf       	out	0x3d, r28	; 61
    130c:	8a 83       	std	Y+2, r24	; 0x02
    130e:	6b 83       	std	Y+3, r22	; 0x03
    1310:	5d 83       	std	Y+5, r21	; 0x05
    1312:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1314:	19 82       	std	Y+1, r1	; 0x01

	/* Check if wild pointer */
	if(Copy_pu8Value != NULL)
    1316:	8c 81       	ldd	r24, Y+4	; 0x04
    1318:	9d 81       	ldd	r25, Y+5	; 0x05
    131a:	00 97       	sbiw	r24, 0x00	; 0
    131c:	09 f4       	brne	.+2      	; 0x1320 <DIO_enuGetPinValue+0x28>
    131e:	7e c0       	rjmp	.+252    	; 0x141c <DIO_enuGetPinValue+0x124>
	{
		/* Check Range */
		if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7))
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	84 30       	cpi	r24, 0x04	; 4
    1324:	08 f0       	brcs	.+2      	; 0x1328 <DIO_enuGetPinValue+0x30>
    1326:	77 c0       	rjmp	.+238    	; 0x1416 <DIO_enuGetPinValue+0x11e>
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	88 30       	cpi	r24, 0x08	; 8
    132c:	08 f0       	brcs	.+2      	; 0x1330 <DIO_enuGetPinValue+0x38>
    132e:	73 c0       	rjmp	.+230    	; 0x1416 <DIO_enuGetPinValue+0x11e>
		{
			switch(Copy_u8PortID)
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	3f 83       	std	Y+7, r19	; 0x07
    1338:	2e 83       	std	Y+6, r18	; 0x06
    133a:	4e 81       	ldd	r20, Y+6	; 0x06
    133c:	5f 81       	ldd	r21, Y+7	; 0x07
    133e:	41 30       	cpi	r20, 0x01	; 1
    1340:	51 05       	cpc	r21, r1
    1342:	59 f1       	breq	.+86     	; 0x139a <DIO_enuGetPinValue+0xa2>
    1344:	8e 81       	ldd	r24, Y+6	; 0x06
    1346:	9f 81       	ldd	r25, Y+7	; 0x07
    1348:	82 30       	cpi	r24, 0x02	; 2
    134a:	91 05       	cpc	r25, r1
    134c:	34 f4       	brge	.+12     	; 0x135a <DIO_enuGetPinValue+0x62>
    134e:	2e 81       	ldd	r18, Y+6	; 0x06
    1350:	3f 81       	ldd	r19, Y+7	; 0x07
    1352:	21 15       	cp	r18, r1
    1354:	31 05       	cpc	r19, r1
    1356:	69 f0       	breq	.+26     	; 0x1372 <DIO_enuGetPinValue+0x7a>
    1358:	5b c0       	rjmp	.+182    	; 0x1410 <DIO_enuGetPinValue+0x118>
    135a:	4e 81       	ldd	r20, Y+6	; 0x06
    135c:	5f 81       	ldd	r21, Y+7	; 0x07
    135e:	42 30       	cpi	r20, 0x02	; 2
    1360:	51 05       	cpc	r21, r1
    1362:	79 f1       	breq	.+94     	; 0x13c2 <DIO_enuGetPinValue+0xca>
    1364:	8e 81       	ldd	r24, Y+6	; 0x06
    1366:	9f 81       	ldd	r25, Y+7	; 0x07
    1368:	83 30       	cpi	r24, 0x03	; 3
    136a:	91 05       	cpc	r25, r1
    136c:	09 f4       	brne	.+2      	; 0x1370 <DIO_enuGetPinValue+0x78>
    136e:	3d c0       	rjmp	.+122    	; 0x13ea <DIO_enuGetPinValue+0xf2>
    1370:	4f c0       	rjmp	.+158    	; 0x1410 <DIO_enuGetPinValue+0x118>
			{
			case DIO_PORTA:
				*Copy_pu8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
    1372:	e9 e3       	ldi	r30, 0x39	; 57
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	88 2f       	mov	r24, r24
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	a9 01       	movw	r20, r18
    1384:	02 c0       	rjmp	.+4      	; 0x138a <DIO_enuGetPinValue+0x92>
    1386:	55 95       	asr	r21
    1388:	47 95       	ror	r20
    138a:	8a 95       	dec	r24
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <DIO_enuGetPinValue+0x8e>
    138e:	ca 01       	movw	r24, r20
    1390:	81 70       	andi	r24, 0x01	; 1
    1392:	ec 81       	ldd	r30, Y+4	; 0x04
    1394:	fd 81       	ldd	r31, Y+5	; 0x05
    1396:	80 83       	st	Z, r24
    1398:	3b c0       	rjmp	.+118    	; 0x1410 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
    139a:	e6 e3       	ldi	r30, 0x36	; 54
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	88 2f       	mov	r24, r24
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	a9 01       	movw	r20, r18
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <DIO_enuGetPinValue+0xba>
    13ae:	55 95       	asr	r21
    13b0:	47 95       	ror	r20
    13b2:	8a 95       	dec	r24
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <DIO_enuGetPinValue+0xb6>
    13b6:	ca 01       	movw	r24, r20
    13b8:	81 70       	andi	r24, 0x01	; 1
    13ba:	ec 81       	ldd	r30, Y+4	; 0x04
    13bc:	fd 81       	ldd	r31, Y+5	; 0x05
    13be:	80 83       	st	Z, r24
    13c0:	27 c0       	rjmp	.+78     	; 0x1410 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
    13c2:	e3 e3       	ldi	r30, 0x33	; 51
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	88 2f       	mov	r24, r24
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	a9 01       	movw	r20, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <DIO_enuGetPinValue+0xe2>
    13d6:	55 95       	asr	r21
    13d8:	47 95       	ror	r20
    13da:	8a 95       	dec	r24
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <DIO_enuGetPinValue+0xde>
    13de:	ca 01       	movw	r24, r20
    13e0:	81 70       	andi	r24, 0x01	; 1
    13e2:	ec 81       	ldd	r30, Y+4	; 0x04
    13e4:	fd 81       	ldd	r31, Y+5	; 0x05
    13e6:	80 83       	st	Z, r24
    13e8:	13 c0       	rjmp	.+38     	; 0x1410 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = ((PIND >> Copy_u8PinID) & DIO_MASK_BIT);
    13ea:	e0 e3       	ldi	r30, 0x30	; 48
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	88 2f       	mov	r24, r24
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	a9 01       	movw	r20, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <DIO_enuGetPinValue+0x10a>
    13fe:	55 95       	asr	r21
    1400:	47 95       	ror	r20
    1402:	8a 95       	dec	r24
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <DIO_enuGetPinValue+0x106>
    1406:	ca 01       	movw	r24, r20
    1408:	81 70       	andi	r24, 0x01	; 1
    140a:	ec 81       	ldd	r30, Y+4	; 0x04
    140c:	fd 81       	ldd	r31, Y+5	; 0x05
    140e:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	89 83       	std	Y+1, r24	; 0x01
    1414:	05 c0       	rjmp	.+10     	; 0x1420 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1416:	83 e0       	ldi	r24, 0x03	; 3
    1418:	89 83       	std	Y+1, r24	; 0x01
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    141c:	82 e0       	ldi	r24, 0x02	; 2
    141e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1420:	89 81       	ldd	r24, Y+1	; 0x01
}
    1422:	27 96       	adiw	r28, 0x07	; 7
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	cd bf       	out	0x3d, r28	; 61
    142e:	cf 91       	pop	r28
    1430:	df 91       	pop	r29
    1432:	08 95       	ret

00001434 <Switch_enuInit>:
#include "../../LIB/STD_TYPES.h"
#include "../../LIB/ERROR_STATE.h"
#include "../../MCAL/DIO/DIO_int.h"

ES_t Switch_enuInit(SW_t * Copy_pAstrSwitches)
{
    1434:	df 93       	push	r29
    1436:	cf 93       	push	r28
    1438:	00 d0       	rcall	.+0      	; 0x143a <Switch_enuInit+0x6>
    143a:	00 d0       	rcall	.+0      	; 0x143c <Switch_enuInit+0x8>
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
    1440:	9c 83       	std	Y+4, r25	; 0x04
    1442:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1444:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_pAstrSwitches != NULL)
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	9c 81       	ldd	r25, Y+4	; 0x04
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	09 f4       	brne	.+2      	; 0x1450 <Switch_enuInit+0x1c>
    144e:	5d c0       	rjmp	.+186    	; 0x150a <Switch_enuInit+0xd6>
	{
		u8 Local_u8Iterator = 0;
    1450:	19 82       	std	Y+1, r1	; 0x01

		for(Local_u8Iterator = 0; Local_u8Iterator < SW_NUM; Local_u8Iterator++)
    1452:	19 82       	std	Y+1, r1	; 0x01
    1454:	55 c0       	rjmp	.+170    	; 0x1500 <Switch_enuInit+0xcc>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_pAstrSwitches[Local_u8Iterator].SW_u8PortID,
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	c9 01       	movw	r24, r18
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	28 0f       	add	r18, r24
    1464:	39 1f       	adc	r19, r25
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	9c 81       	ldd	r25, Y+4	; 0x04
    146a:	fc 01       	movw	r30, r24
    146c:	e2 0f       	add	r30, r18
    146e:	f3 1f       	adc	r31, r19
    1470:	40 81       	ld	r20, Z
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	c9 01       	movw	r24, r18
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	28 0f       	add	r18, r24
    1480:	39 1f       	adc	r19, r25
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	9c 81       	ldd	r25, Y+4	; 0x04
    1486:	fc 01       	movw	r30, r24
    1488:	e2 0f       	add	r30, r18
    148a:	f3 1f       	adc	r31, r19
    148c:	91 81       	ldd	r25, Z+1	; 0x01
    148e:	84 2f       	mov	r24, r20
    1490:	69 2f       	mov	r22, r25
    1492:	40 e0       	ldi	r20, 0x00	; 0
    1494:	0e 94 16 07 	call	0xe2c	; 0xe2c <DIO_enuSetPinDirection>
    1498:	8a 83       	std	Y+2, r24	; 0x02
								   	   	   	   	   	     Copy_pAstrSwitches[Local_u8Iterator].SW_u8PinID,
														 DIO_u8INPUT);
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pAstrSwitches[Local_u8Iterator].SW_u8PortID,
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	c9 01       	movw	r24, r18
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	28 0f       	add	r18, r24
    14a8:	39 1f       	adc	r19, r25
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	9c 81       	ldd	r25, Y+4	; 0x04
    14ae:	fc 01       	movw	r30, r24
    14b0:	e2 0f       	add	r30, r18
    14b2:	f3 1f       	adc	r31, r19
    14b4:	50 81       	ld	r21, Z
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	c9 01       	movw	r24, r18
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	28 0f       	add	r18, r24
    14c4:	39 1f       	adc	r19, r25
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ca:	fc 01       	movw	r30, r24
    14cc:	e2 0f       	add	r30, r18
    14ce:	f3 1f       	adc	r31, r19
    14d0:	41 81       	ldd	r20, Z+1	; 0x01
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	c9 01       	movw	r24, r18
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	28 0f       	add	r18, r24
    14e0:	39 1f       	adc	r19, r25
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	9c 81       	ldd	r25, Y+4	; 0x04
    14e6:	fc 01       	movw	r30, r24
    14e8:	e2 0f       	add	r30, r18
    14ea:	f3 1f       	adc	r31, r19
    14ec:	92 81       	ldd	r25, Z+2	; 0x02
    14ee:	85 2f       	mov	r24, r21
    14f0:	64 2f       	mov	r22, r20
    14f2:	49 2f       	mov	r20, r25
    14f4:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_enuSetPinValue>
    14f8:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_pAstrSwitches != NULL)
	{
		u8 Local_u8Iterator = 0;

		for(Local_u8Iterator = 0; Local_u8Iterator < SW_NUM; Local_u8Iterator++)
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	8f 5f       	subi	r24, 0xFF	; 255
    14fe:	89 83       	std	Y+1, r24	; 0x01
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	83 30       	cpi	r24, 0x03	; 3
    1504:	08 f4       	brcc	.+2      	; 0x1508 <Switch_enuInit+0xd4>
    1506:	a7 cf       	rjmp	.-178    	; 0x1456 <Switch_enuInit+0x22>
    1508:	02 c0       	rjmp	.+4      	; 0x150e <Switch_enuInit+0xda>
		}

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    150a:	82 e0       	ldi	r24, 0x02	; 2
    150c:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	cf 91       	pop	r28
    151a:	df 91       	pop	r29
    151c:	08 95       	ret

0000151e <Switch_enuGetState>:

ES_t Switch_enuGetState(SW_t * Copy_pstrSwitches, u8 * Copy_pu8SwState)
{
    151e:	df 93       	push	r29
    1520:	cf 93       	push	r28
    1522:	00 d0       	rcall	.+0      	; 0x1524 <Switch_enuGetState+0x6>
    1524:	00 d0       	rcall	.+0      	; 0x1526 <Switch_enuGetState+0x8>
    1526:	0f 92       	push	r0
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	9b 83       	std	Y+3, r25	; 0x03
    152e:	8a 83       	std	Y+2, r24	; 0x02
    1530:	7d 83       	std	Y+5, r23	; 0x05
    1532:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1534:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pstrSwitches != NULL && Copy_pu8SwState != NULL)
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	9b 81       	ldd	r25, Y+3	; 0x03
    153a:	00 97       	sbiw	r24, 0x00	; 0
    153c:	91 f0       	breq	.+36     	; 0x1562 <Switch_enuGetState+0x44>
    153e:	8c 81       	ldd	r24, Y+4	; 0x04
    1540:	9d 81       	ldd	r25, Y+5	; 0x05
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	71 f0       	breq	.+28     	; 0x1562 <Switch_enuGetState+0x44>
	{
		Local_enuErrorState = DIO_enuGetPinValue(Copy_pstrSwitches->SW_u8PortID,
    1546:	ea 81       	ldd	r30, Y+2	; 0x02
    1548:	fb 81       	ldd	r31, Y+3	; 0x03
    154a:	80 81       	ld	r24, Z
    154c:	ea 81       	ldd	r30, Y+2	; 0x02
    154e:	fb 81       	ldd	r31, Y+3	; 0x03
    1550:	91 81       	ldd	r25, Z+1	; 0x01
    1552:	2c 81       	ldd	r18, Y+4	; 0x04
    1554:	3d 81       	ldd	r19, Y+5	; 0x05
    1556:	69 2f       	mov	r22, r25
    1558:	a9 01       	movw	r20, r18
    155a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_enuGetPinValue>
    155e:	89 83       	std	Y+1, r24	; 0x01
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <Switch_enuGetState+0x48>
												 Copy_pstrSwitches->SW_u8PinID,
												 Copy_pu8SwState);
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1562:	82 e0       	ldi	r24, 0x02	; 2
    1564:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1566:	89 81       	ldd	r24, Y+1	; 0x01
}
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	cf 91       	pop	r28
    1574:	df 91       	pop	r29
    1576:	08 95       	ret

00001578 <SSD_enuInit>:
#include "../../MCAL/DIO/DIO_int.h"
#include "SSD_config.h"
#include "SSD_private.h"

ES_t SSD_enuInit(void)
{
    1578:	df 93       	push	r29
    157a:	cf 93       	push	r28
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	27 97       	sbiw	r28, 0x07	; 7
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    158c:	1e 82       	std	Y+6, r1	; 0x06

	u32 Local_u32Check = 0;
    158e:	1a 82       	std	Y+2, r1	; 0x02
    1590:	1b 82       	std	Y+3, r1	; 0x03
    1592:	1c 82       	std	Y+4, r1	; 0x04
    1594:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8Iterator = 0;
    1596:	19 82       	std	Y+1, r1	; 0x01

	Local_u32Check |= (DIO_enuSetPinDirection(SEG_APORT, SEG_APIN, DIO_u8OUTPUT) << 0);
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	60 e0       	ldi	r22, 0x00	; 0
    159c:	41 e0       	ldi	r20, 0x01	; 1
    159e:	0e 94 16 07 	call	0xe2c	; 0xe2c <DIO_enuSetPinDirection>
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	40 e0       	ldi	r20, 0x00	; 0
    15a8:	50 e0       	ldi	r21, 0x00	; 0
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	9b 81       	ldd	r25, Y+3	; 0x03
    15ae:	ac 81       	ldd	r26, Y+4	; 0x04
    15b0:	bd 81       	ldd	r27, Y+5	; 0x05
    15b2:	82 2b       	or	r24, r18
    15b4:	93 2b       	or	r25, r19
    15b6:	a4 2b       	or	r26, r20
    15b8:	b5 2b       	or	r27, r21
    15ba:	8a 83       	std	Y+2, r24	; 0x02
    15bc:	9b 83       	std	Y+3, r25	; 0x03
    15be:	ac 83       	std	Y+4, r26	; 0x04
    15c0:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (DIO_enuSetPinDirection(SEG_BPORT, SEG_BPIN, DIO_u8OUTPUT) << 3);
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	61 e0       	ldi	r22, 0x01	; 1
    15c6:	41 e0       	ldi	r20, 0x01	; 1
    15c8:	0e 94 16 07 	call	0xe2c	; 0xe2c <DIO_enuSetPinDirection>
    15cc:	88 2f       	mov	r24, r24
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	9c 01       	movw	r18, r24
    15de:	44 27       	eor	r20, r20
    15e0:	37 fd       	sbrc	r19, 7
    15e2:	40 95       	com	r20
    15e4:	54 2f       	mov	r21, r20
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	9b 81       	ldd	r25, Y+3	; 0x03
    15ea:	ac 81       	ldd	r26, Y+4	; 0x04
    15ec:	bd 81       	ldd	r27, Y+5	; 0x05
    15ee:	82 2b       	or	r24, r18
    15f0:	93 2b       	or	r25, r19
    15f2:	a4 2b       	or	r26, r20
    15f4:	b5 2b       	or	r27, r21
    15f6:	8a 83       	std	Y+2, r24	; 0x02
    15f8:	9b 83       	std	Y+3, r25	; 0x03
    15fa:	ac 83       	std	Y+4, r26	; 0x04
    15fc:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (DIO_enuSetPinDirection(SEG_CPORT, SEG_CPIN, DIO_u8OUTPUT) << 6);
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	62 e0       	ldi	r22, 0x02	; 2
    1602:	41 e0       	ldi	r20, 0x01	; 1
    1604:	0e 94 16 07 	call	0xe2c	; 0xe2c <DIO_enuSetPinDirection>
    1608:	88 2f       	mov	r24, r24
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	00 24       	eor	r0, r0
    160e:	96 95       	lsr	r25
    1610:	87 95       	ror	r24
    1612:	07 94       	ror	r0
    1614:	96 95       	lsr	r25
    1616:	87 95       	ror	r24
    1618:	07 94       	ror	r0
    161a:	98 2f       	mov	r25, r24
    161c:	80 2d       	mov	r24, r0
    161e:	9c 01       	movw	r18, r24
    1620:	44 27       	eor	r20, r20
    1622:	37 fd       	sbrc	r19, 7
    1624:	40 95       	com	r20
    1626:	54 2f       	mov	r21, r20
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	9b 81       	ldd	r25, Y+3	; 0x03
    162c:	ac 81       	ldd	r26, Y+4	; 0x04
    162e:	bd 81       	ldd	r27, Y+5	; 0x05
    1630:	82 2b       	or	r24, r18
    1632:	93 2b       	or	r25, r19
    1634:	a4 2b       	or	r26, r20
    1636:	b5 2b       	or	r27, r21
    1638:	8a 83       	std	Y+2, r24	; 0x02
    163a:	9b 83       	std	Y+3, r25	; 0x03
    163c:	ac 83       	std	Y+4, r26	; 0x04
    163e:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (DIO_enuSetPinDirection(SEG_DPORT, SEG_DPIN, DIO_u8OUTPUT) << 9);
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	60 e0       	ldi	r22, 0x00	; 0
    1644:	41 e0       	ldi	r20, 0x01	; 1
    1646:	0e 94 16 07 	call	0xe2c	; 0xe2c <DIO_enuSetPinDirection>
    164a:	88 2f       	mov	r24, r24
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	98 2f       	mov	r25, r24
    1650:	88 27       	eor	r24, r24
    1652:	99 0f       	add	r25, r25
    1654:	9c 01       	movw	r18, r24
    1656:	44 27       	eor	r20, r20
    1658:	37 fd       	sbrc	r19, 7
    165a:	40 95       	com	r20
    165c:	54 2f       	mov	r21, r20
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	9b 81       	ldd	r25, Y+3	; 0x03
    1662:	ac 81       	ldd	r26, Y+4	; 0x04
    1664:	bd 81       	ldd	r27, Y+5	; 0x05
    1666:	82 2b       	or	r24, r18
    1668:	93 2b       	or	r25, r19
    166a:	a4 2b       	or	r26, r20
    166c:	b5 2b       	or	r27, r21
    166e:	8a 83       	std	Y+2, r24	; 0x02
    1670:	9b 83       	std	Y+3, r25	; 0x03
    1672:	ac 83       	std	Y+4, r26	; 0x04
    1674:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (DIO_enuSetPinDirection(SEG_EPORT, SEG_EPIN, DIO_u8OUTPUT) << 12);
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	61 e0       	ldi	r22, 0x01	; 1
    167a:	41 e0       	ldi	r20, 0x01	; 1
    167c:	0e 94 16 07 	call	0xe2c	; 0xe2c <DIO_enuSetPinDirection>
    1680:	88 2f       	mov	r24, r24
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	98 2f       	mov	r25, r24
    1686:	88 27       	eor	r24, r24
    1688:	92 95       	swap	r25
    168a:	90 7f       	andi	r25, 0xF0	; 240
    168c:	9c 01       	movw	r18, r24
    168e:	44 27       	eor	r20, r20
    1690:	37 fd       	sbrc	r19, 7
    1692:	40 95       	com	r20
    1694:	54 2f       	mov	r21, r20
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	9b 81       	ldd	r25, Y+3	; 0x03
    169a:	ac 81       	ldd	r26, Y+4	; 0x04
    169c:	bd 81       	ldd	r27, Y+5	; 0x05
    169e:	82 2b       	or	r24, r18
    16a0:	93 2b       	or	r25, r19
    16a2:	a4 2b       	or	r26, r20
    16a4:	b5 2b       	or	r27, r21
    16a6:	8a 83       	std	Y+2, r24	; 0x02
    16a8:	9b 83       	std	Y+3, r25	; 0x03
    16aa:	ac 83       	std	Y+4, r26	; 0x04
    16ac:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (((u32)DIO_enuSetPinDirection(SEG_GPORT, SEG_GPIN, DIO_u8OUTPUT)) << 15);
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	63 e0       	ldi	r22, 0x03	; 3
    16b2:	41 e0       	ldi	r20, 0x01	; 1
    16b4:	0e 94 16 07 	call	0xe2c	; 0xe2c <DIO_enuSetPinDirection>
    16b8:	88 2f       	mov	r24, r24
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	a0 e0       	ldi	r26, 0x00	; 0
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	9c 01       	movw	r18, r24
    16c2:	ad 01       	movw	r20, r26
    16c4:	01 2e       	mov	r0, r17
    16c6:	1f e0       	ldi	r17, 0x0F	; 15
    16c8:	22 0f       	add	r18, r18
    16ca:	33 1f       	adc	r19, r19
    16cc:	44 1f       	adc	r20, r20
    16ce:	55 1f       	adc	r21, r21
    16d0:	1a 95       	dec	r17
    16d2:	d1 f7       	brne	.-12     	; 0x16c8 <SSD_enuInit+0x150>
    16d4:	10 2d       	mov	r17, r0
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	9b 81       	ldd	r25, Y+3	; 0x03
    16da:	ac 81       	ldd	r26, Y+4	; 0x04
    16dc:	bd 81       	ldd	r27, Y+5	; 0x05
    16de:	82 2b       	or	r24, r18
    16e0:	93 2b       	or	r25, r19
    16e2:	a4 2b       	or	r26, r20
    16e4:	b5 2b       	or	r27, r21
    16e6:	8a 83       	std	Y+2, r24	; 0x02
    16e8:	9b 83       	std	Y+3, r25	; 0x03
    16ea:	ac 83       	std	Y+4, r26	; 0x04
    16ec:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (((u32)DIO_enuSetPinDirection(SEG_GPORT, SEG_GPIN, DIO_u8OUTPUT)) << 18);
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	63 e0       	ldi	r22, 0x03	; 3
    16f2:	41 e0       	ldi	r20, 0x01	; 1
    16f4:	0e 94 16 07 	call	0xe2c	; 0xe2c <DIO_enuSetPinDirection>
    16f8:	88 2f       	mov	r24, r24
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	a0 e0       	ldi	r26, 0x00	; 0
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	9c 01       	movw	r18, r24
    1702:	ad 01       	movw	r20, r26
    1704:	01 2e       	mov	r0, r17
    1706:	12 e1       	ldi	r17, 0x12	; 18
    1708:	22 0f       	add	r18, r18
    170a:	33 1f       	adc	r19, r19
    170c:	44 1f       	adc	r20, r20
    170e:	55 1f       	adc	r21, r21
    1710:	1a 95       	dec	r17
    1712:	d1 f7       	brne	.-12     	; 0x1708 <SSD_enuInit+0x190>
    1714:	10 2d       	mov	r17, r0
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	9b 81       	ldd	r25, Y+3	; 0x03
    171a:	ac 81       	ldd	r26, Y+4	; 0x04
    171c:	bd 81       	ldd	r27, Y+5	; 0x05
    171e:	82 2b       	or	r24, r18
    1720:	93 2b       	or	r25, r19
    1722:	a4 2b       	or	r26, r20
    1724:	b5 2b       	or	r27, r21
    1726:	8a 83       	std	Y+2, r24	; 0x02
    1728:	9b 83       	std	Y+3, r25	; 0x03
    172a:	ac 83       	std	Y+4, r26	; 0x04
    172c:	bd 83       	std	Y+5, r27	; 0x05
	 *  	0000 0000 0000 0100 1001 0010 0100 1001
	 * */

	//Because we work as pre compile config we will use #if
	#if SEG_CMN_PIN <= DIO_u8PIN7 && SEG_CMN_PORT <= DIO_u8PORTD
		Local_u32Check |= (((u32)DIO_enuSetPinDirection(SEG_CMN_PORT, SEG_CMN_PIN, DIO_u8OUTPUT)) << 21);
    172e:	82 e0       	ldi	r24, 0x02	; 2
    1730:	62 e0       	ldi	r22, 0x02	; 2
    1732:	41 e0       	ldi	r20, 0x01	; 1
    1734:	0e 94 16 07 	call	0xe2c	; 0xe2c <DIO_enuSetPinDirection>
    1738:	88 2f       	mov	r24, r24
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	a0 e0       	ldi	r26, 0x00	; 0
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	9c 01       	movw	r18, r24
    1742:	ad 01       	movw	r20, r26
    1744:	01 2e       	mov	r0, r17
    1746:	15 e1       	ldi	r17, 0x15	; 21
    1748:	22 0f       	add	r18, r18
    174a:	33 1f       	adc	r19, r19
    174c:	44 1f       	adc	r20, r20
    174e:	55 1f       	adc	r21, r21
    1750:	1a 95       	dec	r17
    1752:	d1 f7       	brne	.-12     	; 0x1748 <SSD_enuInit+0x1d0>
    1754:	10 2d       	mov	r17, r0
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	9b 81       	ldd	r25, Y+3	; 0x03
    175a:	ac 81       	ldd	r26, Y+4	; 0x04
    175c:	bd 81       	ldd	r27, Y+5	; 0x05
    175e:	82 2b       	or	r24, r18
    1760:	93 2b       	or	r25, r19
    1762:	a4 2b       	or	r26, r20
    1764:	b5 2b       	or	r27, r21
    1766:	8a 83       	std	Y+2, r24	; 0x02
    1768:	9b 83       	std	Y+3, r25	; 0x03
    176a:	ac 83       	std	Y+4, r26	; 0x04
    176c:	bd 83       	std	Y+5, r27	; 0x05
	#else
		#error "Your Common pin has a wrong selection!"
	#endif

	#if SEG_DOT_PIN <= DIO_u8PIN7 && SEG_DOT_PORT <= DIO_u8PORTD
		Local_u32Check |= (((u32)DIO_enuSetPinDirection(SEG_DOT_PORT, SEG_DOT_PIN, DIO_u8OUTPUT)) << 24);
    176e:	82 e0       	ldi	r24, 0x02	; 2
    1770:	62 e0       	ldi	r22, 0x02	; 2
    1772:	41 e0       	ldi	r20, 0x01	; 1
    1774:	0e 94 16 07 	call	0xe2c	; 0xe2c <DIO_enuSetPinDirection>
    1778:	88 2f       	mov	r24, r24
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	a0 e0       	ldi	r26, 0x00	; 0
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	58 2f       	mov	r21, r24
    1782:	44 27       	eor	r20, r20
    1784:	33 27       	eor	r19, r19
    1786:	22 27       	eor	r18, r18
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	9b 81       	ldd	r25, Y+3	; 0x03
    178c:	ac 81       	ldd	r26, Y+4	; 0x04
    178e:	bd 81       	ldd	r27, Y+5	; 0x05
    1790:	82 2b       	or	r24, r18
    1792:	93 2b       	or	r25, r19
    1794:	a4 2b       	or	r26, r20
    1796:	b5 2b       	or	r27, r21
    1798:	8a 83       	std	Y+2, r24	; 0x02
    179a:	9b 83       	std	Y+3, r25	; 0x03
    179c:	ac 83       	std	Y+4, r26	; 0x04
    179e:	bd 83       	std	Y+5, r27	; 0x05
	#else
		#error "Your DOT pin has a wrong selection!"
	#endif


	for(Local_u8Iterator = 0; Local_u8Iterator < 27; Local_u8Iterator += 3)
    17a0:	19 82       	std	Y+1, r1	; 0x01
    17a2:	1e c0       	rjmp	.+60     	; 0x17e0 <SSD_enuInit+0x268>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	8a 81       	ldd	r24, Y+2	; 0x02
    17ac:	9b 81       	ldd	r25, Y+3	; 0x03
    17ae:	ac 81       	ldd	r26, Y+4	; 0x04
    17b0:	bd 81       	ldd	r27, Y+5	; 0x05
    17b2:	02 2e       	mov	r0, r18
    17b4:	04 c0       	rjmp	.+8      	; 0x17be <SSD_enuInit+0x246>
    17b6:	b6 95       	lsr	r27
    17b8:	a7 95       	ror	r26
    17ba:	97 95       	ror	r25
    17bc:	87 95       	ror	r24
    17be:	0a 94       	dec	r0
    17c0:	d2 f7       	brpl	.-12     	; 0x17b6 <SSD_enuInit+0x23e>
    17c2:	87 70       	andi	r24, 0x07	; 7
    17c4:	90 70       	andi	r25, 0x00	; 0
    17c6:	a0 70       	andi	r26, 0x00	; 0
    17c8:	b0 70       	andi	r27, 0x00	; 0
    17ca:	81 30       	cpi	r24, 0x01	; 1
    17cc:	91 05       	cpc	r25, r1
    17ce:	a1 05       	cpc	r26, r1
    17d0:	b1 05       	cpc	r27, r1
    17d2:	19 f0       	breq	.+6      	; 0x17da <SSD_enuInit+0x262>
		{
			return Local_enuErrorState;
    17d4:	8e 81       	ldd	r24, Y+6	; 0x06
    17d6:	8f 83       	std	Y+7, r24	; 0x07
    17d8:	0a c0       	rjmp	.+20     	; 0x17ee <SSD_enuInit+0x276>
	#else
		#error "Your DOT pin has a wrong selection!"
	#endif


	for(Local_u8Iterator = 0; Local_u8Iterator < 27; Local_u8Iterator += 3)
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	8d 5f       	subi	r24, 0xFD	; 253
    17de:	89 83       	std	Y+1, r24	; 0x01
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	8b 31       	cpi	r24, 0x1B	; 27
    17e4:	f8 f2       	brcs	.-66     	; 0x17a4 <SSD_enuInit+0x22c>
		{
			return Local_enuErrorState;
		}
	}

	Local_enuErrorState = ES_OK;
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	8e 83       	std	Y+6, r24	; 0x06

	return Local_enuErrorState;
    17ea:	8e 81       	ldd	r24, Y+6	; 0x06
    17ec:	8f 83       	std	Y+7, r24	; 0x07
    17ee:	8f 81       	ldd	r24, Y+7	; 0x07
}
    17f0:	27 96       	adiw	r28, 0x07	; 7
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	cd bf       	out	0x3d, r28	; 61
    17fc:	cf 91       	pop	r28
    17fe:	df 91       	pop	r29
    1800:	08 95       	ret

00001802 <SSD_enuDisplayNum>:

ES_t SSD_enuDisplayNum(u8 Copy_u8Number)
{
    1802:	df 93       	push	r29
    1804:	cf 93       	push	r28
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	28 97       	sbiw	r28, 0x08	; 8
    180c:	0f b6       	in	r0, 0x3f	; 63
    180e:	f8 94       	cli
    1810:	de bf       	out	0x3e, r29	; 62
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	cd bf       	out	0x3d, r28	; 61
    1816:	8f 83       	std	Y+7, r24	; 0x07
	ES_t Local_enuErrorState = ES_NOK;
    1818:	1e 82       	std	Y+6, r1	; 0x06

	u32 Local_u32Check = 0;
    181a:	1a 82       	std	Y+2, r1	; 0x02
    181c:	1b 82       	std	Y+3, r1	; 0x03
    181e:	1c 82       	std	Y+4, r1	; 0x04
    1820:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8Iterator = 0;
    1822:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Number < 10)
    1824:	8f 81       	ldd	r24, Y+7	; 0x07
    1826:	8a 30       	cpi	r24, 0x0A	; 10
    1828:	08 f0       	brcs	.+2      	; 0x182c <SSD_enuDisplayNum+0x2a>
    182a:	1b c1       	rjmp	.+566    	; 0x1a62 <SSD_enuDisplayNum+0x260>
	{
		#if SEG_TYPE == COMMON_CATHODE
			Local_u32Check |= (DIO_enuSetPinValue(SEG_APORT, SEG_APIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 0) & 1)) << 0);
    182c:	8f 81       	ldd	r24, Y+7	; 0x07
    182e:	88 2f       	mov	r24, r24
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	fc 01       	movw	r30, r24
    1834:	ef 58       	subi	r30, 0x8F	; 143
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	80 81       	ld	r24, Z
    183a:	98 2f       	mov	r25, r24
    183c:	91 70       	andi	r25, 0x01	; 1
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	60 e0       	ldi	r22, 0x00	; 0
    1842:	49 2f       	mov	r20, r25
    1844:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_enuSetPinValue>
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	40 e0       	ldi	r20, 0x00	; 0
    184e:	50 e0       	ldi	r21, 0x00	; 0
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	9b 81       	ldd	r25, Y+3	; 0x03
    1854:	ac 81       	ldd	r26, Y+4	; 0x04
    1856:	bd 81       	ldd	r27, Y+5	; 0x05
    1858:	82 2b       	or	r24, r18
    185a:	93 2b       	or	r25, r19
    185c:	a4 2b       	or	r26, r20
    185e:	b5 2b       	or	r27, r21
    1860:	8a 83       	std	Y+2, r24	; 0x02
    1862:	9b 83       	std	Y+3, r25	; 0x03
    1864:	ac 83       	std	Y+4, r26	; 0x04
    1866:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (DIO_enuSetPinValue(SEG_BPORT, SEG_BPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 1) & 1)) << 3);
    1868:	8f 81       	ldd	r24, Y+7	; 0x07
    186a:	88 2f       	mov	r24, r24
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	fc 01       	movw	r30, r24
    1870:	ef 58       	subi	r30, 0x8F	; 143
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	80 81       	ld	r24, Z
    1876:	86 95       	lsr	r24
    1878:	98 2f       	mov	r25, r24
    187a:	91 70       	andi	r25, 0x01	; 1
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	61 e0       	ldi	r22, 0x01	; 1
    1880:	49 2f       	mov	r20, r25
    1882:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_enuSetPinValue>
    1886:	88 2f       	mov	r24, r24
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	88 0f       	add	r24, r24
    1890:	99 1f       	adc	r25, r25
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	9c 01       	movw	r18, r24
    1898:	44 27       	eor	r20, r20
    189a:	37 fd       	sbrc	r19, 7
    189c:	40 95       	com	r20
    189e:	54 2f       	mov	r21, r20
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	9b 81       	ldd	r25, Y+3	; 0x03
    18a4:	ac 81       	ldd	r26, Y+4	; 0x04
    18a6:	bd 81       	ldd	r27, Y+5	; 0x05
    18a8:	82 2b       	or	r24, r18
    18aa:	93 2b       	or	r25, r19
    18ac:	a4 2b       	or	r26, r20
    18ae:	b5 2b       	or	r27, r21
    18b0:	8a 83       	std	Y+2, r24	; 0x02
    18b2:	9b 83       	std	Y+3, r25	; 0x03
    18b4:	ac 83       	std	Y+4, r26	; 0x04
    18b6:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (DIO_enuSetPinValue(SEG_CPORT, SEG_CPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 2) & 1)) << 6);
    18b8:	8f 81       	ldd	r24, Y+7	; 0x07
    18ba:	88 2f       	mov	r24, r24
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	fc 01       	movw	r30, r24
    18c0:	ef 58       	subi	r30, 0x8F	; 143
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	80 81       	ld	r24, Z
    18c6:	86 95       	lsr	r24
    18c8:	86 95       	lsr	r24
    18ca:	98 2f       	mov	r25, r24
    18cc:	91 70       	andi	r25, 0x01	; 1
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	62 e0       	ldi	r22, 0x02	; 2
    18d2:	49 2f       	mov	r20, r25
    18d4:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_enuSetPinValue>
    18d8:	88 2f       	mov	r24, r24
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	00 24       	eor	r0, r0
    18de:	96 95       	lsr	r25
    18e0:	87 95       	ror	r24
    18e2:	07 94       	ror	r0
    18e4:	96 95       	lsr	r25
    18e6:	87 95       	ror	r24
    18e8:	07 94       	ror	r0
    18ea:	98 2f       	mov	r25, r24
    18ec:	80 2d       	mov	r24, r0
    18ee:	9c 01       	movw	r18, r24
    18f0:	44 27       	eor	r20, r20
    18f2:	37 fd       	sbrc	r19, 7
    18f4:	40 95       	com	r20
    18f6:	54 2f       	mov	r21, r20
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	9b 81       	ldd	r25, Y+3	; 0x03
    18fc:	ac 81       	ldd	r26, Y+4	; 0x04
    18fe:	bd 81       	ldd	r27, Y+5	; 0x05
    1900:	82 2b       	or	r24, r18
    1902:	93 2b       	or	r25, r19
    1904:	a4 2b       	or	r26, r20
    1906:	b5 2b       	or	r27, r21
    1908:	8a 83       	std	Y+2, r24	; 0x02
    190a:	9b 83       	std	Y+3, r25	; 0x03
    190c:	ac 83       	std	Y+4, r26	; 0x04
    190e:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (DIO_enuSetPinValue(SEG_DPORT, SEG_DPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 3) & 1)) << 9);
    1910:	8f 81       	ldd	r24, Y+7	; 0x07
    1912:	88 2f       	mov	r24, r24
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	fc 01       	movw	r30, r24
    1918:	ef 58       	subi	r30, 0x8F	; 143
    191a:	ff 4f       	sbci	r31, 0xFF	; 255
    191c:	80 81       	ld	r24, Z
    191e:	86 95       	lsr	r24
    1920:	86 95       	lsr	r24
    1922:	86 95       	lsr	r24
    1924:	98 2f       	mov	r25, r24
    1926:	91 70       	andi	r25, 0x01	; 1
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	49 2f       	mov	r20, r25
    192e:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_enuSetPinValue>
    1932:	88 2f       	mov	r24, r24
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	98 2f       	mov	r25, r24
    1938:	88 27       	eor	r24, r24
    193a:	99 0f       	add	r25, r25
    193c:	9c 01       	movw	r18, r24
    193e:	44 27       	eor	r20, r20
    1940:	37 fd       	sbrc	r19, 7
    1942:	40 95       	com	r20
    1944:	54 2f       	mov	r21, r20
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	9b 81       	ldd	r25, Y+3	; 0x03
    194a:	ac 81       	ldd	r26, Y+4	; 0x04
    194c:	bd 81       	ldd	r27, Y+5	; 0x05
    194e:	82 2b       	or	r24, r18
    1950:	93 2b       	or	r25, r19
    1952:	a4 2b       	or	r26, r20
    1954:	b5 2b       	or	r27, r21
    1956:	8a 83       	std	Y+2, r24	; 0x02
    1958:	9b 83       	std	Y+3, r25	; 0x03
    195a:	ac 83       	std	Y+4, r26	; 0x04
    195c:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (DIO_enuSetPinValue(SEG_EPORT, SEG_EPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 4) & 1)) << 12);
    195e:	8f 81       	ldd	r24, Y+7	; 0x07
    1960:	88 2f       	mov	r24, r24
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	fc 01       	movw	r30, r24
    1966:	ef 58       	subi	r30, 0x8F	; 143
    1968:	ff 4f       	sbci	r31, 0xFF	; 255
    196a:	80 81       	ld	r24, Z
    196c:	82 95       	swap	r24
    196e:	8f 70       	andi	r24, 0x0F	; 15
    1970:	98 2f       	mov	r25, r24
    1972:	91 70       	andi	r25, 0x01	; 1
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	61 e0       	ldi	r22, 0x01	; 1
    1978:	49 2f       	mov	r20, r25
    197a:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_enuSetPinValue>
    197e:	88 2f       	mov	r24, r24
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	98 2f       	mov	r25, r24
    1984:	88 27       	eor	r24, r24
    1986:	92 95       	swap	r25
    1988:	90 7f       	andi	r25, 0xF0	; 240
    198a:	9c 01       	movw	r18, r24
    198c:	44 27       	eor	r20, r20
    198e:	37 fd       	sbrc	r19, 7
    1990:	40 95       	com	r20
    1992:	54 2f       	mov	r21, r20
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	9b 81       	ldd	r25, Y+3	; 0x03
    1998:	ac 81       	ldd	r26, Y+4	; 0x04
    199a:	bd 81       	ldd	r27, Y+5	; 0x05
    199c:	82 2b       	or	r24, r18
    199e:	93 2b       	or	r25, r19
    19a0:	a4 2b       	or	r26, r20
    19a2:	b5 2b       	or	r27, r21
    19a4:	8a 83       	std	Y+2, r24	; 0x02
    19a6:	9b 83       	std	Y+3, r25	; 0x03
    19a8:	ac 83       	std	Y+4, r26	; 0x04
    19aa:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_FPORT, SEG_FPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 5) & 1))) << 15);
    19ac:	8f 81       	ldd	r24, Y+7	; 0x07
    19ae:	88 2f       	mov	r24, r24
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	fc 01       	movw	r30, r24
    19b4:	ef 58       	subi	r30, 0x8F	; 143
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	80 81       	ld	r24, Z
    19ba:	82 95       	swap	r24
    19bc:	86 95       	lsr	r24
    19be:	87 70       	andi	r24, 0x07	; 7
    19c0:	98 2f       	mov	r25, r24
    19c2:	91 70       	andi	r25, 0x01	; 1
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	62 e0       	ldi	r22, 0x02	; 2
    19c8:	49 2f       	mov	r20, r25
    19ca:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_enuSetPinValue>
    19ce:	88 2f       	mov	r24, r24
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	a0 e0       	ldi	r26, 0x00	; 0
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	9c 01       	movw	r18, r24
    19d8:	ad 01       	movw	r20, r26
    19da:	01 2e       	mov	r0, r17
    19dc:	1f e0       	ldi	r17, 0x0F	; 15
    19de:	22 0f       	add	r18, r18
    19e0:	33 1f       	adc	r19, r19
    19e2:	44 1f       	adc	r20, r20
    19e4:	55 1f       	adc	r21, r21
    19e6:	1a 95       	dec	r17
    19e8:	d1 f7       	brne	.-12     	; 0x19de <SSD_enuDisplayNum+0x1dc>
    19ea:	10 2d       	mov	r17, r0
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	9b 81       	ldd	r25, Y+3	; 0x03
    19f0:	ac 81       	ldd	r26, Y+4	; 0x04
    19f2:	bd 81       	ldd	r27, Y+5	; 0x05
    19f4:	82 2b       	or	r24, r18
    19f6:	93 2b       	or	r25, r19
    19f8:	a4 2b       	or	r26, r20
    19fa:	b5 2b       	or	r27, r21
    19fc:	8a 83       	std	Y+2, r24	; 0x02
    19fe:	9b 83       	std	Y+3, r25	; 0x03
    1a00:	ac 83       	std	Y+4, r26	; 0x04
    1a02:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_GPORT, SEG_GPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 6) & 1))) << 18);
    1a04:	8f 81       	ldd	r24, Y+7	; 0x07
    1a06:	88 2f       	mov	r24, r24
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	ef 58       	subi	r30, 0x8F	; 143
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	80 81       	ld	r24, Z
    1a12:	82 95       	swap	r24
    1a14:	86 95       	lsr	r24
    1a16:	86 95       	lsr	r24
    1a18:	83 70       	andi	r24, 0x03	; 3
    1a1a:	98 2f       	mov	r25, r24
    1a1c:	91 70       	andi	r25, 0x01	; 1
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	63 e0       	ldi	r22, 0x03	; 3
    1a22:	49 2f       	mov	r20, r25
    1a24:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_enuSetPinValue>
    1a28:	88 2f       	mov	r24, r24
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	a0 e0       	ldi	r26, 0x00	; 0
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	9c 01       	movw	r18, r24
    1a32:	ad 01       	movw	r20, r26
    1a34:	01 2e       	mov	r0, r17
    1a36:	12 e1       	ldi	r17, 0x12	; 18
    1a38:	22 0f       	add	r18, r18
    1a3a:	33 1f       	adc	r19, r19
    1a3c:	44 1f       	adc	r20, r20
    1a3e:	55 1f       	adc	r21, r21
    1a40:	1a 95       	dec	r17
    1a42:	d1 f7       	brne	.-12     	; 0x1a38 <SSD_enuDisplayNum+0x236>
    1a44:	10 2d       	mov	r17, r0
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	9b 81       	ldd	r25, Y+3	; 0x03
    1a4a:	ac 81       	ldd	r26, Y+4	; 0x04
    1a4c:	bd 81       	ldd	r27, Y+5	; 0x05
    1a4e:	82 2b       	or	r24, r18
    1a50:	93 2b       	or	r25, r19
    1a52:	a4 2b       	or	r26, r20
    1a54:	b5 2b       	or	r27, r21
    1a56:	8a 83       	std	Y+2, r24	; 0x02
    1a58:	9b 83       	std	Y+3, r25	; 0x03
    1a5a:	ac 83       	std	Y+4, r26	; 0x04
    1a5c:	bd 83       	std	Y+5, r27	; 0x05
	else
	{
		return ES_OUT_OF_RANGE;
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    1a5e:	19 82       	std	Y+1, r1	; 0x01
    1a60:	21 c0       	rjmp	.+66     	; 0x1aa4 <SSD_enuDisplayNum+0x2a2>
			#error "Your type selection is invalid!"
		#endif
	}
	else
	{
		return ES_OUT_OF_RANGE;
    1a62:	83 e0       	ldi	r24, 0x03	; 3
    1a64:	88 87       	std	Y+8, r24	; 0x08
    1a66:	25 c0       	rjmp	.+74     	; 0x1ab2 <SSD_enuDisplayNum+0x2b0>
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	9b 81       	ldd	r25, Y+3	; 0x03
    1a72:	ac 81       	ldd	r26, Y+4	; 0x04
    1a74:	bd 81       	ldd	r27, Y+5	; 0x05
    1a76:	02 2e       	mov	r0, r18
    1a78:	04 c0       	rjmp	.+8      	; 0x1a82 <SSD_enuDisplayNum+0x280>
    1a7a:	b6 95       	lsr	r27
    1a7c:	a7 95       	ror	r26
    1a7e:	97 95       	ror	r25
    1a80:	87 95       	ror	r24
    1a82:	0a 94       	dec	r0
    1a84:	d2 f7       	brpl	.-12     	; 0x1a7a <SSD_enuDisplayNum+0x278>
    1a86:	87 70       	andi	r24, 0x07	; 7
    1a88:	90 70       	andi	r25, 0x00	; 0
    1a8a:	a0 70       	andi	r26, 0x00	; 0
    1a8c:	b0 70       	andi	r27, 0x00	; 0
    1a8e:	81 30       	cpi	r24, 0x01	; 1
    1a90:	91 05       	cpc	r25, r1
    1a92:	a1 05       	cpc	r26, r1
    1a94:	b1 05       	cpc	r27, r1
    1a96:	19 f0       	breq	.+6      	; 0x1a9e <SSD_enuDisplayNum+0x29c>
		{
			return Local_enuErrorState;
    1a98:	8e 81       	ldd	r24, Y+6	; 0x06
    1a9a:	88 87       	std	Y+8, r24	; 0x08
    1a9c:	0a c0       	rjmp	.+20     	; 0x1ab2 <SSD_enuDisplayNum+0x2b0>
	else
	{
		return ES_OUT_OF_RANGE;
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	8d 5f       	subi	r24, 0xFD	; 253
    1aa2:	89 83       	std	Y+1, r24	; 0x01
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	85 31       	cpi	r24, 0x15	; 21
    1aa8:	f8 f2       	brcs	.-66     	; 0x1a68 <SSD_enuDisplayNum+0x266>
		{
			return Local_enuErrorState;
		}
	}

	Local_enuErrorState = ES_OK;
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	8e 83       	std	Y+6, r24	; 0x06

	return Local_enuErrorState;
    1aae:	8e 81       	ldd	r24, Y+6	; 0x06
    1ab0:	88 87       	std	Y+8, r24	; 0x08
    1ab2:	88 85       	ldd	r24, Y+8	; 0x08
}
    1ab4:	28 96       	adiw	r28, 0x08	; 8
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	08 95       	ret

00001ac6 <SSD_enuEnableCommon>:

ES_t SSD_enuEnableCommon(void)
{
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	0f 92       	push	r0
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1ad0:	19 82       	std	Y+1, r1	; 0x01

	#if SEG_CMN_PIN <= DIO_u8PIN7 && SEG_CMN_PORT <= DIO_u8PORTD
		#if SEG_TYPE == COMMON_CATHODE
			Local_enuErrorState = DIO_enuSetPinValue(SEG_CMN_PORT, SEG_CMN_PIN, DIO_u8LOW);
    1ad2:	82 e0       	ldi	r24, 0x02	; 2
    1ad4:	62 e0       	ldi	r22, 0x02	; 2
    1ad6:	40 e0       	ldi	r20, 0x00	; 0
    1ad8:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_enuSetPinValue>
    1adc:	89 83       	std	Y+1, r24	; 0x01

	#else
		#error "Your Common pin has a wrong selection!"
	#endif

	return Local_enuErrorState;
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ae0:	0f 90       	pop	r0
    1ae2:	cf 91       	pop	r28
    1ae4:	df 91       	pop	r29
    1ae6:	08 95       	ret

00001ae8 <SSD_enuDisableCommon>:

ES_t SSD_enuDisableCommon(void)
{
    1ae8:	df 93       	push	r29
    1aea:	cf 93       	push	r28
    1aec:	0f 92       	push	r0
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1af2:	19 82       	std	Y+1, r1	; 0x01

	#if SEG_CMN_PIN <= DIO_u8PIN7 && SEG_CMN_PORT <= DIO_u8PORTD
		#if SEG_TYPE == COMMON_CATHODE
			Local_enuErrorState = DIO_enuSetPinValue(SEG_CMN_PORT, SEG_CMN_PIN, DIO_u8HIGH);
    1af4:	82 e0       	ldi	r24, 0x02	; 2
    1af6:	62 e0       	ldi	r22, 0x02	; 2
    1af8:	41 e0       	ldi	r20, 0x01	; 1
    1afa:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_enuSetPinValue>
    1afe:	89 83       	std	Y+1, r24	; 0x01

	#else
		#error "Your Common pin has a wrong selection!"
	#endif

	return Local_enuErrorState;
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b02:	0f 90       	pop	r0
    1b04:	cf 91       	pop	r28
    1b06:	df 91       	pop	r29
    1b08:	08 95       	ret

00001b0a <SSD_enuEnableDot>:

ES_t SSD_enuEnableDot(void)
{
    1b0a:	df 93       	push	r29
    1b0c:	cf 93       	push	r28
    1b0e:	0f 92       	push	r0
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1b14:	19 82       	std	Y+1, r1	; 0x01

	#if SEG_DOT_PIN <= DIO_u8PIN7 && SEG_DOT_PORT <= DIO_u8PORTD
		#if SEG_TYPE == COMMON_CATHODE
			Local_enuErrorState = DIO_enuSetPinValue(SEG_DOT_PORT, SEG_DOT_PIN, DIO_u8HIGH);
    1b16:	82 e0       	ldi	r24, 0x02	; 2
    1b18:	62 e0       	ldi	r22, 0x02	; 2
    1b1a:	41 e0       	ldi	r20, 0x01	; 1
    1b1c:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_enuSetPinValue>
    1b20:	89 83       	std	Y+1, r24	; 0x01

	#else
		#error "Your DOT pin has a wrong selection!"
	#endif

	return Local_enuErrorState;
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b24:	0f 90       	pop	r0
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <SSD_enuDisableDot>:

ES_t SSD_enuDisableDot(void)
{
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	0f 92       	push	r0
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1b36:	19 82       	std	Y+1, r1	; 0x01

	#if SEG_DOT_PIN <= DIO_u8PIN7 && SEG_DOT_PORT <= DIO_u8PORTD
		#if SEG_TYPE == COMMON_CATHODE
			Local_enuErrorState = DIO_enuSetPinValue(SEG_DOT_PORT, SEG_DOT_PIN, DIO_u8LOW);
    1b38:	82 e0       	ldi	r24, 0x02	; 2
    1b3a:	62 e0       	ldi	r22, 0x02	; 2
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_enuSetPinValue>
    1b42:	89 83       	std	Y+1, r24	; 0x01

	#else
		#error "Your DOT pin has a wrong selection!"
	#endif

	return Local_enuErrorState;
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b46:	0f 90       	pop	r0
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <SSD_enuClearDisplay>:

ES_t SSD_enuClearDisplay(void)
{
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	27 97       	sbiw	r28, 0x07	; 7
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    1b62:	1e 82       	std	Y+6, r1	; 0x06

	u32 Local_u32Check = 0;
    1b64:	1a 82       	std	Y+2, r1	; 0x02
    1b66:	1b 82       	std	Y+3, r1	; 0x03
    1b68:	1c 82       	std	Y+4, r1	; 0x04
    1b6a:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8Iterator = 0;
    1b6c:	19 82       	std	Y+1, r1	; 0x01

	#if SEG_TYPE == COMMON_CATHODE
		Local_u32Check |= (DIO_enuSetPinValue(SEG_APORT, SEG_APIN,DIO_u8LOW) << 0);
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	60 e0       	ldi	r22, 0x00	; 0
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_enuSetPinValue>
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e0       	ldi	r20, 0x00	; 0
    1b7e:	50 e0       	ldi	r21, 0x00	; 0
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	9b 81       	ldd	r25, Y+3	; 0x03
    1b84:	ac 81       	ldd	r26, Y+4	; 0x04
    1b86:	bd 81       	ldd	r27, Y+5	; 0x05
    1b88:	82 2b       	or	r24, r18
    1b8a:	93 2b       	or	r25, r19
    1b8c:	a4 2b       	or	r26, r20
    1b8e:	b5 2b       	or	r27, r21
    1b90:	8a 83       	std	Y+2, r24	; 0x02
    1b92:	9b 83       	std	Y+3, r25	; 0x03
    1b94:	ac 83       	std	Y+4, r26	; 0x04
    1b96:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (DIO_enuSetPinValue(SEG_BPORT, SEG_BPIN,DIO_u8LOW) << 3);
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	61 e0       	ldi	r22, 0x01	; 1
    1b9c:	40 e0       	ldi	r20, 0x00	; 0
    1b9e:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_enuSetPinValue>
    1ba2:	88 2f       	mov	r24, r24
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	88 0f       	add	r24, r24
    1ba8:	99 1f       	adc	r25, r25
    1baa:	88 0f       	add	r24, r24
    1bac:	99 1f       	adc	r25, r25
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	9c 01       	movw	r18, r24
    1bb4:	44 27       	eor	r20, r20
    1bb6:	37 fd       	sbrc	r19, 7
    1bb8:	40 95       	com	r20
    1bba:	54 2f       	mov	r21, r20
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc0:	ac 81       	ldd	r26, Y+4	; 0x04
    1bc2:	bd 81       	ldd	r27, Y+5	; 0x05
    1bc4:	82 2b       	or	r24, r18
    1bc6:	93 2b       	or	r25, r19
    1bc8:	a4 2b       	or	r26, r20
    1bca:	b5 2b       	or	r27, r21
    1bcc:	8a 83       	std	Y+2, r24	; 0x02
    1bce:	9b 83       	std	Y+3, r25	; 0x03
    1bd0:	ac 83       	std	Y+4, r26	; 0x04
    1bd2:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (DIO_enuSetPinValue(SEG_CPORT, SEG_CPIN,DIO_u8LOW) << 6);
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	62 e0       	ldi	r22, 0x02	; 2
    1bd8:	40 e0       	ldi	r20, 0x00	; 0
    1bda:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_enuSetPinValue>
    1bde:	88 2f       	mov	r24, r24
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	00 24       	eor	r0, r0
    1be4:	96 95       	lsr	r25
    1be6:	87 95       	ror	r24
    1be8:	07 94       	ror	r0
    1bea:	96 95       	lsr	r25
    1bec:	87 95       	ror	r24
    1bee:	07 94       	ror	r0
    1bf0:	98 2f       	mov	r25, r24
    1bf2:	80 2d       	mov	r24, r0
    1bf4:	9c 01       	movw	r18, r24
    1bf6:	44 27       	eor	r20, r20
    1bf8:	37 fd       	sbrc	r19, 7
    1bfa:	40 95       	com	r20
    1bfc:	54 2f       	mov	r21, r20
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	9b 81       	ldd	r25, Y+3	; 0x03
    1c02:	ac 81       	ldd	r26, Y+4	; 0x04
    1c04:	bd 81       	ldd	r27, Y+5	; 0x05
    1c06:	82 2b       	or	r24, r18
    1c08:	93 2b       	or	r25, r19
    1c0a:	a4 2b       	or	r26, r20
    1c0c:	b5 2b       	or	r27, r21
    1c0e:	8a 83       	std	Y+2, r24	; 0x02
    1c10:	9b 83       	std	Y+3, r25	; 0x03
    1c12:	ac 83       	std	Y+4, r26	; 0x04
    1c14:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (DIO_enuSetPinValue(SEG_DPORT, SEG_DPIN,DIO_u8LOW) << 9);
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	60 e0       	ldi	r22, 0x00	; 0
    1c1a:	40 e0       	ldi	r20, 0x00	; 0
    1c1c:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_enuSetPinValue>
    1c20:	88 2f       	mov	r24, r24
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	98 2f       	mov	r25, r24
    1c26:	88 27       	eor	r24, r24
    1c28:	99 0f       	add	r25, r25
    1c2a:	9c 01       	movw	r18, r24
    1c2c:	44 27       	eor	r20, r20
    1c2e:	37 fd       	sbrc	r19, 7
    1c30:	40 95       	com	r20
    1c32:	54 2f       	mov	r21, r20
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	9b 81       	ldd	r25, Y+3	; 0x03
    1c38:	ac 81       	ldd	r26, Y+4	; 0x04
    1c3a:	bd 81       	ldd	r27, Y+5	; 0x05
    1c3c:	82 2b       	or	r24, r18
    1c3e:	93 2b       	or	r25, r19
    1c40:	a4 2b       	or	r26, r20
    1c42:	b5 2b       	or	r27, r21
    1c44:	8a 83       	std	Y+2, r24	; 0x02
    1c46:	9b 83       	std	Y+3, r25	; 0x03
    1c48:	ac 83       	std	Y+4, r26	; 0x04
    1c4a:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (DIO_enuSetPinValue(SEG_EPORT, SEG_EPIN,DIO_u8LOW) << 12);
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	61 e0       	ldi	r22, 0x01	; 1
    1c50:	40 e0       	ldi	r20, 0x00	; 0
    1c52:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_enuSetPinValue>
    1c56:	88 2f       	mov	r24, r24
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	98 2f       	mov	r25, r24
    1c5c:	88 27       	eor	r24, r24
    1c5e:	92 95       	swap	r25
    1c60:	90 7f       	andi	r25, 0xF0	; 240
    1c62:	9c 01       	movw	r18, r24
    1c64:	44 27       	eor	r20, r20
    1c66:	37 fd       	sbrc	r19, 7
    1c68:	40 95       	com	r20
    1c6a:	54 2f       	mov	r21, r20
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c70:	ac 81       	ldd	r26, Y+4	; 0x04
    1c72:	bd 81       	ldd	r27, Y+5	; 0x05
    1c74:	82 2b       	or	r24, r18
    1c76:	93 2b       	or	r25, r19
    1c78:	a4 2b       	or	r26, r20
    1c7a:	b5 2b       	or	r27, r21
    1c7c:	8a 83       	std	Y+2, r24	; 0x02
    1c7e:	9b 83       	std	Y+3, r25	; 0x03
    1c80:	ac 83       	std	Y+4, r26	; 0x04
    1c82:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_FPORT, SEG_FPIN,DIO_u8LOW)) << 15);
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	62 e0       	ldi	r22, 0x02	; 2
    1c88:	40 e0       	ldi	r20, 0x00	; 0
    1c8a:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_enuSetPinValue>
    1c8e:	88 2f       	mov	r24, r24
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	a0 e0       	ldi	r26, 0x00	; 0
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	9c 01       	movw	r18, r24
    1c98:	ad 01       	movw	r20, r26
    1c9a:	01 2e       	mov	r0, r17
    1c9c:	1f e0       	ldi	r17, 0x0F	; 15
    1c9e:	22 0f       	add	r18, r18
    1ca0:	33 1f       	adc	r19, r19
    1ca2:	44 1f       	adc	r20, r20
    1ca4:	55 1f       	adc	r21, r21
    1ca6:	1a 95       	dec	r17
    1ca8:	d1 f7       	brne	.-12     	; 0x1c9e <SSD_enuClearDisplay+0x150>
    1caa:	10 2d       	mov	r17, r0
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb0:	ac 81       	ldd	r26, Y+4	; 0x04
    1cb2:	bd 81       	ldd	r27, Y+5	; 0x05
    1cb4:	82 2b       	or	r24, r18
    1cb6:	93 2b       	or	r25, r19
    1cb8:	a4 2b       	or	r26, r20
    1cba:	b5 2b       	or	r27, r21
    1cbc:	8a 83       	std	Y+2, r24	; 0x02
    1cbe:	9b 83       	std	Y+3, r25	; 0x03
    1cc0:	ac 83       	std	Y+4, r26	; 0x04
    1cc2:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_GPORT, SEG_GPIN,DIO_u8LOW)) << 18);
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	63 e0       	ldi	r22, 0x03	; 3
    1cc8:	40 e0       	ldi	r20, 0x00	; 0
    1cca:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_enuSetPinValue>
    1cce:	88 2f       	mov	r24, r24
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	a0 e0       	ldi	r26, 0x00	; 0
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	9c 01       	movw	r18, r24
    1cd8:	ad 01       	movw	r20, r26
    1cda:	01 2e       	mov	r0, r17
    1cdc:	12 e1       	ldi	r17, 0x12	; 18
    1cde:	22 0f       	add	r18, r18
    1ce0:	33 1f       	adc	r19, r19
    1ce2:	44 1f       	adc	r20, r20
    1ce4:	55 1f       	adc	r21, r21
    1ce6:	1a 95       	dec	r17
    1ce8:	d1 f7       	brne	.-12     	; 0x1cde <SSD_enuClearDisplay+0x190>
    1cea:	10 2d       	mov	r17, r0
    1cec:	8a 81       	ldd	r24, Y+2	; 0x02
    1cee:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf0:	ac 81       	ldd	r26, Y+4	; 0x04
    1cf2:	bd 81       	ldd	r27, Y+5	; 0x05
    1cf4:	82 2b       	or	r24, r18
    1cf6:	93 2b       	or	r25, r19
    1cf8:	a4 2b       	or	r26, r20
    1cfa:	b5 2b       	or	r27, r21
    1cfc:	8a 83       	std	Y+2, r24	; 0x02
    1cfe:	9b 83       	std	Y+3, r25	; 0x03
    1d00:	ac 83       	std	Y+4, r26	; 0x04
    1d02:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_GPORT, SEG_GPIN,DIO_u8HIGH)) << 18);
	#else
		#error "Your type selection is invalid!"
	#endif

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    1d04:	19 82       	std	Y+1, r1	; 0x01
    1d06:	1e c0       	rjmp	.+60     	; 0x1d44 <SSD_enuClearDisplay+0x1f6>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
    1d08:	89 81       	ldd	r24, Y+1	; 0x01
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	9b 81       	ldd	r25, Y+3	; 0x03
    1d12:	ac 81       	ldd	r26, Y+4	; 0x04
    1d14:	bd 81       	ldd	r27, Y+5	; 0x05
    1d16:	02 2e       	mov	r0, r18
    1d18:	04 c0       	rjmp	.+8      	; 0x1d22 <SSD_enuClearDisplay+0x1d4>
    1d1a:	b6 95       	lsr	r27
    1d1c:	a7 95       	ror	r26
    1d1e:	97 95       	ror	r25
    1d20:	87 95       	ror	r24
    1d22:	0a 94       	dec	r0
    1d24:	d2 f7       	brpl	.-12     	; 0x1d1a <SSD_enuClearDisplay+0x1cc>
    1d26:	87 70       	andi	r24, 0x07	; 7
    1d28:	90 70       	andi	r25, 0x00	; 0
    1d2a:	a0 70       	andi	r26, 0x00	; 0
    1d2c:	b0 70       	andi	r27, 0x00	; 0
    1d2e:	81 30       	cpi	r24, 0x01	; 1
    1d30:	91 05       	cpc	r25, r1
    1d32:	a1 05       	cpc	r26, r1
    1d34:	b1 05       	cpc	r27, r1
    1d36:	19 f0       	breq	.+6      	; 0x1d3e <SSD_enuClearDisplay+0x1f0>
		{
			return Local_enuErrorState;
    1d38:	8e 81       	ldd	r24, Y+6	; 0x06
    1d3a:	8f 83       	std	Y+7, r24	; 0x07
    1d3c:	0a c0       	rjmp	.+20     	; 0x1d52 <SSD_enuClearDisplay+0x204>
		Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_GPORT, SEG_GPIN,DIO_u8HIGH)) << 18);
	#else
		#error "Your type selection is invalid!"
	#endif

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	8d 5f       	subi	r24, 0xFD	; 253
    1d42:	89 83       	std	Y+1, r24	; 0x01
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	85 31       	cpi	r24, 0x15	; 21
    1d48:	f8 f2       	brcs	.-66     	; 0x1d08 <SSD_enuClearDisplay+0x1ba>
		{
			return Local_enuErrorState;
		}
	}

	Local_enuErrorState = ES_OK;
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	8e 83       	std	Y+6, r24	; 0x06
	return Local_enuErrorState;
    1d4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d50:	8f 83       	std	Y+7, r24	; 0x07
    1d52:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1d54:	27 96       	adiw	r28, 0x07	; 7
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	f8 94       	cli
    1d5a:	de bf       	out	0x3e, r29	; 62
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	cd bf       	out	0x3d, r28	; 61
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <LED_enuInit>:
#include "LED_config.h"

#include "../../MCAL/DIO/DIO_int.h"

ES_t LED_enuInit(LED_t * Copy_pstrLedConfiguration)
{
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	00 d0       	rcall	.+0      	; 0x1d6c <LED_enuInit+0x6>
    1d6c:	00 d0       	rcall	.+0      	; 0x1d6e <LED_enuInit+0x8>
    1d6e:	0f 92       	push	r0
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	9c 83       	std	Y+4, r25	; 0x04
    1d76:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1d78:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_pstrLedConfiguration != NULL)
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7e:	00 97       	sbiw	r24, 0x00	; 0
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <LED_enuInit+0x1e>
    1d82:	24 c1       	rjmp	.+584    	; 0x1fcc <LED_enuInit+0x266>
	{
		u8 Local_u8Iterator = 0;
    1d84:	19 82       	std	Y+1, r1	; 0x01

		for(Local_u8Iterator = 0; Local_u8Iterator < LED_NUM; Local_u8Iterator++)
    1d86:	19 82       	std	Y+1, r1	; 0x01
    1d88:	1c c1       	rjmp	.+568    	; 0x1fc2 <LED_enuInit+0x25c>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PortID,
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	88 2f       	mov	r24, r24
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	9c 01       	movw	r18, r24
    1d92:	22 0f       	add	r18, r18
    1d94:	33 1f       	adc	r19, r19
    1d96:	22 0f       	add	r18, r18
    1d98:	33 1f       	adc	r19, r19
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9e:	fc 01       	movw	r30, r24
    1da0:	e2 0f       	add	r30, r18
    1da2:	f3 1f       	adc	r31, r19
    1da4:	40 81       	ld	r20, Z
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	88 2f       	mov	r24, r24
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	9c 01       	movw	r18, r24
    1dae:	22 0f       	add	r18, r18
    1db0:	33 1f       	adc	r19, r19
    1db2:	22 0f       	add	r18, r18
    1db4:	33 1f       	adc	r19, r19
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dba:	fc 01       	movw	r30, r24
    1dbc:	e2 0f       	add	r30, r18
    1dbe:	f3 1f       	adc	r31, r19
    1dc0:	91 81       	ldd	r25, Z+1	; 0x01
    1dc2:	84 2f       	mov	r24, r20
    1dc4:	69 2f       	mov	r22, r25
    1dc6:	41 e0       	ldi	r20, 0x01	; 1
    1dc8:	0e 94 16 07 	call	0xe2c	; 0xe2c <DIO_enuSetPinDirection>
    1dcc:	8a 83       	std	Y+2, r24	; 0x02
														 Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PinID,
														 DIO_u8OUTPUT
														);

			if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8Connection == LED_u8SINK)
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	88 2f       	mov	r24, r24
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	9c 01       	movw	r18, r24
    1dd6:	22 0f       	add	r18, r18
    1dd8:	33 1f       	adc	r19, r19
    1dda:	22 0f       	add	r18, r18
    1ddc:	33 1f       	adc	r19, r19
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	9c 81       	ldd	r25, Y+4	; 0x04
    1de2:	fc 01       	movw	r30, r24
    1de4:	e2 0f       	add	r30, r18
    1de6:	f3 1f       	adc	r31, r19
    1de8:	82 81       	ldd	r24, Z+2	; 0x02
    1dea:	88 30       	cpi	r24, 0x08	; 8
    1dec:	09 f0       	breq	.+2      	; 0x1df0 <LED_enuInit+0x8a>
    1dee:	69 c0       	rjmp	.+210    	; 0x1ec2 <LED_enuInit+0x15c>
			{
				if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8InitState == LED_u8ON)
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	88 2f       	mov	r24, r24
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	9c 01       	movw	r18, r24
    1df8:	22 0f       	add	r18, r18
    1dfa:	33 1f       	adc	r19, r19
    1dfc:	22 0f       	add	r18, r18
    1dfe:	33 1f       	adc	r19, r19
    1e00:	8b 81       	ldd	r24, Y+3	; 0x03
    1e02:	9c 81       	ldd	r25, Y+4	; 0x04
    1e04:	fc 01       	movw	r30, r24
    1e06:	e2 0f       	add	r30, r18
    1e08:	f3 1f       	adc	r31, r19
    1e0a:	83 81       	ldd	r24, Z+3	; 0x03
    1e0c:	8a 30       	cpi	r24, 0x0A	; 10
    1e0e:	19 f5       	brne	.+70     	; 0x1e56 <LED_enuInit+0xf0>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PortID,
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	88 2f       	mov	r24, r24
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	9c 01       	movw	r18, r24
    1e18:	22 0f       	add	r18, r18
    1e1a:	33 1f       	adc	r19, r19
    1e1c:	22 0f       	add	r18, r18
    1e1e:	33 1f       	adc	r19, r19
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	9c 81       	ldd	r25, Y+4	; 0x04
    1e24:	fc 01       	movw	r30, r24
    1e26:	e2 0f       	add	r30, r18
    1e28:	f3 1f       	adc	r31, r19
    1e2a:	40 81       	ld	r20, Z
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	88 2f       	mov	r24, r24
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	9c 01       	movw	r18, r24
    1e34:	22 0f       	add	r18, r18
    1e36:	33 1f       	adc	r19, r19
    1e38:	22 0f       	add	r18, r18
    1e3a:	33 1f       	adc	r19, r19
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e40:	fc 01       	movw	r30, r24
    1e42:	e2 0f       	add	r30, r18
    1e44:	f3 1f       	adc	r31, r19
    1e46:	91 81       	ldd	r25, Z+1	; 0x01
    1e48:	84 2f       	mov	r24, r20
    1e4a:	69 2f       	mov	r22, r25
    1e4c:	40 e0       	ldi	r20, 0x00	; 0
    1e4e:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_enuSetPinValue>
    1e52:	8a 83       	std	Y+2, r24	; 0x02
    1e54:	b3 c0       	rjmp	.+358    	; 0x1fbc <LED_enuInit+0x256>
							           	   	   	   	   	     Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PinID,
															 DIO_u8LOW);

				}
				else if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8InitState == LED_u8OFF)
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	88 2f       	mov	r24, r24
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	9c 01       	movw	r18, r24
    1e5e:	22 0f       	add	r18, r18
    1e60:	33 1f       	adc	r19, r19
    1e62:	22 0f       	add	r18, r18
    1e64:	33 1f       	adc	r19, r19
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
    1e68:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	e2 0f       	add	r30, r18
    1e6e:	f3 1f       	adc	r31, r19
    1e70:	83 81       	ldd	r24, Z+3	; 0x03
    1e72:	8b 30       	cpi	r24, 0x0B	; 11
    1e74:	19 f5       	brne	.+70     	; 0x1ebc <LED_enuInit+0x156>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PortID,
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	88 2f       	mov	r24, r24
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	9c 01       	movw	r18, r24
    1e7e:	22 0f       	add	r18, r18
    1e80:	33 1f       	adc	r19, r19
    1e82:	22 0f       	add	r18, r18
    1e84:	33 1f       	adc	r19, r19
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	e2 0f       	add	r30, r18
    1e8e:	f3 1f       	adc	r31, r19
    1e90:	40 81       	ld	r20, Z
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	88 2f       	mov	r24, r24
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	9c 01       	movw	r18, r24
    1e9a:	22 0f       	add	r18, r18
    1e9c:	33 1f       	adc	r19, r19
    1e9e:	22 0f       	add	r18, r18
    1ea0:	33 1f       	adc	r19, r19
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	e2 0f       	add	r30, r18
    1eaa:	f3 1f       	adc	r31, r19
    1eac:	91 81       	ldd	r25, Z+1	; 0x01
    1eae:	84 2f       	mov	r24, r20
    1eb0:	69 2f       	mov	r22, r25
    1eb2:	41 e0       	ldi	r20, 0x01	; 1
    1eb4:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_enuSetPinValue>
    1eb8:	8a 83       	std	Y+2, r24	; 0x02
    1eba:	80 c0       	rjmp	.+256    	; 0x1fbc <LED_enuInit+0x256>
							           	   	   	   	   	   	 Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PinID,
															 DIO_u8HIGH);
				}
				else
				{
					return ES_OUT_OF_RANGE;
    1ebc:	83 e0       	ldi	r24, 0x03	; 3
    1ebe:	8d 83       	std	Y+5, r24	; 0x05
    1ec0:	89 c0       	rjmp	.+274    	; 0x1fd4 <LED_enuInit+0x26e>
				}
			}
			else if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8Connection == LED_u8SOURCE)
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	88 2f       	mov	r24, r24
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	9c 01       	movw	r18, r24
    1eca:	22 0f       	add	r18, r18
    1ecc:	33 1f       	adc	r19, r19
    1ece:	22 0f       	add	r18, r18
    1ed0:	33 1f       	adc	r19, r19
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	e2 0f       	add	r30, r18
    1eda:	f3 1f       	adc	r31, r19
    1edc:	82 81       	ldd	r24, Z+2	; 0x02
    1ede:	89 30       	cpi	r24, 0x09	; 9
    1ee0:	09 f0       	breq	.+2      	; 0x1ee4 <LED_enuInit+0x17e>
    1ee2:	69 c0       	rjmp	.+210    	; 0x1fb6 <LED_enuInit+0x250>
			{
				if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8InitState == LED_u8ON)
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	88 2f       	mov	r24, r24
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	9c 01       	movw	r18, r24
    1eec:	22 0f       	add	r18, r18
    1eee:	33 1f       	adc	r19, r19
    1ef0:	22 0f       	add	r18, r18
    1ef2:	33 1f       	adc	r19, r19
    1ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef8:	fc 01       	movw	r30, r24
    1efa:	e2 0f       	add	r30, r18
    1efc:	f3 1f       	adc	r31, r19
    1efe:	83 81       	ldd	r24, Z+3	; 0x03
    1f00:	8a 30       	cpi	r24, 0x0A	; 10
    1f02:	19 f5       	brne	.+70     	; 0x1f4a <LED_enuInit+0x1e4>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PortID,
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	88 2f       	mov	r24, r24
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	9c 01       	movw	r18, r24
    1f0c:	22 0f       	add	r18, r18
    1f0e:	33 1f       	adc	r19, r19
    1f10:	22 0f       	add	r18, r18
    1f12:	33 1f       	adc	r19, r19
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	9c 81       	ldd	r25, Y+4	; 0x04
    1f18:	fc 01       	movw	r30, r24
    1f1a:	e2 0f       	add	r30, r18
    1f1c:	f3 1f       	adc	r31, r19
    1f1e:	40 81       	ld	r20, Z
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	88 2f       	mov	r24, r24
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	9c 01       	movw	r18, r24
    1f28:	22 0f       	add	r18, r18
    1f2a:	33 1f       	adc	r19, r19
    1f2c:	22 0f       	add	r18, r18
    1f2e:	33 1f       	adc	r19, r19
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	9c 81       	ldd	r25, Y+4	; 0x04
    1f34:	fc 01       	movw	r30, r24
    1f36:	e2 0f       	add	r30, r18
    1f38:	f3 1f       	adc	r31, r19
    1f3a:	91 81       	ldd	r25, Z+1	; 0x01
    1f3c:	84 2f       	mov	r24, r20
    1f3e:	69 2f       	mov	r22, r25
    1f40:	41 e0       	ldi	r20, 0x01	; 1
    1f42:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_enuSetPinValue>
    1f46:	8a 83       	std	Y+2, r24	; 0x02
    1f48:	39 c0       	rjmp	.+114    	; 0x1fbc <LED_enuInit+0x256>
							           	   	   	   	   	     Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PinID,
															 DIO_u8HIGH);

				}
				else if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8InitState == LED_u8OFF)
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
    1f4c:	88 2f       	mov	r24, r24
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	9c 01       	movw	r18, r24
    1f52:	22 0f       	add	r18, r18
    1f54:	33 1f       	adc	r19, r19
    1f56:	22 0f       	add	r18, r18
    1f58:	33 1f       	adc	r19, r19
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5e:	fc 01       	movw	r30, r24
    1f60:	e2 0f       	add	r30, r18
    1f62:	f3 1f       	adc	r31, r19
    1f64:	83 81       	ldd	r24, Z+3	; 0x03
    1f66:	8b 30       	cpi	r24, 0x0B	; 11
    1f68:	19 f5       	brne	.+70     	; 0x1fb0 <LED_enuInit+0x24a>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PortID,
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	88 2f       	mov	r24, r24
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	9c 01       	movw	r18, r24
    1f72:	22 0f       	add	r18, r18
    1f74:	33 1f       	adc	r19, r19
    1f76:	22 0f       	add	r18, r18
    1f78:	33 1f       	adc	r19, r19
    1f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7e:	fc 01       	movw	r30, r24
    1f80:	e2 0f       	add	r30, r18
    1f82:	f3 1f       	adc	r31, r19
    1f84:	40 81       	ld	r20, Z
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	88 2f       	mov	r24, r24
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	9c 01       	movw	r18, r24
    1f8e:	22 0f       	add	r18, r18
    1f90:	33 1f       	adc	r19, r19
    1f92:	22 0f       	add	r18, r18
    1f94:	33 1f       	adc	r19, r19
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	e2 0f       	add	r30, r18
    1f9e:	f3 1f       	adc	r31, r19
    1fa0:	91 81       	ldd	r25, Z+1	; 0x01
    1fa2:	84 2f       	mov	r24, r20
    1fa4:	69 2f       	mov	r22, r25
    1fa6:	40 e0       	ldi	r20, 0x00	; 0
    1fa8:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_enuSetPinValue>
    1fac:	8a 83       	std	Y+2, r24	; 0x02
    1fae:	06 c0       	rjmp	.+12     	; 0x1fbc <LED_enuInit+0x256>
							           	   	   	   	   	   	 Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PinID,
															 DIO_u8LOW);
				}
				else
				{
					return ES_OUT_OF_RANGE;
    1fb0:	83 e0       	ldi	r24, 0x03	; 3
    1fb2:	8d 83       	std	Y+5, r24	; 0x05
    1fb4:	0f c0       	rjmp	.+30     	; 0x1fd4 <LED_enuInit+0x26e>
				}
			}
			else
			{
				return ES_OUT_OF_RANGE;
    1fb6:	83 e0       	ldi	r24, 0x03	; 3
    1fb8:	8d 83       	std	Y+5, r24	; 0x05
    1fba:	0c c0       	rjmp	.+24     	; 0x1fd4 <LED_enuInit+0x26e>

	if(Copy_pstrLedConfiguration != NULL)
	{
		u8 Local_u8Iterator = 0;

		for(Local_u8Iterator = 0; Local_u8Iterator < LED_NUM; Local_u8Iterator++)
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
    1fbe:	8f 5f       	subi	r24, 0xFF	; 255
    1fc0:	89 83       	std	Y+1, r24	; 0x01
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	83 30       	cpi	r24, 0x03	; 3
    1fc6:	08 f4       	brcc	.+2      	; 0x1fca <LED_enuInit+0x264>
    1fc8:	e0 ce       	rjmp	.-576    	; 0x1d8a <LED_enuInit+0x24>
    1fca:	02 c0       	rjmp	.+4      	; 0x1fd0 <LED_enuInit+0x26a>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    1fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd2:	8d 83       	std	Y+5, r24	; 0x05
    1fd4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	cf 91       	pop	r28
    1fe2:	df 91       	pop	r29
    1fe4:	08 95       	ret

00001fe6 <LED_enuTurnON>:

ES_t LED_enuTurnON(LED_t * Copy_pstrLedID)
{
    1fe6:	df 93       	push	r29
    1fe8:	cf 93       	push	r28
    1fea:	00 d0       	rcall	.+0      	; 0x1fec <LED_enuTurnON+0x6>
    1fec:	00 d0       	rcall	.+0      	; 0x1fee <LED_enuTurnON+0x8>
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	9b 83       	std	Y+3, r25	; 0x03
    1ff4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1ff6:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pstrLedID != NULL)
    1ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffa:	9b 81       	ldd	r25, Y+3	; 0x03
    1ffc:	00 97       	sbiw	r24, 0x00	; 0
    1ffe:	41 f1       	breq	.+80     	; 0x2050 <LED_enuTurnON+0x6a>
	{
		if(Copy_pstrLedID->LED_u8Connection == LED_u8SINK)
    2000:	ea 81       	ldd	r30, Y+2	; 0x02
    2002:	fb 81       	ldd	r31, Y+3	; 0x03
    2004:	82 81       	ldd	r24, Z+2	; 0x02
    2006:	88 30       	cpi	r24, 0x08	; 8
    2008:	61 f4       	brne	.+24     	; 0x2022 <LED_enuTurnON+0x3c>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8LOW);
    200a:	ea 81       	ldd	r30, Y+2	; 0x02
    200c:	fb 81       	ldd	r31, Y+3	; 0x03
    200e:	80 81       	ld	r24, Z
    2010:	ea 81       	ldd	r30, Y+2	; 0x02
    2012:	fb 81       	ldd	r31, Y+3	; 0x03
    2014:	91 81       	ldd	r25, Z+1	; 0x01
    2016:	69 2f       	mov	r22, r25
    2018:	40 e0       	ldi	r20, 0x00	; 0
    201a:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_enuSetPinValue>
    201e:	89 83       	std	Y+1, r24	; 0x01
    2020:	14 c0       	rjmp	.+40     	; 0x204a <LED_enuTurnON+0x64>
		}
		else if(Copy_pstrLedID->LED_u8Connection == LED_u8SOURCE)
    2022:	ea 81       	ldd	r30, Y+2	; 0x02
    2024:	fb 81       	ldd	r31, Y+3	; 0x03
    2026:	82 81       	ldd	r24, Z+2	; 0x02
    2028:	89 30       	cpi	r24, 0x09	; 9
    202a:	61 f4       	brne	.+24     	; 0x2044 <LED_enuTurnON+0x5e>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8HIGH);
    202c:	ea 81       	ldd	r30, Y+2	; 0x02
    202e:	fb 81       	ldd	r31, Y+3	; 0x03
    2030:	80 81       	ld	r24, Z
    2032:	ea 81       	ldd	r30, Y+2	; 0x02
    2034:	fb 81       	ldd	r31, Y+3	; 0x03
    2036:	91 81       	ldd	r25, Z+1	; 0x01
    2038:	69 2f       	mov	r22, r25
    203a:	41 e0       	ldi	r20, 0x01	; 1
    203c:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_enuSetPinValue>
    2040:	89 83       	std	Y+1, r24	; 0x01
    2042:	03 c0       	rjmp	.+6      	; 0x204a <LED_enuTurnON+0x64>
		}
		else
		{
			return ES_OUT_OF_RANGE;
    2044:	83 e0       	ldi	r24, 0x03	; 3
    2046:	8c 83       	std	Y+4, r24	; 0x04
    2048:	05 c0       	rjmp	.+10     	; 0x2054 <LED_enuTurnON+0x6e>
	else
	{
		return ES_NULL_POINTER;
	}

	return Local_enuErrorState;
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	8c 83       	std	Y+4, r24	; 0x04
    204e:	02 c0       	rjmp	.+4      	; 0x2054 <LED_enuTurnON+0x6e>
			return ES_OUT_OF_RANGE;
		}
	}
	else
	{
		return ES_NULL_POINTER;
    2050:	82 e0       	ldi	r24, 0x02	; 2
    2052:	8c 83       	std	Y+4, r24	; 0x04
    2054:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return Local_enuErrorState;
}
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	cf 91       	pop	r28
    2060:	df 91       	pop	r29
    2062:	08 95       	ret

00002064 <LED_enuTurnOFF>:

ES_t LED_enuTurnOFF(LED_t * Copy_pstrLedID)
{
    2064:	df 93       	push	r29
    2066:	cf 93       	push	r28
    2068:	00 d0       	rcall	.+0      	; 0x206a <LED_enuTurnOFF+0x6>
    206a:	00 d0       	rcall	.+0      	; 0x206c <LED_enuTurnOFF+0x8>
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
    2070:	9b 83       	std	Y+3, r25	; 0x03
    2072:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2074:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pstrLedID != NULL)
    2076:	8a 81       	ldd	r24, Y+2	; 0x02
    2078:	9b 81       	ldd	r25, Y+3	; 0x03
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	41 f1       	breq	.+80     	; 0x20ce <LED_enuTurnOFF+0x6a>
	{
		if(Copy_pstrLedID->LED_u8Connection == LED_u8SINK)
    207e:	ea 81       	ldd	r30, Y+2	; 0x02
    2080:	fb 81       	ldd	r31, Y+3	; 0x03
    2082:	82 81       	ldd	r24, Z+2	; 0x02
    2084:	88 30       	cpi	r24, 0x08	; 8
    2086:	61 f4       	brne	.+24     	; 0x20a0 <LED_enuTurnOFF+0x3c>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8HIGH);
    2088:	ea 81       	ldd	r30, Y+2	; 0x02
    208a:	fb 81       	ldd	r31, Y+3	; 0x03
    208c:	80 81       	ld	r24, Z
    208e:	ea 81       	ldd	r30, Y+2	; 0x02
    2090:	fb 81       	ldd	r31, Y+3	; 0x03
    2092:	91 81       	ldd	r25, Z+1	; 0x01
    2094:	69 2f       	mov	r22, r25
    2096:	41 e0       	ldi	r20, 0x01	; 1
    2098:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_enuSetPinValue>
    209c:	89 83       	std	Y+1, r24	; 0x01
    209e:	14 c0       	rjmp	.+40     	; 0x20c8 <LED_enuTurnOFF+0x64>
		}
		else if(Copy_pstrLedID->LED_u8Connection == LED_u8SOURCE)
    20a0:	ea 81       	ldd	r30, Y+2	; 0x02
    20a2:	fb 81       	ldd	r31, Y+3	; 0x03
    20a4:	82 81       	ldd	r24, Z+2	; 0x02
    20a6:	89 30       	cpi	r24, 0x09	; 9
    20a8:	61 f4       	brne	.+24     	; 0x20c2 <LED_enuTurnOFF+0x5e>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8LOW);
    20aa:	ea 81       	ldd	r30, Y+2	; 0x02
    20ac:	fb 81       	ldd	r31, Y+3	; 0x03
    20ae:	80 81       	ld	r24, Z
    20b0:	ea 81       	ldd	r30, Y+2	; 0x02
    20b2:	fb 81       	ldd	r31, Y+3	; 0x03
    20b4:	91 81       	ldd	r25, Z+1	; 0x01
    20b6:	69 2f       	mov	r22, r25
    20b8:	40 e0       	ldi	r20, 0x00	; 0
    20ba:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_enuSetPinValue>
    20be:	89 83       	std	Y+1, r24	; 0x01
    20c0:	03 c0       	rjmp	.+6      	; 0x20c8 <LED_enuTurnOFF+0x64>
		}
		else
		{
			return ES_OUT_OF_RANGE;
    20c2:	83 e0       	ldi	r24, 0x03	; 3
    20c4:	8c 83       	std	Y+4, r24	; 0x04
    20c6:	05 c0       	rjmp	.+10     	; 0x20d2 <LED_enuTurnOFF+0x6e>
	else
	{
		return ES_NULL_POINTER;
	}

	return Local_enuErrorState;
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	8c 83       	std	Y+4, r24	; 0x04
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <LED_enuTurnOFF+0x6e>
			return ES_OUT_OF_RANGE;
		}
	}
	else
	{
		return ES_NULL_POINTER;
    20ce:	82 e0       	ldi	r24, 0x02	; 2
    20d0:	8c 83       	std	Y+4, r24	; 0x04
    20d2:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return Local_enuErrorState;
}
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <main>:
#include "../MCAL/DIO/DIO_int.h"
#include "../HAL/SSD/SSD_int.h"
#include <util/delay.h>

int main(void)
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
    20ea:	6e 97       	sbiw	r28, 0x1e	; 30
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	f8 94       	cli
    20f0:	de bf       	out	0x3e, r29	; 62
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Iterator = 0;
    20f6:	1e 8e       	std	Y+30, r1	; 0x1e
	ES_t Local_enuSSDErrorRet;
	DIO_enuInit();
    20f8:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_enuInit>
	Local_enuSSDErrorRet = SSD_enuInit();
    20fc:	0e 94 bc 0a 	call	0x1578	; 0x1578 <SSD_enuInit>
    2100:	8d 8f       	std	Y+29, r24	; 0x1d


	while(1)
	{

		if(Local_enuSSDErrorRet == ES_OK) //For Debug Init Function
    2102:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2104:	81 30       	cpi	r24, 0x01	; 1
    2106:	e9 f7       	brne	.-6      	; 0x2102 <main+0x20>
		{
			for(Local_u8Iterator = 0; Local_u8Iterator < 10; Local_u8Iterator++)
    2108:	1e 8e       	std	Y+30, r1	; 0x1e
    210a:	ef c0       	rjmp	.+478    	; 0x22ea <main+0x208>
			{
				SSD_enuDisplayNum(Local_u8Iterator);
    210c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    210e:	0e 94 01 0c 	call	0x1802	; 0x1802 <SSD_enuDisplayNum>
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	aa ef       	ldi	r26, 0xFA	; 250
    2118:	b3 e4       	ldi	r27, 0x43	; 67
    211a:	89 8f       	std	Y+25, r24	; 0x19
    211c:	9a 8f       	std	Y+26, r25	; 0x1a
    211e:	ab 8f       	std	Y+27, r26	; 0x1b
    2120:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2122:	69 8d       	ldd	r22, Y+25	; 0x19
    2124:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2126:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2128:	9c 8d       	ldd	r25, Y+28	; 0x1c
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	4a e7       	ldi	r20, 0x7A	; 122
    2130:	53 e4       	ldi	r21, 0x43	; 67
    2132:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	8d 8b       	std	Y+21, r24	; 0x15
    213c:	9e 8b       	std	Y+22, r25	; 0x16
    213e:	af 8b       	std	Y+23, r26	; 0x17
    2140:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2142:	6d 89       	ldd	r22, Y+21	; 0x15
    2144:	7e 89       	ldd	r23, Y+22	; 0x16
    2146:	8f 89       	ldd	r24, Y+23	; 0x17
    2148:	98 8d       	ldd	r25, Y+24	; 0x18
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e8       	ldi	r20, 0x80	; 128
    2150:	5f e3       	ldi	r21, 0x3F	; 63
    2152:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2156:	88 23       	and	r24, r24
    2158:	2c f4       	brge	.+10     	; 0x2164 <main+0x82>
		__ticks = 1;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	9c 8b       	std	Y+20, r25	; 0x14
    2160:	8b 8b       	std	Y+19, r24	; 0x13
    2162:	3f c0       	rjmp	.+126    	; 0x21e2 <main+0x100>
	else if (__tmp > 65535)
    2164:	6d 89       	ldd	r22, Y+21	; 0x15
    2166:	7e 89       	ldd	r23, Y+22	; 0x16
    2168:	8f 89       	ldd	r24, Y+23	; 0x17
    216a:	98 8d       	ldd	r25, Y+24	; 0x18
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	3f ef       	ldi	r19, 0xFF	; 255
    2170:	4f e7       	ldi	r20, 0x7F	; 127
    2172:	57 e4       	ldi	r21, 0x47	; 71
    2174:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2178:	18 16       	cp	r1, r24
    217a:	4c f5       	brge	.+82     	; 0x21ce <main+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217c:	69 8d       	ldd	r22, Y+25	; 0x19
    217e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2180:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2182:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e2       	ldi	r20, 0x20	; 32
    218a:	51 e4       	ldi	r21, 0x41	; 65
    218c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	bc 01       	movw	r22, r24
    2196:	cd 01       	movw	r24, r26
    2198:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9c 8b       	std	Y+20, r25	; 0x14
    21a2:	8b 8b       	std	Y+19, r24	; 0x13
    21a4:	0f c0       	rjmp	.+30     	; 0x21c4 <main+0xe2>
    21a6:	89 e1       	ldi	r24, 0x19	; 25
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	9a 8b       	std	Y+18, r25	; 0x12
    21ac:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21ae:	89 89       	ldd	r24, Y+17	; 0x11
    21b0:	9a 89       	ldd	r25, Y+18	; 0x12
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	f1 f7       	brne	.-4      	; 0x21b2 <main+0xd0>
    21b6:	9a 8b       	std	Y+18, r25	; 0x12
    21b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ba:	8b 89       	ldd	r24, Y+19	; 0x13
    21bc:	9c 89       	ldd	r25, Y+20	; 0x14
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	9c 8b       	std	Y+20, r25	; 0x14
    21c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c4:	8b 89       	ldd	r24, Y+19	; 0x13
    21c6:	9c 89       	ldd	r25, Y+20	; 0x14
    21c8:	00 97       	sbiw	r24, 0x00	; 0
    21ca:	69 f7       	brne	.-38     	; 0x21a6 <main+0xc4>
    21cc:	14 c0       	rjmp	.+40     	; 0x21f6 <main+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ce:	6d 89       	ldd	r22, Y+21	; 0x15
    21d0:	7e 89       	ldd	r23, Y+22	; 0x16
    21d2:	8f 89       	ldd	r24, Y+23	; 0x17
    21d4:	98 8d       	ldd	r25, Y+24	; 0x18
    21d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	9c 8b       	std	Y+20, r25	; 0x14
    21e0:	8b 8b       	std	Y+19, r24	; 0x13
    21e2:	8b 89       	ldd	r24, Y+19	; 0x13
    21e4:	9c 89       	ldd	r25, Y+20	; 0x14
    21e6:	98 8b       	std	Y+16, r25	; 0x10
    21e8:	8f 87       	std	Y+15, r24	; 0x0f
    21ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ec:	98 89       	ldd	r25, Y+16	; 0x10
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <main+0x10c>
    21f2:	98 8b       	std	Y+16, r25	; 0x10
    21f4:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				if(SSD_enuClearDisplay() == ES_OK) //For Debug Clear Function
    21f6:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <SSD_enuClearDisplay>
    21fa:	81 30       	cpi	r24, 0x01	; 1
    21fc:	09 f0       	breq	.+2      	; 0x2200 <main+0x11e>
    21fe:	72 c0       	rjmp	.+228    	; 0x22e4 <main+0x202>
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	aa ef       	ldi	r26, 0xFA	; 250
    2206:	b3 e4       	ldi	r27, 0x43	; 67
    2208:	8b 87       	std	Y+11, r24	; 0x0b
    220a:	9c 87       	std	Y+12, r25	; 0x0c
    220c:	ad 87       	std	Y+13, r26	; 0x0d
    220e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2210:	6b 85       	ldd	r22, Y+11	; 0x0b
    2212:	7c 85       	ldd	r23, Y+12	; 0x0c
    2214:	8d 85       	ldd	r24, Y+13	; 0x0d
    2216:	9e 85       	ldd	r25, Y+14	; 0x0e
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	4a e7       	ldi	r20, 0x7A	; 122
    221e:	53 e4       	ldi	r21, 0x43	; 67
    2220:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	8f 83       	std	Y+7, r24	; 0x07
    222a:	98 87       	std	Y+8, r25	; 0x08
    222c:	a9 87       	std	Y+9, r26	; 0x09
    222e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2230:	6f 81       	ldd	r22, Y+7	; 0x07
    2232:	78 85       	ldd	r23, Y+8	; 0x08
    2234:	89 85       	ldd	r24, Y+9	; 0x09
    2236:	9a 85       	ldd	r25, Y+10	; 0x0a
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	40 e8       	ldi	r20, 0x80	; 128
    223e:	5f e3       	ldi	r21, 0x3F	; 63
    2240:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2244:	88 23       	and	r24, r24
    2246:	2c f4       	brge	.+10     	; 0x2252 <main+0x170>
		__ticks = 1;
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	9e 83       	std	Y+6, r25	; 0x06
    224e:	8d 83       	std	Y+5, r24	; 0x05
    2250:	3f c0       	rjmp	.+126    	; 0x22d0 <main+0x1ee>
	else if (__tmp > 65535)
    2252:	6f 81       	ldd	r22, Y+7	; 0x07
    2254:	78 85       	ldd	r23, Y+8	; 0x08
    2256:	89 85       	ldd	r24, Y+9	; 0x09
    2258:	9a 85       	ldd	r25, Y+10	; 0x0a
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	3f ef       	ldi	r19, 0xFF	; 255
    225e:	4f e7       	ldi	r20, 0x7F	; 127
    2260:	57 e4       	ldi	r21, 0x47	; 71
    2262:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2266:	18 16       	cp	r1, r24
    2268:	4c f5       	brge	.+82     	; 0x22bc <main+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    226a:	6b 85       	ldd	r22, Y+11	; 0x0b
    226c:	7c 85       	ldd	r23, Y+12	; 0x0c
    226e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2270:	9e 85       	ldd	r25, Y+14	; 0x0e
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	40 e2       	ldi	r20, 0x20	; 32
    2278:	51 e4       	ldi	r21, 0x41	; 65
    227a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	bc 01       	movw	r22, r24
    2284:	cd 01       	movw	r24, r26
    2286:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	9e 83       	std	Y+6, r25	; 0x06
    2290:	8d 83       	std	Y+5, r24	; 0x05
    2292:	0f c0       	rjmp	.+30     	; 0x22b2 <main+0x1d0>
    2294:	89 e1       	ldi	r24, 0x19	; 25
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	9c 83       	std	Y+4, r25	; 0x04
    229a:	8b 83       	std	Y+3, r24	; 0x03
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	9c 81       	ldd	r25, Y+4	; 0x04
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	f1 f7       	brne	.-4      	; 0x22a0 <main+0x1be>
    22a4:	9c 83       	std	Y+4, r25	; 0x04
    22a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a8:	8d 81       	ldd	r24, Y+5	; 0x05
    22aa:	9e 81       	ldd	r25, Y+6	; 0x06
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	9e 83       	std	Y+6, r25	; 0x06
    22b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b2:	8d 81       	ldd	r24, Y+5	; 0x05
    22b4:	9e 81       	ldd	r25, Y+6	; 0x06
    22b6:	00 97       	sbiw	r24, 0x00	; 0
    22b8:	69 f7       	brne	.-38     	; 0x2294 <main+0x1b2>
    22ba:	14 c0       	rjmp	.+40     	; 0x22e4 <main+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22bc:	6f 81       	ldd	r22, Y+7	; 0x07
    22be:	78 85       	ldd	r23, Y+8	; 0x08
    22c0:	89 85       	ldd	r24, Y+9	; 0x09
    22c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	9e 83       	std	Y+6, r25	; 0x06
    22ce:	8d 83       	std	Y+5, r24	; 0x05
    22d0:	8d 81       	ldd	r24, Y+5	; 0x05
    22d2:	9e 81       	ldd	r25, Y+6	; 0x06
    22d4:	9a 83       	std	Y+2, r25	; 0x02
    22d6:	89 83       	std	Y+1, r24	; 0x01
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	9a 81       	ldd	r25, Y+2	; 0x02
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	f1 f7       	brne	.-4      	; 0x22dc <main+0x1fa>
    22e0:	9a 83       	std	Y+2, r25	; 0x02
    22e2:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{

		if(Local_enuSSDErrorRet == ES_OK) //For Debug Init Function
		{
			for(Local_u8Iterator = 0; Local_u8Iterator < 10; Local_u8Iterator++)
    22e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22e6:	8f 5f       	subi	r24, 0xFF	; 255
    22e8:	8e 8f       	std	Y+30, r24	; 0x1e
    22ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22ec:	8a 30       	cpi	r24, 0x0A	; 10
    22ee:	08 f4       	brcc	.+2      	; 0x22f2 <main+0x210>
    22f0:	0d cf       	rjmp	.-486    	; 0x210c <main+0x2a>
    22f2:	07 cf       	rjmp	.-498    	; 0x2102 <main+0x20>

000022f4 <__prologue_saves__>:
    22f4:	2f 92       	push	r2
    22f6:	3f 92       	push	r3
    22f8:	4f 92       	push	r4
    22fa:	5f 92       	push	r5
    22fc:	6f 92       	push	r6
    22fe:	7f 92       	push	r7
    2300:	8f 92       	push	r8
    2302:	9f 92       	push	r9
    2304:	af 92       	push	r10
    2306:	bf 92       	push	r11
    2308:	cf 92       	push	r12
    230a:	df 92       	push	r13
    230c:	ef 92       	push	r14
    230e:	ff 92       	push	r15
    2310:	0f 93       	push	r16
    2312:	1f 93       	push	r17
    2314:	cf 93       	push	r28
    2316:	df 93       	push	r29
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	ca 1b       	sub	r28, r26
    231e:	db 0b       	sbc	r29, r27
    2320:	0f b6       	in	r0, 0x3f	; 63
    2322:	f8 94       	cli
    2324:	de bf       	out	0x3e, r29	; 62
    2326:	0f be       	out	0x3f, r0	; 63
    2328:	cd bf       	out	0x3d, r28	; 61
    232a:	09 94       	ijmp

0000232c <__epilogue_restores__>:
    232c:	2a 88       	ldd	r2, Y+18	; 0x12
    232e:	39 88       	ldd	r3, Y+17	; 0x11
    2330:	48 88       	ldd	r4, Y+16	; 0x10
    2332:	5f 84       	ldd	r5, Y+15	; 0x0f
    2334:	6e 84       	ldd	r6, Y+14	; 0x0e
    2336:	7d 84       	ldd	r7, Y+13	; 0x0d
    2338:	8c 84       	ldd	r8, Y+12	; 0x0c
    233a:	9b 84       	ldd	r9, Y+11	; 0x0b
    233c:	aa 84       	ldd	r10, Y+10	; 0x0a
    233e:	b9 84       	ldd	r11, Y+9	; 0x09
    2340:	c8 84       	ldd	r12, Y+8	; 0x08
    2342:	df 80       	ldd	r13, Y+7	; 0x07
    2344:	ee 80       	ldd	r14, Y+6	; 0x06
    2346:	fd 80       	ldd	r15, Y+5	; 0x05
    2348:	0c 81       	ldd	r16, Y+4	; 0x04
    234a:	1b 81       	ldd	r17, Y+3	; 0x03
    234c:	aa 81       	ldd	r26, Y+2	; 0x02
    234e:	b9 81       	ldd	r27, Y+1	; 0x01
    2350:	ce 0f       	add	r28, r30
    2352:	d1 1d       	adc	r29, r1
    2354:	0f b6       	in	r0, 0x3f	; 63
    2356:	f8 94       	cli
    2358:	de bf       	out	0x3e, r29	; 62
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	cd bf       	out	0x3d, r28	; 61
    235e:	ed 01       	movw	r28, r26
    2360:	08 95       	ret

00002362 <_exit>:
    2362:	f8 94       	cli

00002364 <__stop_program>:
    2364:	ff cf       	rjmp	.-2      	; 0x2364 <__stop_program>
