
DIO_nti.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b12  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000b12  00000b86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001098  00000000  00000000  00000b90  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000009e9  00000000  00000000  00001c28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 64 05 	call	0xac8	; 0xac8 <main>
  7a:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_enuInit>:
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	0f 92       	push	r0
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	89 83       	std	Y+1, r24	; 0x01
  90:	ea e3       	ldi	r30, 0x3A	; 58
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	80 83       	st	Z, r24
  98:	e7 e3       	ldi	r30, 0x37	; 55
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	80 83       	st	Z, r24
  a0:	e4 e3       	ldi	r30, 0x34	; 52
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	8a ea       	ldi	r24, 0xAA	; 170
  a6:	80 83       	st	Z, r24
  a8:	e1 e3       	ldi	r30, 0x31	; 49
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	8a ea       	ldi	r24, 0xAA	; 170
  ae:	80 83       	st	Z, r24
  b0:	eb e3       	ldi	r30, 0x3B	; 59
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	10 82       	st	Z, r1
  b6:	e8 e3       	ldi	r30, 0x38	; 56
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	10 82       	st	Z, r1
  bc:	e5 e3       	ldi	r30, 0x35	; 53
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	86 e6       	ldi	r24, 0x66	; 102
  c2:	80 83       	st	Z, r24
  c4:	e2 e3       	ldi	r30, 0x32	; 50
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	86 e6       	ldi	r24, 0x66	; 102
  ca:	80 83       	st	Z, r24
  cc:	19 82       	std	Y+1, r1	; 0x01
  ce:	89 81       	ldd	r24, Y+1	; 0x01
  d0:	0f 90       	pop	r0
  d2:	cf 91       	pop	r28
  d4:	df 91       	pop	r29
  d6:	08 95       	ret

000000d8 <DIO_enuSetPortDirection>:
	return Local_enuErrorState;
}


ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value)
{
  d8:	df 93       	push	r29
  da:	cf 93       	push	r28
  dc:	00 d0       	rcall	.+0      	; 0xde <DIO_enuSetPortDirection+0x6>
  de:	00 d0       	rcall	.+0      	; 0xe0 <DIO_enuSetPortDirection+0x8>
  e0:	0f 92       	push	r0
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	8a 83       	std	Y+2, r24	; 0x02
  e8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	89 83       	std	Y+1, r24	; 0x01

	/*Range Check*/
	if(Copy_u8PortID <= DIO_PORTD)
  ee:	8a 81       	ldd	r24, Y+2	; 0x02
  f0:	84 30       	cpi	r24, 0x04	; 4
  f2:	a0 f5       	brcc	.+104    	; 0x15c <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
  f4:	8a 81       	ldd	r24, Y+2	; 0x02
  f6:	28 2f       	mov	r18, r24
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	3d 83       	std	Y+5, r19	; 0x05
  fc:	2c 83       	std	Y+4, r18	; 0x04
  fe:	8c 81       	ldd	r24, Y+4	; 0x04
 100:	9d 81       	ldd	r25, Y+5	; 0x05
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	91 05       	cpc	r25, r1
 106:	d1 f0       	breq	.+52     	; 0x13c <DIO_enuSetPortDirection+0x64>
 108:	2c 81       	ldd	r18, Y+4	; 0x04
 10a:	3d 81       	ldd	r19, Y+5	; 0x05
 10c:	22 30       	cpi	r18, 0x02	; 2
 10e:	31 05       	cpc	r19, r1
 110:	2c f4       	brge	.+10     	; 0x11c <DIO_enuSetPortDirection+0x44>
 112:	8c 81       	ldd	r24, Y+4	; 0x04
 114:	9d 81       	ldd	r25, Y+5	; 0x05
 116:	00 97       	sbiw	r24, 0x00	; 0
 118:	61 f0       	breq	.+24     	; 0x132 <DIO_enuSetPortDirection+0x5a>
 11a:	1e c0       	rjmp	.+60     	; 0x158 <DIO_enuSetPortDirection+0x80>
 11c:	2c 81       	ldd	r18, Y+4	; 0x04
 11e:	3d 81       	ldd	r19, Y+5	; 0x05
 120:	22 30       	cpi	r18, 0x02	; 2
 122:	31 05       	cpc	r19, r1
 124:	81 f0       	breq	.+32     	; 0x146 <DIO_enuSetPortDirection+0x6e>
 126:	8c 81       	ldd	r24, Y+4	; 0x04
 128:	9d 81       	ldd	r25, Y+5	; 0x05
 12a:	83 30       	cpi	r24, 0x03	; 3
 12c:	91 05       	cpc	r25, r1
 12e:	81 f0       	breq	.+32     	; 0x150 <DIO_enuSetPortDirection+0x78>
 130:	13 c0       	rjmp	.+38     	; 0x158 <DIO_enuSetPortDirection+0x80>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
 132:	ea e3       	ldi	r30, 0x3A	; 58
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	8b 81       	ldd	r24, Y+3	; 0x03
 138:	80 83       	st	Z, r24
 13a:	0e c0       	rjmp	.+28     	; 0x158 <DIO_enuSetPortDirection+0x80>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
 13c:	e7 e3       	ldi	r30, 0x37	; 55
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	8b 81       	ldd	r24, Y+3	; 0x03
 142:	80 83       	st	Z, r24
 144:	09 c0       	rjmp	.+18     	; 0x158 <DIO_enuSetPortDirection+0x80>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
 146:	e4 e3       	ldi	r30, 0x34	; 52
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	8b 81       	ldd	r24, Y+3	; 0x03
 14c:	80 83       	st	Z, r24
 14e:	04 c0       	rjmp	.+8      	; 0x158 <DIO_enuSetPortDirection+0x80>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
 150:	e1 e3       	ldi	r30, 0x31	; 49
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	8b 81       	ldd	r24, Y+3	; 0x03
 156:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
 158:	19 82       	std	Y+1, r1	; 0x01
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 15c:	83 e0       	ldi	r24, 0x03	; 3
 15e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
 160:	89 81       	ldd	r24, Y+1	; 0x01
}
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
 16c:	cf 91       	pop	r28
 16e:	df 91       	pop	r29
 170:	08 95       	ret

00000172 <DIO_enuSetPortValue>:


ES_t DIO_enuSetPortValue(u8 Copy_u8PortID, u8 Copy_u8Value)
{
 172:	df 93       	push	r29
 174:	cf 93       	push	r28
 176:	00 d0       	rcall	.+0      	; 0x178 <DIO_enuSetPortValue+0x6>
 178:	00 d0       	rcall	.+0      	; 0x17a <DIO_enuSetPortValue+0x8>
 17a:	0f 92       	push	r0
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
 180:	8a 83       	std	Y+2, r24	; 0x02
 182:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	89 83       	std	Y+1, r24	; 0x01

	/* Range Check */
	if(Copy_u8PortID <= DIO_PORTD)
 188:	8a 81       	ldd	r24, Y+2	; 0x02
 18a:	84 30       	cpi	r24, 0x04	; 4
 18c:	a0 f5       	brcc	.+104    	; 0x1f6 <DIO_enuSetPortValue+0x84>
	{
		switch(Copy_u8PortID)
 18e:	8a 81       	ldd	r24, Y+2	; 0x02
 190:	28 2f       	mov	r18, r24
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	3d 83       	std	Y+5, r19	; 0x05
 196:	2c 83       	std	Y+4, r18	; 0x04
 198:	8c 81       	ldd	r24, Y+4	; 0x04
 19a:	9d 81       	ldd	r25, Y+5	; 0x05
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	91 05       	cpc	r25, r1
 1a0:	d1 f0       	breq	.+52     	; 0x1d6 <DIO_enuSetPortValue+0x64>
 1a2:	2c 81       	ldd	r18, Y+4	; 0x04
 1a4:	3d 81       	ldd	r19, Y+5	; 0x05
 1a6:	22 30       	cpi	r18, 0x02	; 2
 1a8:	31 05       	cpc	r19, r1
 1aa:	2c f4       	brge	.+10     	; 0x1b6 <DIO_enuSetPortValue+0x44>
 1ac:	8c 81       	ldd	r24, Y+4	; 0x04
 1ae:	9d 81       	ldd	r25, Y+5	; 0x05
 1b0:	00 97       	sbiw	r24, 0x00	; 0
 1b2:	61 f0       	breq	.+24     	; 0x1cc <DIO_enuSetPortValue+0x5a>
 1b4:	1e c0       	rjmp	.+60     	; 0x1f2 <DIO_enuSetPortValue+0x80>
 1b6:	2c 81       	ldd	r18, Y+4	; 0x04
 1b8:	3d 81       	ldd	r19, Y+5	; 0x05
 1ba:	22 30       	cpi	r18, 0x02	; 2
 1bc:	31 05       	cpc	r19, r1
 1be:	81 f0       	breq	.+32     	; 0x1e0 <DIO_enuSetPortValue+0x6e>
 1c0:	8c 81       	ldd	r24, Y+4	; 0x04
 1c2:	9d 81       	ldd	r25, Y+5	; 0x05
 1c4:	83 30       	cpi	r24, 0x03	; 3
 1c6:	91 05       	cpc	r25, r1
 1c8:	81 f0       	breq	.+32     	; 0x1ea <DIO_enuSetPortValue+0x78>
 1ca:	13 c0       	rjmp	.+38     	; 0x1f2 <DIO_enuSetPortValue+0x80>
		{
		case DIO_PORTA:
			PORTA = Copy_u8Value;
 1cc:	eb e3       	ldi	r30, 0x3B	; 59
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	8b 81       	ldd	r24, Y+3	; 0x03
 1d2:	80 83       	st	Z, r24
 1d4:	0e c0       	rjmp	.+28     	; 0x1f2 <DIO_enuSetPortValue+0x80>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8Value;
 1d6:	e8 e3       	ldi	r30, 0x38	; 56
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	8b 81       	ldd	r24, Y+3	; 0x03
 1dc:	80 83       	st	Z, r24
 1de:	09 c0       	rjmp	.+18     	; 0x1f2 <DIO_enuSetPortValue+0x80>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8Value;
 1e0:	e5 e3       	ldi	r30, 0x35	; 53
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	8b 81       	ldd	r24, Y+3	; 0x03
 1e6:	80 83       	st	Z, r24
 1e8:	04 c0       	rjmp	.+8      	; 0x1f2 <DIO_enuSetPortValue+0x80>
			break;
		case DIO_PORTD:
			PORTD = Copy_u8Value;
 1ea:	e2 e3       	ldi	r30, 0x32	; 50
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	8b 81       	ldd	r24, Y+3	; 0x03
 1f0:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
 1f2:	19 82       	std	Y+1, r1	; 0x01
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 1f6:	83 e0       	ldi	r24, 0x03	; 3
 1f8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
 1fa:	89 81       	ldd	r24, Y+1	; 0x01
}
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	0f 90       	pop	r0
 204:	0f 90       	pop	r0
 206:	cf 91       	pop	r28
 208:	df 91       	pop	r29
 20a:	08 95       	ret

0000020c <DIO_enuTogPortValue>:


ES_t DIO_enuTogPortValue(u8 Copy_u8PortID)
{
 20c:	df 93       	push	r29
 20e:	cf 93       	push	r28
 210:	00 d0       	rcall	.+0      	; 0x212 <DIO_enuTogPortValue+0x6>
 212:	00 d0       	rcall	.+0      	; 0x214 <DIO_enuTogPortValue+0x8>
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 218:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	89 83       	std	Y+1, r24	; 0x01

	/* Range Check */
	if(Copy_u8PortID <= DIO_PORTD)
 21e:	8a 81       	ldd	r24, Y+2	; 0x02
 220:	84 30       	cpi	r24, 0x04	; 4
 222:	08 f0       	brcs	.+2      	; 0x226 <DIO_enuTogPortValue+0x1a>
 224:	40 c0       	rjmp	.+128    	; 0x2a6 <DIO_enuTogPortValue+0x9a>
	{
		switch(Copy_u8PortID)
 226:	8a 81       	ldd	r24, Y+2	; 0x02
 228:	28 2f       	mov	r18, r24
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	3c 83       	std	Y+4, r19	; 0x04
 22e:	2b 83       	std	Y+3, r18	; 0x03
 230:	8b 81       	ldd	r24, Y+3	; 0x03
 232:	9c 81       	ldd	r25, Y+4	; 0x04
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	91 05       	cpc	r25, r1
 238:	e9 f0       	breq	.+58     	; 0x274 <DIO_enuTogPortValue+0x68>
 23a:	2b 81       	ldd	r18, Y+3	; 0x03
 23c:	3c 81       	ldd	r19, Y+4	; 0x04
 23e:	22 30       	cpi	r18, 0x02	; 2
 240:	31 05       	cpc	r19, r1
 242:	2c f4       	brge	.+10     	; 0x24e <DIO_enuTogPortValue+0x42>
 244:	8b 81       	ldd	r24, Y+3	; 0x03
 246:	9c 81       	ldd	r25, Y+4	; 0x04
 248:	00 97       	sbiw	r24, 0x00	; 0
 24a:	61 f0       	breq	.+24     	; 0x264 <DIO_enuTogPortValue+0x58>
 24c:	2a c0       	rjmp	.+84     	; 0x2a2 <DIO_enuTogPortValue+0x96>
 24e:	2b 81       	ldd	r18, Y+3	; 0x03
 250:	3c 81       	ldd	r19, Y+4	; 0x04
 252:	22 30       	cpi	r18, 0x02	; 2
 254:	31 05       	cpc	r19, r1
 256:	b1 f0       	breq	.+44     	; 0x284 <DIO_enuTogPortValue+0x78>
 258:	8b 81       	ldd	r24, Y+3	; 0x03
 25a:	9c 81       	ldd	r25, Y+4	; 0x04
 25c:	83 30       	cpi	r24, 0x03	; 3
 25e:	91 05       	cpc	r25, r1
 260:	c9 f0       	breq	.+50     	; 0x294 <DIO_enuTogPortValue+0x88>
 262:	1f c0       	rjmp	.+62     	; 0x2a2 <DIO_enuTogPortValue+0x96>
		{
		case DIO_PORTA:
			PORTA = ~PORTA;
 264:	ab e3       	ldi	r26, 0x3B	; 59
 266:	b0 e0       	ldi	r27, 0x00	; 0
 268:	eb e3       	ldi	r30, 0x3B	; 59
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	80 95       	com	r24
 270:	8c 93       	st	X, r24
 272:	17 c0       	rjmp	.+46     	; 0x2a2 <DIO_enuTogPortValue+0x96>
			break;
		case DIO_PORTB:
			PORTB = ~PORTB;
 274:	a8 e3       	ldi	r26, 0x38	; 56
 276:	b0 e0       	ldi	r27, 0x00	; 0
 278:	e8 e3       	ldi	r30, 0x38	; 56
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	80 95       	com	r24
 280:	8c 93       	st	X, r24
 282:	0f c0       	rjmp	.+30     	; 0x2a2 <DIO_enuTogPortValue+0x96>
			break;
		case DIO_PORTC:
			PORTC = ~PORTC;
 284:	a5 e3       	ldi	r26, 0x35	; 53
 286:	b0 e0       	ldi	r27, 0x00	; 0
 288:	e5 e3       	ldi	r30, 0x35	; 53
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	80 95       	com	r24
 290:	8c 93       	st	X, r24
 292:	07 c0       	rjmp	.+14     	; 0x2a2 <DIO_enuTogPortValue+0x96>
			break;
		case DIO_PORTD:
			PORTD = ~PORTD;
 294:	a2 e3       	ldi	r26, 0x32	; 50
 296:	b0 e0       	ldi	r27, 0x00	; 0
 298:	e2 e3       	ldi	r30, 0x32	; 50
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	80 95       	com	r24
 2a0:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
 2a2:	19 82       	std	Y+1, r1	; 0x01
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 2a6:	83 e0       	ldi	r24, 0x03	; 3
 2a8:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
 2aa:	89 81       	ldd	r24, Y+1	; 0x01
}
 2ac:	0f 90       	pop	r0
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	cf 91       	pop	r28
 2b6:	df 91       	pop	r29
 2b8:	08 95       	ret

000002ba <DIO_enuGetPortValue>:


ES_t DIO_enuGetPortValue(u8 Copy_u8PortID, u8 * Copy_pu8Value)
{
 2ba:	df 93       	push	r29
 2bc:	cf 93       	push	r28
 2be:	00 d0       	rcall	.+0      	; 0x2c0 <DIO_enuGetPortValue+0x6>
 2c0:	00 d0       	rcall	.+0      	; 0x2c2 <DIO_enuGetPortValue+0x8>
 2c2:	00 d0       	rcall	.+0      	; 0x2c4 <DIO_enuGetPortValue+0xa>
 2c4:	cd b7       	in	r28, 0x3d	; 61
 2c6:	de b7       	in	r29, 0x3e	; 62
 2c8:	8a 83       	std	Y+2, r24	; 0x02
 2ca:	7c 83       	std	Y+4, r23	; 0x04
 2cc:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	89 83       	std	Y+1, r24	; 0x01

	/* Check if wild pointer */
	if(Copy_pu8Value != NULL)
 2d2:	8b 81       	ldd	r24, Y+3	; 0x03
 2d4:	9c 81       	ldd	r25, Y+4	; 0x04
 2d6:	00 97       	sbiw	r24, 0x00	; 0
 2d8:	09 f4       	brne	.+2      	; 0x2dc <DIO_enuGetPortValue+0x22>
 2da:	42 c0       	rjmp	.+132    	; 0x360 <DIO_enuGetPortValue+0xa6>
	{
		/* Change Range */
		if(Copy_u8PortID <= DIO_PORTD)
 2dc:	8a 81       	ldd	r24, Y+2	; 0x02
 2de:	84 30       	cpi	r24, 0x04	; 4
 2e0:	e0 f5       	brcc	.+120    	; 0x35a <DIO_enuGetPortValue+0xa0>
		{
			switch(Copy_u8PortID)
 2e2:	8a 81       	ldd	r24, Y+2	; 0x02
 2e4:	28 2f       	mov	r18, r24
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	3e 83       	std	Y+6, r19	; 0x06
 2ea:	2d 83       	std	Y+5, r18	; 0x05
 2ec:	8d 81       	ldd	r24, Y+5	; 0x05
 2ee:	9e 81       	ldd	r25, Y+6	; 0x06
 2f0:	81 30       	cpi	r24, 0x01	; 1
 2f2:	91 05       	cpc	r25, r1
 2f4:	e1 f0       	breq	.+56     	; 0x32e <DIO_enuGetPortValue+0x74>
 2f6:	2d 81       	ldd	r18, Y+5	; 0x05
 2f8:	3e 81       	ldd	r19, Y+6	; 0x06
 2fa:	22 30       	cpi	r18, 0x02	; 2
 2fc:	31 05       	cpc	r19, r1
 2fe:	2c f4       	brge	.+10     	; 0x30a <DIO_enuGetPortValue+0x50>
 300:	8d 81       	ldd	r24, Y+5	; 0x05
 302:	9e 81       	ldd	r25, Y+6	; 0x06
 304:	00 97       	sbiw	r24, 0x00	; 0
 306:	61 f0       	breq	.+24     	; 0x320 <DIO_enuGetPortValue+0x66>
 308:	26 c0       	rjmp	.+76     	; 0x356 <DIO_enuGetPortValue+0x9c>
 30a:	2d 81       	ldd	r18, Y+5	; 0x05
 30c:	3e 81       	ldd	r19, Y+6	; 0x06
 30e:	22 30       	cpi	r18, 0x02	; 2
 310:	31 05       	cpc	r19, r1
 312:	a1 f0       	breq	.+40     	; 0x33c <DIO_enuGetPortValue+0x82>
 314:	8d 81       	ldd	r24, Y+5	; 0x05
 316:	9e 81       	ldd	r25, Y+6	; 0x06
 318:	83 30       	cpi	r24, 0x03	; 3
 31a:	91 05       	cpc	r25, r1
 31c:	b1 f0       	breq	.+44     	; 0x34a <DIO_enuGetPortValue+0x90>
 31e:	1b c0       	rjmp	.+54     	; 0x356 <DIO_enuGetPortValue+0x9c>
			{
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
 320:	e9 e3       	ldi	r30, 0x39	; 57
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	eb 81       	ldd	r30, Y+3	; 0x03
 328:	fc 81       	ldd	r31, Y+4	; 0x04
 32a:	80 83       	st	Z, r24
 32c:	14 c0       	rjmp	.+40     	; 0x356 <DIO_enuGetPortValue+0x9c>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
 32e:	e6 e3       	ldi	r30, 0x36	; 54
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	eb 81       	ldd	r30, Y+3	; 0x03
 336:	fc 81       	ldd	r31, Y+4	; 0x04
 338:	80 83       	st	Z, r24
 33a:	0d c0       	rjmp	.+26     	; 0x356 <DIO_enuGetPortValue+0x9c>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
 33c:	e3 e3       	ldi	r30, 0x33	; 51
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	eb 81       	ldd	r30, Y+3	; 0x03
 344:	fc 81       	ldd	r31, Y+4	; 0x04
 346:	80 83       	st	Z, r24
 348:	06 c0       	rjmp	.+12     	; 0x356 <DIO_enuGetPortValue+0x9c>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
 34a:	e0 e3       	ldi	r30, 0x30	; 48
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	eb 81       	ldd	r30, Y+3	; 0x03
 352:	fc 81       	ldd	r31, Y+4	; 0x04
 354:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
 356:	19 82       	std	Y+1, r1	; 0x01
 358:	05 c0       	rjmp	.+10     	; 0x364 <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
 35a:	83 e0       	ldi	r24, 0x03	; 3
 35c:	89 83       	std	Y+1, r24	; 0x01
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
 360:	82 e0       	ldi	r24, 0x02	; 2
 362:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
 364:	89 81       	ldd	r24, Y+1	; 0x01
}
 366:	26 96       	adiw	r28, 0x06	; 6
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	f8 94       	cli
 36c:	de bf       	out	0x3e, r29	; 62
 36e:	0f be       	out	0x3f, r0	; 63
 370:	cd bf       	out	0x3d, r28	; 61
 372:	cf 91       	pop	r28
 374:	df 91       	pop	r29
 376:	08 95       	ret

00000378 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
 378:	df 93       	push	r29
 37a:	cf 93       	push	r28
 37c:	00 d0       	rcall	.+0      	; 0x37e <DIO_enuSetPinDirection+0x6>
 37e:	00 d0       	rcall	.+0      	; 0x380 <DIO_enuSetPinDirection+0x8>
 380:	00 d0       	rcall	.+0      	; 0x382 <DIO_enuSetPinDirection+0xa>
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	de b7       	in	r29, 0x3e	; 62
 386:	8a 83       	std	Y+2, r24	; 0x02
 388:	6b 83       	std	Y+3, r22	; 0x03
 38a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	89 83       	std	Y+1, r24	; 0x01

	/* Check range */
	if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) && (Copy_u8Value <= OUTPUT))
 390:	8a 81       	ldd	r24, Y+2	; 0x02
 392:	84 30       	cpi	r24, 0x04	; 4
 394:	08 f0       	brcs	.+2      	; 0x398 <DIO_enuSetPinDirection+0x20>
 396:	d0 c0       	rjmp	.+416    	; 0x538 <DIO_enuSetPinDirection+0x1c0>
 398:	8b 81       	ldd	r24, Y+3	; 0x03
 39a:	88 30       	cpi	r24, 0x08	; 8
 39c:	08 f0       	brcs	.+2      	; 0x3a0 <DIO_enuSetPinDirection+0x28>
 39e:	cc c0       	rjmp	.+408    	; 0x538 <DIO_enuSetPinDirection+0x1c0>
 3a0:	8c 81       	ldd	r24, Y+4	; 0x04
 3a2:	82 30       	cpi	r24, 0x02	; 2
 3a4:	08 f0       	brcs	.+2      	; 0x3a8 <DIO_enuSetPinDirection+0x30>
 3a6:	c8 c0       	rjmp	.+400    	; 0x538 <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
 3a8:	8a 81       	ldd	r24, Y+2	; 0x02
 3aa:	28 2f       	mov	r18, r24
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	3e 83       	std	Y+6, r19	; 0x06
 3b0:	2d 83       	std	Y+5, r18	; 0x05
 3b2:	6d 81       	ldd	r22, Y+5	; 0x05
 3b4:	7e 81       	ldd	r23, Y+6	; 0x06
 3b6:	61 30       	cpi	r22, 0x01	; 1
 3b8:	71 05       	cpc	r23, r1
 3ba:	09 f4       	brne	.+2      	; 0x3be <DIO_enuSetPinDirection+0x46>
 3bc:	41 c0       	rjmp	.+130    	; 0x440 <DIO_enuSetPinDirection+0xc8>
 3be:	8d 81       	ldd	r24, Y+5	; 0x05
 3c0:	9e 81       	ldd	r25, Y+6	; 0x06
 3c2:	82 30       	cpi	r24, 0x02	; 2
 3c4:	91 05       	cpc	r25, r1
 3c6:	34 f4       	brge	.+12     	; 0x3d4 <DIO_enuSetPinDirection+0x5c>
 3c8:	2d 81       	ldd	r18, Y+5	; 0x05
 3ca:	3e 81       	ldd	r19, Y+6	; 0x06
 3cc:	21 15       	cp	r18, r1
 3ce:	31 05       	cpc	r19, r1
 3d0:	71 f0       	breq	.+28     	; 0x3ee <DIO_enuSetPinDirection+0x76>
 3d2:	b0 c0       	rjmp	.+352    	; 0x534 <DIO_enuSetPinDirection+0x1bc>
 3d4:	6d 81       	ldd	r22, Y+5	; 0x05
 3d6:	7e 81       	ldd	r23, Y+6	; 0x06
 3d8:	62 30       	cpi	r22, 0x02	; 2
 3da:	71 05       	cpc	r23, r1
 3dc:	09 f4       	brne	.+2      	; 0x3e0 <DIO_enuSetPinDirection+0x68>
 3de:	59 c0       	rjmp	.+178    	; 0x492 <DIO_enuSetPinDirection+0x11a>
 3e0:	8d 81       	ldd	r24, Y+5	; 0x05
 3e2:	9e 81       	ldd	r25, Y+6	; 0x06
 3e4:	83 30       	cpi	r24, 0x03	; 3
 3e6:	91 05       	cpc	r25, r1
 3e8:	09 f4       	brne	.+2      	; 0x3ec <DIO_enuSetPinDirection+0x74>
 3ea:	7c c0       	rjmp	.+248    	; 0x4e4 <DIO_enuSetPinDirection+0x16c>
 3ec:	a3 c0       	rjmp	.+326    	; 0x534 <DIO_enuSetPinDirection+0x1bc>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);             //Mask bit == Clear Bit
 3ee:	aa e3       	ldi	r26, 0x3A	; 58
 3f0:	b0 e0       	ldi	r27, 0x00	; 0
 3f2:	ea e3       	ldi	r30, 0x3A	; 58
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	48 2f       	mov	r20, r24
 3fa:	8b 81       	ldd	r24, Y+3	; 0x03
 3fc:	28 2f       	mov	r18, r24
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 c0       	rjmp	.+4      	; 0x40a <DIO_enuSetPinDirection+0x92>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	2a 95       	dec	r18
 40c:	e2 f7       	brpl	.-8      	; 0x406 <DIO_enuSetPinDirection+0x8e>
 40e:	80 95       	com	r24
 410:	84 23       	and	r24, r20
 412:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID); //Write new value
 414:	aa e3       	ldi	r26, 0x3A	; 58
 416:	b0 e0       	ldi	r27, 0x00	; 0
 418:	ea e3       	ldi	r30, 0x3A	; 58
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	80 81       	ld	r24, Z
 41e:	48 2f       	mov	r20, r24
 420:	8c 81       	ldd	r24, Y+4	; 0x04
 422:	28 2f       	mov	r18, r24
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	8b 81       	ldd	r24, Y+3	; 0x03
 428:	88 2f       	mov	r24, r24
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	b9 01       	movw	r22, r18
 42e:	02 c0       	rjmp	.+4      	; 0x434 <DIO_enuSetPinDirection+0xbc>
 430:	66 0f       	add	r22, r22
 432:	77 1f       	adc	r23, r23
 434:	8a 95       	dec	r24
 436:	e2 f7       	brpl	.-8      	; 0x430 <DIO_enuSetPinDirection+0xb8>
 438:	cb 01       	movw	r24, r22
 43a:	84 2b       	or	r24, r20
 43c:	8c 93       	st	X, r24
 43e:	7a c0       	rjmp	.+244    	; 0x534 <DIO_enuSetPinDirection+0x1bc>
			 *      -> 101-0-1001 | 000-1-0000 (Write Value)
			 *      -> 101-1-1-1001 (Result)
			 */
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
 440:	a7 e3       	ldi	r26, 0x37	; 55
 442:	b0 e0       	ldi	r27, 0x00	; 0
 444:	e7 e3       	ldi	r30, 0x37	; 55
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	80 81       	ld	r24, Z
 44a:	48 2f       	mov	r20, r24
 44c:	8b 81       	ldd	r24, Y+3	; 0x03
 44e:	28 2f       	mov	r18, r24
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	02 c0       	rjmp	.+4      	; 0x45c <DIO_enuSetPinDirection+0xe4>
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	2a 95       	dec	r18
 45e:	e2 f7       	brpl	.-8      	; 0x458 <DIO_enuSetPinDirection+0xe0>
 460:	80 95       	com	r24
 462:	84 23       	and	r24, r20
 464:	8c 93       	st	X, r24
			DDRB |= (Copy_u8Value << Copy_u8PinID);
 466:	a7 e3       	ldi	r26, 0x37	; 55
 468:	b0 e0       	ldi	r27, 0x00	; 0
 46a:	e7 e3       	ldi	r30, 0x37	; 55
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	80 81       	ld	r24, Z
 470:	48 2f       	mov	r20, r24
 472:	8c 81       	ldd	r24, Y+4	; 0x04
 474:	28 2f       	mov	r18, r24
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	8b 81       	ldd	r24, Y+3	; 0x03
 47a:	88 2f       	mov	r24, r24
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	b9 01       	movw	r22, r18
 480:	02 c0       	rjmp	.+4      	; 0x486 <DIO_enuSetPinDirection+0x10e>
 482:	66 0f       	add	r22, r22
 484:	77 1f       	adc	r23, r23
 486:	8a 95       	dec	r24
 488:	e2 f7       	brpl	.-8      	; 0x482 <DIO_enuSetPinDirection+0x10a>
 48a:	cb 01       	movw	r24, r22
 48c:	84 2b       	or	r24, r20
 48e:	8c 93       	st	X, r24
 490:	51 c0       	rjmp	.+162    	; 0x534 <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
 492:	a4 e3       	ldi	r26, 0x34	; 52
 494:	b0 e0       	ldi	r27, 0x00	; 0
 496:	e4 e3       	ldi	r30, 0x34	; 52
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	80 81       	ld	r24, Z
 49c:	48 2f       	mov	r20, r24
 49e:	8b 81       	ldd	r24, Y+3	; 0x03
 4a0:	28 2f       	mov	r18, r24
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <DIO_enuSetPinDirection+0x136>
 4aa:	88 0f       	add	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	2a 95       	dec	r18
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <DIO_enuSetPinDirection+0x132>
 4b2:	80 95       	com	r24
 4b4:	84 23       	and	r24, r20
 4b6:	8c 93       	st	X, r24
			DDRC |= (Copy_u8Value << Copy_u8PinID);
 4b8:	a4 e3       	ldi	r26, 0x34	; 52
 4ba:	b0 e0       	ldi	r27, 0x00	; 0
 4bc:	e4 e3       	ldi	r30, 0x34	; 52
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	80 81       	ld	r24, Z
 4c2:	48 2f       	mov	r20, r24
 4c4:	8c 81       	ldd	r24, Y+4	; 0x04
 4c6:	28 2f       	mov	r18, r24
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	8b 81       	ldd	r24, Y+3	; 0x03
 4cc:	88 2f       	mov	r24, r24
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	b9 01       	movw	r22, r18
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_enuSetPinDirection+0x160>
 4d4:	66 0f       	add	r22, r22
 4d6:	77 1f       	adc	r23, r23
 4d8:	8a 95       	dec	r24
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_enuSetPinDirection+0x15c>
 4dc:	cb 01       	movw	r24, r22
 4de:	84 2b       	or	r24, r20
 4e0:	8c 93       	st	X, r24
 4e2:	28 c0       	rjmp	.+80     	; 0x534 <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
 4e4:	a1 e3       	ldi	r26, 0x31	; 49
 4e6:	b0 e0       	ldi	r27, 0x00	; 0
 4e8:	e1 e3       	ldi	r30, 0x31	; 49
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	80 81       	ld	r24, Z
 4ee:	48 2f       	mov	r20, r24
 4f0:	8b 81       	ldd	r24, Y+3	; 0x03
 4f2:	28 2f       	mov	r18, r24
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_enuSetPinDirection+0x188>
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	2a 95       	dec	r18
 502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_enuSetPinDirection+0x184>
 504:	80 95       	com	r24
 506:	84 23       	and	r24, r20
 508:	8c 93       	st	X, r24
			DDRD |= (Copy_u8Value << Copy_u8PinID);
 50a:	a1 e3       	ldi	r26, 0x31	; 49
 50c:	b0 e0       	ldi	r27, 0x00	; 0
 50e:	e1 e3       	ldi	r30, 0x31	; 49
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	80 81       	ld	r24, Z
 514:	48 2f       	mov	r20, r24
 516:	8c 81       	ldd	r24, Y+4	; 0x04
 518:	28 2f       	mov	r18, r24
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	8b 81       	ldd	r24, Y+3	; 0x03
 51e:	88 2f       	mov	r24, r24
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	b9 01       	movw	r22, r18
 524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_enuSetPinDirection+0x1b2>
 526:	66 0f       	add	r22, r22
 528:	77 1f       	adc	r23, r23
 52a:	8a 95       	dec	r24
 52c:	e2 f7       	brpl	.-8      	; 0x526 <DIO_enuSetPinDirection+0x1ae>
 52e:	cb 01       	movw	r24, r22
 530:	84 2b       	or	r24, r20
 532:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
 534:	19 82       	std	Y+1, r1	; 0x01
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 538:	83 e0       	ldi	r24, 0x03	; 3
 53a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
 53c:	89 81       	ldd	r24, Y+1	; 0x01
}
 53e:	26 96       	adiw	r28, 0x06	; 6
 540:	0f b6       	in	r0, 0x3f	; 63
 542:	f8 94       	cli
 544:	de bf       	out	0x3e, r29	; 62
 546:	0f be       	out	0x3f, r0	; 63
 548:	cd bf       	out	0x3d, r28	; 61
 54a:	cf 91       	pop	r28
 54c:	df 91       	pop	r29
 54e:	08 95       	ret

00000550 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
 550:	df 93       	push	r29
 552:	cf 93       	push	r28
 554:	00 d0       	rcall	.+0      	; 0x556 <DIO_enuSetPinValue+0x6>
 556:	00 d0       	rcall	.+0      	; 0x558 <DIO_enuSetPinValue+0x8>
 558:	00 d0       	rcall	.+0      	; 0x55a <DIO_enuSetPinValue+0xa>
 55a:	cd b7       	in	r28, 0x3d	; 61
 55c:	de b7       	in	r29, 0x3e	; 62
 55e:	8a 83       	std	Y+2, r24	; 0x02
 560:	6b 83       	std	Y+3, r22	; 0x03
 562:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	89 83       	std	Y+1, r24	; 0x01

	/* Check range */
	if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) && (Copy_u8Value <= OUTPUT))
 568:	8a 81       	ldd	r24, Y+2	; 0x02
 56a:	84 30       	cpi	r24, 0x04	; 4
 56c:	08 f0       	brcs	.+2      	; 0x570 <DIO_enuSetPinValue+0x20>
 56e:	d0 c0       	rjmp	.+416    	; 0x710 <DIO_enuSetPinValue+0x1c0>
 570:	8b 81       	ldd	r24, Y+3	; 0x03
 572:	88 30       	cpi	r24, 0x08	; 8
 574:	08 f0       	brcs	.+2      	; 0x578 <DIO_enuSetPinValue+0x28>
 576:	cc c0       	rjmp	.+408    	; 0x710 <DIO_enuSetPinValue+0x1c0>
 578:	8c 81       	ldd	r24, Y+4	; 0x04
 57a:	82 30       	cpi	r24, 0x02	; 2
 57c:	08 f0       	brcs	.+2      	; 0x580 <DIO_enuSetPinValue+0x30>
 57e:	c8 c0       	rjmp	.+400    	; 0x710 <DIO_enuSetPinValue+0x1c0>
	{
		switch(Copy_u8PortID)
 580:	8a 81       	ldd	r24, Y+2	; 0x02
 582:	28 2f       	mov	r18, r24
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	3e 83       	std	Y+6, r19	; 0x06
 588:	2d 83       	std	Y+5, r18	; 0x05
 58a:	6d 81       	ldd	r22, Y+5	; 0x05
 58c:	7e 81       	ldd	r23, Y+6	; 0x06
 58e:	61 30       	cpi	r22, 0x01	; 1
 590:	71 05       	cpc	r23, r1
 592:	09 f4       	brne	.+2      	; 0x596 <DIO_enuSetPinValue+0x46>
 594:	41 c0       	rjmp	.+130    	; 0x618 <DIO_enuSetPinValue+0xc8>
 596:	8d 81       	ldd	r24, Y+5	; 0x05
 598:	9e 81       	ldd	r25, Y+6	; 0x06
 59a:	82 30       	cpi	r24, 0x02	; 2
 59c:	91 05       	cpc	r25, r1
 59e:	34 f4       	brge	.+12     	; 0x5ac <DIO_enuSetPinValue+0x5c>
 5a0:	2d 81       	ldd	r18, Y+5	; 0x05
 5a2:	3e 81       	ldd	r19, Y+6	; 0x06
 5a4:	21 15       	cp	r18, r1
 5a6:	31 05       	cpc	r19, r1
 5a8:	71 f0       	breq	.+28     	; 0x5c6 <DIO_enuSetPinValue+0x76>
 5aa:	b0 c0       	rjmp	.+352    	; 0x70c <DIO_enuSetPinValue+0x1bc>
 5ac:	6d 81       	ldd	r22, Y+5	; 0x05
 5ae:	7e 81       	ldd	r23, Y+6	; 0x06
 5b0:	62 30       	cpi	r22, 0x02	; 2
 5b2:	71 05       	cpc	r23, r1
 5b4:	09 f4       	brne	.+2      	; 0x5b8 <DIO_enuSetPinValue+0x68>
 5b6:	59 c0       	rjmp	.+178    	; 0x66a <DIO_enuSetPinValue+0x11a>
 5b8:	8d 81       	ldd	r24, Y+5	; 0x05
 5ba:	9e 81       	ldd	r25, Y+6	; 0x06
 5bc:	83 30       	cpi	r24, 0x03	; 3
 5be:	91 05       	cpc	r25, r1
 5c0:	09 f4       	brne	.+2      	; 0x5c4 <DIO_enuSetPinValue+0x74>
 5c2:	7c c0       	rjmp	.+248    	; 0x6bc <DIO_enuSetPinValue+0x16c>
 5c4:	a3 c0       	rjmp	.+326    	; 0x70c <DIO_enuSetPinValue+0x1bc>
		{
		case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);             //Mask bit == Clear Bit
 5c6:	ab e3       	ldi	r26, 0x3B	; 59
 5c8:	b0 e0       	ldi	r27, 0x00	; 0
 5ca:	eb e3       	ldi	r30, 0x3B	; 59
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	80 81       	ld	r24, Z
 5d0:	48 2f       	mov	r20, r24
 5d2:	8b 81       	ldd	r24, Y+3	; 0x03
 5d4:	28 2f       	mov	r18, r24
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <DIO_enuSetPinValue+0x92>
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	2a 95       	dec	r18
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <DIO_enuSetPinValue+0x8e>
 5e6:	80 95       	com	r24
 5e8:	84 23       	and	r24, r20
 5ea:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID); //Write new value
 5ec:	ab e3       	ldi	r26, 0x3B	; 59
 5ee:	b0 e0       	ldi	r27, 0x00	; 0
 5f0:	eb e3       	ldi	r30, 0x3B	; 59
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 81       	ld	r24, Z
 5f6:	48 2f       	mov	r20, r24
 5f8:	8c 81       	ldd	r24, Y+4	; 0x04
 5fa:	28 2f       	mov	r18, r24
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	8b 81       	ldd	r24, Y+3	; 0x03
 600:	88 2f       	mov	r24, r24
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	b9 01       	movw	r22, r18
 606:	02 c0       	rjmp	.+4      	; 0x60c <DIO_enuSetPinValue+0xbc>
 608:	66 0f       	add	r22, r22
 60a:	77 1f       	adc	r23, r23
 60c:	8a 95       	dec	r24
 60e:	e2 f7       	brpl	.-8      	; 0x608 <DIO_enuSetPinValue+0xb8>
 610:	cb 01       	movw	r24, r22
 612:	84 2b       	or	r24, r20
 614:	8c 93       	st	X, r24
 616:	7a c0       	rjmp	.+244    	; 0x70c <DIO_enuSetPinValue+0x1bc>
			break;
		case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
 618:	a8 e3       	ldi	r26, 0x38	; 56
 61a:	b0 e0       	ldi	r27, 0x00	; 0
 61c:	e8 e3       	ldi	r30, 0x38	; 56
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	80 81       	ld	r24, Z
 622:	48 2f       	mov	r20, r24
 624:	8b 81       	ldd	r24, Y+3	; 0x03
 626:	28 2f       	mov	r18, r24
 628:	30 e0       	ldi	r19, 0x00	; 0
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	02 c0       	rjmp	.+4      	; 0x634 <DIO_enuSetPinValue+0xe4>
 630:	88 0f       	add	r24, r24
 632:	99 1f       	adc	r25, r25
 634:	2a 95       	dec	r18
 636:	e2 f7       	brpl	.-8      	; 0x630 <DIO_enuSetPinValue+0xe0>
 638:	80 95       	com	r24
 63a:	84 23       	and	r24, r20
 63c:	8c 93       	st	X, r24
			PORTB |= (Copy_u8Value << Copy_u8PinID);
 63e:	a8 e3       	ldi	r26, 0x38	; 56
 640:	b0 e0       	ldi	r27, 0x00	; 0
 642:	e8 e3       	ldi	r30, 0x38	; 56
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	80 81       	ld	r24, Z
 648:	48 2f       	mov	r20, r24
 64a:	8c 81       	ldd	r24, Y+4	; 0x04
 64c:	28 2f       	mov	r18, r24
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	8b 81       	ldd	r24, Y+3	; 0x03
 652:	88 2f       	mov	r24, r24
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	b9 01       	movw	r22, r18
 658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_enuSetPinValue+0x10e>
 65a:	66 0f       	add	r22, r22
 65c:	77 1f       	adc	r23, r23
 65e:	8a 95       	dec	r24
 660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_enuSetPinValue+0x10a>
 662:	cb 01       	movw	r24, r22
 664:	84 2b       	or	r24, r20
 666:	8c 93       	st	X, r24
 668:	51 c0       	rjmp	.+162    	; 0x70c <DIO_enuSetPinValue+0x1bc>
			break;
		case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
 66a:	a5 e3       	ldi	r26, 0x35	; 53
 66c:	b0 e0       	ldi	r27, 0x00	; 0
 66e:	e5 e3       	ldi	r30, 0x35	; 53
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	80 81       	ld	r24, Z
 674:	48 2f       	mov	r20, r24
 676:	8b 81       	ldd	r24, Y+3	; 0x03
 678:	28 2f       	mov	r18, r24
 67a:	30 e0       	ldi	r19, 0x00	; 0
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	02 c0       	rjmp	.+4      	; 0x686 <DIO_enuSetPinValue+0x136>
 682:	88 0f       	add	r24, r24
 684:	99 1f       	adc	r25, r25
 686:	2a 95       	dec	r18
 688:	e2 f7       	brpl	.-8      	; 0x682 <DIO_enuSetPinValue+0x132>
 68a:	80 95       	com	r24
 68c:	84 23       	and	r24, r20
 68e:	8c 93       	st	X, r24
			PORTC |= (Copy_u8Value << Copy_u8PinID);
 690:	a5 e3       	ldi	r26, 0x35	; 53
 692:	b0 e0       	ldi	r27, 0x00	; 0
 694:	e5 e3       	ldi	r30, 0x35	; 53
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	80 81       	ld	r24, Z
 69a:	48 2f       	mov	r20, r24
 69c:	8c 81       	ldd	r24, Y+4	; 0x04
 69e:	28 2f       	mov	r18, r24
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	8b 81       	ldd	r24, Y+3	; 0x03
 6a4:	88 2f       	mov	r24, r24
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	b9 01       	movw	r22, r18
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <DIO_enuSetPinValue+0x160>
 6ac:	66 0f       	add	r22, r22
 6ae:	77 1f       	adc	r23, r23
 6b0:	8a 95       	dec	r24
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <DIO_enuSetPinValue+0x15c>
 6b4:	cb 01       	movw	r24, r22
 6b6:	84 2b       	or	r24, r20
 6b8:	8c 93       	st	X, r24
 6ba:	28 c0       	rjmp	.+80     	; 0x70c <DIO_enuSetPinValue+0x1bc>
			break;
		case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
 6bc:	a2 e3       	ldi	r26, 0x32	; 50
 6be:	b0 e0       	ldi	r27, 0x00	; 0
 6c0:	e2 e3       	ldi	r30, 0x32	; 50
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	80 81       	ld	r24, Z
 6c6:	48 2f       	mov	r20, r24
 6c8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ca:	28 2f       	mov	r18, r24
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <DIO_enuSetPinValue+0x188>
 6d4:	88 0f       	add	r24, r24
 6d6:	99 1f       	adc	r25, r25
 6d8:	2a 95       	dec	r18
 6da:	e2 f7       	brpl	.-8      	; 0x6d4 <DIO_enuSetPinValue+0x184>
 6dc:	80 95       	com	r24
 6de:	84 23       	and	r24, r20
 6e0:	8c 93       	st	X, r24
			PORTD |= (Copy_u8Value << Copy_u8PinID);
 6e2:	a2 e3       	ldi	r26, 0x32	; 50
 6e4:	b0 e0       	ldi	r27, 0x00	; 0
 6e6:	e2 e3       	ldi	r30, 0x32	; 50
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	80 81       	ld	r24, Z
 6ec:	48 2f       	mov	r20, r24
 6ee:	8c 81       	ldd	r24, Y+4	; 0x04
 6f0:	28 2f       	mov	r18, r24
 6f2:	30 e0       	ldi	r19, 0x00	; 0
 6f4:	8b 81       	ldd	r24, Y+3	; 0x03
 6f6:	88 2f       	mov	r24, r24
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	b9 01       	movw	r22, r18
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <DIO_enuSetPinValue+0x1b2>
 6fe:	66 0f       	add	r22, r22
 700:	77 1f       	adc	r23, r23
 702:	8a 95       	dec	r24
 704:	e2 f7       	brpl	.-8      	; 0x6fe <DIO_enuSetPinValue+0x1ae>
 706:	cb 01       	movw	r24, r22
 708:	84 2b       	or	r24, r20
 70a:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
 70c:	19 82       	std	Y+1, r1	; 0x01
 70e:	02 c0       	rjmp	.+4      	; 0x714 <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 710:	83 e0       	ldi	r24, 0x03	; 3
 712:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
 714:	89 81       	ldd	r24, Y+1	; 0x01
}
 716:	26 96       	adiw	r28, 0x06	; 6
 718:	0f b6       	in	r0, 0x3f	; 63
 71a:	f8 94       	cli
 71c:	de bf       	out	0x3e, r29	; 62
 71e:	0f be       	out	0x3f, r0	; 63
 720:	cd bf       	out	0x3d, r28	; 61
 722:	cf 91       	pop	r28
 724:	df 91       	pop	r29
 726:	08 95       	ret

00000728 <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID)
{
 728:	df 93       	push	r29
 72a:	cf 93       	push	r28
 72c:	00 d0       	rcall	.+0      	; 0x72e <DIO_enuTogPinValue+0x6>
 72e:	00 d0       	rcall	.+0      	; 0x730 <DIO_enuTogPinValue+0x8>
 730:	0f 92       	push	r0
 732:	cd b7       	in	r28, 0x3d	; 61
 734:	de b7       	in	r29, 0x3e	; 62
 736:	8a 83       	std	Y+2, r24	; 0x02
 738:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	89 83       	std	Y+1, r24	; 0x01

	/* Check range */
	if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7))
 73e:	8a 81       	ldd	r24, Y+2	; 0x02
 740:	84 30       	cpi	r24, 0x04	; 4
 742:	08 f0       	brcs	.+2      	; 0x746 <DIO_enuTogPinValue+0x1e>
 744:	74 c0       	rjmp	.+232    	; 0x82e <DIO_enuTogPinValue+0x106>
 746:	8b 81       	ldd	r24, Y+3	; 0x03
 748:	88 30       	cpi	r24, 0x08	; 8
 74a:	08 f0       	brcs	.+2      	; 0x74e <DIO_enuTogPinValue+0x26>
 74c:	70 c0       	rjmp	.+224    	; 0x82e <DIO_enuTogPinValue+0x106>
	{
		switch(Copy_u8PortID)
 74e:	8a 81       	ldd	r24, Y+2	; 0x02
 750:	28 2f       	mov	r18, r24
 752:	30 e0       	ldi	r19, 0x00	; 0
 754:	3d 83       	std	Y+5, r19	; 0x05
 756:	2c 83       	std	Y+4, r18	; 0x04
 758:	8c 81       	ldd	r24, Y+4	; 0x04
 75a:	9d 81       	ldd	r25, Y+5	; 0x05
 75c:	81 30       	cpi	r24, 0x01	; 1
 75e:	91 05       	cpc	r25, r1
 760:	49 f1       	breq	.+82     	; 0x7b4 <DIO_enuTogPinValue+0x8c>
 762:	2c 81       	ldd	r18, Y+4	; 0x04
 764:	3d 81       	ldd	r19, Y+5	; 0x05
 766:	22 30       	cpi	r18, 0x02	; 2
 768:	31 05       	cpc	r19, r1
 76a:	2c f4       	brge	.+10     	; 0x776 <DIO_enuTogPinValue+0x4e>
 76c:	8c 81       	ldd	r24, Y+4	; 0x04
 76e:	9d 81       	ldd	r25, Y+5	; 0x05
 770:	00 97       	sbiw	r24, 0x00	; 0
 772:	61 f0       	breq	.+24     	; 0x78c <DIO_enuTogPinValue+0x64>
 774:	5a c0       	rjmp	.+180    	; 0x82a <DIO_enuTogPinValue+0x102>
 776:	2c 81       	ldd	r18, Y+4	; 0x04
 778:	3d 81       	ldd	r19, Y+5	; 0x05
 77a:	22 30       	cpi	r18, 0x02	; 2
 77c:	31 05       	cpc	r19, r1
 77e:	71 f1       	breq	.+92     	; 0x7dc <DIO_enuTogPinValue+0xb4>
 780:	8c 81       	ldd	r24, Y+4	; 0x04
 782:	9d 81       	ldd	r25, Y+5	; 0x05
 784:	83 30       	cpi	r24, 0x03	; 3
 786:	91 05       	cpc	r25, r1
 788:	e9 f1       	breq	.+122    	; 0x804 <DIO_enuTogPinValue+0xdc>
 78a:	4f c0       	rjmp	.+158    	; 0x82a <DIO_enuTogPinValue+0x102>
		{
		case DIO_PORTA:
			PORTA ^=  (DIO_MASK_BIT << Copy_u8PinID);
 78c:	ab e3       	ldi	r26, 0x3B	; 59
 78e:	b0 e0       	ldi	r27, 0x00	; 0
 790:	eb e3       	ldi	r30, 0x3B	; 59
 792:	f0 e0       	ldi	r31, 0x00	; 0
 794:	80 81       	ld	r24, Z
 796:	48 2f       	mov	r20, r24
 798:	8b 81       	ldd	r24, Y+3	; 0x03
 79a:	28 2f       	mov	r18, r24
 79c:	30 e0       	ldi	r19, 0x00	; 0
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	02 2e       	mov	r0, r18
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <DIO_enuTogPinValue+0x82>
 7a6:	88 0f       	add	r24, r24
 7a8:	99 1f       	adc	r25, r25
 7aa:	0a 94       	dec	r0
 7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <DIO_enuTogPinValue+0x7e>
 7ae:	84 27       	eor	r24, r20
 7b0:	8c 93       	st	X, r24
 7b2:	3b c0       	rjmp	.+118    	; 0x82a <DIO_enuTogPinValue+0x102>
			 *       -> 000-1-0000
			 *       -> 101-0-1001
			 * */
			break;
		case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT << Copy_u8PinID);
 7b4:	a8 e3       	ldi	r26, 0x38	; 56
 7b6:	b0 e0       	ldi	r27, 0x00	; 0
 7b8:	e8 e3       	ldi	r30, 0x38	; 56
 7ba:	f0 e0       	ldi	r31, 0x00	; 0
 7bc:	80 81       	ld	r24, Z
 7be:	48 2f       	mov	r20, r24
 7c0:	8b 81       	ldd	r24, Y+3	; 0x03
 7c2:	28 2f       	mov	r18, r24
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	02 2e       	mov	r0, r18
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <DIO_enuTogPinValue+0xaa>
 7ce:	88 0f       	add	r24, r24
 7d0:	99 1f       	adc	r25, r25
 7d2:	0a 94       	dec	r0
 7d4:	e2 f7       	brpl	.-8      	; 0x7ce <DIO_enuTogPinValue+0xa6>
 7d6:	84 27       	eor	r24, r20
 7d8:	8c 93       	st	X, r24
 7da:	27 c0       	rjmp	.+78     	; 0x82a <DIO_enuTogPinValue+0x102>
			break;
		case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT << Copy_u8PinID);
 7dc:	a5 e3       	ldi	r26, 0x35	; 53
 7de:	b0 e0       	ldi	r27, 0x00	; 0
 7e0:	e5 e3       	ldi	r30, 0x35	; 53
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	80 81       	ld	r24, Z
 7e6:	48 2f       	mov	r20, r24
 7e8:	8b 81       	ldd	r24, Y+3	; 0x03
 7ea:	28 2f       	mov	r18, r24
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	02 2e       	mov	r0, r18
 7f4:	02 c0       	rjmp	.+4      	; 0x7fa <DIO_enuTogPinValue+0xd2>
 7f6:	88 0f       	add	r24, r24
 7f8:	99 1f       	adc	r25, r25
 7fa:	0a 94       	dec	r0
 7fc:	e2 f7       	brpl	.-8      	; 0x7f6 <DIO_enuTogPinValue+0xce>
 7fe:	84 27       	eor	r24, r20
 800:	8c 93       	st	X, r24
 802:	13 c0       	rjmp	.+38     	; 0x82a <DIO_enuTogPinValue+0x102>
			break;
		case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT << Copy_u8PinID);
 804:	a2 e3       	ldi	r26, 0x32	; 50
 806:	b0 e0       	ldi	r27, 0x00	; 0
 808:	e2 e3       	ldi	r30, 0x32	; 50
 80a:	f0 e0       	ldi	r31, 0x00	; 0
 80c:	80 81       	ld	r24, Z
 80e:	48 2f       	mov	r20, r24
 810:	8b 81       	ldd	r24, Y+3	; 0x03
 812:	28 2f       	mov	r18, r24
 814:	30 e0       	ldi	r19, 0x00	; 0
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	02 2e       	mov	r0, r18
 81c:	02 c0       	rjmp	.+4      	; 0x822 <DIO_enuTogPinValue+0xfa>
 81e:	88 0f       	add	r24, r24
 820:	99 1f       	adc	r25, r25
 822:	0a 94       	dec	r0
 824:	e2 f7       	brpl	.-8      	; 0x81e <DIO_enuTogPinValue+0xf6>
 826:	84 27       	eor	r24, r20
 828:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
 82a:	19 82       	std	Y+1, r1	; 0x01
 82c:	02 c0       	rjmp	.+4      	; 0x832 <DIO_enuTogPinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 82e:	83 e0       	ldi	r24, 0x03	; 3
 830:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
 832:	89 81       	ldd	r24, Y+1	; 0x01
}
 834:	0f 90       	pop	r0
 836:	0f 90       	pop	r0
 838:	0f 90       	pop	r0
 83a:	0f 90       	pop	r0
 83c:	0f 90       	pop	r0
 83e:	cf 91       	pop	r28
 840:	df 91       	pop	r29
 842:	08 95       	ret

00000844 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 * Copy_pu8Value)
{
 844:	df 93       	push	r29
 846:	cf 93       	push	r28
 848:	cd b7       	in	r28, 0x3d	; 61
 84a:	de b7       	in	r29, 0x3e	; 62
 84c:	27 97       	sbiw	r28, 0x07	; 7
 84e:	0f b6       	in	r0, 0x3f	; 63
 850:	f8 94       	cli
 852:	de bf       	out	0x3e, r29	; 62
 854:	0f be       	out	0x3f, r0	; 63
 856:	cd bf       	out	0x3d, r28	; 61
 858:	8a 83       	std	Y+2, r24	; 0x02
 85a:	6b 83       	std	Y+3, r22	; 0x03
 85c:	5d 83       	std	Y+5, r21	; 0x05
 85e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
 860:	81 e0       	ldi	r24, 0x01	; 1
 862:	89 83       	std	Y+1, r24	; 0x01

	/* Check if wild pointer */
	if(Copy_pu8Value != NULL)
 864:	8c 81       	ldd	r24, Y+4	; 0x04
 866:	9d 81       	ldd	r25, Y+5	; 0x05
 868:	00 97       	sbiw	r24, 0x00	; 0
 86a:	09 f4       	brne	.+2      	; 0x86e <__stack+0xf>
 86c:	7d c0       	rjmp	.+250    	; 0x968 <__stack+0x109>
	{
		/* Check Range */
		if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7))
 86e:	8a 81       	ldd	r24, Y+2	; 0x02
 870:	84 30       	cpi	r24, 0x04	; 4
 872:	08 f0       	brcs	.+2      	; 0x876 <__stack+0x17>
 874:	76 c0       	rjmp	.+236    	; 0x962 <__stack+0x103>
 876:	8b 81       	ldd	r24, Y+3	; 0x03
 878:	88 30       	cpi	r24, 0x08	; 8
 87a:	08 f0       	brcs	.+2      	; 0x87e <__stack+0x1f>
 87c:	72 c0       	rjmp	.+228    	; 0x962 <__stack+0x103>
		{
			switch(Copy_u8PortID)
 87e:	8a 81       	ldd	r24, Y+2	; 0x02
 880:	28 2f       	mov	r18, r24
 882:	30 e0       	ldi	r19, 0x00	; 0
 884:	3f 83       	std	Y+7, r19	; 0x07
 886:	2e 83       	std	Y+6, r18	; 0x06
 888:	4e 81       	ldd	r20, Y+6	; 0x06
 88a:	5f 81       	ldd	r21, Y+7	; 0x07
 88c:	41 30       	cpi	r20, 0x01	; 1
 88e:	51 05       	cpc	r21, r1
 890:	59 f1       	breq	.+86     	; 0x8e8 <__stack+0x89>
 892:	8e 81       	ldd	r24, Y+6	; 0x06
 894:	9f 81       	ldd	r25, Y+7	; 0x07
 896:	82 30       	cpi	r24, 0x02	; 2
 898:	91 05       	cpc	r25, r1
 89a:	34 f4       	brge	.+12     	; 0x8a8 <__stack+0x49>
 89c:	2e 81       	ldd	r18, Y+6	; 0x06
 89e:	3f 81       	ldd	r19, Y+7	; 0x07
 8a0:	21 15       	cp	r18, r1
 8a2:	31 05       	cpc	r19, r1
 8a4:	69 f0       	breq	.+26     	; 0x8c0 <__stack+0x61>
 8a6:	5b c0       	rjmp	.+182    	; 0x95e <__stack+0xff>
 8a8:	4e 81       	ldd	r20, Y+6	; 0x06
 8aa:	5f 81       	ldd	r21, Y+7	; 0x07
 8ac:	42 30       	cpi	r20, 0x02	; 2
 8ae:	51 05       	cpc	r21, r1
 8b0:	79 f1       	breq	.+94     	; 0x910 <__stack+0xb1>
 8b2:	8e 81       	ldd	r24, Y+6	; 0x06
 8b4:	9f 81       	ldd	r25, Y+7	; 0x07
 8b6:	83 30       	cpi	r24, 0x03	; 3
 8b8:	91 05       	cpc	r25, r1
 8ba:	09 f4       	brne	.+2      	; 0x8be <__stack+0x5f>
 8bc:	3d c0       	rjmp	.+122    	; 0x938 <__stack+0xd9>
 8be:	4f c0       	rjmp	.+158    	; 0x95e <__stack+0xff>
			{
			case DIO_PORTA:
				*Copy_pu8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
 8c0:	e9 e3       	ldi	r30, 0x39	; 57
 8c2:	f0 e0       	ldi	r31, 0x00	; 0
 8c4:	80 81       	ld	r24, Z
 8c6:	28 2f       	mov	r18, r24
 8c8:	30 e0       	ldi	r19, 0x00	; 0
 8ca:	8b 81       	ldd	r24, Y+3	; 0x03
 8cc:	88 2f       	mov	r24, r24
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	a9 01       	movw	r20, r18
 8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <__stack+0x79>
 8d4:	55 95       	asr	r21
 8d6:	47 95       	ror	r20
 8d8:	8a 95       	dec	r24
 8da:	e2 f7       	brpl	.-8      	; 0x8d4 <__stack+0x75>
 8dc:	ca 01       	movw	r24, r20
 8de:	81 70       	andi	r24, 0x01	; 1
 8e0:	ec 81       	ldd	r30, Y+4	; 0x04
 8e2:	fd 81       	ldd	r31, Y+5	; 0x05
 8e4:	80 83       	st	Z, r24
 8e6:	3b c0       	rjmp	.+118    	; 0x95e <__stack+0xff>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
 8e8:	e6 e3       	ldi	r30, 0x36	; 54
 8ea:	f0 e0       	ldi	r31, 0x00	; 0
 8ec:	80 81       	ld	r24, Z
 8ee:	28 2f       	mov	r18, r24
 8f0:	30 e0       	ldi	r19, 0x00	; 0
 8f2:	8b 81       	ldd	r24, Y+3	; 0x03
 8f4:	88 2f       	mov	r24, r24
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	a9 01       	movw	r20, r18
 8fa:	02 c0       	rjmp	.+4      	; 0x900 <__stack+0xa1>
 8fc:	55 95       	asr	r21
 8fe:	47 95       	ror	r20
 900:	8a 95       	dec	r24
 902:	e2 f7       	brpl	.-8      	; 0x8fc <__stack+0x9d>
 904:	ca 01       	movw	r24, r20
 906:	81 70       	andi	r24, 0x01	; 1
 908:	ec 81       	ldd	r30, Y+4	; 0x04
 90a:	fd 81       	ldd	r31, Y+5	; 0x05
 90c:	80 83       	st	Z, r24
 90e:	27 c0       	rjmp	.+78     	; 0x95e <__stack+0xff>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
 910:	e3 e3       	ldi	r30, 0x33	; 51
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	80 81       	ld	r24, Z
 916:	28 2f       	mov	r18, r24
 918:	30 e0       	ldi	r19, 0x00	; 0
 91a:	8b 81       	ldd	r24, Y+3	; 0x03
 91c:	88 2f       	mov	r24, r24
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	a9 01       	movw	r20, r18
 922:	02 c0       	rjmp	.+4      	; 0x928 <__stack+0xc9>
 924:	55 95       	asr	r21
 926:	47 95       	ror	r20
 928:	8a 95       	dec	r24
 92a:	e2 f7       	brpl	.-8      	; 0x924 <__stack+0xc5>
 92c:	ca 01       	movw	r24, r20
 92e:	81 70       	andi	r24, 0x01	; 1
 930:	ec 81       	ldd	r30, Y+4	; 0x04
 932:	fd 81       	ldd	r31, Y+5	; 0x05
 934:	80 83       	st	Z, r24
 936:	13 c0       	rjmp	.+38     	; 0x95e <__stack+0xff>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = ((PIND >> Copy_u8PinID) & DIO_MASK_BIT);
 938:	e0 e3       	ldi	r30, 0x30	; 48
 93a:	f0 e0       	ldi	r31, 0x00	; 0
 93c:	80 81       	ld	r24, Z
 93e:	28 2f       	mov	r18, r24
 940:	30 e0       	ldi	r19, 0x00	; 0
 942:	8b 81       	ldd	r24, Y+3	; 0x03
 944:	88 2f       	mov	r24, r24
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	a9 01       	movw	r20, r18
 94a:	02 c0       	rjmp	.+4      	; 0x950 <__stack+0xf1>
 94c:	55 95       	asr	r21
 94e:	47 95       	ror	r20
 950:	8a 95       	dec	r24
 952:	e2 f7       	brpl	.-8      	; 0x94c <__stack+0xed>
 954:	ca 01       	movw	r24, r20
 956:	81 70       	andi	r24, 0x01	; 1
 958:	ec 81       	ldd	r30, Y+4	; 0x04
 95a:	fd 81       	ldd	r31, Y+5	; 0x05
 95c:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
 95e:	19 82       	std	Y+1, r1	; 0x01
 960:	05 c0       	rjmp	.+10     	; 0x96c <__stack+0x10d>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
 962:	83 e0       	ldi	r24, 0x03	; 3
 964:	89 83       	std	Y+1, r24	; 0x01
 966:	02 c0       	rjmp	.+4      	; 0x96c <__stack+0x10d>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
 968:	82 e0       	ldi	r24, 0x02	; 2
 96a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
 96c:	89 81       	ldd	r24, Y+1	; 0x01
}
 96e:	27 96       	adiw	r28, 0x07	; 7
 970:	0f b6       	in	r0, 0x3f	; 63
 972:	f8 94       	cli
 974:	de bf       	out	0x3e, r29	; 62
 976:	0f be       	out	0x3f, r0	; 63
 978:	cd bf       	out	0x3d, r28	; 61
 97a:	cf 91       	pop	r28
 97c:	df 91       	pop	r29
 97e:	08 95       	ret

00000980 <Switch_enuInit>:
#include "../../LIB/STD_TYPES.h"
#include "../../LIB/ERROR_STATE.h"
#include "../../MCAL/DIO/DIO_int.h"

ES_t Switch_enuInit(SW_t * Copy_pAstrSwitches)
{
 980:	df 93       	push	r29
 982:	cf 93       	push	r28
 984:	00 d0       	rcall	.+0      	; 0x986 <Switch_enuInit+0x6>
 986:	00 d0       	rcall	.+0      	; 0x988 <Switch_enuInit+0x8>
 988:	cd b7       	in	r28, 0x3d	; 61
 98a:	de b7       	in	r29, 0x3e	; 62
 98c:	9c 83       	std	Y+4, r25	; 0x04
 98e:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
 990:	81 e0       	ldi	r24, 0x01	; 1
 992:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_pAstrSwitches != NULL)
 994:	8b 81       	ldd	r24, Y+3	; 0x03
 996:	9c 81       	ldd	r25, Y+4	; 0x04
 998:	00 97       	sbiw	r24, 0x00	; 0
 99a:	09 f4       	brne	.+2      	; 0x99e <Switch_enuInit+0x1e>
 99c:	5d c0       	rjmp	.+186    	; 0xa58 <Switch_enuInit+0xd8>
	{
		u8 Local_u8Iterator = 0;
 99e:	19 82       	std	Y+1, r1	; 0x01

		for(Local_u8Iterator = 0; Local_u8Iterator < SW_NUM; Local_u8Iterator++)
 9a0:	19 82       	std	Y+1, r1	; 0x01
 9a2:	55 c0       	rjmp	.+170    	; 0xa4e <Switch_enuInit+0xce>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_pAstrSwitches[Local_u8Iterator].SW_PortID,
 9a4:	89 81       	ldd	r24, Y+1	; 0x01
 9a6:	28 2f       	mov	r18, r24
 9a8:	30 e0       	ldi	r19, 0x00	; 0
 9aa:	c9 01       	movw	r24, r18
 9ac:	88 0f       	add	r24, r24
 9ae:	99 1f       	adc	r25, r25
 9b0:	28 0f       	add	r18, r24
 9b2:	39 1f       	adc	r19, r25
 9b4:	8b 81       	ldd	r24, Y+3	; 0x03
 9b6:	9c 81       	ldd	r25, Y+4	; 0x04
 9b8:	fc 01       	movw	r30, r24
 9ba:	e2 0f       	add	r30, r18
 9bc:	f3 1f       	adc	r31, r19
 9be:	40 81       	ld	r20, Z
 9c0:	89 81       	ldd	r24, Y+1	; 0x01
 9c2:	28 2f       	mov	r18, r24
 9c4:	30 e0       	ldi	r19, 0x00	; 0
 9c6:	c9 01       	movw	r24, r18
 9c8:	88 0f       	add	r24, r24
 9ca:	99 1f       	adc	r25, r25
 9cc:	28 0f       	add	r18, r24
 9ce:	39 1f       	adc	r19, r25
 9d0:	8b 81       	ldd	r24, Y+3	; 0x03
 9d2:	9c 81       	ldd	r25, Y+4	; 0x04
 9d4:	fc 01       	movw	r30, r24
 9d6:	e2 0f       	add	r30, r18
 9d8:	f3 1f       	adc	r31, r19
 9da:	91 81       	ldd	r25, Z+1	; 0x01
 9dc:	84 2f       	mov	r24, r20
 9de:	69 2f       	mov	r22, r25
 9e0:	40 e0       	ldi	r20, 0x00	; 0
 9e2:	0e 94 bc 01 	call	0x378	; 0x378 <DIO_enuSetPinDirection>
 9e6:	8a 83       	std	Y+2, r24	; 0x02
								   	   	   	   	   	     Copy_pAstrSwitches[Local_u8Iterator].SW_PinID,
														 DIO_u8INPUT);
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pAstrSwitches[Local_u8Iterator].SW_PortID,
 9e8:	89 81       	ldd	r24, Y+1	; 0x01
 9ea:	28 2f       	mov	r18, r24
 9ec:	30 e0       	ldi	r19, 0x00	; 0
 9ee:	c9 01       	movw	r24, r18
 9f0:	88 0f       	add	r24, r24
 9f2:	99 1f       	adc	r25, r25
 9f4:	28 0f       	add	r18, r24
 9f6:	39 1f       	adc	r19, r25
 9f8:	8b 81       	ldd	r24, Y+3	; 0x03
 9fa:	9c 81       	ldd	r25, Y+4	; 0x04
 9fc:	fc 01       	movw	r30, r24
 9fe:	e2 0f       	add	r30, r18
 a00:	f3 1f       	adc	r31, r19
 a02:	50 81       	ld	r21, Z
 a04:	89 81       	ldd	r24, Y+1	; 0x01
 a06:	28 2f       	mov	r18, r24
 a08:	30 e0       	ldi	r19, 0x00	; 0
 a0a:	c9 01       	movw	r24, r18
 a0c:	88 0f       	add	r24, r24
 a0e:	99 1f       	adc	r25, r25
 a10:	28 0f       	add	r18, r24
 a12:	39 1f       	adc	r19, r25
 a14:	8b 81       	ldd	r24, Y+3	; 0x03
 a16:	9c 81       	ldd	r25, Y+4	; 0x04
 a18:	fc 01       	movw	r30, r24
 a1a:	e2 0f       	add	r30, r18
 a1c:	f3 1f       	adc	r31, r19
 a1e:	41 81       	ldd	r20, Z+1	; 0x01
 a20:	89 81       	ldd	r24, Y+1	; 0x01
 a22:	28 2f       	mov	r18, r24
 a24:	30 e0       	ldi	r19, 0x00	; 0
 a26:	c9 01       	movw	r24, r18
 a28:	88 0f       	add	r24, r24
 a2a:	99 1f       	adc	r25, r25
 a2c:	28 0f       	add	r18, r24
 a2e:	39 1f       	adc	r19, r25
 a30:	8b 81       	ldd	r24, Y+3	; 0x03
 a32:	9c 81       	ldd	r25, Y+4	; 0x04
 a34:	fc 01       	movw	r30, r24
 a36:	e2 0f       	add	r30, r18
 a38:	f3 1f       	adc	r31, r19
 a3a:	92 81       	ldd	r25, Z+2	; 0x02
 a3c:	85 2f       	mov	r24, r21
 a3e:	64 2f       	mov	r22, r20
 a40:	49 2f       	mov	r20, r25
 a42:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_enuSetPinValue>
 a46:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_pAstrSwitches != NULL)
	{
		u8 Local_u8Iterator = 0;

		for(Local_u8Iterator = 0; Local_u8Iterator < SW_NUM; Local_u8Iterator++)
 a48:	89 81       	ldd	r24, Y+1	; 0x01
 a4a:	8f 5f       	subi	r24, 0xFF	; 255
 a4c:	89 83       	std	Y+1, r24	; 0x01
 a4e:	89 81       	ldd	r24, Y+1	; 0x01
 a50:	83 30       	cpi	r24, 0x03	; 3
 a52:	08 f4       	brcc	.+2      	; 0xa56 <Switch_enuInit+0xd6>
 a54:	a7 cf       	rjmp	.-178    	; 0x9a4 <Switch_enuInit+0x24>
 a56:	02 c0       	rjmp	.+4      	; 0xa5c <Switch_enuInit+0xdc>
		}

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
 a58:	82 e0       	ldi	r24, 0x02	; 2
 a5a:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
 a5c:	8a 81       	ldd	r24, Y+2	; 0x02
}
 a5e:	0f 90       	pop	r0
 a60:	0f 90       	pop	r0
 a62:	0f 90       	pop	r0
 a64:	0f 90       	pop	r0
 a66:	cf 91       	pop	r28
 a68:	df 91       	pop	r29
 a6a:	08 95       	ret

00000a6c <Switch_enuGetState>:

ES_t Switch_enuGetState(SW_t * Copy_pstrSwitches, u8 * Copy_pu8SwState)
{
 a6c:	df 93       	push	r29
 a6e:	cf 93       	push	r28
 a70:	00 d0       	rcall	.+0      	; 0xa72 <Switch_enuGetState+0x6>
 a72:	00 d0       	rcall	.+0      	; 0xa74 <Switch_enuGetState+0x8>
 a74:	0f 92       	push	r0
 a76:	cd b7       	in	r28, 0x3d	; 61
 a78:	de b7       	in	r29, 0x3e	; 62
 a7a:	9b 83       	std	Y+3, r25	; 0x03
 a7c:	8a 83       	std	Y+2, r24	; 0x02
 a7e:	7d 83       	std	Y+5, r23	; 0x05
 a80:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
 a82:	81 e0       	ldi	r24, 0x01	; 1
 a84:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pstrSwitches != NULL && Copy_pu8SwState != NULL)
 a86:	8a 81       	ldd	r24, Y+2	; 0x02
 a88:	9b 81       	ldd	r25, Y+3	; 0x03
 a8a:	00 97       	sbiw	r24, 0x00	; 0
 a8c:	91 f0       	breq	.+36     	; 0xab2 <Switch_enuGetState+0x46>
 a8e:	8c 81       	ldd	r24, Y+4	; 0x04
 a90:	9d 81       	ldd	r25, Y+5	; 0x05
 a92:	00 97       	sbiw	r24, 0x00	; 0
 a94:	71 f0       	breq	.+28     	; 0xab2 <Switch_enuGetState+0x46>
	{
		Local_enuErrorState = DIO_enuGetPinValue(Copy_pstrSwitches->SW_PortID,
 a96:	ea 81       	ldd	r30, Y+2	; 0x02
 a98:	fb 81       	ldd	r31, Y+3	; 0x03
 a9a:	80 81       	ld	r24, Z
 a9c:	ea 81       	ldd	r30, Y+2	; 0x02
 a9e:	fb 81       	ldd	r31, Y+3	; 0x03
 aa0:	91 81       	ldd	r25, Z+1	; 0x01
 aa2:	2c 81       	ldd	r18, Y+4	; 0x04
 aa4:	3d 81       	ldd	r19, Y+5	; 0x05
 aa6:	69 2f       	mov	r22, r25
 aa8:	a9 01       	movw	r20, r18
 aaa:	0e 94 22 04 	call	0x844	; 0x844 <DIO_enuGetPinValue>
 aae:	89 83       	std	Y+1, r24	; 0x01
 ab0:	02 c0       	rjmp	.+4      	; 0xab6 <Switch_enuGetState+0x4a>
												 Copy_pstrSwitches->SW_PinID,
												 Copy_pu8SwState);
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
 ab2:	82 e0       	ldi	r24, 0x02	; 2
 ab4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
 ab6:	89 81       	ldd	r24, Y+1	; 0x01
}
 ab8:	0f 90       	pop	r0
 aba:	0f 90       	pop	r0
 abc:	0f 90       	pop	r0
 abe:	0f 90       	pop	r0
 ac0:	0f 90       	pop	r0
 ac2:	cf 91       	pop	r28
 ac4:	df 91       	pop	r29
 ac6:	08 95       	ret

00000ac8 <main>:


extern SW_t Switch_AstrSwitchState[SW_NUM];

int main(void)
{
 ac8:	df 93       	push	r29
 aca:	cf 93       	push	r28
 acc:	0f 92       	push	r0
 ace:	cd b7       	in	r28, 0x3d	; 61
 ad0:	de b7       	in	r29, 0x3e	; 62
	DIO_enuInit();
 ad2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuInit>
	Switch_enuInit(Switch_AstrSwitchState);
 ad6:	80 e6       	ldi	r24, 0x60	; 96
 ad8:	90 e0       	ldi	r25, 0x00	; 0
 ada:	0e 94 c0 04 	call	0x980	; 0x980 <Switch_enuInit>
	u8 Local_u8pinState = 0;
 ade:	19 82       	std	Y+1, r1	; 0x01

	while(1)
	{
		Switch_enuGetState(&Switch_AstrSwitchState[1], &Local_u8pinState);
 ae0:	83 e6       	ldi	r24, 0x63	; 99
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	9e 01       	movw	r18, r28
 ae6:	2f 5f       	subi	r18, 0xFF	; 255
 ae8:	3f 4f       	sbci	r19, 0xFF	; 255
 aea:	b9 01       	movw	r22, r18
 aec:	0e 94 36 05 	call	0xa6c	; 0xa6c <Switch_enuGetState>

		if(Local_u8pinState == 0)
 af0:	89 81       	ldd	r24, Y+1	; 0x01
 af2:	88 23       	and	r24, r24
 af4:	31 f4       	brne	.+12     	; 0xb02 <main+0x3a>
		{
			DIO_enuSetPinValue(DIO_u8PORTA, DIO_u8PIN0, DIO_u8HIGH);
 af6:	80 e0       	ldi	r24, 0x00	; 0
 af8:	60 e0       	ldi	r22, 0x00	; 0
 afa:	41 e0       	ldi	r20, 0x01	; 1
 afc:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_enuSetPinValue>
 b00:	ef cf       	rjmp	.-34     	; 0xae0 <main+0x18>
		}
		else
		{
			DIO_enuSetPinValue(DIO_u8PORTA, DIO_u8PIN0, DIO_u8LOW);
 b02:	80 e0       	ldi	r24, 0x00	; 0
 b04:	60 e0       	ldi	r22, 0x00	; 0
 b06:	40 e0       	ldi	r20, 0x00	; 0
 b08:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_enuSetPinValue>
 b0c:	e9 cf       	rjmp	.-46     	; 0xae0 <main+0x18>

00000b0e <_exit>:
 b0e:	f8 94       	cli

00000b10 <__stop_program>:
 b10:	ff cf       	rjmp	.-2      	; 0xb10 <__stop_program>
