
DIO_nti.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006c36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000018e  00800060  00006c36  00006cca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  008001ee  008001ee  00006e58  2**0
                  ALLOC
  3 .stab         00005c28  00000000  00000000  00006e58  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000223c  00000000  00000000  0000ca80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000ecbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000ee7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000f090  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  000116a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00012b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00013e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0001405c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00014363  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014d7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__vector_1>
       8:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__vector_2>
       c:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 a7 12 	jmp	0x254e	; 0x254e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	fc e6       	ldi	r31, 0x6C	; 108
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3e       	cpi	r26, 0xEE	; 238
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ee       	ldi	r26, 0xEE	; 238
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3f       	cpi	r26, 0xFE	; 254
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9c 35 	call	0x6b38	; 0x6b38 <main>
      8a:	0c 94 19 36 	jmp	0x6c32	; 0x6c32 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e2 35 	jmp	0x6bc4	; 0x6bc4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fe 35 	jmp	0x6bfc	; 0x6bfc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ee 35 	jmp	0x6bdc	; 0x6bdc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0a 36 	jmp	0x6c14	; 0x6c14 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ee 35 	jmp	0x6bdc	; 0x6bdc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0a 36 	jmp	0x6c14	; 0x6c14 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e2 35 	jmp	0x6bc4	; 0x6bc4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fe 35 	jmp	0x6bfc	; 0x6bfc <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ea 35 	jmp	0x6bd4	; 0x6bd4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 06 36 	jmp	0x6c0c	; 0x6c0c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ee 35 	jmp	0x6bdc	; 0x6bdc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 0a 36 	jmp	0x6c14	; 0x6c14 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ee 35 	jmp	0x6bdc	; 0x6bdc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 0a 36 	jmp	0x6c14	; 0x6c14 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ee 35 	jmp	0x6bdc	; 0x6bdc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 0a 36 	jmp	0x6c14	; 0x6c14 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 eb 35 	jmp	0x6bd6	; 0x6bd6 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 07 36 	jmp	0x6c0e	; 0x6c0e <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 f2 35 	jmp	0x6be4	; 0x6be4 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 0e 36 	jmp	0x6c1c	; 0x6c1c <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 ea 35 	jmp	0x6bd4	; 0x6bd4 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 06 36 	jmp	0x6c0c	; 0x6c0c <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <GIE_enuEnable>:
#include "../../LIB/STD_TYPES.h"
#include "../../LIB/ERROR_STATE.h"
#include "GIE_private.h"

ES_t GIE_enuEnable(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	0f 92       	push	r0
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     ef4:	19 82       	std	Y+1, r1	; 0x01

	SREG |= (1<<7);
     ef6:	af e5       	ldi	r26, 0x5F	; 95
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	ef e5       	ldi	r30, 0x5F	; 95
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	80 68       	ori	r24, 0x80	; 128
     f02:	8c 93       	st	X, r24

	Local_enuErrorState = ES_OK;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
     f08:	89 81       	ldd	r24, Y+1	; 0x01
}
     f0a:	0f 90       	pop	r0
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <GIE_enuDisable>:

ES_t GIE_enuDisable(void)
{
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	0f 92       	push	r0
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     f1c:	19 82       	std	Y+1, r1	; 0x01

	SREG &= ~(1<<7);
     f1e:	af e5       	ldi	r26, 0x5F	; 95
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	ef e5       	ldi	r30, 0x5F	; 95
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	8f 77       	andi	r24, 0x7F	; 127
     f2a:	8c 93       	st	X, r24

	Local_enuErrorState = ES_OK;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
     f30:	89 81       	ldd	r24, Y+1	; 0x01

}
     f32:	0f 90       	pop	r0
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	08 95       	ret

00000f3a <EXTI_enuInit>:

static volatile void (*EXTI_ApfunINTFun[3])(void *) = {NULL, NULL, NULL}; //Volatile because it is call from ISR
static volatile void * EXTI_ApvoidGenericparameter[3] = {NULL, NULL, NULL};

ES_t EXTI_enuInit(EXTI_t * Copy_pstrEXTIConfig)
{
     f3a:	df 93       	push	r29
     f3c:	cf 93       	push	r28
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	2d 97       	sbiw	r28, 0x0d	; 13
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	f8 94       	cli
     f48:	de bf       	out	0x3e, r29	; 62
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	cd bf       	out	0x3d, r28	; 61
     f4e:	9c 83       	std	Y+4, r25	; 0x04
     f50:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     f52:	1a 82       	std	Y+2, r1	; 0x02


	if(NULL != Copy_pstrEXTIConfig)
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	9c 81       	ldd	r25, Y+4	; 0x04
     f58:	00 97       	sbiw	r24, 0x00	; 0
     f5a:	09 f4       	brne	.+2      	; 0xf5e <EXTI_enuInit+0x24>
     f5c:	24 c1       	rjmp	.+584    	; 0x11a6 <EXTI_enuInit+0x26c>
	{
		u8 Local_u8Iter = 0;
     f5e:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8Iter = 0; Local_u8Iter < 3; Local_u8Iter++)
     f60:	19 82       	std	Y+1, r1	; 0x01
     f62:	1a c1       	rjmp	.+564    	; 0x1198 <EXTI_enuInit+0x25e>
		{
			if(Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8State == ACTIVE)
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	88 2f       	mov	r24, r24
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	9c 01       	movw	r18, r24
     f6c:	22 0f       	add	r18, r18
     f6e:	33 1f       	adc	r19, r19
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	9c 81       	ldd	r25, Y+4	; 0x04
     f74:	fc 01       	movw	r30, r24
     f76:	e2 0f       	add	r30, r18
     f78:	f3 1f       	adc	r31, r19
     f7a:	80 81       	ld	r24, Z
     f7c:	85 30       	cpi	r24, 0x05	; 5
     f7e:	09 f0       	breq	.+2      	; 0xf82 <EXTI_enuInit+0x48>
     f80:	08 c1       	rjmp	.+528    	; 0x1192 <EXTI_enuInit+0x258>
			{
				switch(Local_u8Iter)
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	3d 87       	std	Y+13, r19	; 0x0d
     f8a:	2c 87       	std	Y+12, r18	; 0x0c
     f8c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f8e:	9d 85       	ldd	r25, Y+13	; 0x0d
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	91 05       	cpc	r25, r1
     f94:	09 f4       	brne	.+2      	; 0xf98 <EXTI_enuInit+0x5e>
     f96:	68 c0       	rjmp	.+208    	; 0x1068 <EXTI_enuInit+0x12e>
     f98:	2c 85       	ldd	r18, Y+12	; 0x0c
     f9a:	3d 85       	ldd	r19, Y+13	; 0x0d
     f9c:	22 30       	cpi	r18, 0x02	; 2
     f9e:	31 05       	cpc	r19, r1
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <EXTI_enuInit+0x6a>
     fa2:	bf c0       	rjmp	.+382    	; 0x1122 <EXTI_enuInit+0x1e8>
     fa4:	8c 85       	ldd	r24, Y+12	; 0x0c
     fa6:	9d 85       	ldd	r25, Y+13	; 0x0d
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	09 f0       	breq	.+2      	; 0xfae <EXTI_enuInit+0x74>
     fac:	f2 c0       	rjmp	.+484    	; 0x1192 <EXTI_enuInit+0x258>
				{
				case 0:
					GICR |= (1<<6);
     fae:	ab e5       	ldi	r26, 0x5B	; 91
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	eb e5       	ldi	r30, 0x5B	; 91
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	80 64       	ori	r24, 0x40	; 64
     fba:	8c 93       	st	X, r24
					 *            -> 0000 0011
					 *           -> 1111 1100
					 * MCUCR  &= 1111 1100
					 * */

					MCUCR &= ~(0x03 << 0);
     fbc:	a5 e5       	ldi	r26, 0x55	; 85
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e5 e5       	ldi	r30, 0x55	; 85
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	8c 7f       	andi	r24, 0xFC	; 252
     fc8:	8c 93       	st	X, r24

					//Check Sense Mode
					switch(Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenceLevel)
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	88 2f       	mov	r24, r24
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	9c 01       	movw	r18, r24
     fd2:	22 0f       	add	r18, r18
     fd4:	33 1f       	adc	r19, r19
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	9c 81       	ldd	r25, Y+4	; 0x04
     fda:	fc 01       	movw	r30, r24
     fdc:	e2 0f       	add	r30, r18
     fde:	f3 1f       	adc	r31, r19
     fe0:	81 81       	ldd	r24, Z+1	; 0x01
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	3b 87       	std	Y+11, r19	; 0x0b
     fe8:	2a 87       	std	Y+10, r18	; 0x0a
     fea:	8a 85       	ldd	r24, Y+10	; 0x0a
     fec:	9b 85       	ldd	r25, Y+11	; 0x0b
     fee:	82 30       	cpi	r24, 0x02	; 2
     ff0:	91 05       	cpc	r25, r1
     ff2:	01 f1       	breq	.+64     	; 0x1034 <EXTI_enuInit+0xfa>
     ff4:	2a 85       	ldd	r18, Y+10	; 0x0a
     ff6:	3b 85       	ldd	r19, Y+11	; 0x0b
     ff8:	23 30       	cpi	r18, 0x03	; 3
     ffa:	31 05       	cpc	r19, r1
     ffc:	34 f4       	brge	.+12     	; 0x100a <EXTI_enuInit+0xd0>
     ffe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1000:	9b 85       	ldd	r25, Y+11	; 0x0b
    1002:	81 30       	cpi	r24, 0x01	; 1
    1004:	91 05       	cpc	r25, r1
    1006:	61 f0       	breq	.+24     	; 0x1020 <EXTI_enuInit+0xe6>
    1008:	2c c0       	rjmp	.+88     	; 0x1062 <EXTI_enuInit+0x128>
    100a:	2a 85       	ldd	r18, Y+10	; 0x0a
    100c:	3b 85       	ldd	r19, Y+11	; 0x0b
    100e:	23 30       	cpi	r18, 0x03	; 3
    1010:	31 05       	cpc	r19, r1
    1012:	d1 f0       	breq	.+52     	; 0x1048 <EXTI_enuInit+0x10e>
    1014:	8a 85       	ldd	r24, Y+10	; 0x0a
    1016:	9b 85       	ldd	r25, Y+11	; 0x0b
    1018:	84 30       	cpi	r24, 0x04	; 4
    101a:	91 05       	cpc	r25, r1
    101c:	f9 f0       	breq	.+62     	; 0x105c <EXTI_enuInit+0x122>
    101e:	21 c0       	rjmp	.+66     	; 0x1062 <EXTI_enuInit+0x128>
					{
					case RISING_EDGE:
						MCUCR |= (3 << 0);
    1020:	a5 e5       	ldi	r26, 0x55	; 85
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e5 e5       	ldi	r30, 0x55	; 85
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	83 60       	ori	r24, 0x03	; 3
    102c:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	8a 83       	std	Y+2, r24	; 0x02
    1032:	af c0       	rjmp	.+350    	; 0x1192 <EXTI_enuInit+0x258>
						break;
					case FALLING_EDGE:
						MCUCR |= (1 << 1);
    1034:	a5 e5       	ldi	r26, 0x55	; 85
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e5 e5       	ldi	r30, 0x55	; 85
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	82 60       	ori	r24, 0x02	; 2
    1040:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	8a 83       	std	Y+2, r24	; 0x02
    1046:	a5 c0       	rjmp	.+330    	; 0x1192 <EXTI_enuInit+0x258>
						break;
					case ANY_LOGIC:
						MCUCR |= (1 << 0);
    1048:	a5 e5       	ldi	r26, 0x55	; 85
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e5 e5       	ldi	r30, 0x55	; 85
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	81 60       	ori	r24, 0x01	; 1
    1054:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	8a 83       	std	Y+2, r24	; 0x02
    105a:	9b c0       	rjmp	.+310    	; 0x1192 <EXTI_enuInit+0x258>
						break;
					case LOW_LEVEL:
						Local_enuErrorState = ES_OK;
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	8a 83       	std	Y+2, r24	; 0x02
    1060:	98 c0       	rjmp	.+304    	; 0x1192 <EXTI_enuInit+0x258>
						break;
					default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
    1062:	83 e0       	ldi	r24, 0x03	; 3
    1064:	8a 83       	std	Y+2, r24	; 0x02
    1066:	95 c0       	rjmp	.+298    	; 0x1192 <EXTI_enuInit+0x258>
					}
					break;

				case 1:
					GICR |= (1<<7);
    1068:	ab e5       	ldi	r26, 0x5B	; 91
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	eb e5       	ldi	r30, 0x5B	; 91
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	80 68       	ori	r24, 0x80	; 128
    1074:	8c 93       	st	X, r24
					MCUCR &= ~(3<<2); //Mask second 2 bits
    1076:	a5 e5       	ldi	r26, 0x55	; 85
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e5 e5       	ldi	r30, 0x55	; 85
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	83 7f       	andi	r24, 0xF3	; 243
    1082:	8c 93       	st	X, r24
					switch(Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenceLevel)
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	88 2f       	mov	r24, r24
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	9c 01       	movw	r18, r24
    108c:	22 0f       	add	r18, r18
    108e:	33 1f       	adc	r19, r19
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	9c 81       	ldd	r25, Y+4	; 0x04
    1094:	fc 01       	movw	r30, r24
    1096:	e2 0f       	add	r30, r18
    1098:	f3 1f       	adc	r31, r19
    109a:	81 81       	ldd	r24, Z+1	; 0x01
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	39 87       	std	Y+9, r19	; 0x09
    10a2:	28 87       	std	Y+8, r18	; 0x08
    10a4:	88 85       	ldd	r24, Y+8	; 0x08
    10a6:	99 85       	ldd	r25, Y+9	; 0x09
    10a8:	82 30       	cpi	r24, 0x02	; 2
    10aa:	91 05       	cpc	r25, r1
    10ac:	01 f1       	breq	.+64     	; 0x10ee <EXTI_enuInit+0x1b4>
    10ae:	28 85       	ldd	r18, Y+8	; 0x08
    10b0:	39 85       	ldd	r19, Y+9	; 0x09
    10b2:	23 30       	cpi	r18, 0x03	; 3
    10b4:	31 05       	cpc	r19, r1
    10b6:	34 f4       	brge	.+12     	; 0x10c4 <EXTI_enuInit+0x18a>
    10b8:	88 85       	ldd	r24, Y+8	; 0x08
    10ba:	99 85       	ldd	r25, Y+9	; 0x09
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	91 05       	cpc	r25, r1
    10c0:	61 f0       	breq	.+24     	; 0x10da <EXTI_enuInit+0x1a0>
    10c2:	2c c0       	rjmp	.+88     	; 0x111c <EXTI_enuInit+0x1e2>
    10c4:	28 85       	ldd	r18, Y+8	; 0x08
    10c6:	39 85       	ldd	r19, Y+9	; 0x09
    10c8:	23 30       	cpi	r18, 0x03	; 3
    10ca:	31 05       	cpc	r19, r1
    10cc:	d1 f0       	breq	.+52     	; 0x1102 <EXTI_enuInit+0x1c8>
    10ce:	88 85       	ldd	r24, Y+8	; 0x08
    10d0:	99 85       	ldd	r25, Y+9	; 0x09
    10d2:	84 30       	cpi	r24, 0x04	; 4
    10d4:	91 05       	cpc	r25, r1
    10d6:	f9 f0       	breq	.+62     	; 0x1116 <EXTI_enuInit+0x1dc>
    10d8:	21 c0       	rjmp	.+66     	; 0x111c <EXTI_enuInit+0x1e2>
					{
					case RISING_EDGE:
						MCUCR |= (3 << 2);
    10da:	a5 e5       	ldi	r26, 0x55	; 85
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e5 e5       	ldi	r30, 0x55	; 85
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	8c 60       	ori	r24, 0x0C	; 12
    10e6:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	8a 83       	std	Y+2, r24	; 0x02
    10ec:	52 c0       	rjmp	.+164    	; 0x1192 <EXTI_enuInit+0x258>
						break;
					case FALLING_EDGE:
						MCUCR |= (1 << 3);
    10ee:	a5 e5       	ldi	r26, 0x55	; 85
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e5 e5       	ldi	r30, 0x55	; 85
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	88 60       	ori	r24, 0x08	; 8
    10fa:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	8a 83       	std	Y+2, r24	; 0x02
    1100:	48 c0       	rjmp	.+144    	; 0x1192 <EXTI_enuInit+0x258>
						break;
					case ANY_LOGIC:
						MCUCR |= (1 << 2);
    1102:	a5 e5       	ldi	r26, 0x55	; 85
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e5 e5       	ldi	r30, 0x55	; 85
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	84 60       	ori	r24, 0x04	; 4
    110e:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	8a 83       	std	Y+2, r24	; 0x02
    1114:	3e c0       	rjmp	.+124    	; 0x1192 <EXTI_enuInit+0x258>
						break;
					case LOW_LEVEL:
						Local_enuErrorState = ES_OK;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	8a 83       	std	Y+2, r24	; 0x02
    111a:	3b c0       	rjmp	.+118    	; 0x1192 <EXTI_enuInit+0x258>
						break;
					default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
    111c:	83 e0       	ldi	r24, 0x03	; 3
    111e:	8a 83       	std	Y+2, r24	; 0x02
    1120:	38 c0       	rjmp	.+112    	; 0x1192 <EXTI_enuInit+0x258>
					}
					break;

				case 2:
					GICR |= (1<<5);
    1122:	ab e5       	ldi	r26, 0x5B	; 91
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	eb e5       	ldi	r30, 0x5B	; 91
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	80 62       	ori	r24, 0x20	; 32
    112e:	8c 93       	st	X, r24
					MCUCSR &= ~(1<<6); //Mask its control sense bit
    1130:	a4 e5       	ldi	r26, 0x54	; 84
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e4 e5       	ldi	r30, 0x54	; 84
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	8f 7b       	andi	r24, 0xBF	; 191
    113c:	8c 93       	st	X, r24

					switch(Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenceLevel)
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	88 2f       	mov	r24, r24
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	9c 01       	movw	r18, r24
    1146:	22 0f       	add	r18, r18
    1148:	33 1f       	adc	r19, r19
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	fc 01       	movw	r30, r24
    1150:	e2 0f       	add	r30, r18
    1152:	f3 1f       	adc	r31, r19
    1154:	81 81       	ldd	r24, Z+1	; 0x01
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	3f 83       	std	Y+7, r19	; 0x07
    115c:	2e 83       	std	Y+6, r18	; 0x06
    115e:	8e 81       	ldd	r24, Y+6	; 0x06
    1160:	9f 81       	ldd	r25, Y+7	; 0x07
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	91 05       	cpc	r25, r1
    1166:	31 f0       	breq	.+12     	; 0x1174 <EXTI_enuInit+0x23a>
    1168:	2e 81       	ldd	r18, Y+6	; 0x06
    116a:	3f 81       	ldd	r19, Y+7	; 0x07
    116c:	22 30       	cpi	r18, 0x02	; 2
    116e:	31 05       	cpc	r19, r1
    1170:	59 f0       	breq	.+22     	; 0x1188 <EXTI_enuInit+0x24e>
    1172:	0d c0       	rjmp	.+26     	; 0x118e <EXTI_enuInit+0x254>
					{
					case RISING_EDGE:
						MCUCSR |= (1 << 6);
    1174:	a4 e5       	ldi	r26, 0x54	; 84
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e4 e5       	ldi	r30, 0x54	; 84
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	80 64       	ori	r24, 0x40	; 64
    1180:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	8a 83       	std	Y+2, r24	; 0x02
    1186:	05 c0       	rjmp	.+10     	; 0x1192 <EXTI_enuInit+0x258>
						break;
					case FALLING_EDGE:
						Local_enuErrorState = ES_OK;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	8a 83       	std	Y+2, r24	; 0x02
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <EXTI_enuInit+0x258>
						break;
					default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
    118e:	83 e0       	ldi	r24, 0x03	; 3
    1190:	8a 83       	std	Y+2, r24	; 0x02


	if(NULL != Copy_pstrEXTIConfig)
	{
		u8 Local_u8Iter = 0;
		for(Local_u8Iter = 0; Local_u8Iter < 3; Local_u8Iter++)
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	8f 5f       	subi	r24, 0xFF	; 255
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	83 30       	cpi	r24, 0x03	; 3
    119c:	08 f4       	brcc	.+2      	; 0x11a0 <EXTI_enuInit+0x266>
    119e:	e2 ce       	rjmp	.-572    	; 0xf64 <EXTI_enuInit+0x2a>
	{
		return ES_NULL_POINTER;
	}


	return Local_enuErrorState;
    11a0:	3a 81       	ldd	r19, Y+2	; 0x02
    11a2:	3d 83       	std	Y+5, r19	; 0x05
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <EXTI_enuInit+0x270>
			}
		}
	}
	else
	{
		return ES_NULL_POINTER;
    11a6:	82 e0       	ldi	r24, 0x02	; 2
    11a8:	8d 83       	std	Y+5, r24	; 0x05
    11aa:	8d 81       	ldd	r24, Y+5	; 0x05
	}


	return Local_enuErrorState;
}
    11ac:	2d 96       	adiw	r28, 0x0d	; 13
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	cd bf       	out	0x3d, r28	; 61
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <EXTI_enuSetSenceMode>:

ES_t EXTI_enuSetSenceMode(u8 Copy_u8EXTI_ID, u8 Copy_u8SenceLevel)
{
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	2c 97       	sbiw	r28, 0x0c	; 12
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
    11cc:	de bf       	out	0x3e, r29	; 62
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	cd bf       	out	0x3d, r28	; 61
    11d2:	8a 83       	std	Y+2, r24	; 0x02
    11d4:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    11d6:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8EXTI_ID < 3)
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	83 30       	cpi	r24, 0x03	; 3
    11dc:	08 f0       	brcs	.+2      	; 0x11e0 <EXTI_enuSetSenceMode+0x22>
    11de:	d5 c0       	rjmp	.+426    	; 0x138a <EXTI_enuSetSenceMode+0x1cc>
	{
		switch(Copy_u8EXTI_ID)
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	3c 87       	std	Y+12, r19	; 0x0c
    11e8:	2b 87       	std	Y+11, r18	; 0x0b
    11ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    11ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    11ee:	81 30       	cpi	r24, 0x01	; 1
    11f0:	91 05       	cpc	r25, r1
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <EXTI_enuSetSenceMode+0x38>
    11f4:	56 c0       	rjmp	.+172    	; 0x12a2 <EXTI_enuSetSenceMode+0xe4>
    11f6:	2b 85       	ldd	r18, Y+11	; 0x0b
    11f8:	3c 85       	ldd	r19, Y+12	; 0x0c
    11fa:	22 30       	cpi	r18, 0x02	; 2
    11fc:	31 05       	cpc	r19, r1
    11fe:	09 f4       	brne	.+2      	; 0x1202 <EXTI_enuSetSenceMode+0x44>
    1200:	9b c0       	rjmp	.+310    	; 0x1338 <EXTI_enuSetSenceMode+0x17a>
    1202:	8b 85       	ldd	r24, Y+11	; 0x0b
    1204:	9c 85       	ldd	r25, Y+12	; 0x0c
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	09 f0       	breq	.+2      	; 0x120c <EXTI_enuSetSenceMode+0x4e>
    120a:	bc c0       	rjmp	.+376    	; 0x1384 <EXTI_enuSetSenceMode+0x1c6>
		{
		case 0:
			MCUCR &= ~(0x03 << 0);
    120c:	a5 e5       	ldi	r26, 0x55	; 85
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e5 e5       	ldi	r30, 0x55	; 85
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	8c 7f       	andi	r24, 0xFC	; 252
    1218:	8c 93       	st	X, r24
			//Check Sense Mode
			switch(Copy_u8SenceLevel)
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	3a 87       	std	Y+10, r19	; 0x0a
    1222:	29 87       	std	Y+9, r18	; 0x09
    1224:	89 85       	ldd	r24, Y+9	; 0x09
    1226:	9a 85       	ldd	r25, Y+10	; 0x0a
    1228:	82 30       	cpi	r24, 0x02	; 2
    122a:	91 05       	cpc	r25, r1
    122c:	01 f1       	breq	.+64     	; 0x126e <EXTI_enuSetSenceMode+0xb0>
    122e:	29 85       	ldd	r18, Y+9	; 0x09
    1230:	3a 85       	ldd	r19, Y+10	; 0x0a
    1232:	23 30       	cpi	r18, 0x03	; 3
    1234:	31 05       	cpc	r19, r1
    1236:	34 f4       	brge	.+12     	; 0x1244 <EXTI_enuSetSenceMode+0x86>
    1238:	89 85       	ldd	r24, Y+9	; 0x09
    123a:	9a 85       	ldd	r25, Y+10	; 0x0a
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	91 05       	cpc	r25, r1
    1240:	61 f0       	breq	.+24     	; 0x125a <EXTI_enuSetSenceMode+0x9c>
    1242:	2c c0       	rjmp	.+88     	; 0x129c <EXTI_enuSetSenceMode+0xde>
    1244:	29 85       	ldd	r18, Y+9	; 0x09
    1246:	3a 85       	ldd	r19, Y+10	; 0x0a
    1248:	23 30       	cpi	r18, 0x03	; 3
    124a:	31 05       	cpc	r19, r1
    124c:	d1 f0       	breq	.+52     	; 0x1282 <EXTI_enuSetSenceMode+0xc4>
    124e:	89 85       	ldd	r24, Y+9	; 0x09
    1250:	9a 85       	ldd	r25, Y+10	; 0x0a
    1252:	84 30       	cpi	r24, 0x04	; 4
    1254:	91 05       	cpc	r25, r1
    1256:	f9 f0       	breq	.+62     	; 0x1296 <EXTI_enuSetSenceMode+0xd8>
    1258:	21 c0       	rjmp	.+66     	; 0x129c <EXTI_enuSetSenceMode+0xde>
			{
			case RISING_EDGE:
				MCUCR |= (3 << 0);
    125a:	a5 e5       	ldi	r26, 0x55	; 85
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e5 e5       	ldi	r30, 0x55	; 85
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	83 60       	ori	r24, 0x03	; 3
    1266:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	89 83       	std	Y+1, r24	; 0x01
    126c:	8b c0       	rjmp	.+278    	; 0x1384 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case FALLING_EDGE:
				MCUCR |= (1 << 1);
    126e:	a5 e5       	ldi	r26, 0x55	; 85
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e5 e5       	ldi	r30, 0x55	; 85
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	82 60       	ori	r24, 0x02	; 2
    127a:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	81 c0       	rjmp	.+258    	; 0x1384 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case ANY_LOGIC:
				MCUCR |= (1 << 0);
    1282:	a5 e5       	ldi	r26, 0x55	; 85
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e5 e5       	ldi	r30, 0x55	; 85
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	81 60       	ori	r24, 0x01	; 1
    128e:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	77 c0       	rjmp	.+238    	; 0x1384 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case LOW_LEVEL:
				Local_enuErrorState = ES_OK;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	74 c0       	rjmp	.+232    	; 0x1384 <EXTI_enuSetSenceMode+0x1c6>
				break;
			default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    129c:	83 e0       	ldi	r24, 0x03	; 3
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	71 c0       	rjmp	.+226    	; 0x1384 <EXTI_enuSetSenceMode+0x1c6>
			}
			break;

		case 1:
			MCUCR &= ~(3<<2); //Mask second 2 bits
    12a2:	a5 e5       	ldi	r26, 0x55	; 85
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e5 e5       	ldi	r30, 0x55	; 85
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	83 7f       	andi	r24, 0xF3	; 243
    12ae:	8c 93       	st	X, r24
			switch(Copy_u8SenceLevel)
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	38 87       	std	Y+8, r19	; 0x08
    12b8:	2f 83       	std	Y+7, r18	; 0x07
    12ba:	8f 81       	ldd	r24, Y+7	; 0x07
    12bc:	98 85       	ldd	r25, Y+8	; 0x08
    12be:	82 30       	cpi	r24, 0x02	; 2
    12c0:	91 05       	cpc	r25, r1
    12c2:	01 f1       	breq	.+64     	; 0x1304 <EXTI_enuSetSenceMode+0x146>
    12c4:	2f 81       	ldd	r18, Y+7	; 0x07
    12c6:	38 85       	ldd	r19, Y+8	; 0x08
    12c8:	23 30       	cpi	r18, 0x03	; 3
    12ca:	31 05       	cpc	r19, r1
    12cc:	34 f4       	brge	.+12     	; 0x12da <EXTI_enuSetSenceMode+0x11c>
    12ce:	8f 81       	ldd	r24, Y+7	; 0x07
    12d0:	98 85       	ldd	r25, Y+8	; 0x08
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	91 05       	cpc	r25, r1
    12d6:	61 f0       	breq	.+24     	; 0x12f0 <EXTI_enuSetSenceMode+0x132>
    12d8:	2c c0       	rjmp	.+88     	; 0x1332 <EXTI_enuSetSenceMode+0x174>
    12da:	2f 81       	ldd	r18, Y+7	; 0x07
    12dc:	38 85       	ldd	r19, Y+8	; 0x08
    12de:	23 30       	cpi	r18, 0x03	; 3
    12e0:	31 05       	cpc	r19, r1
    12e2:	d1 f0       	breq	.+52     	; 0x1318 <EXTI_enuSetSenceMode+0x15a>
    12e4:	8f 81       	ldd	r24, Y+7	; 0x07
    12e6:	98 85       	ldd	r25, Y+8	; 0x08
    12e8:	84 30       	cpi	r24, 0x04	; 4
    12ea:	91 05       	cpc	r25, r1
    12ec:	f9 f0       	breq	.+62     	; 0x132c <EXTI_enuSetSenceMode+0x16e>
    12ee:	21 c0       	rjmp	.+66     	; 0x1332 <EXTI_enuSetSenceMode+0x174>
			{
			case RISING_EDGE:
				MCUCR |= (3 << 2);
    12f0:	a5 e5       	ldi	r26, 0x55	; 85
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e5 e5       	ldi	r30, 0x55	; 85
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	8c 60       	ori	r24, 0x0C	; 12
    12fc:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	89 83       	std	Y+1, r24	; 0x01
    1302:	40 c0       	rjmp	.+128    	; 0x1384 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case FALLING_EDGE:
				MCUCR |= (1 << 3);
    1304:	a5 e5       	ldi	r26, 0x55	; 85
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e5 e5       	ldi	r30, 0x55	; 85
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	88 60       	ori	r24, 0x08	; 8
    1310:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	89 83       	std	Y+1, r24	; 0x01
    1316:	36 c0       	rjmp	.+108    	; 0x1384 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case ANY_LOGIC:
				MCUCR |= (1 << 2);
    1318:	a5 e5       	ldi	r26, 0x55	; 85
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	e5 e5       	ldi	r30, 0x55	; 85
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	84 60       	ori	r24, 0x04	; 4
    1324:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	89 83       	std	Y+1, r24	; 0x01
    132a:	2c c0       	rjmp	.+88     	; 0x1384 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case LOW_LEVEL:
				Local_enuErrorState = ES_OK;
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	89 83       	std	Y+1, r24	; 0x01
    1330:	29 c0       	rjmp	.+82     	; 0x1384 <EXTI_enuSetSenceMode+0x1c6>
				break;
			default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    1332:	83 e0       	ldi	r24, 0x03	; 3
    1334:	89 83       	std	Y+1, r24	; 0x01
    1336:	26 c0       	rjmp	.+76     	; 0x1384 <EXTI_enuSetSenceMode+0x1c6>
			}
			break;

		case 2:
			MCUCSR &= ~(1<<6); //Mask its control sense bit
    1338:	a4 e5       	ldi	r26, 0x54	; 84
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e4 e5       	ldi	r30, 0x54	; 84
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	8f 7b       	andi	r24, 0xBF	; 191
    1344:	8c 93       	st	X, r24

			switch(Copy_u8SenceLevel)
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	3e 83       	std	Y+6, r19	; 0x06
    134e:	2d 83       	std	Y+5, r18	; 0x05
    1350:	8d 81       	ldd	r24, Y+5	; 0x05
    1352:	9e 81       	ldd	r25, Y+6	; 0x06
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	91 05       	cpc	r25, r1
    1358:	31 f0       	breq	.+12     	; 0x1366 <EXTI_enuSetSenceMode+0x1a8>
    135a:	2d 81       	ldd	r18, Y+5	; 0x05
    135c:	3e 81       	ldd	r19, Y+6	; 0x06
    135e:	22 30       	cpi	r18, 0x02	; 2
    1360:	31 05       	cpc	r19, r1
    1362:	59 f0       	breq	.+22     	; 0x137a <EXTI_enuSetSenceMode+0x1bc>
    1364:	0d c0       	rjmp	.+26     	; 0x1380 <EXTI_enuSetSenceMode+0x1c2>
			{
			case RISING_EDGE:
				MCUCSR |= (1 << 6);
    1366:	a4 e5       	ldi	r26, 0x54	; 84
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e4 e5       	ldi	r30, 0x54	; 84
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	80 64       	ori	r24, 0x40	; 64
    1372:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	89 83       	std	Y+1, r24	; 0x01
    1378:	05 c0       	rjmp	.+10     	; 0x1384 <EXTI_enuSetSenceMode+0x1c6>
				break;
			case FALLING_EDGE:
				Local_enuErrorState = ES_OK;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	89 83       	std	Y+1, r24	; 0x01
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <EXTI_enuSetSenceMode+0x1c6>
				break;
			default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    1380:	83 e0       	ldi	r24, 0x03	; 3
    1382:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		return ES_OUT_OF_RANGE;
	}

	return Local_enuErrorState;
    1384:	39 81       	ldd	r19, Y+1	; 0x01
    1386:	3c 83       	std	Y+4, r19	; 0x04
    1388:	02 c0       	rjmp	.+4      	; 0x138e <EXTI_enuSetSenceMode+0x1d0>

		}
	}
	else
	{
		return ES_OUT_OF_RANGE;
    138a:	83 e0       	ldi	r24, 0x03	; 3
    138c:	8c 83       	std	Y+4, r24	; 0x04
    138e:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return Local_enuErrorState;
}
    1390:	2c 96       	adiw	r28, 0x0c	; 12
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	f8 94       	cli
    1396:	de bf       	out	0x3e, r29	; 62
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	cd bf       	out	0x3d, r28	; 61
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <EXTI_enuEnableINT>:

ES_t EXTI_enuEnableINT(u8 Copy_u8EXTI_ID)
{
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <EXTI_enuEnableINT+0x6>
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <EXTI_enuEnableINT+0x8>
    13aa:	0f 92       	push	r0
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    13b2:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8EXTI_ID < 3)
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	83 30       	cpi	r24, 0x03	; 3
    13b8:	98 f5       	brcc	.+102    	; 0x1420 <EXTI_enuEnableINT+0x7e>
	{
		switch(Copy_u8EXTI_ID)
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	3d 83       	std	Y+5, r19	; 0x05
    13c2:	2c 83       	std	Y+4, r18	; 0x04
    13c4:	8c 81       	ldd	r24, Y+4	; 0x04
    13c6:	9d 81       	ldd	r25, Y+5	; 0x05
    13c8:	81 30       	cpi	r24, 0x01	; 1
    13ca:	91 05       	cpc	r25, r1
    13cc:	99 f0       	breq	.+38     	; 0x13f4 <EXTI_enuEnableINT+0x52>
    13ce:	2c 81       	ldd	r18, Y+4	; 0x04
    13d0:	3d 81       	ldd	r19, Y+5	; 0x05
    13d2:	22 30       	cpi	r18, 0x02	; 2
    13d4:	31 05       	cpc	r19, r1
    13d6:	c1 f0       	breq	.+48     	; 0x1408 <EXTI_enuEnableINT+0x66>
    13d8:	8c 81       	ldd	r24, Y+4	; 0x04
    13da:	9d 81       	ldd	r25, Y+5	; 0x05
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	e9 f4       	brne	.+58     	; 0x141a <EXTI_enuEnableINT+0x78>
		{
		case 0:
			GICR |= (1<<6);
    13e0:	ab e5       	ldi	r26, 0x5B	; 91
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	eb e5       	ldi	r30, 0x5B	; 91
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	80 64       	ori	r24, 0x40	; 64
    13ec:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	13 c0       	rjmp	.+38     	; 0x141a <EXTI_enuEnableINT+0x78>
			break;

		case 1:
			GICR |= (1<<7);
    13f4:	ab e5       	ldi	r26, 0x5B	; 91
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	eb e5       	ldi	r30, 0x5B	; 91
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	80 68       	ori	r24, 0x80	; 128
    1400:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	89 83       	std	Y+1, r24	; 0x01
    1406:	09 c0       	rjmp	.+18     	; 0x141a <EXTI_enuEnableINT+0x78>
			break;

		case 2:
			GICR |= (1<<5);
    1408:	ab e5       	ldi	r26, 0x5B	; 91
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	eb e5       	ldi	r30, 0x5B	; 91
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	80 62       	ori	r24, 0x20	; 32
    1414:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		return ES_OUT_OF_RANGE;
	}

	return Local_enuErrorState;
    141a:	99 81       	ldd	r25, Y+1	; 0x01
    141c:	9b 83       	std	Y+3, r25	; 0x03
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <EXTI_enuEnableINT+0x82>
			break;
		}
	}
	else
	{
		return ES_OUT_OF_RANGE;
    1420:	23 e0       	ldi	r18, 0x03	; 3
    1422:	2b 83       	std	Y+3, r18	; 0x03
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
	}

	return Local_enuErrorState;
}
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <EXTI_enuDisableINT>:

ES_t EXTI_enuDisableINT(u8 Copy_u8EXTI_ID)
{
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	00 d0       	rcall	.+0      	; 0x143c <EXTI_enuDisableINT+0x6>
    143c:	00 d0       	rcall	.+0      	; 0x143e <EXTI_enuDisableINT+0x8>
    143e:	0f 92       	push	r0
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1446:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8EXTI_ID < 3)
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	83 30       	cpi	r24, 0x03	; 3
    144c:	98 f5       	brcc	.+102    	; 0x14b4 <EXTI_enuDisableINT+0x7e>
	{
		switch(Copy_u8EXTI_ID)
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	3d 83       	std	Y+5, r19	; 0x05
    1456:	2c 83       	std	Y+4, r18	; 0x04
    1458:	8c 81       	ldd	r24, Y+4	; 0x04
    145a:	9d 81       	ldd	r25, Y+5	; 0x05
    145c:	81 30       	cpi	r24, 0x01	; 1
    145e:	91 05       	cpc	r25, r1
    1460:	99 f0       	breq	.+38     	; 0x1488 <EXTI_enuDisableINT+0x52>
    1462:	2c 81       	ldd	r18, Y+4	; 0x04
    1464:	3d 81       	ldd	r19, Y+5	; 0x05
    1466:	22 30       	cpi	r18, 0x02	; 2
    1468:	31 05       	cpc	r19, r1
    146a:	c1 f0       	breq	.+48     	; 0x149c <EXTI_enuDisableINT+0x66>
    146c:	8c 81       	ldd	r24, Y+4	; 0x04
    146e:	9d 81       	ldd	r25, Y+5	; 0x05
    1470:	00 97       	sbiw	r24, 0x00	; 0
    1472:	e9 f4       	brne	.+58     	; 0x14ae <EXTI_enuDisableINT+0x78>
		{
		case 0:
			GICR &= ~(1<<6);
    1474:	ab e5       	ldi	r26, 0x5B	; 91
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	eb e5       	ldi	r30, 0x5B	; 91
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	8f 7b       	andi	r24, 0xBF	; 191
    1480:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	89 83       	std	Y+1, r24	; 0x01
    1486:	13 c0       	rjmp	.+38     	; 0x14ae <EXTI_enuDisableINT+0x78>
			break;

		case 1:
			GICR &= ~(1<<7);
    1488:	ab e5       	ldi	r26, 0x5B	; 91
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	eb e5       	ldi	r30, 0x5B	; 91
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	8f 77       	andi	r24, 0x7F	; 127
    1494:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	09 c0       	rjmp	.+18     	; 0x14ae <EXTI_enuDisableINT+0x78>
			break;

		case 2:
			GICR &= ~(1<<5);
    149c:	ab e5       	ldi	r26, 0x5B	; 91
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	eb e5       	ldi	r30, 0x5B	; 91
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	8f 7d       	andi	r24, 0xDF	; 223
    14a8:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		return ES_OUT_OF_RANGE;
	}

	return Local_enuErrorState;
    14ae:	99 81       	ldd	r25, Y+1	; 0x01
    14b0:	9b 83       	std	Y+3, r25	; 0x03
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <EXTI_enuDisableINT+0x82>
			break;
		}
	}
	else
	{
		return ES_OUT_OF_RANGE;
    14b4:	23 e0       	ldi	r18, 0x03	; 3
    14b6:	2b 83       	std	Y+3, r18	; 0x03
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
	}

	return Local_enuErrorState;
}
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	cf 91       	pop	r28
    14c6:	df 91       	pop	r29
    14c8:	08 95       	ret

000014ca <EXTI_enuCallBack>:

ES_t EXTI_enuCallBack(volatile void (*Copy_pfunAppFun)(void *), volatile void * Copy_pvoidParameter, u8 Copy_u8EXTI_ID)
{
    14ca:	df 93       	push	r29
    14cc:	cf 93       	push	r28
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	27 97       	sbiw	r28, 0x07	; 7
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	cd bf       	out	0x3d, r28	; 61
    14de:	9b 83       	std	Y+3, r25	; 0x03
    14e0:	8a 83       	std	Y+2, r24	; 0x02
    14e2:	7d 83       	std	Y+5, r23	; 0x05
    14e4:	6c 83       	std	Y+4, r22	; 0x04
    14e6:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
    14e8:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8EXTI_ID < 3)
    14ea:	8e 81       	ldd	r24, Y+6	; 0x06
    14ec:	83 30       	cpi	r24, 0x03	; 3
    14ee:	20 f5       	brcc	.+72     	; 0x1538 <EXTI_enuCallBack+0x6e>
	{
		if(Copy_pfunAppFun != NULL)
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	9b 81       	ldd	r25, Y+3	; 0x03
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	c9 f0       	breq	.+50     	; 0x152a <EXTI_enuCallBack+0x60>
		{
			EXTI_ApfunINTFun[Copy_u8EXTI_ID] = Copy_pfunAppFun;
    14f8:	8e 81       	ldd	r24, Y+6	; 0x06
    14fa:	88 2f       	mov	r24, r24
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	fc 01       	movw	r30, r24
    1504:	e2 51       	subi	r30, 0x12	; 18
    1506:	fe 4f       	sbci	r31, 0xFE	; 254
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	9b 81       	ldd	r25, Y+3	; 0x03
    150c:	91 83       	std	Z+1, r25	; 0x01
    150e:	80 83       	st	Z, r24
			EXTI_ApvoidGenericparameter[Copy_u8EXTI_ID] = Copy_pvoidParameter;
    1510:	8e 81       	ldd	r24, Y+6	; 0x06
    1512:	88 2f       	mov	r24, r24
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	88 0f       	add	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	fc 01       	movw	r30, r24
    151c:	ec 50       	subi	r30, 0x0C	; 12
    151e:	fe 4f       	sbci	r31, 0xFE	; 254
    1520:	8c 81       	ldd	r24, Y+4	; 0x04
    1522:	9d 81       	ldd	r25, Y+5	; 0x05
    1524:	91 83       	std	Z+1, r25	; 0x01
    1526:	80 83       	st	Z, r24
    1528:	02 c0       	rjmp	.+4      	; 0x152e <EXTI_enuCallBack+0x64>
		}
		else
		{
			Local_enuErrorState = ES_NULL_POINTER;
    152a:	82 e0       	ldi	r24, 0x02	; 2
    152c:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		return ES_OUT_OF_RANGE;
	}

	Local_enuErrorState = ES_OK;
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	8f 83       	std	Y+7, r24	; 0x07
    1536:	02 c0       	rjmp	.+4      	; 0x153c <EXTI_enuCallBack+0x72>
			Local_enuErrorState = ES_NULL_POINTER;
		}
	}
	else
	{
		return ES_OUT_OF_RANGE;
    1538:	83 e0       	ldi	r24, 0x03	; 3
    153a:	8f 83       	std	Y+7, r24	; 0x07
    153c:	8f 81       	ldd	r24, Y+7	; 0x07
	}

	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
}
    153e:	27 96       	adiw	r28, 0x07	; 7
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <__vector_1>:

ISR(VECT_INT0)
{
    1550:	1f 92       	push	r1
    1552:	0f 92       	push	r0
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	0f 92       	push	r0
    1558:	11 24       	eor	r1, r1
    155a:	2f 93       	push	r18
    155c:	3f 93       	push	r19
    155e:	4f 93       	push	r20
    1560:	5f 93       	push	r21
    1562:	6f 93       	push	r22
    1564:	7f 93       	push	r23
    1566:	8f 93       	push	r24
    1568:	9f 93       	push	r25
    156a:	af 93       	push	r26
    156c:	bf 93       	push	r27
    156e:	ef 93       	push	r30
    1570:	ff 93       	push	r31
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfunINTFun[0] != NULL)
    157a:	80 91 ee 01 	lds	r24, 0x01EE
    157e:	90 91 ef 01 	lds	r25, 0x01EF
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	49 f0       	breq	.+18     	; 0x1598 <__vector_1+0x48>
	{
		/* Two approaches working well*/
		(*EXTI_ApfunINTFun[0])(EXTI_ApvoidGenericparameter[0]);
    1586:	e0 91 ee 01 	lds	r30, 0x01EE
    158a:	f0 91 ef 01 	lds	r31, 0x01EF
    158e:	80 91 f4 01 	lds	r24, 0x01F4
    1592:	90 91 f5 01 	lds	r25, 0x01F5
    1596:	09 95       	icall
		//(*EXTI_ApfunINTFun[0])(EXTI_ApvoidGenericparameter[0]);
		// wanna test: EXTI_ApfunINTFun[0](EXTI_ApvoidGenericparameter[0]);
	}
}
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	ff 91       	pop	r31
    159e:	ef 91       	pop	r30
    15a0:	bf 91       	pop	r27
    15a2:	af 91       	pop	r26
    15a4:	9f 91       	pop	r25
    15a6:	8f 91       	pop	r24
    15a8:	7f 91       	pop	r23
    15aa:	6f 91       	pop	r22
    15ac:	5f 91       	pop	r21
    15ae:	4f 91       	pop	r20
    15b0:	3f 91       	pop	r19
    15b2:	2f 91       	pop	r18
    15b4:	0f 90       	pop	r0
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	0f 90       	pop	r0
    15ba:	1f 90       	pop	r1
    15bc:	18 95       	reti

000015be <__vector_2>:

ISR(VECT_INT1)
{
    15be:	1f 92       	push	r1
    15c0:	0f 92       	push	r0
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	0f 92       	push	r0
    15c6:	11 24       	eor	r1, r1
    15c8:	2f 93       	push	r18
    15ca:	3f 93       	push	r19
    15cc:	4f 93       	push	r20
    15ce:	5f 93       	push	r21
    15d0:	6f 93       	push	r22
    15d2:	7f 93       	push	r23
    15d4:	8f 93       	push	r24
    15d6:	9f 93       	push	r25
    15d8:	af 93       	push	r26
    15da:	bf 93       	push	r27
    15dc:	ef 93       	push	r30
    15de:	ff 93       	push	r31
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfunINTFun[1] != NULL)
    15e8:	80 91 f0 01 	lds	r24, 0x01F0
    15ec:	90 91 f1 01 	lds	r25, 0x01F1
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	49 f0       	breq	.+18     	; 0x1606 <__vector_2+0x48>
	{
		(*EXTI_ApfunINTFun[1])(EXTI_ApvoidGenericparameter[1]);
    15f4:	e0 91 f0 01 	lds	r30, 0x01F0
    15f8:	f0 91 f1 01 	lds	r31, 0x01F1
    15fc:	80 91 f6 01 	lds	r24, 0x01F6
    1600:	90 91 f7 01 	lds	r25, 0x01F7
    1604:	09 95       	icall
	}
}
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	ff 91       	pop	r31
    160c:	ef 91       	pop	r30
    160e:	bf 91       	pop	r27
    1610:	af 91       	pop	r26
    1612:	9f 91       	pop	r25
    1614:	8f 91       	pop	r24
    1616:	7f 91       	pop	r23
    1618:	6f 91       	pop	r22
    161a:	5f 91       	pop	r21
    161c:	4f 91       	pop	r20
    161e:	3f 91       	pop	r19
    1620:	2f 91       	pop	r18
    1622:	0f 90       	pop	r0
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	0f 90       	pop	r0
    1628:	1f 90       	pop	r1
    162a:	18 95       	reti

0000162c <__vector_3>:

ISR(VECT_INT2)
{
    162c:	1f 92       	push	r1
    162e:	0f 92       	push	r0
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	0f 92       	push	r0
    1634:	11 24       	eor	r1, r1
    1636:	2f 93       	push	r18
    1638:	3f 93       	push	r19
    163a:	4f 93       	push	r20
    163c:	5f 93       	push	r21
    163e:	6f 93       	push	r22
    1640:	7f 93       	push	r23
    1642:	8f 93       	push	r24
    1644:	9f 93       	push	r25
    1646:	af 93       	push	r26
    1648:	bf 93       	push	r27
    164a:	ef 93       	push	r30
    164c:	ff 93       	push	r31
    164e:	df 93       	push	r29
    1650:	cf 93       	push	r28
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfunINTFun[2] != NULL)
    1656:	80 91 f2 01 	lds	r24, 0x01F2
    165a:	90 91 f3 01 	lds	r25, 0x01F3
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	49 f0       	breq	.+18     	; 0x1674 <__vector_3+0x48>
	{
		(*EXTI_ApfunINTFun[2])(EXTI_ApvoidGenericparameter[2]);
    1662:	e0 91 f2 01 	lds	r30, 0x01F2
    1666:	f0 91 f3 01 	lds	r31, 0x01F3
    166a:	80 91 f8 01 	lds	r24, 0x01F8
    166e:	90 91 f9 01 	lds	r25, 0x01F9
    1672:	09 95       	icall
	}
}
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	ff 91       	pop	r31
    167a:	ef 91       	pop	r30
    167c:	bf 91       	pop	r27
    167e:	af 91       	pop	r26
    1680:	9f 91       	pop	r25
    1682:	8f 91       	pop	r24
    1684:	7f 91       	pop	r23
    1686:	6f 91       	pop	r22
    1688:	5f 91       	pop	r21
    168a:	4f 91       	pop	r20
    168c:	3f 91       	pop	r19
    168e:	2f 91       	pop	r18
    1690:	0f 90       	pop	r0
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	0f 90       	pop	r0
    1696:	1f 90       	pop	r1
    1698:	18 95       	reti

0000169a <DIO_enuInit>:
#include "DIO_config.h"



ES_t DIO_enuInit(void)
{
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	0f 92       	push	r0
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    16a4:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR, PA_PIN6_DIR, PA_PIN5_DIR, PA_PIN4_DIR, PA_PIN3_DIR, PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
    16a6:	ea e3       	ldi	r30, 0x3A	; 58
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	8f ef       	ldi	r24, 0xFF	; 255
    16ac:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR, PB_PIN6_DIR, PB_PIN5_DIR, PB_PIN4_DIR, PB_PIN3_DIR, PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
    16ae:	e7 e3       	ldi	r30, 0x37	; 55
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	8f ef       	ldi	r24, 0xFF	; 255
    16b4:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR, PC_PIN6_DIR, PC_PIN5_DIR, PC_PIN4_DIR, PC_PIN3_DIR, PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
    16b6:	e4 e3       	ldi	r30, 0x34	; 52
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	8a ea       	ldi	r24, 0xAA	; 170
    16bc:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR, PD_PIN6_DIR, PD_PIN5_DIR, PD_PIN4_DIR, PD_PIN3_DIR, PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
    16be:	e1 e3       	ldi	r30, 0x31	; 49
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	8a ea       	ldi	r24, 0xAA	; 170
    16c4:	80 83       	st	Z, r24

	PORTA = CONC(PA_PIN7_VAL, PA_PIN6_VAL, PA_PIN5_VAL, PA_PIN4_VAL, PA_PIN3_VAL, PA_PIN2_VAL, PA_PIN1_VAL, PA_PIN0_VAL);
    16c6:	eb e3       	ldi	r30, 0x3B	; 59
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	10 82       	st	Z, r1
	PORTB = CONC(PB_PIN7_VAL, PB_PIN6_VAL, PB_PIN5_VAL, PB_PIN4_VAL, PB_PIN3_VAL, PB_PIN2_VAL, PB_PIN1_VAL, PB_PIN0_VAL);
    16cc:	e8 e3       	ldi	r30, 0x38	; 56
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	10 82       	st	Z, r1
	PORTC = CONC(PC_PIN7_VAL, PC_PIN6_VAL, PC_PIN5_VAL, PC_PIN4_VAL, PC_PIN3_VAL, PC_PIN2_VAL, PC_PIN1_VAL, PC_PIN0_VAL);
    16d2:	e5 e3       	ldi	r30, 0x35	; 53
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	86 e6       	ldi	r24, 0x66	; 102
    16d8:	80 83       	st	Z, r24
	PORTD = CONC(PD_PIN7_VAL, PD_PIN6_VAL, PD_PIN5_VAL, PD_PIN4_VAL, PD_PIN3_VAL, PD_PIN2_VAL, PD_PIN1_VAL, PD_PIN0_VAL);
    16da:	e2 e3       	ldi	r30, 0x32	; 50
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	86 e6       	ldi	r24, 0x66	; 102
    16e0:	80 83       	st	Z, r24

	Local_enuErrorState = ES_OK;
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    16e8:	0f 90       	pop	r0
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	08 95       	ret

000016f0 <DIO_enuSetPortDirection>:


ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	00 d0       	rcall	.+0      	; 0x16f6 <DIO_enuSetPortDirection+0x6>
    16f6:	00 d0       	rcall	.+0      	; 0x16f8 <DIO_enuSetPortDirection+0x8>
    16f8:	0f 92       	push	r0
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    16fe:	8a 83       	std	Y+2, r24	; 0x02
    1700:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1702:	19 82       	std	Y+1, r1	; 0x01

	/*Range Check*/
	if(Copy_u8PortID <= DIO_PORTD)
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	84 30       	cpi	r24, 0x04	; 4
    1708:	a8 f5       	brcc	.+106    	; 0x1774 <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	3d 83       	std	Y+5, r19	; 0x05
    1712:	2c 83       	std	Y+4, r18	; 0x04
    1714:	8c 81       	ldd	r24, Y+4	; 0x04
    1716:	9d 81       	ldd	r25, Y+5	; 0x05
    1718:	81 30       	cpi	r24, 0x01	; 1
    171a:	91 05       	cpc	r25, r1
    171c:	d1 f0       	breq	.+52     	; 0x1752 <DIO_enuSetPortDirection+0x62>
    171e:	2c 81       	ldd	r18, Y+4	; 0x04
    1720:	3d 81       	ldd	r19, Y+5	; 0x05
    1722:	22 30       	cpi	r18, 0x02	; 2
    1724:	31 05       	cpc	r19, r1
    1726:	2c f4       	brge	.+10     	; 0x1732 <DIO_enuSetPortDirection+0x42>
    1728:	8c 81       	ldd	r24, Y+4	; 0x04
    172a:	9d 81       	ldd	r25, Y+5	; 0x05
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	61 f0       	breq	.+24     	; 0x1748 <DIO_enuSetPortDirection+0x58>
    1730:	1e c0       	rjmp	.+60     	; 0x176e <DIO_enuSetPortDirection+0x7e>
    1732:	2c 81       	ldd	r18, Y+4	; 0x04
    1734:	3d 81       	ldd	r19, Y+5	; 0x05
    1736:	22 30       	cpi	r18, 0x02	; 2
    1738:	31 05       	cpc	r19, r1
    173a:	81 f0       	breq	.+32     	; 0x175c <DIO_enuSetPortDirection+0x6c>
    173c:	8c 81       	ldd	r24, Y+4	; 0x04
    173e:	9d 81       	ldd	r25, Y+5	; 0x05
    1740:	83 30       	cpi	r24, 0x03	; 3
    1742:	91 05       	cpc	r25, r1
    1744:	81 f0       	breq	.+32     	; 0x1766 <DIO_enuSetPortDirection+0x76>
    1746:	13 c0       	rjmp	.+38     	; 0x176e <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
    1748:	ea e3       	ldi	r30, 0x3A	; 58
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	80 83       	st	Z, r24
    1750:	0e c0       	rjmp	.+28     	; 0x176e <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
    1752:	e7 e3       	ldi	r30, 0x37	; 55
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	80 83       	st	Z, r24
    175a:	09 c0       	rjmp	.+18     	; 0x176e <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
    175c:	e4 e3       	ldi	r30, 0x34	; 52
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	80 83       	st	Z, r24
    1764:	04 c0       	rjmp	.+8      	; 0x176e <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
    1766:	e1 e3       	ldi	r30, 0x31	; 49
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1774:	83 e0       	ldi	r24, 0x03	; 3
    1776:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1778:	89 81       	ldd	r24, Y+1	; 0x01
}
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <DIO_enuSetPortValue>:


ES_t DIO_enuSetPortValue(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	00 d0       	rcall	.+0      	; 0x1790 <DIO_enuSetPortValue+0x6>
    1790:	00 d0       	rcall	.+0      	; 0x1792 <DIO_enuSetPortValue+0x8>
    1792:	0f 92       	push	r0
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	8a 83       	std	Y+2, r24	; 0x02
    179a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    179c:	19 82       	std	Y+1, r1	; 0x01

	/* Range Check */
	if(Copy_u8PortID <= DIO_PORTD)
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	84 30       	cpi	r24, 0x04	; 4
    17a2:	a8 f5       	brcc	.+106    	; 0x180e <DIO_enuSetPortValue+0x84>
	{
		switch(Copy_u8PortID)
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	3d 83       	std	Y+5, r19	; 0x05
    17ac:	2c 83       	std	Y+4, r18	; 0x04
    17ae:	8c 81       	ldd	r24, Y+4	; 0x04
    17b0:	9d 81       	ldd	r25, Y+5	; 0x05
    17b2:	81 30       	cpi	r24, 0x01	; 1
    17b4:	91 05       	cpc	r25, r1
    17b6:	d1 f0       	breq	.+52     	; 0x17ec <DIO_enuSetPortValue+0x62>
    17b8:	2c 81       	ldd	r18, Y+4	; 0x04
    17ba:	3d 81       	ldd	r19, Y+5	; 0x05
    17bc:	22 30       	cpi	r18, 0x02	; 2
    17be:	31 05       	cpc	r19, r1
    17c0:	2c f4       	brge	.+10     	; 0x17cc <DIO_enuSetPortValue+0x42>
    17c2:	8c 81       	ldd	r24, Y+4	; 0x04
    17c4:	9d 81       	ldd	r25, Y+5	; 0x05
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	61 f0       	breq	.+24     	; 0x17e2 <DIO_enuSetPortValue+0x58>
    17ca:	1e c0       	rjmp	.+60     	; 0x1808 <DIO_enuSetPortValue+0x7e>
    17cc:	2c 81       	ldd	r18, Y+4	; 0x04
    17ce:	3d 81       	ldd	r19, Y+5	; 0x05
    17d0:	22 30       	cpi	r18, 0x02	; 2
    17d2:	31 05       	cpc	r19, r1
    17d4:	81 f0       	breq	.+32     	; 0x17f6 <DIO_enuSetPortValue+0x6c>
    17d6:	8c 81       	ldd	r24, Y+4	; 0x04
    17d8:	9d 81       	ldd	r25, Y+5	; 0x05
    17da:	83 30       	cpi	r24, 0x03	; 3
    17dc:	91 05       	cpc	r25, r1
    17de:	81 f0       	breq	.+32     	; 0x1800 <DIO_enuSetPortValue+0x76>
    17e0:	13 c0       	rjmp	.+38     	; 0x1808 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA = Copy_u8Value;
    17e2:	eb e3       	ldi	r30, 0x3B	; 59
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	80 83       	st	Z, r24
    17ea:	0e c0       	rjmp	.+28     	; 0x1808 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8Value;
    17ec:	e8 e3       	ldi	r30, 0x38	; 56
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	80 83       	st	Z, r24
    17f4:	09 c0       	rjmp	.+18     	; 0x1808 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8Value;
    17f6:	e5 e3       	ldi	r30, 0x35	; 53
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	80 83       	st	Z, r24
    17fe:	04 c0       	rjmp	.+8      	; 0x1808 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = Copy_u8Value;
    1800:	e2 e3       	ldi	r30, 0x32	; 50
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	89 83       	std	Y+1, r24	; 0x01
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    180e:	83 e0       	ldi	r24, 0x03	; 3
    1810:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1812:	89 81       	ldd	r24, Y+1	; 0x01
}
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <DIO_enuTogPortValue>:


ES_t DIO_enuTogPortValue(u8 Copy_u8PortID)
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	00 d0       	rcall	.+0      	; 0x182a <DIO_enuTogPortValue+0x6>
    182a:	00 d0       	rcall	.+0      	; 0x182c <DIO_enuTogPortValue+0x8>
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1832:	19 82       	std	Y+1, r1	; 0x01

	/* Range Check */
	if(Copy_u8PortID <= DIO_PORTD)
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	84 30       	cpi	r24, 0x04	; 4
    1838:	08 f0       	brcs	.+2      	; 0x183c <DIO_enuTogPortValue+0x18>
    183a:	41 c0       	rjmp	.+130    	; 0x18be <DIO_enuTogPortValue+0x9a>
	{
		switch(Copy_u8PortID)
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	3c 83       	std	Y+4, r19	; 0x04
    1844:	2b 83       	std	Y+3, r18	; 0x03
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	9c 81       	ldd	r25, Y+4	; 0x04
    184a:	81 30       	cpi	r24, 0x01	; 1
    184c:	91 05       	cpc	r25, r1
    184e:	e9 f0       	breq	.+58     	; 0x188a <DIO_enuTogPortValue+0x66>
    1850:	2b 81       	ldd	r18, Y+3	; 0x03
    1852:	3c 81       	ldd	r19, Y+4	; 0x04
    1854:	22 30       	cpi	r18, 0x02	; 2
    1856:	31 05       	cpc	r19, r1
    1858:	2c f4       	brge	.+10     	; 0x1864 <DIO_enuTogPortValue+0x40>
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	9c 81       	ldd	r25, Y+4	; 0x04
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	61 f0       	breq	.+24     	; 0x187a <DIO_enuTogPortValue+0x56>
    1862:	2a c0       	rjmp	.+84     	; 0x18b8 <DIO_enuTogPortValue+0x94>
    1864:	2b 81       	ldd	r18, Y+3	; 0x03
    1866:	3c 81       	ldd	r19, Y+4	; 0x04
    1868:	22 30       	cpi	r18, 0x02	; 2
    186a:	31 05       	cpc	r19, r1
    186c:	b1 f0       	breq	.+44     	; 0x189a <DIO_enuTogPortValue+0x76>
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	9c 81       	ldd	r25, Y+4	; 0x04
    1872:	83 30       	cpi	r24, 0x03	; 3
    1874:	91 05       	cpc	r25, r1
    1876:	c9 f0       	breq	.+50     	; 0x18aa <DIO_enuTogPortValue+0x86>
    1878:	1f c0       	rjmp	.+62     	; 0x18b8 <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA = ~PORTA;
    187a:	ab e3       	ldi	r26, 0x3B	; 59
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	eb e3       	ldi	r30, 0x3B	; 59
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	80 95       	com	r24
    1886:	8c 93       	st	X, r24
    1888:	17 c0       	rjmp	.+46     	; 0x18b8 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB = ~PORTB;
    188a:	a8 e3       	ldi	r26, 0x38	; 56
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e8 e3       	ldi	r30, 0x38	; 56
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	80 95       	com	r24
    1896:	8c 93       	st	X, r24
    1898:	0f c0       	rjmp	.+30     	; 0x18b8 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC = ~PORTC;
    189a:	a5 e3       	ldi	r26, 0x35	; 53
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e5 e3       	ldi	r30, 0x35	; 53
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	80 95       	com	r24
    18a6:	8c 93       	st	X, r24
    18a8:	07 c0       	rjmp	.+14     	; 0x18b8 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD = ~PORTD;
    18aa:	a2 e3       	ldi	r26, 0x32	; 50
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e2 e3       	ldi	r30, 0x32	; 50
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	80 95       	com	r24
    18b6:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	89 83       	std	Y+1, r24	; 0x01
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    18be:	83 e0       	ldi	r24, 0x03	; 3
    18c0:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <DIO_enuGetPortValue>:


ES_t DIO_enuGetPortValue(u8 Copy_u8PortID, u8 * Copy_pu8Value)
{
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <DIO_enuGetPortValue+0x6>
    18d8:	00 d0       	rcall	.+0      	; 0x18da <DIO_enuGetPortValue+0x8>
    18da:	00 d0       	rcall	.+0      	; 0x18dc <DIO_enuGetPortValue+0xa>
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	8a 83       	std	Y+2, r24	; 0x02
    18e2:	7c 83       	std	Y+4, r23	; 0x04
    18e4:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    18e6:	19 82       	std	Y+1, r1	; 0x01

	/* Check if wild pointer */
	if(Copy_pu8Value != NULL)
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	9c 81       	ldd	r25, Y+4	; 0x04
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <DIO_enuGetPortValue+0x20>
    18f0:	43 c0       	rjmp	.+134    	; 0x1978 <DIO_enuGetPortValue+0xa6>
	{
		/* Change Range */
		if(Copy_u8PortID <= DIO_PORTD)
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	84 30       	cpi	r24, 0x04	; 4
    18f6:	e8 f5       	brcc	.+122    	; 0x1972 <DIO_enuGetPortValue+0xa0>
		{
			switch(Copy_u8PortID)
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	3e 83       	std	Y+6, r19	; 0x06
    1900:	2d 83       	std	Y+5, r18	; 0x05
    1902:	8d 81       	ldd	r24, Y+5	; 0x05
    1904:	9e 81       	ldd	r25, Y+6	; 0x06
    1906:	81 30       	cpi	r24, 0x01	; 1
    1908:	91 05       	cpc	r25, r1
    190a:	e1 f0       	breq	.+56     	; 0x1944 <DIO_enuGetPortValue+0x72>
    190c:	2d 81       	ldd	r18, Y+5	; 0x05
    190e:	3e 81       	ldd	r19, Y+6	; 0x06
    1910:	22 30       	cpi	r18, 0x02	; 2
    1912:	31 05       	cpc	r19, r1
    1914:	2c f4       	brge	.+10     	; 0x1920 <DIO_enuGetPortValue+0x4e>
    1916:	8d 81       	ldd	r24, Y+5	; 0x05
    1918:	9e 81       	ldd	r25, Y+6	; 0x06
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	61 f0       	breq	.+24     	; 0x1936 <DIO_enuGetPortValue+0x64>
    191e:	26 c0       	rjmp	.+76     	; 0x196c <DIO_enuGetPortValue+0x9a>
    1920:	2d 81       	ldd	r18, Y+5	; 0x05
    1922:	3e 81       	ldd	r19, Y+6	; 0x06
    1924:	22 30       	cpi	r18, 0x02	; 2
    1926:	31 05       	cpc	r19, r1
    1928:	a1 f0       	breq	.+40     	; 0x1952 <DIO_enuGetPortValue+0x80>
    192a:	8d 81       	ldd	r24, Y+5	; 0x05
    192c:	9e 81       	ldd	r25, Y+6	; 0x06
    192e:	83 30       	cpi	r24, 0x03	; 3
    1930:	91 05       	cpc	r25, r1
    1932:	b1 f0       	breq	.+44     	; 0x1960 <DIO_enuGetPortValue+0x8e>
    1934:	1b c0       	rjmp	.+54     	; 0x196c <DIO_enuGetPortValue+0x9a>
			{
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
    1936:	e9 e3       	ldi	r30, 0x39	; 57
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	eb 81       	ldd	r30, Y+3	; 0x03
    193e:	fc 81       	ldd	r31, Y+4	; 0x04
    1940:	80 83       	st	Z, r24
    1942:	14 c0       	rjmp	.+40     	; 0x196c <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
    1944:	e6 e3       	ldi	r30, 0x36	; 54
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	eb 81       	ldd	r30, Y+3	; 0x03
    194c:	fc 81       	ldd	r31, Y+4	; 0x04
    194e:	80 83       	st	Z, r24
    1950:	0d c0       	rjmp	.+26     	; 0x196c <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
    1952:	e3 e3       	ldi	r30, 0x33	; 51
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	eb 81       	ldd	r30, Y+3	; 0x03
    195a:	fc 81       	ldd	r31, Y+4	; 0x04
    195c:	80 83       	st	Z, r24
    195e:	06 c0       	rjmp	.+12     	; 0x196c <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
    1960:	e0 e3       	ldi	r30, 0x30	; 48
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	eb 81       	ldd	r30, Y+3	; 0x03
    1968:	fc 81       	ldd	r31, Y+4	; 0x04
    196a:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	89 83       	std	Y+1, r24	; 0x01
    1970:	05 c0       	rjmp	.+10     	; 0x197c <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1972:	83 e0       	ldi	r24, 0x03	; 3
    1974:	89 83       	std	Y+1, r24	; 0x01
    1976:	02 c0       	rjmp	.+4      	; 0x197c <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1978:	82 e0       	ldi	r24, 0x02	; 2
    197a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    197c:	89 81       	ldd	r24, Y+1	; 0x01
}
    197e:	26 96       	adiw	r28, 0x06	; 6
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	f8 94       	cli
    1984:	de bf       	out	0x3e, r29	; 62
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	cd bf       	out	0x3d, r28	; 61
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	00 d0       	rcall	.+0      	; 0x1996 <DIO_enuSetPinDirection+0x6>
    1996:	00 d0       	rcall	.+0      	; 0x1998 <DIO_enuSetPinDirection+0x8>
    1998:	00 d0       	rcall	.+0      	; 0x199a <DIO_enuSetPinDirection+0xa>
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	8a 83       	std	Y+2, r24	; 0x02
    19a0:	6b 83       	std	Y+3, r22	; 0x03
    19a2:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    19a4:	19 82       	std	Y+1, r1	; 0x01

	/* Check range */
	if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) && (Copy_u8Value <= OUTPUT))
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	84 30       	cpi	r24, 0x04	; 4
    19aa:	08 f0       	brcs	.+2      	; 0x19ae <DIO_enuSetPinDirection+0x1e>
    19ac:	d1 c0       	rjmp	.+418    	; 0x1b50 <DIO_enuSetPinDirection+0x1c0>
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	88 30       	cpi	r24, 0x08	; 8
    19b2:	08 f0       	brcs	.+2      	; 0x19b6 <DIO_enuSetPinDirection+0x26>
    19b4:	cd c0       	rjmp	.+410    	; 0x1b50 <DIO_enuSetPinDirection+0x1c0>
    19b6:	8c 81       	ldd	r24, Y+4	; 0x04
    19b8:	82 30       	cpi	r24, 0x02	; 2
    19ba:	08 f0       	brcs	.+2      	; 0x19be <DIO_enuSetPinDirection+0x2e>
    19bc:	c9 c0       	rjmp	.+402    	; 0x1b50 <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	3e 83       	std	Y+6, r19	; 0x06
    19c6:	2d 83       	std	Y+5, r18	; 0x05
    19c8:	6d 81       	ldd	r22, Y+5	; 0x05
    19ca:	7e 81       	ldd	r23, Y+6	; 0x06
    19cc:	61 30       	cpi	r22, 0x01	; 1
    19ce:	71 05       	cpc	r23, r1
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <DIO_enuSetPinDirection+0x44>
    19d2:	41 c0       	rjmp	.+130    	; 0x1a56 <DIO_enuSetPinDirection+0xc6>
    19d4:	8d 81       	ldd	r24, Y+5	; 0x05
    19d6:	9e 81       	ldd	r25, Y+6	; 0x06
    19d8:	82 30       	cpi	r24, 0x02	; 2
    19da:	91 05       	cpc	r25, r1
    19dc:	34 f4       	brge	.+12     	; 0x19ea <DIO_enuSetPinDirection+0x5a>
    19de:	2d 81       	ldd	r18, Y+5	; 0x05
    19e0:	3e 81       	ldd	r19, Y+6	; 0x06
    19e2:	21 15       	cp	r18, r1
    19e4:	31 05       	cpc	r19, r1
    19e6:	71 f0       	breq	.+28     	; 0x1a04 <DIO_enuSetPinDirection+0x74>
    19e8:	b0 c0       	rjmp	.+352    	; 0x1b4a <DIO_enuSetPinDirection+0x1ba>
    19ea:	6d 81       	ldd	r22, Y+5	; 0x05
    19ec:	7e 81       	ldd	r23, Y+6	; 0x06
    19ee:	62 30       	cpi	r22, 0x02	; 2
    19f0:	71 05       	cpc	r23, r1
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <DIO_enuSetPinDirection+0x66>
    19f4:	59 c0       	rjmp	.+178    	; 0x1aa8 <DIO_enuSetPinDirection+0x118>
    19f6:	8d 81       	ldd	r24, Y+5	; 0x05
    19f8:	9e 81       	ldd	r25, Y+6	; 0x06
    19fa:	83 30       	cpi	r24, 0x03	; 3
    19fc:	91 05       	cpc	r25, r1
    19fe:	09 f4       	brne	.+2      	; 0x1a02 <DIO_enuSetPinDirection+0x72>
    1a00:	7c c0       	rjmp	.+248    	; 0x1afa <DIO_enuSetPinDirection+0x16a>
    1a02:	a3 c0       	rjmp	.+326    	; 0x1b4a <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);             //Mask bit == Clear Bit
    1a04:	aa e3       	ldi	r26, 0x3A	; 58
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	ea e3       	ldi	r30, 0x3A	; 58
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	48 2f       	mov	r20, r24
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <DIO_enuSetPinDirection+0x90>
    1a1c:	88 0f       	add	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	2a 95       	dec	r18
    1a22:	e2 f7       	brpl	.-8      	; 0x1a1c <DIO_enuSetPinDirection+0x8c>
    1a24:	80 95       	com	r24
    1a26:	84 23       	and	r24, r20
    1a28:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID); //Write new value
    1a2a:	aa e3       	ldi	r26, 0x3A	; 58
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	ea e3       	ldi	r30, 0x3A	; 58
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	48 2f       	mov	r20, r24
    1a36:	8c 81       	ldd	r24, Y+4	; 0x04
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	88 2f       	mov	r24, r24
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	b9 01       	movw	r22, r18
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <DIO_enuSetPinDirection+0xba>
    1a46:	66 0f       	add	r22, r22
    1a48:	77 1f       	adc	r23, r23
    1a4a:	8a 95       	dec	r24
    1a4c:	e2 f7       	brpl	.-8      	; 0x1a46 <DIO_enuSetPinDirection+0xb6>
    1a4e:	cb 01       	movw	r24, r22
    1a50:	84 2b       	or	r24, r20
    1a52:	8c 93       	st	X, r24
    1a54:	7a c0       	rjmp	.+244    	; 0x1b4a <DIO_enuSetPinDirection+0x1ba>
			 *      -> 101-0-1001 | 000-1-0000 (Write Value)
			 *      -> 101-1-1-1001 (Result)
			 */
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1a56:	a7 e3       	ldi	r26, 0x37	; 55
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e7 e3       	ldi	r30, 0x37	; 55
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	48 2f       	mov	r20, r24
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <DIO_enuSetPinDirection+0xe2>
    1a6e:	88 0f       	add	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	2a 95       	dec	r18
    1a74:	e2 f7       	brpl	.-8      	; 0x1a6e <DIO_enuSetPinDirection+0xde>
    1a76:	80 95       	com	r24
    1a78:	84 23       	and	r24, r20
    1a7a:	8c 93       	st	X, r24
			DDRB |= (Copy_u8Value << Copy_u8PinID);
    1a7c:	a7 e3       	ldi	r26, 0x37	; 55
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e7 e3       	ldi	r30, 0x37	; 55
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	48 2f       	mov	r20, r24
    1a88:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	88 2f       	mov	r24, r24
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	b9 01       	movw	r22, r18
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <DIO_enuSetPinDirection+0x10c>
    1a98:	66 0f       	add	r22, r22
    1a9a:	77 1f       	adc	r23, r23
    1a9c:	8a 95       	dec	r24
    1a9e:	e2 f7       	brpl	.-8      	; 0x1a98 <DIO_enuSetPinDirection+0x108>
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	84 2b       	or	r24, r20
    1aa4:	8c 93       	st	X, r24
    1aa6:	51 c0       	rjmp	.+162    	; 0x1b4a <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1aa8:	a4 e3       	ldi	r26, 0x34	; 52
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e4 e3       	ldi	r30, 0x34	; 52
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	48 2f       	mov	r20, r24
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <DIO_enuSetPinDirection+0x134>
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	2a 95       	dec	r18
    1ac6:	e2 f7       	brpl	.-8      	; 0x1ac0 <DIO_enuSetPinDirection+0x130>
    1ac8:	80 95       	com	r24
    1aca:	84 23       	and	r24, r20
    1acc:	8c 93       	st	X, r24
			DDRC |= (Copy_u8Value << Copy_u8PinID);
    1ace:	a4 e3       	ldi	r26, 0x34	; 52
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	e4 e3       	ldi	r30, 0x34	; 52
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	48 2f       	mov	r20, r24
    1ada:	8c 81       	ldd	r24, Y+4	; 0x04
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	88 2f       	mov	r24, r24
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	b9 01       	movw	r22, r18
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <DIO_enuSetPinDirection+0x15e>
    1aea:	66 0f       	add	r22, r22
    1aec:	77 1f       	adc	r23, r23
    1aee:	8a 95       	dec	r24
    1af0:	e2 f7       	brpl	.-8      	; 0x1aea <DIO_enuSetPinDirection+0x15a>
    1af2:	cb 01       	movw	r24, r22
    1af4:	84 2b       	or	r24, r20
    1af6:	8c 93       	st	X, r24
    1af8:	28 c0       	rjmp	.+80     	; 0x1b4a <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1afa:	a1 e3       	ldi	r26, 0x31	; 49
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e1 e3       	ldi	r30, 0x31	; 49
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	48 2f       	mov	r20, r24
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <DIO_enuSetPinDirection+0x186>
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	2a 95       	dec	r18
    1b18:	e2 f7       	brpl	.-8      	; 0x1b12 <DIO_enuSetPinDirection+0x182>
    1b1a:	80 95       	com	r24
    1b1c:	84 23       	and	r24, r20
    1b1e:	8c 93       	st	X, r24
			DDRD |= (Copy_u8Value << Copy_u8PinID);
    1b20:	a1 e3       	ldi	r26, 0x31	; 49
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	e1 e3       	ldi	r30, 0x31	; 49
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	48 2f       	mov	r20, r24
    1b2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	88 2f       	mov	r24, r24
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	b9 01       	movw	r22, r18
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <DIO_enuSetPinDirection+0x1b0>
    1b3c:	66 0f       	add	r22, r22
    1b3e:	77 1f       	adc	r23, r23
    1b40:	8a 95       	dec	r24
    1b42:	e2 f7       	brpl	.-8      	; 0x1b3c <DIO_enuSetPinDirection+0x1ac>
    1b44:	cb 01       	movw	r24, r22
    1b46:	84 2b       	or	r24, r20
    1b48:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1b50:	83 e0       	ldi	r24, 0x03	; 3
    1b52:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b56:	26 96       	adiw	r28, 0x06	; 6
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	00 d0       	rcall	.+0      	; 0x1b6e <DIO_enuSetPinValue+0x6>
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <DIO_enuSetPinValue+0x8>
    1b70:	00 d0       	rcall	.+0      	; 0x1b72 <DIO_enuSetPinValue+0xa>
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    1b76:	8a 83       	std	Y+2, r24	; 0x02
    1b78:	6b 83       	std	Y+3, r22	; 0x03
    1b7a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1b7c:	19 82       	std	Y+1, r1	; 0x01

	/* Check range */
	if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7) && (Copy_u8Value <= HIGH))
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	84 30       	cpi	r24, 0x04	; 4
    1b82:	08 f0       	brcs	.+2      	; 0x1b86 <DIO_enuSetPinValue+0x1e>
    1b84:	d1 c0       	rjmp	.+418    	; 0x1d28 <DIO_enuSetPinValue+0x1c0>
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	88 30       	cpi	r24, 0x08	; 8
    1b8a:	08 f0       	brcs	.+2      	; 0x1b8e <DIO_enuSetPinValue+0x26>
    1b8c:	cd c0       	rjmp	.+410    	; 0x1d28 <DIO_enuSetPinValue+0x1c0>
    1b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b90:	82 30       	cpi	r24, 0x02	; 2
    1b92:	08 f0       	brcs	.+2      	; 0x1b96 <DIO_enuSetPinValue+0x2e>
    1b94:	c9 c0       	rjmp	.+402    	; 0x1d28 <DIO_enuSetPinValue+0x1c0>
	{
		switch(Copy_u8PortID)
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	3e 83       	std	Y+6, r19	; 0x06
    1b9e:	2d 83       	std	Y+5, r18	; 0x05
    1ba0:	6d 81       	ldd	r22, Y+5	; 0x05
    1ba2:	7e 81       	ldd	r23, Y+6	; 0x06
    1ba4:	61 30       	cpi	r22, 0x01	; 1
    1ba6:	71 05       	cpc	r23, r1
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <DIO_enuSetPinValue+0x44>
    1baa:	41 c0       	rjmp	.+130    	; 0x1c2e <DIO_enuSetPinValue+0xc6>
    1bac:	8d 81       	ldd	r24, Y+5	; 0x05
    1bae:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb0:	82 30       	cpi	r24, 0x02	; 2
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	34 f4       	brge	.+12     	; 0x1bc2 <DIO_enuSetPinValue+0x5a>
    1bb6:	2d 81       	ldd	r18, Y+5	; 0x05
    1bb8:	3e 81       	ldd	r19, Y+6	; 0x06
    1bba:	21 15       	cp	r18, r1
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	71 f0       	breq	.+28     	; 0x1bdc <DIO_enuSetPinValue+0x74>
    1bc0:	b0 c0       	rjmp	.+352    	; 0x1d22 <DIO_enuSetPinValue+0x1ba>
    1bc2:	6d 81       	ldd	r22, Y+5	; 0x05
    1bc4:	7e 81       	ldd	r23, Y+6	; 0x06
    1bc6:	62 30       	cpi	r22, 0x02	; 2
    1bc8:	71 05       	cpc	r23, r1
    1bca:	09 f4       	brne	.+2      	; 0x1bce <DIO_enuSetPinValue+0x66>
    1bcc:	59 c0       	rjmp	.+178    	; 0x1c80 <DIO_enuSetPinValue+0x118>
    1bce:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd2:	83 30       	cpi	r24, 0x03	; 3
    1bd4:	91 05       	cpc	r25, r1
    1bd6:	09 f4       	brne	.+2      	; 0x1bda <DIO_enuSetPinValue+0x72>
    1bd8:	7c c0       	rjmp	.+248    	; 0x1cd2 <DIO_enuSetPinValue+0x16a>
    1bda:	a3 c0       	rjmp	.+326    	; 0x1d22 <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);             //Mask bit == Clear Bit
    1bdc:	ab e3       	ldi	r26, 0x3B	; 59
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	eb e3       	ldi	r30, 0x3B	; 59
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	48 2f       	mov	r20, r24
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <DIO_enuSetPinValue+0x90>
    1bf4:	88 0f       	add	r24, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	2a 95       	dec	r18
    1bfa:	e2 f7       	brpl	.-8      	; 0x1bf4 <DIO_enuSetPinValue+0x8c>
    1bfc:	80 95       	com	r24
    1bfe:	84 23       	and	r24, r20
    1c00:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID); //Write new value
    1c02:	ab e3       	ldi	r26, 0x3B	; 59
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	eb e3       	ldi	r30, 0x3B	; 59
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	48 2f       	mov	r20, r24
    1c0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c10:	28 2f       	mov	r18, r24
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	88 2f       	mov	r24, r24
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	b9 01       	movw	r22, r18
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <DIO_enuSetPinValue+0xba>
    1c1e:	66 0f       	add	r22, r22
    1c20:	77 1f       	adc	r23, r23
    1c22:	8a 95       	dec	r24
    1c24:	e2 f7       	brpl	.-8      	; 0x1c1e <DIO_enuSetPinValue+0xb6>
    1c26:	cb 01       	movw	r24, r22
    1c28:	84 2b       	or	r24, r20
    1c2a:	8c 93       	st	X, r24
    1c2c:	7a c0       	rjmp	.+244    	; 0x1d22 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1c2e:	a8 e3       	ldi	r26, 0x38	; 56
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e8 e3       	ldi	r30, 0x38	; 56
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	48 2f       	mov	r20, r24
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <DIO_enuSetPinValue+0xe2>
    1c46:	88 0f       	add	r24, r24
    1c48:	99 1f       	adc	r25, r25
    1c4a:	2a 95       	dec	r18
    1c4c:	e2 f7       	brpl	.-8      	; 0x1c46 <DIO_enuSetPinValue+0xde>
    1c4e:	80 95       	com	r24
    1c50:	84 23       	and	r24, r20
    1c52:	8c 93       	st	X, r24
			PORTB |= (Copy_u8Value << Copy_u8PinID);
    1c54:	a8 e3       	ldi	r26, 0x38	; 56
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e8 e3       	ldi	r30, 0x38	; 56
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	48 2f       	mov	r20, r24
    1c60:	8c 81       	ldd	r24, Y+4	; 0x04
    1c62:	28 2f       	mov	r18, r24
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	88 2f       	mov	r24, r24
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	b9 01       	movw	r22, r18
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <DIO_enuSetPinValue+0x10c>
    1c70:	66 0f       	add	r22, r22
    1c72:	77 1f       	adc	r23, r23
    1c74:	8a 95       	dec	r24
    1c76:	e2 f7       	brpl	.-8      	; 0x1c70 <DIO_enuSetPinValue+0x108>
    1c78:	cb 01       	movw	r24, r22
    1c7a:	84 2b       	or	r24, r20
    1c7c:	8c 93       	st	X, r24
    1c7e:	51 c0       	rjmp	.+162    	; 0x1d22 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1c80:	a5 e3       	ldi	r26, 0x35	; 53
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e5 e3       	ldi	r30, 0x35	; 53
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	48 2f       	mov	r20, r24
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	28 2f       	mov	r18, r24
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <DIO_enuSetPinValue+0x134>
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	2a 95       	dec	r18
    1c9e:	e2 f7       	brpl	.-8      	; 0x1c98 <DIO_enuSetPinValue+0x130>
    1ca0:	80 95       	com	r24
    1ca2:	84 23       	and	r24, r20
    1ca4:	8c 93       	st	X, r24
			PORTC |= (Copy_u8Value << Copy_u8PinID);
    1ca6:	a5 e3       	ldi	r26, 0x35	; 53
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e5 e3       	ldi	r30, 0x35	; 53
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	48 2f       	mov	r20, r24
    1cb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	88 2f       	mov	r24, r24
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	b9 01       	movw	r22, r18
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <DIO_enuSetPinValue+0x15e>
    1cc2:	66 0f       	add	r22, r22
    1cc4:	77 1f       	adc	r23, r23
    1cc6:	8a 95       	dec	r24
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <DIO_enuSetPinValue+0x15a>
    1cca:	cb 01       	movw	r24, r22
    1ccc:	84 2b       	or	r24, r20
    1cce:	8c 93       	st	X, r24
    1cd0:	28 c0       	rjmp	.+80     	; 0x1d22 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1cd2:	a2 e3       	ldi	r26, 0x32	; 50
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	e2 e3       	ldi	r30, 0x32	; 50
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	48 2f       	mov	r20, r24
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	28 2f       	mov	r18, r24
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	02 c0       	rjmp	.+4      	; 0x1cee <DIO_enuSetPinValue+0x186>
    1cea:	88 0f       	add	r24, r24
    1cec:	99 1f       	adc	r25, r25
    1cee:	2a 95       	dec	r18
    1cf0:	e2 f7       	brpl	.-8      	; 0x1cea <DIO_enuSetPinValue+0x182>
    1cf2:	80 95       	com	r24
    1cf4:	84 23       	and	r24, r20
    1cf6:	8c 93       	st	X, r24
			PORTD |= (Copy_u8Value << Copy_u8PinID);
    1cf8:	a2 e3       	ldi	r26, 0x32	; 50
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	e2 e3       	ldi	r30, 0x32	; 50
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	48 2f       	mov	r20, r24
    1d04:	8c 81       	ldd	r24, Y+4	; 0x04
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	88 2f       	mov	r24, r24
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	b9 01       	movw	r22, r18
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <DIO_enuSetPinValue+0x1b0>
    1d14:	66 0f       	add	r22, r22
    1d16:	77 1f       	adc	r23, r23
    1d18:	8a 95       	dec	r24
    1d1a:	e2 f7       	brpl	.-8      	; 0x1d14 <DIO_enuSetPinValue+0x1ac>
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	84 2b       	or	r24, r20
    1d20:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	89 83       	std	Y+1, r24	; 0x01
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1d28:	83 e0       	ldi	r24, 0x03	; 3
    1d2a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d2e:	26 96       	adiw	r28, 0x06	; 6
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	08 95       	ret

00001d40 <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID)
{
    1d40:	df 93       	push	r29
    1d42:	cf 93       	push	r28
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <DIO_enuTogPinValue+0x6>
    1d46:	00 d0       	rcall	.+0      	; 0x1d48 <DIO_enuTogPinValue+0x8>
    1d48:	0f 92       	push	r0
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
    1d4e:	8a 83       	std	Y+2, r24	; 0x02
    1d50:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1d52:	19 82       	std	Y+1, r1	; 0x01

	/* Check range */
	if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7))
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	84 30       	cpi	r24, 0x04	; 4
    1d58:	08 f0       	brcs	.+2      	; 0x1d5c <DIO_enuTogPinValue+0x1c>
    1d5a:	75 c0       	rjmp	.+234    	; 0x1e46 <DIO_enuTogPinValue+0x106>
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	88 30       	cpi	r24, 0x08	; 8
    1d60:	08 f0       	brcs	.+2      	; 0x1d64 <DIO_enuTogPinValue+0x24>
    1d62:	71 c0       	rjmp	.+226    	; 0x1e46 <DIO_enuTogPinValue+0x106>
	{
		switch(Copy_u8PortID)
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	28 2f       	mov	r18, r24
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	3d 83       	std	Y+5, r19	; 0x05
    1d6c:	2c 83       	std	Y+4, r18	; 0x04
    1d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d70:	9d 81       	ldd	r25, Y+5	; 0x05
    1d72:	81 30       	cpi	r24, 0x01	; 1
    1d74:	91 05       	cpc	r25, r1
    1d76:	49 f1       	breq	.+82     	; 0x1dca <DIO_enuTogPinValue+0x8a>
    1d78:	2c 81       	ldd	r18, Y+4	; 0x04
    1d7a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d7c:	22 30       	cpi	r18, 0x02	; 2
    1d7e:	31 05       	cpc	r19, r1
    1d80:	2c f4       	brge	.+10     	; 0x1d8c <DIO_enuTogPinValue+0x4c>
    1d82:	8c 81       	ldd	r24, Y+4	; 0x04
    1d84:	9d 81       	ldd	r25, Y+5	; 0x05
    1d86:	00 97       	sbiw	r24, 0x00	; 0
    1d88:	61 f0       	breq	.+24     	; 0x1da2 <DIO_enuTogPinValue+0x62>
    1d8a:	5a c0       	rjmp	.+180    	; 0x1e40 <DIO_enuTogPinValue+0x100>
    1d8c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d8e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d90:	22 30       	cpi	r18, 0x02	; 2
    1d92:	31 05       	cpc	r19, r1
    1d94:	71 f1       	breq	.+92     	; 0x1df2 <DIO_enuTogPinValue+0xb2>
    1d96:	8c 81       	ldd	r24, Y+4	; 0x04
    1d98:	9d 81       	ldd	r25, Y+5	; 0x05
    1d9a:	83 30       	cpi	r24, 0x03	; 3
    1d9c:	91 05       	cpc	r25, r1
    1d9e:	e9 f1       	breq	.+122    	; 0x1e1a <DIO_enuTogPinValue+0xda>
    1da0:	4f c0       	rjmp	.+158    	; 0x1e40 <DIO_enuTogPinValue+0x100>
		{
		case DIO_PORTA:
			PORTA ^=  (DIO_MASK_BIT << Copy_u8PinID);
    1da2:	ab e3       	ldi	r26, 0x3B	; 59
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	eb e3       	ldi	r30, 0x3B	; 59
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	48 2f       	mov	r20, r24
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	28 2f       	mov	r18, r24
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	02 2e       	mov	r0, r18
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <DIO_enuTogPinValue+0x80>
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	0a 94       	dec	r0
    1dc2:	e2 f7       	brpl	.-8      	; 0x1dbc <DIO_enuTogPinValue+0x7c>
    1dc4:	84 27       	eor	r24, r20
    1dc6:	8c 93       	st	X, r24
    1dc8:	3b c0       	rjmp	.+118    	; 0x1e40 <DIO_enuTogPinValue+0x100>
			 *       -> 000-1-0000
			 *       -> 101-0-1001
			 * */
			break;
		case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT << Copy_u8PinID);
    1dca:	a8 e3       	ldi	r26, 0x38	; 56
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e8 e3       	ldi	r30, 0x38	; 56
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	48 2f       	mov	r20, r24
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	02 2e       	mov	r0, r18
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <DIO_enuTogPinValue+0xa8>
    1de4:	88 0f       	add	r24, r24
    1de6:	99 1f       	adc	r25, r25
    1de8:	0a 94       	dec	r0
    1dea:	e2 f7       	brpl	.-8      	; 0x1de4 <DIO_enuTogPinValue+0xa4>
    1dec:	84 27       	eor	r24, r20
    1dee:	8c 93       	st	X, r24
    1df0:	27 c0       	rjmp	.+78     	; 0x1e40 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT << Copy_u8PinID);
    1df2:	a5 e3       	ldi	r26, 0x35	; 53
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	e5 e3       	ldi	r30, 0x35	; 53
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	48 2f       	mov	r20, r24
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	02 2e       	mov	r0, r18
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <DIO_enuTogPinValue+0xd0>
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	0a 94       	dec	r0
    1e12:	e2 f7       	brpl	.-8      	; 0x1e0c <DIO_enuTogPinValue+0xcc>
    1e14:	84 27       	eor	r24, r20
    1e16:	8c 93       	st	X, r24
    1e18:	13 c0       	rjmp	.+38     	; 0x1e40 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT << Copy_u8PinID);
    1e1a:	a2 e3       	ldi	r26, 0x32	; 50
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e2 e3       	ldi	r30, 0x32	; 50
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	48 2f       	mov	r20, r24
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	02 2e       	mov	r0, r18
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <DIO_enuTogPinValue+0xf8>
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	0a 94       	dec	r0
    1e3a:	e2 f7       	brpl	.-8      	; 0x1e34 <DIO_enuTogPinValue+0xf4>
    1e3c:	84 27       	eor	r24, r20
    1e3e:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	89 83       	std	Y+1, r24	; 0x01
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <DIO_enuTogPinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1e46:	83 e0       	ldi	r24, 0x03	; 3
    1e48:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	cf 91       	pop	r28
    1e58:	df 91       	pop	r29
    1e5a:	08 95       	ret

00001e5c <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 * Copy_pu8Value)
{
    1e5c:	df 93       	push	r29
    1e5e:	cf 93       	push	r28
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	27 97       	sbiw	r28, 0x07	; 7
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	de bf       	out	0x3e, r29	; 62
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	cd bf       	out	0x3d, r28	; 61
    1e70:	8a 83       	std	Y+2, r24	; 0x02
    1e72:	6b 83       	std	Y+3, r22	; 0x03
    1e74:	5d 83       	std	Y+5, r21	; 0x05
    1e76:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1e78:	19 82       	std	Y+1, r1	; 0x01

	/* Check if wild pointer */
	if(Copy_pu8Value != NULL)
    1e7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e7e:	00 97       	sbiw	r24, 0x00	; 0
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <DIO_enuGetPinValue+0x28>
    1e82:	7e c0       	rjmp	.+252    	; 0x1f80 <DIO_enuGetPinValue+0x124>
	{
		/* Check Range */
		if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <= DIO_PIN7))
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	84 30       	cpi	r24, 0x04	; 4
    1e88:	08 f0       	brcs	.+2      	; 0x1e8c <DIO_enuGetPinValue+0x30>
    1e8a:	77 c0       	rjmp	.+238    	; 0x1f7a <DIO_enuGetPinValue+0x11e>
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	88 30       	cpi	r24, 0x08	; 8
    1e90:	08 f0       	brcs	.+2      	; 0x1e94 <DIO_enuGetPinValue+0x38>
    1e92:	73 c0       	rjmp	.+230    	; 0x1f7a <DIO_enuGetPinValue+0x11e>
		{
			switch(Copy_u8PortID)
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	28 2f       	mov	r18, r24
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	3f 83       	std	Y+7, r19	; 0x07
    1e9c:	2e 83       	std	Y+6, r18	; 0x06
    1e9e:	4e 81       	ldd	r20, Y+6	; 0x06
    1ea0:	5f 81       	ldd	r21, Y+7	; 0x07
    1ea2:	41 30       	cpi	r20, 0x01	; 1
    1ea4:	51 05       	cpc	r21, r1
    1ea6:	59 f1       	breq	.+86     	; 0x1efe <DIO_enuGetPinValue+0xa2>
    1ea8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eaa:	9f 81       	ldd	r25, Y+7	; 0x07
    1eac:	82 30       	cpi	r24, 0x02	; 2
    1eae:	91 05       	cpc	r25, r1
    1eb0:	34 f4       	brge	.+12     	; 0x1ebe <DIO_enuGetPinValue+0x62>
    1eb2:	2e 81       	ldd	r18, Y+6	; 0x06
    1eb4:	3f 81       	ldd	r19, Y+7	; 0x07
    1eb6:	21 15       	cp	r18, r1
    1eb8:	31 05       	cpc	r19, r1
    1eba:	69 f0       	breq	.+26     	; 0x1ed6 <DIO_enuGetPinValue+0x7a>
    1ebc:	5b c0       	rjmp	.+182    	; 0x1f74 <DIO_enuGetPinValue+0x118>
    1ebe:	4e 81       	ldd	r20, Y+6	; 0x06
    1ec0:	5f 81       	ldd	r21, Y+7	; 0x07
    1ec2:	42 30       	cpi	r20, 0x02	; 2
    1ec4:	51 05       	cpc	r21, r1
    1ec6:	79 f1       	breq	.+94     	; 0x1f26 <DIO_enuGetPinValue+0xca>
    1ec8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eca:	9f 81       	ldd	r25, Y+7	; 0x07
    1ecc:	83 30       	cpi	r24, 0x03	; 3
    1ece:	91 05       	cpc	r25, r1
    1ed0:	09 f4       	brne	.+2      	; 0x1ed4 <DIO_enuGetPinValue+0x78>
    1ed2:	3d c0       	rjmp	.+122    	; 0x1f4e <DIO_enuGetPinValue+0xf2>
    1ed4:	4f c0       	rjmp	.+158    	; 0x1f74 <DIO_enuGetPinValue+0x118>
			{
			case DIO_PORTA:
				*Copy_pu8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
    1ed6:	e9 e3       	ldi	r30, 0x39	; 57
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	28 2f       	mov	r18, r24
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee2:	88 2f       	mov	r24, r24
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	a9 01       	movw	r20, r18
    1ee8:	02 c0       	rjmp	.+4      	; 0x1eee <DIO_enuGetPinValue+0x92>
    1eea:	55 95       	asr	r21
    1eec:	47 95       	ror	r20
    1eee:	8a 95       	dec	r24
    1ef0:	e2 f7       	brpl	.-8      	; 0x1eea <DIO_enuGetPinValue+0x8e>
    1ef2:	ca 01       	movw	r24, r20
    1ef4:	81 70       	andi	r24, 0x01	; 1
    1ef6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ef8:	fd 81       	ldd	r31, Y+5	; 0x05
    1efa:	80 83       	st	Z, r24
    1efc:	3b c0       	rjmp	.+118    	; 0x1f74 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
    1efe:	e6 e3       	ldi	r30, 0x36	; 54
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	28 2f       	mov	r18, r24
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0a:	88 2f       	mov	r24, r24
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	a9 01       	movw	r20, r18
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <DIO_enuGetPinValue+0xba>
    1f12:	55 95       	asr	r21
    1f14:	47 95       	ror	r20
    1f16:	8a 95       	dec	r24
    1f18:	e2 f7       	brpl	.-8      	; 0x1f12 <DIO_enuGetPinValue+0xb6>
    1f1a:	ca 01       	movw	r24, r20
    1f1c:	81 70       	andi	r24, 0x01	; 1
    1f1e:	ec 81       	ldd	r30, Y+4	; 0x04
    1f20:	fd 81       	ldd	r31, Y+5	; 0x05
    1f22:	80 83       	st	Z, r24
    1f24:	27 c0       	rjmp	.+78     	; 0x1f74 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
    1f26:	e3 e3       	ldi	r30, 0x33	; 51
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	28 2f       	mov	r18, r24
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	88 2f       	mov	r24, r24
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	a9 01       	movw	r20, r18
    1f38:	02 c0       	rjmp	.+4      	; 0x1f3e <DIO_enuGetPinValue+0xe2>
    1f3a:	55 95       	asr	r21
    1f3c:	47 95       	ror	r20
    1f3e:	8a 95       	dec	r24
    1f40:	e2 f7       	brpl	.-8      	; 0x1f3a <DIO_enuGetPinValue+0xde>
    1f42:	ca 01       	movw	r24, r20
    1f44:	81 70       	andi	r24, 0x01	; 1
    1f46:	ec 81       	ldd	r30, Y+4	; 0x04
    1f48:	fd 81       	ldd	r31, Y+5	; 0x05
    1f4a:	80 83       	st	Z, r24
    1f4c:	13 c0       	rjmp	.+38     	; 0x1f74 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = ((PIND >> Copy_u8PinID) & DIO_MASK_BIT);
    1f4e:	e0 e3       	ldi	r30, 0x30	; 48
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	28 2f       	mov	r18, r24
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	88 2f       	mov	r24, r24
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	a9 01       	movw	r20, r18
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <DIO_enuGetPinValue+0x10a>
    1f62:	55 95       	asr	r21
    1f64:	47 95       	ror	r20
    1f66:	8a 95       	dec	r24
    1f68:	e2 f7       	brpl	.-8      	; 0x1f62 <DIO_enuGetPinValue+0x106>
    1f6a:	ca 01       	movw	r24, r20
    1f6c:	81 70       	andi	r24, 0x01	; 1
    1f6e:	ec 81       	ldd	r30, Y+4	; 0x04
    1f70:	fd 81       	ldd	r31, Y+5	; 0x05
    1f72:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	89 83       	std	Y+1, r24	; 0x01
    1f78:	05 c0       	rjmp	.+10     	; 0x1f84 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1f7a:	83 e0       	ldi	r24, 0x03	; 3
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1f80:	82 e0       	ldi	r24, 0x02	; 2
    1f82:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f86:	27 96       	adiw	r28, 0x07	; 7
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	f8 94       	cli
    1f8c:	de bf       	out	0x3e, r29	; 62
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	cd bf       	out	0x3d, r28	; 61
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	08 95       	ret

00001f98 <ADC_enuInit>:

static void (*ADC_PfunISRFun)(void *) = NULL;
static void * ADC_pvoidISRParam = NULL;

ES_t ADC_enuInit(void)
{
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	0f 92       	push	r0
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1fa2:	19 82       	std	Y+1, r1	; 0x01
	//You need mask here
	ADMUX &= 0x3F;
    1fa4:	a7 e2       	ldi	r26, 0x27	; 39
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e7 e2       	ldi	r30, 0x27	; 39
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	8f 73       	andi	r24, 0x3F	; 63
    1fb0:	8c 93       	st	X, r24
	/* Reference Configuration */
	#if ADC_VREF_SOURCE == ADC_AREF_VREF
		ADMUX &= ~(3<<6);
	#elif ADC_VREF_SOURCE == ADC_AVCC_VREF
		ADMUX |= (1<<6);
    1fb2:	a7 e2       	ldi	r26, 0x27	; 39
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	e7 e2       	ldi	r30, 0x27	; 39
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	80 64       	ori	r24, 0x40	; 64
    1fbe:	8c 93       	st	X, r24
	#endif


	/* Adjustment Configuration */
	#if ADC_ADJUST == ADC_RIGHT_ADJUST
		ADMUX &= ~(1<<5);
    1fc0:	a7 e2       	ldi	r26, 0x27	; 39
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	e7 e2       	ldi	r30, 0x27	; 39
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	8f 7d       	andi	r24, 0xDF	; 223
    1fcc:	8c 93       	st	X, r24
		#error "Invalid Adjustment Selection!"
	#endif


	/* Mask Register */
	ADCSRA &= 0xF8;
    1fce:	a6 e2       	ldi	r26, 0x26	; 38
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	e6 e2       	ldi	r30, 0x26	; 38
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	88 7f       	andi	r24, 0xF8	; 248
    1fda:	8c 93       	st	X, r24
	#if ADC_PRESCALER == ADC_PRESCALER_2
		ADCSRA |= (1<<0);
	#elif ADC_PRESCALER == ADC_PRESCALER_4
		ADCSRA |= (1<<1);
	#elif ADC_PRESCALER == ADC_PRESCALER_8
		ADCSRA |= (3<<0);
    1fdc:	a6 e2       	ldi	r26, 0x26	; 38
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	e6 e2       	ldi	r30, 0x26	; 38
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	83 60       	ori	r24, 0x03	; 3
    1fe8:	8c 93       	st	X, r24
		ADCSRA |= (7<<0);
	#else
		#error "Invalid Prescaler Selection!"
	#endif

	Local_enuErrorState = ES_OK;
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ff0:	0f 90       	pop	r0
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	08 95       	ret

00001ff8 <ADC_enuEnable>:
ES_t ADC_enuEnable(void)
{
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	0f 92       	push	r0
    1ffe:	cd b7       	in	r28, 0x3d	; 61
    2000:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2002:	19 82       	std	Y+1, r1	; 0x01

	/* ADC Enable */
	ADCSRA |= (1<<7);
    2004:	a6 e2       	ldi	r26, 0x26	; 38
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	e6 e2       	ldi	r30, 0x26	; 38
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	80 68       	ori	r24, 0x80	; 128
    2010:	8c 93       	st	X, r24

	Local_enuErrorState = ES_OK;
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    2016:	89 81       	ldd	r24, Y+1	; 0x01
}
    2018:	0f 90       	pop	r0
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	08 95       	ret

00002020 <ADC_enuDisble>:

ES_t ADC_enuDisble(void)
{
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	0f 92       	push	r0
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    202a:	19 82       	std	Y+1, r1	; 0x01

	/* ADC Disable */
	ADCSRA &= ~(1<<7);
    202c:	a6 e2       	ldi	r26, 0x26	; 38
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	e6 e2       	ldi	r30, 0x26	; 38
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	8f 77       	andi	r24, 0x7F	; 127
    2038:	8c 93       	st	X, r24

	Local_enuErrorState = ES_OK;
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    203e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2040:	0f 90       	pop	r0
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	08 95       	ret

00002048 <ADC_enuSetVref>:

ES_t ADC_enuSetVref(u8 Copy_u8Source)
{
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	00 d0       	rcall	.+0      	; 0x204e <ADC_enuSetVref+0x6>
    204e:	00 d0       	rcall	.+0      	; 0x2050 <ADC_enuSetVref+0x8>
    2050:	0f 92       	push	r0
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
    2056:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2058:	19 82       	std	Y+1, r1	; 0x01

	ADMUX &= 0x3F;
    205a:	a7 e2       	ldi	r26, 0x27	; 39
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e7 e2       	ldi	r30, 0x27	; 39
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	8f 73       	andi	r24, 0x3F	; 63
    2066:	8c 93       	st	X, r24

	if(Copy_u8Source < 3)
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	83 30       	cpi	r24, 0x03	; 3
    206c:	78 f5       	brcc	.+94     	; 0x20cc <ADC_enuSetVref+0x84>
	{
		switch(Copy_u8Source)
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	28 2f       	mov	r18, r24
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	3d 83       	std	Y+5, r19	; 0x05
    2076:	2c 83       	std	Y+4, r18	; 0x04
    2078:	8c 81       	ldd	r24, Y+4	; 0x04
    207a:	9d 81       	ldd	r25, Y+5	; 0x05
    207c:	81 30       	cpi	r24, 0x01	; 1
    207e:	91 05       	cpc	r25, r1
    2080:	89 f0       	breq	.+34     	; 0x20a4 <ADC_enuSetVref+0x5c>
    2082:	2c 81       	ldd	r18, Y+4	; 0x04
    2084:	3d 81       	ldd	r19, Y+5	; 0x05
    2086:	22 30       	cpi	r18, 0x02	; 2
    2088:	31 05       	cpc	r19, r1
    208a:	a1 f0       	breq	.+40     	; 0x20b4 <ADC_enuSetVref+0x6c>
    208c:	8c 81       	ldd	r24, Y+4	; 0x04
    208e:	9d 81       	ldd	r25, Y+5	; 0x05
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	b9 f4       	brne	.+46     	; 0x20c2 <ADC_enuSetVref+0x7a>
		{
		case 0:
			ADMUX &= ~(3<<6);
    2094:	a7 e2       	ldi	r26, 0x27	; 39
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	e7 e2       	ldi	r30, 0x27	; 39
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	8f 73       	andi	r24, 0x3F	; 63
    20a0:	8c 93       	st	X, r24
    20a2:	0f c0       	rjmp	.+30     	; 0x20c2 <ADC_enuSetVref+0x7a>
			break;
		case 1:
			ADMUX |= (1<<6);
    20a4:	a7 e2       	ldi	r26, 0x27	; 39
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	e7 e2       	ldi	r30, 0x27	; 39
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	80 64       	ori	r24, 0x40	; 64
    20b0:	8c 93       	st	X, r24
    20b2:	07 c0       	rjmp	.+14     	; 0x20c2 <ADC_enuSetVref+0x7a>
			break;
		case 2:
			ADMUX |= (3<<6);
    20b4:	a7 e2       	ldi	r26, 0x27	; 39
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	e7 e2       	ldi	r30, 0x27	; 39
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	80 6c       	ori	r24, 0xC0	; 192
    20c0:	8c 93       	st	X, r24
	else
	{
		return ES_OUT_OF_RANGE;
	}

	Local_enuErrorState = ES_OK;
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    20c6:	99 81       	ldd	r25, Y+1	; 0x01
    20c8:	9b 83       	std	Y+3, r25	; 0x03
    20ca:	02 c0       	rjmp	.+4      	; 0x20d0 <ADC_enuSetVref+0x88>
			break;
		}
	}
	else
	{
		return ES_OUT_OF_RANGE;
    20cc:	23 e0       	ldi	r18, 0x03	; 3
    20ce:	2b 83       	std	Y+3, r18	; 0x03
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
	}

	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
}
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <ADC_enuStartConversion>:
ES_t ADC_enuStartConversion(void)
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	0f 92       	push	r0
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    20ec:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA |= (1<<6);
    20ee:	a6 e2       	ldi	r26, 0x26	; 38
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	e6 e2       	ldi	r30, 0x26	; 38
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	80 64       	ori	r24, 0x40	; 64
    20fa:	8c 93       	st	X, r24

	Local_enuErrorState = ES_OK;
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    2100:	89 81       	ldd	r24, Y+1	; 0x01
}
    2102:	0f 90       	pop	r0
    2104:	cf 91       	pop	r28
    2106:	df 91       	pop	r29
    2108:	08 95       	ret

0000210a <ADC_enuPollingSystem>:

ES_t ADC_enuPollingSystem(void)
{
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	0f 92       	push	r0
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2114:	19 82       	std	Y+1, r1	; 0x01

	while(((ADCSRA>>4) & 1) == 0);
    2116:	e6 e2       	ldi	r30, 0x26	; 38
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	82 95       	swap	r24
    211e:	8f 70       	andi	r24, 0x0F	; 15
    2120:	88 2f       	mov	r24, r24
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	81 70       	andi	r24, 0x01	; 1
    2126:	90 70       	andi	r25, 0x00	; 0
    2128:	00 97       	sbiw	r24, 0x00	; 0
    212a:	a9 f3       	breq	.-22     	; 0x2116 <ADC_enuPollingSystem+0xc>

	ADCSRA |= (1<<4);
    212c:	a6 e2       	ldi	r26, 0x26	; 38
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	e6 e2       	ldi	r30, 0x26	; 38
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	80 61       	ori	r24, 0x10	; 16
    2138:	8c 93       	st	X, r24

	Local_enuErrorState = ES_OK;
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    213e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2140:	0f 90       	pop	r0
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <ADC_enuReadHighValue>:

ES_t ADC_enuReadHighValue(u8 *Copy_pu8Value)
{
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	00 d0       	rcall	.+0      	; 0x214e <ADC_enuReadHighValue+0x6>
    214e:	0f 92       	push	r0
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
    2154:	9b 83       	std	Y+3, r25	; 0x03
    2156:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2158:	19 82       	std	Y+1, r1	; 0x01

#if ADC_ADJUST == ADC_RIGHT_ADJUST
	*Copy_pu8Value = (ADCL >> 2);
    215a:	e4 e2       	ldi	r30, 0x24	; 36
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	86 95       	lsr	r24
    2162:	86 95       	lsr	r24
    2164:	ea 81       	ldd	r30, Y+2	; 0x02
    2166:	fb 81       	ldd	r31, Y+3	; 0x03
    2168:	80 83       	st	Z, r24
	*Copy_pu8Value |= (ADCH << 6);
    216a:	ea 81       	ldd	r30, Y+2	; 0x02
    216c:	fb 81       	ldd	r31, Y+3	; 0x03
    216e:	80 81       	ld	r24, Z
    2170:	28 2f       	mov	r18, r24
    2172:	e5 e2       	ldi	r30, 0x25	; 37
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	88 2f       	mov	r24, r24
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	00 24       	eor	r0, r0
    217e:	96 95       	lsr	r25
    2180:	87 95       	ror	r24
    2182:	07 94       	ror	r0
    2184:	96 95       	lsr	r25
    2186:	87 95       	ror	r24
    2188:	07 94       	ror	r0
    218a:	98 2f       	mov	r25, r24
    218c:	80 2d       	mov	r24, r0
    218e:	82 2b       	or	r24, r18
    2190:	ea 81       	ldd	r30, Y+2	; 0x02
    2192:	fb 81       	ldd	r31, Y+3	; 0x03
    2194:	80 83       	st	Z, r24
	*Copy_pu8Value = ADCH;
#else
	#error "Invalid Adjustment Selection!"
#endif

	Local_enuErrorState = ES_OK;
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    219a:	89 81       	ldd	r24, Y+1	; 0x01
}
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	08 95       	ret

000021a8 <ADC_enuADCRead>:

ES_t ADC_enuADCRead(u16 *Copy_pu16Result)
{
    21a8:	df 93       	push	r29
    21aa:	cf 93       	push	r28
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <ADC_enuADCRead+0x6>
    21ae:	0f 92       	push	r0
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	9b 83       	std	Y+3, r25	; 0x03
    21b6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    21b8:	19 82       	std	Y+1, r1	; 0x01

#if ADC_ADJUST == ADC_RIGHT_ADJUST
	*Copy_pu16Result = ADCL;
    21ba:	e4 e2       	ldi	r30, 0x24	; 36
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	88 2f       	mov	r24, r24
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	ea 81       	ldd	r30, Y+2	; 0x02
    21c6:	fb 81       	ldd	r31, Y+3	; 0x03
    21c8:	91 83       	std	Z+1, r25	; 0x01
    21ca:	80 83       	st	Z, r24
	*Copy_pu16Result |= ((u16)ADCH << 8);
    21cc:	ea 81       	ldd	r30, Y+2	; 0x02
    21ce:	fb 81       	ldd	r31, Y+3	; 0x03
    21d0:	20 81       	ld	r18, Z
    21d2:	31 81       	ldd	r19, Z+1	; 0x01
    21d4:	e5 e2       	ldi	r30, 0x25	; 37
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	88 2f       	mov	r24, r24
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	98 2f       	mov	r25, r24
    21e0:	88 27       	eor	r24, r24
    21e2:	82 2b       	or	r24, r18
    21e4:	93 2b       	or	r25, r19
    21e6:	ea 81       	ldd	r30, Y+2	; 0x02
    21e8:	fb 81       	ldd	r31, Y+3	; 0x03
    21ea:	91 83       	std	Z+1, r25	; 0x01
    21ec:	80 83       	st	Z, r24
	*Copy_pu16Result |= (ADCH << 2);
#else
	#error "Invalid Adjustment Selection!"
#endif

	Local_enuErrorState = ES_OK;
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	08 95       	ret

00002200 <ADC_enuCallBack>:

ES_t ADC_enuCallBack(void (*Copy_pfunAppFun)(void *), void *Copy_pvoidAppParam)
{
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	00 d0       	rcall	.+0      	; 0x2206 <ADC_enuCallBack+0x6>
    2206:	00 d0       	rcall	.+0      	; 0x2208 <ADC_enuCallBack+0x8>
    2208:	00 d0       	rcall	.+0      	; 0x220a <ADC_enuCallBack+0xa>
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
    220e:	9b 83       	std	Y+3, r25	; 0x03
    2210:	8a 83       	std	Y+2, r24	; 0x02
    2212:	7d 83       	std	Y+5, r23	; 0x05
    2214:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    2216:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pfunAppFun != NULL)
    2218:	8a 81       	ldd	r24, Y+2	; 0x02
    221a:	9b 81       	ldd	r25, Y+3	; 0x03
    221c:	00 97       	sbiw	r24, 0x00	; 0
    221e:	89 f0       	breq	.+34     	; 0x2242 <ADC_enuCallBack+0x42>
	{
		ADC_PfunISRFun = Copy_pfunAppFun;
    2220:	8a 81       	ldd	r24, Y+2	; 0x02
    2222:	9b 81       	ldd	r25, Y+3	; 0x03
    2224:	90 93 fb 01 	sts	0x01FB, r25
    2228:	80 93 fa 01 	sts	0x01FA, r24
		ADC_pvoidISRParam = Copy_pvoidAppParam;
    222c:	8c 81       	ldd	r24, Y+4	; 0x04
    222e:	9d 81       	ldd	r25, Y+5	; 0x05
    2230:	90 93 fd 01 	sts	0x01FD, r25
    2234:	80 93 fc 01 	sts	0x01FC, r24
	else
	{
		return ES_NULL_POINTER;
	}

	Local_enuErrorState = ES_OK;
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	8e 83       	std	Y+6, r24	; 0x06
    2240:	02 c0       	rjmp	.+4      	; 0x2246 <ADC_enuCallBack+0x46>
		ADC_PfunISRFun = Copy_pfunAppFun;
		ADC_pvoidISRParam = Copy_pvoidAppParam;
	}
	else
	{
		return ES_NULL_POINTER;
    2242:	82 e0       	ldi	r24, 0x02	; 2
    2244:	8e 83       	std	Y+6, r24	; 0x06
    2246:	8e 81       	ldd	r24, Y+6	; 0x06
	}

	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
}
    2248:	26 96       	adiw	r28, 0x06	; 6
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	cd bf       	out	0x3d, r28	; 61
    2254:	cf 91       	pop	r28
    2256:	df 91       	pop	r29
    2258:	08 95       	ret

0000225a <ADC_enuSelectChannel>:

ES_t ADC_enuSelectChannel(u8 Copy_u8ChannelID)
{
    225a:	df 93       	push	r29
    225c:	cf 93       	push	r28
    225e:	00 d0       	rcall	.+0      	; 0x2260 <ADC_enuSelectChannel+0x6>
    2260:	0f 92       	push	r0
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
    2266:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2268:	19 82       	std	Y+1, r1	; 0x01
	/* Mask Register */
	ADMUX &= 0xE0;
    226a:	a7 e2       	ldi	r26, 0x27	; 39
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	e7 e2       	ldi	r30, 0x27	; 39
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	80 7e       	andi	r24, 0xE0	; 224
    2276:	8c 93       	st	X, r24
	/* Set Channel */
	if(Copy_u8ChannelID < 32)
    2278:	8a 81       	ldd	r24, Y+2	; 0x02
    227a:	80 32       	cpi	r24, 0x20	; 32
    227c:	68 f4       	brcc	.+26     	; 0x2298 <ADC_enuSelectChannel+0x3e>
	{
		ADMUX |= Copy_u8ChannelID;
    227e:	a7 e2       	ldi	r26, 0x27	; 39
    2280:	b0 e0       	ldi	r27, 0x00	; 0
    2282:	e7 e2       	ldi	r30, 0x27	; 39
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	90 81       	ld	r25, Z
    2288:	8a 81       	ldd	r24, Y+2	; 0x02
    228a:	89 2b       	or	r24, r25
    228c:	8c 93       	st	X, r24
	else
	{
		return ES_OUT_OF_RANGE;
	}

	Local_enuErrorState = ES_OK;
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	8b 83       	std	Y+3, r24	; 0x03
    2296:	02 c0       	rjmp	.+4      	; 0x229c <ADC_enuSelectChannel+0x42>
	{
		ADMUX |= Copy_u8ChannelID;
	}
	else
	{
		return ES_OUT_OF_RANGE;
    2298:	83 e0       	ldi	r24, 0x03	; 3
    229a:	8b 83       	std	Y+3, r24	; 0x03
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
	}

	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
}
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	08 95       	ret

000022aa <ADC_enuEnableTriggeringMode>:

ES_t ADC_enuEnableTriggeringMode(u8 Copy_u8TriggeringSource)
{
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	00 d0       	rcall	.+0      	; 0x22b0 <ADC_enuEnableTriggeringMode+0x6>
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <ADC_enuEnableTriggeringMode+0x8>
    22b2:	0f 92       	push	r0
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    22ba:	19 82       	std	Y+1, r1	; 0x01

	/* For Safety from interrupt */
	ADCSRA &= ~(1<<5);
    22bc:	a6 e2       	ldi	r26, 0x26	; 38
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	e6 e2       	ldi	r30, 0x26	; 38
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	80 81       	ld	r24, Z
    22c6:	8f 7d       	andi	r24, 0xDF	; 223
    22c8:	8c 93       	st	X, r24
	switch(Copy_u8TriggeringSource)
    22ca:	8a 81       	ldd	r24, Y+2	; 0x02
    22cc:	28 2f       	mov	r18, r24
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	3d 83       	std	Y+5, r19	; 0x05
    22d2:	2c 83       	std	Y+4, r18	; 0x04
    22d4:	8c 81       	ldd	r24, Y+4	; 0x04
    22d6:	9d 81       	ldd	r25, Y+5	; 0x05
    22d8:	82 33       	cpi	r24, 0x32	; 50
    22da:	91 05       	cpc	r25, r1
    22dc:	09 f4       	brne	.+2      	; 0x22e0 <ADC_enuEnableTriggeringMode+0x36>
    22de:	8c c0       	rjmp	.+280    	; 0x23f8 <ADC_enuEnableTriggeringMode+0x14e>
    22e0:	2c 81       	ldd	r18, Y+4	; 0x04
    22e2:	3d 81       	ldd	r19, Y+5	; 0x05
    22e4:	23 33       	cpi	r18, 0x33	; 51
    22e6:	31 05       	cpc	r19, r1
    22e8:	9c f4       	brge	.+38     	; 0x2310 <ADC_enuEnableTriggeringMode+0x66>
    22ea:	8c 81       	ldd	r24, Y+4	; 0x04
    22ec:	9d 81       	ldd	r25, Y+5	; 0x05
    22ee:	8e 31       	cpi	r24, 0x1E	; 30
    22f0:	91 05       	cpc	r25, r1
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <ADC_enuEnableTriggeringMode+0x4c>
    22f4:	ad c0       	rjmp	.+346    	; 0x2450 <ADC_enuEnableTriggeringMode+0x1a6>
    22f6:	2c 81       	ldd	r18, Y+4	; 0x04
    22f8:	3d 81       	ldd	r19, Y+5	; 0x05
    22fa:	28 32       	cpi	r18, 0x28	; 40
    22fc:	31 05       	cpc	r19, r1
    22fe:	09 f4       	brne	.+2      	; 0x2302 <ADC_enuEnableTriggeringMode+0x58>
    2300:	91 c0       	rjmp	.+290    	; 0x2424 <ADC_enuEnableTriggeringMode+0x17a>
    2302:	8c 81       	ldd	r24, Y+4	; 0x04
    2304:	9d 81       	ldd	r25, Y+5	; 0x05
    2306:	84 31       	cpi	r24, 0x14	; 20
    2308:	91 05       	cpc	r25, r1
    230a:	09 f4       	brne	.+2      	; 0x230e <ADC_enuEnableTriggeringMode+0x64>
    230c:	b7 c0       	rjmp	.+366    	; 0x247c <ADC_enuEnableTriggeringMode+0x1d2>
    230e:	cc c0       	rjmp	.+408    	; 0x24a8 <ADC_enuEnableTriggeringMode+0x1fe>
    2310:	2c 81       	ldd	r18, Y+4	; 0x04
    2312:	3d 81       	ldd	r19, Y+5	; 0x05
    2314:	26 34       	cpi	r18, 0x46	; 70
    2316:	31 05       	cpc	r19, r1
    2318:	69 f1       	breq	.+90     	; 0x2374 <ADC_enuEnableTriggeringMode+0xca>
    231a:	8c 81       	ldd	r24, Y+4	; 0x04
    231c:	9d 81       	ldd	r25, Y+5	; 0x05
    231e:	87 34       	cpi	r24, 0x47	; 71
    2320:	91 05       	cpc	r25, r1
    2322:	3c f4       	brge	.+14     	; 0x2332 <ADC_enuEnableTriggeringMode+0x88>
    2324:	2c 81       	ldd	r18, Y+4	; 0x04
    2326:	3d 81       	ldd	r19, Y+5	; 0x05
    2328:	2c 33       	cpi	r18, 0x3C	; 60
    232a:	31 05       	cpc	r19, r1
    232c:	09 f4       	brne	.+2      	; 0x2330 <ADC_enuEnableTriggeringMode+0x86>
    232e:	4e c0       	rjmp	.+156    	; 0x23cc <ADC_enuEnableTriggeringMode+0x122>
    2330:	bb c0       	rjmp	.+374    	; 0x24a8 <ADC_enuEnableTriggeringMode+0x1fe>
    2332:	8c 81       	ldd	r24, Y+4	; 0x04
    2334:	9d 81       	ldd	r25, Y+5	; 0x05
    2336:	80 35       	cpi	r24, 0x50	; 80
    2338:	91 05       	cpc	r25, r1
    233a:	91 f1       	breq	.+100    	; 0x23a0 <ADC_enuEnableTriggeringMode+0xf6>
    233c:	2c 81       	ldd	r18, Y+4	; 0x04
    233e:	3d 81       	ldd	r19, Y+5	; 0x05
    2340:	2a 35       	cpi	r18, 0x5A	; 90
    2342:	31 05       	cpc	r19, r1
    2344:	09 f0       	breq	.+2      	; 0x2348 <ADC_enuEnableTriggeringMode+0x9e>
    2346:	b0 c0       	rjmp	.+352    	; 0x24a8 <ADC_enuEnableTriggeringMode+0x1fe>
	{
	case ADC_FREE_RUNNING:
		SFIOR &= ~(1<<5);
    2348:	a0 e5       	ldi	r26, 0x50	; 80
    234a:	b0 e0       	ldi	r27, 0x00	; 0
    234c:	e0 e5       	ldi	r30, 0x50	; 80
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	80 81       	ld	r24, Z
    2352:	8f 7d       	andi	r24, 0xDF	; 223
    2354:	8c 93       	st	X, r24
		SFIOR &= ~(1<<6);
    2356:	a0 e5       	ldi	r26, 0x50	; 80
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	e0 e5       	ldi	r30, 0x50	; 80
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	8f 7b       	andi	r24, 0xBF	; 191
    2362:	8c 93       	st	X, r24
		SFIOR &= ~(1<<7);
    2364:	a0 e5       	ldi	r26, 0x50	; 80
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	e0 e5       	ldi	r30, 0x50	; 80
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 81       	ld	r24, Z
    236e:	8f 77       	andi	r24, 0x7F	; 127
    2370:	8c 93       	st	X, r24
    2372:	9d c0       	rjmp	.+314    	; 0x24ae <ADC_enuEnableTriggeringMode+0x204>
		break;
	case ADC_ANALOG_COMP:
		SFIOR |= (1<<5);
    2374:	a0 e5       	ldi	r26, 0x50	; 80
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	e0 e5       	ldi	r30, 0x50	; 80
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	80 62       	ori	r24, 0x20	; 32
    2380:	8c 93       	st	X, r24
		SFIOR &= ~(1<<6);
    2382:	a0 e5       	ldi	r26, 0x50	; 80
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	e0 e5       	ldi	r30, 0x50	; 80
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	8f 7b       	andi	r24, 0xBF	; 191
    238e:	8c 93       	st	X, r24
		SFIOR &= ~(1<<7);
    2390:	a0 e5       	ldi	r26, 0x50	; 80
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	e0 e5       	ldi	r30, 0x50	; 80
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	8f 77       	andi	r24, 0x7F	; 127
    239c:	8c 93       	st	X, r24
    239e:	87 c0       	rjmp	.+270    	; 0x24ae <ADC_enuEnableTriggeringMode+0x204>
		break;
	case ADC_EXTI_0_TRIG:
		SFIOR &= ~(1<<5);
    23a0:	a0 e5       	ldi	r26, 0x50	; 80
    23a2:	b0 e0       	ldi	r27, 0x00	; 0
    23a4:	e0 e5       	ldi	r30, 0x50	; 80
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	80 81       	ld	r24, Z
    23aa:	8f 7d       	andi	r24, 0xDF	; 223
    23ac:	8c 93       	st	X, r24
		SFIOR |= (1<<6);
    23ae:	a0 e5       	ldi	r26, 0x50	; 80
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	e0 e5       	ldi	r30, 0x50	; 80
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 81       	ld	r24, Z
    23b8:	80 64       	ori	r24, 0x40	; 64
    23ba:	8c 93       	st	X, r24
		SFIOR &= ~(1<<7);
    23bc:	a0 e5       	ldi	r26, 0x50	; 80
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	e0 e5       	ldi	r30, 0x50	; 80
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	8f 77       	andi	r24, 0x7F	; 127
    23c8:	8c 93       	st	X, r24
    23ca:	71 c0       	rjmp	.+226    	; 0x24ae <ADC_enuEnableTriggeringMode+0x204>
		break;
	case ADC_TIM0_CTC:
		SFIOR |= (1<<5);
    23cc:	a0 e5       	ldi	r26, 0x50	; 80
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	e0 e5       	ldi	r30, 0x50	; 80
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
    23d6:	80 62       	ori	r24, 0x20	; 32
    23d8:	8c 93       	st	X, r24
		SFIOR |= (1<<6);
    23da:	a0 e5       	ldi	r26, 0x50	; 80
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	e0 e5       	ldi	r30, 0x50	; 80
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	80 64       	ori	r24, 0x40	; 64
    23e6:	8c 93       	st	X, r24
		SFIOR &= ~(1<<7);
    23e8:	a0 e5       	ldi	r26, 0x50	; 80
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	e0 e5       	ldi	r30, 0x50	; 80
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	8f 77       	andi	r24, 0x7F	; 127
    23f4:	8c 93       	st	X, r24
    23f6:	5b c0       	rjmp	.+182    	; 0x24ae <ADC_enuEnableTriggeringMode+0x204>
		break;
	case ADC_TIM0_OV:
		SFIOR &= ~(1<<5);
    23f8:	a0 e5       	ldi	r26, 0x50	; 80
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	e0 e5       	ldi	r30, 0x50	; 80
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	8f 7d       	andi	r24, 0xDF	; 223
    2404:	8c 93       	st	X, r24
		SFIOR &= ~(1<<6);
    2406:	a0 e5       	ldi	r26, 0x50	; 80
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	e0 e5       	ldi	r30, 0x50	; 80
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	8f 7b       	andi	r24, 0xBF	; 191
    2412:	8c 93       	st	X, r24
		SFIOR |= (1<<7);
    2414:	a0 e5       	ldi	r26, 0x50	; 80
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	e0 e5       	ldi	r30, 0x50	; 80
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	80 68       	ori	r24, 0x80	; 128
    2420:	8c 93       	st	X, r24
    2422:	45 c0       	rjmp	.+138    	; 0x24ae <ADC_enuEnableTriggeringMode+0x204>
		break;
	case ADC_TIM1_CTCB:
		SFIOR |= (1<<5);
    2424:	a0 e5       	ldi	r26, 0x50	; 80
    2426:	b0 e0       	ldi	r27, 0x00	; 0
    2428:	e0 e5       	ldi	r30, 0x50	; 80
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	80 81       	ld	r24, Z
    242e:	80 62       	ori	r24, 0x20	; 32
    2430:	8c 93       	st	X, r24
		SFIOR &= ~(1<<6);
    2432:	a0 e5       	ldi	r26, 0x50	; 80
    2434:	b0 e0       	ldi	r27, 0x00	; 0
    2436:	e0 e5       	ldi	r30, 0x50	; 80
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	80 81       	ld	r24, Z
    243c:	8f 7b       	andi	r24, 0xBF	; 191
    243e:	8c 93       	st	X, r24
		SFIOR |= (1<<7);
    2440:	a0 e5       	ldi	r26, 0x50	; 80
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	e0 e5       	ldi	r30, 0x50	; 80
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	80 68       	ori	r24, 0x80	; 128
    244c:	8c 93       	st	X, r24
    244e:	2f c0       	rjmp	.+94     	; 0x24ae <ADC_enuEnableTriggeringMode+0x204>
		break;
	case ADC_TIM1_OV:
		SFIOR &= ~(1<<5);
    2450:	a0 e5       	ldi	r26, 0x50	; 80
    2452:	b0 e0       	ldi	r27, 0x00	; 0
    2454:	e0 e5       	ldi	r30, 0x50	; 80
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	80 81       	ld	r24, Z
    245a:	8f 7d       	andi	r24, 0xDF	; 223
    245c:	8c 93       	st	X, r24
		SFIOR |= (1<<6);
    245e:	a0 e5       	ldi	r26, 0x50	; 80
    2460:	b0 e0       	ldi	r27, 0x00	; 0
    2462:	e0 e5       	ldi	r30, 0x50	; 80
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	80 64       	ori	r24, 0x40	; 64
    246a:	8c 93       	st	X, r24
		SFIOR |= (1<<7);
    246c:	a0 e5       	ldi	r26, 0x50	; 80
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	e0 e5       	ldi	r30, 0x50	; 80
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	80 68       	ori	r24, 0x80	; 128
    2478:	8c 93       	st	X, r24
    247a:	19 c0       	rjmp	.+50     	; 0x24ae <ADC_enuEnableTriggeringMode+0x204>
		break;
	case ADC_TIM1_CAPTUR:
		SFIOR |= (1<<5);
    247c:	a0 e5       	ldi	r26, 0x50	; 80
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	e0 e5       	ldi	r30, 0x50	; 80
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	80 62       	ori	r24, 0x20	; 32
    2488:	8c 93       	st	X, r24
		SFIOR |= (1<<6);
    248a:	a0 e5       	ldi	r26, 0x50	; 80
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	e0 e5       	ldi	r30, 0x50	; 80
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	80 64       	ori	r24, 0x40	; 64
    2496:	8c 93       	st	X, r24
		SFIOR |= (1<<7);
    2498:	a0 e5       	ldi	r26, 0x50	; 80
    249a:	b0 e0       	ldi	r27, 0x00	; 0
    249c:	e0 e5       	ldi	r30, 0x50	; 80
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 81       	ld	r24, Z
    24a2:	80 68       	ori	r24, 0x80	; 128
    24a4:	8c 93       	st	X, r24
    24a6:	03 c0       	rjmp	.+6      	; 0x24ae <ADC_enuEnableTriggeringMode+0x204>
		break;
	default:
		return ES_OUT_OF_RANGE;
    24a8:	33 e0       	ldi	r19, 0x03	; 3
    24aa:	3b 83       	std	Y+3, r19	; 0x03
    24ac:	0b c0       	rjmp	.+22     	; 0x24c4 <ADC_enuEnableTriggeringMode+0x21a>
	}
	/* Enable Triggering Source */
	ADCSRA |= (1<<5);
    24ae:	a6 e2       	ldi	r26, 0x26	; 38
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	e6 e2       	ldi	r30, 0x26	; 38
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	80 62       	ori	r24, 0x20	; 32
    24ba:	8c 93       	st	X, r24

	Local_enuErrorState = ES_OK;
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	8b 83       	std	Y+3, r24	; 0x03
    24c4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    24c6:	0f 90       	pop	r0
    24c8:	0f 90       	pop	r0
    24ca:	0f 90       	pop	r0
    24cc:	0f 90       	pop	r0
    24ce:	0f 90       	pop	r0
    24d0:	cf 91       	pop	r28
    24d2:	df 91       	pop	r29
    24d4:	08 95       	ret

000024d6 <ADC_enuDisableTriggeringMode>:

ES_t ADC_enuDisableTriggeringMode(void)
{
    24d6:	df 93       	push	r29
    24d8:	cf 93       	push	r28
    24da:	0f 92       	push	r0
    24dc:	cd b7       	in	r28, 0x3d	; 61
    24de:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    24e0:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA &= ~(1<<5);
    24e2:	a6 e2       	ldi	r26, 0x26	; 38
    24e4:	b0 e0       	ldi	r27, 0x00	; 0
    24e6:	e6 e2       	ldi	r30, 0x26	; 38
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	80 81       	ld	r24, Z
    24ec:	8f 7d       	andi	r24, 0xDF	; 223
    24ee:	8c 93       	st	X, r24

	Local_enuErrorState = ES_OK;
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    24f6:	0f 90       	pop	r0
    24f8:	cf 91       	pop	r28
    24fa:	df 91       	pop	r29
    24fc:	08 95       	ret

000024fe <ADC_enuEnableINTMode>:

ES_t ADC_enuEnableINTMode(void)
{
    24fe:	df 93       	push	r29
    2500:	cf 93       	push	r28
    2502:	0f 92       	push	r0
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2508:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA |= (1<<3);
    250a:	a6 e2       	ldi	r26, 0x26	; 38
    250c:	b0 e0       	ldi	r27, 0x00	; 0
    250e:	e6 e2       	ldi	r30, 0x26	; 38
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	88 60       	ori	r24, 0x08	; 8
    2516:	8c 93       	st	X, r24

	Local_enuErrorState = ES_OK;
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    251c:	89 81       	ldd	r24, Y+1	; 0x01
}
    251e:	0f 90       	pop	r0
    2520:	cf 91       	pop	r28
    2522:	df 91       	pop	r29
    2524:	08 95       	ret

00002526 <ADC_enuDisbleINTMode>:

ES_t ADC_enuDisbleINTMode(void)
{
    2526:	df 93       	push	r29
    2528:	cf 93       	push	r28
    252a:	0f 92       	push	r0
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2530:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA &= ~(1<<3);
    2532:	a6 e2       	ldi	r26, 0x26	; 38
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	e6 e2       	ldi	r30, 0x26	; 38
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	87 7f       	andi	r24, 0xF7	; 247
    253e:	8c 93       	st	X, r24

	Local_enuErrorState = ES_OK;
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    2544:	89 81       	ldd	r24, Y+1	; 0x01
}
    2546:	0f 90       	pop	r0
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <__vector_16>:

ISR(VECT_ADC)
{
    254e:	1f 92       	push	r1
    2550:	0f 92       	push	r0
    2552:	0f b6       	in	r0, 0x3f	; 63
    2554:	0f 92       	push	r0
    2556:	11 24       	eor	r1, r1
    2558:	2f 93       	push	r18
    255a:	3f 93       	push	r19
    255c:	4f 93       	push	r20
    255e:	5f 93       	push	r21
    2560:	6f 93       	push	r22
    2562:	7f 93       	push	r23
    2564:	8f 93       	push	r24
    2566:	9f 93       	push	r25
    2568:	af 93       	push	r26
    256a:	bf 93       	push	r27
    256c:	ef 93       	push	r30
    256e:	ff 93       	push	r31
    2570:	df 93       	push	r29
    2572:	cf 93       	push	r28
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
	if(ADC_PfunISRFun != NULL)
    2578:	80 91 fa 01 	lds	r24, 0x01FA
    257c:	90 91 fb 01 	lds	r25, 0x01FB
    2580:	00 97       	sbiw	r24, 0x00	; 0
    2582:	49 f0       	breq	.+18     	; 0x2596 <__vector_16+0x48>
	{
		ADC_PfunISRFun(ADC_pvoidISRParam);
    2584:	e0 91 fa 01 	lds	r30, 0x01FA
    2588:	f0 91 fb 01 	lds	r31, 0x01FB
    258c:	80 91 fc 01 	lds	r24, 0x01FC
    2590:	90 91 fd 01 	lds	r25, 0x01FD
    2594:	09 95       	icall
	}
}
    2596:	cf 91       	pop	r28
    2598:	df 91       	pop	r29
    259a:	ff 91       	pop	r31
    259c:	ef 91       	pop	r30
    259e:	bf 91       	pop	r27
    25a0:	af 91       	pop	r26
    25a2:	9f 91       	pop	r25
    25a4:	8f 91       	pop	r24
    25a6:	7f 91       	pop	r23
    25a8:	6f 91       	pop	r22
    25aa:	5f 91       	pop	r21
    25ac:	4f 91       	pop	r20
    25ae:	3f 91       	pop	r19
    25b0:	2f 91       	pop	r18
    25b2:	0f 90       	pop	r0
    25b4:	0f be       	out	0x3f, r0	; 63
    25b6:	0f 90       	pop	r0
    25b8:	1f 90       	pop	r1
    25ba:	18 95       	reti

000025bc <THERM_enuInit>:
#include "THERM_private.h"

extern u8 therm_num;

ES_t THERM_enuInit(THERM_t * Copy_pAstrThermistorConfig)
{
    25bc:	df 93       	push	r29
    25be:	cf 93       	push	r28
    25c0:	00 d0       	rcall	.+0      	; 0x25c2 <THERM_enuInit+0x6>
    25c2:	00 d0       	rcall	.+0      	; 0x25c4 <THERM_enuInit+0x8>
    25c4:	0f 92       	push	r0
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
    25ca:	9c 83       	std	Y+4, r25	; 0x04
    25cc:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    25ce:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8Iter = 0;
    25d0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pAstrThermistorConfig != NULL)
    25d2:	8b 81       	ldd	r24, Y+3	; 0x03
    25d4:	9c 81       	ldd	r25, Y+4	; 0x04
    25d6:	00 97       	sbiw	r24, 0x00	; 0
    25d8:	09 f4       	brne	.+2      	; 0x25dc <THERM_enuInit+0x20>
    25da:	57 c0       	rjmp	.+174    	; 0x268a <THERM_enuInit+0xce>
	{
		for(Local_u8Iter = 0; Local_u8Iter < therm_num; Local_u8Iter++)
    25dc:	19 82       	std	Y+1, r1	; 0x01
    25de:	41 c0       	rjmp	.+130    	; 0x2662 <THERM_enuInit+0xa6>
		{
			if(Copy_pAstrThermistorConfig[Local_u8Iter].THERM_u8NegativeChannel != NOT_CONNECTED)
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	88 2f       	mov	r24, r24
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	9c 01       	movw	r18, r24
    25e8:	22 0f       	add	r18, r18
    25ea:	33 1f       	adc	r19, r19
    25ec:	8b 81       	ldd	r24, Y+3	; 0x03
    25ee:	9c 81       	ldd	r25, Y+4	; 0x04
    25f0:	fc 01       	movw	r30, r24
    25f2:	e2 0f       	add	r30, r18
    25f4:	f3 1f       	adc	r31, r19
    25f6:	81 81       	ldd	r24, Z+1	; 0x01
    25f8:	8f 30       	cpi	r24, 0x0F	; 15
    25fa:	89 f0       	breq	.+34     	; 0x261e <THERM_enuInit+0x62>
			{
				DIO_enuSetPinDirection(DIO_u8PORTA, Copy_pAstrThermistorConfig[Local_u8Iter].THERM_u8NegativeChannel, DIO_u8INPUT);
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	88 2f       	mov	r24, r24
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	9c 01       	movw	r18, r24
    2604:	22 0f       	add	r18, r18
    2606:	33 1f       	adc	r19, r19
    2608:	8b 81       	ldd	r24, Y+3	; 0x03
    260a:	9c 81       	ldd	r25, Y+4	; 0x04
    260c:	fc 01       	movw	r30, r24
    260e:	e2 0f       	add	r30, r18
    2610:	f3 1f       	adc	r31, r19
    2612:	91 81       	ldd	r25, Z+1	; 0x01
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	69 2f       	mov	r22, r25
    2618:	40 e0       	ldi	r20, 0x00	; 0
    261a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
			}

			if(Copy_pAstrThermistorConfig[Local_u8Iter].THERM_u8PositiveChannel != NOT_CONNECTED)
    261e:	89 81       	ldd	r24, Y+1	; 0x01
    2620:	88 2f       	mov	r24, r24
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	9c 01       	movw	r18, r24
    2626:	22 0f       	add	r18, r18
    2628:	33 1f       	adc	r19, r19
    262a:	8b 81       	ldd	r24, Y+3	; 0x03
    262c:	9c 81       	ldd	r25, Y+4	; 0x04
    262e:	fc 01       	movw	r30, r24
    2630:	e2 0f       	add	r30, r18
    2632:	f3 1f       	adc	r31, r19
    2634:	80 81       	ld	r24, Z
    2636:	8f 30       	cpi	r24, 0x0F	; 15
    2638:	89 f0       	breq	.+34     	; 0x265c <THERM_enuInit+0xa0>
			{
				DIO_enuSetPinDirection(DIO_u8PORTA, Copy_pAstrThermistorConfig[Local_u8Iter].THERM_u8PositiveChannel, DIO_u8INPUT);
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	88 2f       	mov	r24, r24
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	9c 01       	movw	r18, r24
    2642:	22 0f       	add	r18, r18
    2644:	33 1f       	adc	r19, r19
    2646:	8b 81       	ldd	r24, Y+3	; 0x03
    2648:	9c 81       	ldd	r25, Y+4	; 0x04
    264a:	fc 01       	movw	r30, r24
    264c:	e2 0f       	add	r30, r18
    264e:	f3 1f       	adc	r31, r19
    2650:	90 81       	ld	r25, Z
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	69 2f       	mov	r22, r25
    2656:	40 e0       	ldi	r20, 0x00	; 0
    2658:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>

	u8 Local_u8Iter = 0;

	if(Copy_pAstrThermistorConfig != NULL)
	{
		for(Local_u8Iter = 0; Local_u8Iter < therm_num; Local_u8Iter++)
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	8f 5f       	subi	r24, 0xFF	; 255
    2660:	89 83       	std	Y+1, r24	; 0x01
    2662:	90 91 6e 01 	lds	r25, 0x016E
    2666:	89 81       	ldd	r24, Y+1	; 0x01
    2668:	89 17       	cp	r24, r25
    266a:	08 f4       	brcc	.+2      	; 0x266e <THERM_enuInit+0xb2>
    266c:	b9 cf       	rjmp	.-142    	; 0x25e0 <THERM_enuInit+0x24>
	else
	{
		return ES_NULL_POINTER;
	}

	ADC_enuInit();
    266e:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <ADC_enuInit>
	ADC_enuDisableTriggeringMode();
    2672:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <ADC_enuDisableTriggeringMode>
	ADC_enuDisbleINTMode();
    2676:	0e 94 93 12 	call	0x2526	; 0x2526 <ADC_enuDisbleINTMode>
	ADC_enuSetVref(ADC_u8AVCC_VREF);
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	0e 94 24 10 	call	0x2048	; 0x2048 <ADC_enuSetVref>
	ADC_enuEnable();
    2680:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <ADC_enuEnable>

	return Local_enuErrorState;
    2684:	8a 81       	ldd	r24, Y+2	; 0x02
    2686:	8d 83       	std	Y+5, r24	; 0x05
    2688:	02 c0       	rjmp	.+4      	; 0x268e <THERM_enuInit+0xd2>
			}
		}
	}
	else
	{
		return ES_NULL_POINTER;
    268a:	82 e0       	ldi	r24, 0x02	; 2
    268c:	8d 83       	std	Y+5, r24	; 0x05
    268e:	8d 81       	ldd	r24, Y+5	; 0x05
	ADC_enuDisbleINTMode();
	ADC_enuSetVref(ADC_u8AVCC_VREF);
	ADC_enuEnable();

	return Local_enuErrorState;
}
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
    269a:	cf 91       	pop	r28
    269c:	df 91       	pop	r29
    269e:	08 95       	ret

000026a0 <THERM_enuGetTemp>:

ES_t THERM_enuGetTemp(THERM_t *Copy_pstrID, f32 * Copy_pf32Temp)
{
    26a0:	df 93       	push	r29
    26a2:	cf 93       	push	r28
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
    26a8:	28 97       	sbiw	r28, 0x08	; 8
    26aa:	0f b6       	in	r0, 0x3f	; 63
    26ac:	f8 94       	cli
    26ae:	de bf       	out	0x3e, r29	; 62
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	cd bf       	out	0x3d, r28	; 61
    26b4:	9d 83       	std	Y+5, r25	; 0x05
    26b6:	8c 83       	std	Y+4, r24	; 0x04
    26b8:	7f 83       	std	Y+7, r23	; 0x07
    26ba:	6e 83       	std	Y+6, r22	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
    26bc:	19 82       	std	Y+1, r1	; 0x01
	u16 Local_u16ADCRead = 0;
    26be:	1b 82       	std	Y+3, r1	; 0x03
    26c0:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_pf32Temp != NULL)
    26c2:	8e 81       	ldd	r24, Y+6	; 0x06
    26c4:	9f 81       	ldd	r25, Y+7	; 0x07
    26c6:	00 97       	sbiw	r24, 0x00	; 0
    26c8:	09 f4       	brne	.+2      	; 0x26cc <THERM_enuGetTemp+0x2c>
    26ca:	3f c0       	rjmp	.+126    	; 0x274a <THERM_enuGetTemp+0xaa>
	{
		if(Copy_pstrID->THERM_u8PositiveChannel <= ADC_u8ADC7)
    26cc:	ec 81       	ldd	r30, Y+4	; 0x04
    26ce:	fd 81       	ldd	r31, Y+5	; 0x05
    26d0:	80 81       	ld	r24, Z
    26d2:	88 30       	cpi	r24, 0x08	; 8
    26d4:	88 f5       	brcc	.+98     	; 0x2738 <THERM_enuGetTemp+0x98>
		{
			ADC_enuSelectChannel(Copy_pstrID->THERM_u8PositiveChannel);
    26d6:	ec 81       	ldd	r30, Y+4	; 0x04
    26d8:	fd 81       	ldd	r31, Y+5	; 0x05
    26da:	80 81       	ld	r24, Z
    26dc:	0e 94 2d 11 	call	0x225a	; 0x225a <ADC_enuSelectChannel>
			ADC_enuStartConversion();
    26e0:	0e 94 71 10 	call	0x20e2	; 0x20e2 <ADC_enuStartConversion>
			ADC_enuADCRead(&Local_u16ADCRead);
    26e4:	ce 01       	movw	r24, r28
    26e6:	02 96       	adiw	r24, 0x02	; 2
    26e8:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <ADC_enuADCRead>
			*Copy_pf32Temp = (Local_u16ADCRead * 4.88) / 10.0;
    26ec:	8a 81       	ldd	r24, Y+2	; 0x02
    26ee:	9b 81       	ldd	r25, Y+3	; 0x03
    26f0:	cc 01       	movw	r24, r24
    26f2:	a0 e0       	ldi	r26, 0x00	; 0
    26f4:	b0 e0       	ldi	r27, 0x00	; 0
    26f6:	bc 01       	movw	r22, r24
    26f8:	cd 01       	movw	r24, r26
    26fa:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	bc 01       	movw	r22, r24
    2704:	cd 01       	movw	r24, r26
    2706:	26 ef       	ldi	r18, 0xF6	; 246
    2708:	38 e2       	ldi	r19, 0x28	; 40
    270a:	4c e9       	ldi	r20, 0x9C	; 156
    270c:	50 e4       	ldi	r21, 0x40	; 64
    270e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	bc 01       	movw	r22, r24
    2718:	cd 01       	movw	r24, r26
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e2       	ldi	r20, 0x20	; 32
    2720:	51 e4       	ldi	r21, 0x41	; 65
    2722:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	ee 81       	ldd	r30, Y+6	; 0x06
    272c:	ff 81       	ldd	r31, Y+7	; 0x07
    272e:	80 83       	st	Z, r24
    2730:	91 83       	std	Z+1, r25	; 0x01
    2732:	a2 83       	std	Z+2, r26	; 0x02
    2734:	b3 83       	std	Z+3, r27	; 0x03
    2736:	06 c0       	rjmp	.+12     	; 0x2744 <THERM_enuGetTemp+0xa4>
		}
		else if(Copy_pstrID->THERM_u8PositiveChannel != NOT_CONNECTED)
    2738:	ec 81       	ldd	r30, Y+4	; 0x04
    273a:	fd 81       	ldd	r31, Y+5	; 0x05
    273c:	80 81       	ld	r24, Z
    273e:	8f 30       	cpi	r24, 0x0F	; 15
    2740:	09 f0       	breq	.+2      	; 0x2744 <THERM_enuGetTemp+0xa4>
		{
			Local_enuErrorState = ES_NOK;
    2742:	19 82       	std	Y+1, r1	; 0x01
	else
	{
		return ES_NULL_POINTER;
	}

	return Local_enuErrorState;
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	88 87       	std	Y+8, r24	; 0x08
    2748:	02 c0       	rjmp	.+4      	; 0x274e <THERM_enuGetTemp+0xae>
			Local_enuErrorState = ES_NOK;
		}
	}
	else
	{
		return ES_NULL_POINTER;
    274a:	82 e0       	ldi	r24, 0x02	; 2
    274c:	88 87       	std	Y+8, r24	; 0x08
    274e:	88 85       	ldd	r24, Y+8	; 0x08
	}

	return Local_enuErrorState;
}
    2750:	28 96       	adiw	r28, 0x08	; 8
    2752:	0f b6       	in	r0, 0x3f	; 63
    2754:	f8 94       	cli
    2756:	de bf       	out	0x3e, r29	; 62
    2758:	0f be       	out	0x3f, r0	; 63
    275a:	cd bf       	out	0x3d, r28	; 61
    275c:	cf 91       	pop	r28
    275e:	df 91       	pop	r29
    2760:	08 95       	ret

00002762 <Switch_enuInit>:
#include "Switch_private.h"
#include "Switch_config.h"
/***********************	Includes Section End	***********************/

ES_t Switch_enuInit(SW_t * Copy_pAstrSwitches)
{
    2762:	df 93       	push	r29
    2764:	cf 93       	push	r28
    2766:	00 d0       	rcall	.+0      	; 0x2768 <Switch_enuInit+0x6>
    2768:	00 d0       	rcall	.+0      	; 0x276a <Switch_enuInit+0x8>
    276a:	cd b7       	in	r28, 0x3d	; 61
    276c:	de b7       	in	r29, 0x3e	; 62
    276e:	9c 83       	std	Y+4, r25	; 0x04
    2770:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2772:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_pAstrSwitches != NULL)
    2774:	8b 81       	ldd	r24, Y+3	; 0x03
    2776:	9c 81       	ldd	r25, Y+4	; 0x04
    2778:	00 97       	sbiw	r24, 0x00	; 0
    277a:	09 f4       	brne	.+2      	; 0x277e <Switch_enuInit+0x1c>
    277c:	5d c0       	rjmp	.+186    	; 0x2838 <Switch_enuInit+0xd6>
	{
		u8 Local_u8Iterator = 0;
    277e:	19 82       	std	Y+1, r1	; 0x01

		for(Local_u8Iterator = 0; Local_u8Iterator < SW_NUM; Local_u8Iterator++)
    2780:	19 82       	std	Y+1, r1	; 0x01
    2782:	55 c0       	rjmp	.+170    	; 0x282e <Switch_enuInit+0xcc>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_pAstrSwitches[Local_u8Iterator].SW_u8PortID,
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	28 2f       	mov	r18, r24
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	c9 01       	movw	r24, r18
    278c:	88 0f       	add	r24, r24
    278e:	99 1f       	adc	r25, r25
    2790:	28 0f       	add	r18, r24
    2792:	39 1f       	adc	r19, r25
    2794:	8b 81       	ldd	r24, Y+3	; 0x03
    2796:	9c 81       	ldd	r25, Y+4	; 0x04
    2798:	fc 01       	movw	r30, r24
    279a:	e2 0f       	add	r30, r18
    279c:	f3 1f       	adc	r31, r19
    279e:	40 81       	ld	r20, Z
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	28 2f       	mov	r18, r24
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	c9 01       	movw	r24, r18
    27a8:	88 0f       	add	r24, r24
    27aa:	99 1f       	adc	r25, r25
    27ac:	28 0f       	add	r18, r24
    27ae:	39 1f       	adc	r19, r25
    27b0:	8b 81       	ldd	r24, Y+3	; 0x03
    27b2:	9c 81       	ldd	r25, Y+4	; 0x04
    27b4:	fc 01       	movw	r30, r24
    27b6:	e2 0f       	add	r30, r18
    27b8:	f3 1f       	adc	r31, r19
    27ba:	91 81       	ldd	r25, Z+1	; 0x01
    27bc:	84 2f       	mov	r24, r20
    27be:	69 2f       	mov	r22, r25
    27c0:	40 e0       	ldi	r20, 0x00	; 0
    27c2:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    27c6:	8a 83       	std	Y+2, r24	; 0x02
								   	   	   	   	   	     Copy_pAstrSwitches[Local_u8Iterator].SW_u8PinID,
														 DIO_u8INPUT);
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pAstrSwitches[Local_u8Iterator].SW_u8PortID,
    27c8:	89 81       	ldd	r24, Y+1	; 0x01
    27ca:	28 2f       	mov	r18, r24
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	c9 01       	movw	r24, r18
    27d0:	88 0f       	add	r24, r24
    27d2:	99 1f       	adc	r25, r25
    27d4:	28 0f       	add	r18, r24
    27d6:	39 1f       	adc	r19, r25
    27d8:	8b 81       	ldd	r24, Y+3	; 0x03
    27da:	9c 81       	ldd	r25, Y+4	; 0x04
    27dc:	fc 01       	movw	r30, r24
    27de:	e2 0f       	add	r30, r18
    27e0:	f3 1f       	adc	r31, r19
    27e2:	50 81       	ld	r21, Z
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	28 2f       	mov	r18, r24
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	c9 01       	movw	r24, r18
    27ec:	88 0f       	add	r24, r24
    27ee:	99 1f       	adc	r25, r25
    27f0:	28 0f       	add	r18, r24
    27f2:	39 1f       	adc	r19, r25
    27f4:	8b 81       	ldd	r24, Y+3	; 0x03
    27f6:	9c 81       	ldd	r25, Y+4	; 0x04
    27f8:	fc 01       	movw	r30, r24
    27fa:	e2 0f       	add	r30, r18
    27fc:	f3 1f       	adc	r31, r19
    27fe:	41 81       	ldd	r20, Z+1	; 0x01
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	28 2f       	mov	r18, r24
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	c9 01       	movw	r24, r18
    2808:	88 0f       	add	r24, r24
    280a:	99 1f       	adc	r25, r25
    280c:	28 0f       	add	r18, r24
    280e:	39 1f       	adc	r19, r25
    2810:	8b 81       	ldd	r24, Y+3	; 0x03
    2812:	9c 81       	ldd	r25, Y+4	; 0x04
    2814:	fc 01       	movw	r30, r24
    2816:	e2 0f       	add	r30, r18
    2818:	f3 1f       	adc	r31, r19
    281a:	92 81       	ldd	r25, Z+2	; 0x02
    281c:	85 2f       	mov	r24, r21
    281e:	64 2f       	mov	r22, r20
    2820:	49 2f       	mov	r20, r25
    2822:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    2826:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_pAstrSwitches != NULL)
	{
		u8 Local_u8Iterator = 0;

		for(Local_u8Iterator = 0; Local_u8Iterator < SW_NUM; Local_u8Iterator++)
    2828:	89 81       	ldd	r24, Y+1	; 0x01
    282a:	8f 5f       	subi	r24, 0xFF	; 255
    282c:	89 83       	std	Y+1, r24	; 0x01
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	83 30       	cpi	r24, 0x03	; 3
    2832:	08 f4       	brcc	.+2      	; 0x2836 <Switch_enuInit+0xd4>
    2834:	a7 cf       	rjmp	.-178    	; 0x2784 <Switch_enuInit+0x22>
    2836:	02 c0       	rjmp	.+4      	; 0x283c <Switch_enuInit+0xda>
		}

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2838:	82 e0       	ldi	r24, 0x02	; 2
    283a:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    283c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    283e:	0f 90       	pop	r0
    2840:	0f 90       	pop	r0
    2842:	0f 90       	pop	r0
    2844:	0f 90       	pop	r0
    2846:	cf 91       	pop	r28
    2848:	df 91       	pop	r29
    284a:	08 95       	ret

0000284c <Switch_enuGetState>:

ES_t Switch_enuGetState(SW_t * Copy_pstrSwitches, u8 * Copy_pu8SwState)
{
    284c:	df 93       	push	r29
    284e:	cf 93       	push	r28
    2850:	00 d0       	rcall	.+0      	; 0x2852 <Switch_enuGetState+0x6>
    2852:	00 d0       	rcall	.+0      	; 0x2854 <Switch_enuGetState+0x8>
    2854:	0f 92       	push	r0
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
    285a:	9b 83       	std	Y+3, r25	; 0x03
    285c:	8a 83       	std	Y+2, r24	; 0x02
    285e:	7d 83       	std	Y+5, r23	; 0x05
    2860:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    2862:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pstrSwitches != NULL && Copy_pu8SwState != NULL)
    2864:	8a 81       	ldd	r24, Y+2	; 0x02
    2866:	9b 81       	ldd	r25, Y+3	; 0x03
    2868:	00 97       	sbiw	r24, 0x00	; 0
    286a:	91 f0       	breq	.+36     	; 0x2890 <Switch_enuGetState+0x44>
    286c:	8c 81       	ldd	r24, Y+4	; 0x04
    286e:	9d 81       	ldd	r25, Y+5	; 0x05
    2870:	00 97       	sbiw	r24, 0x00	; 0
    2872:	71 f0       	breq	.+28     	; 0x2890 <Switch_enuGetState+0x44>
	{
		Local_enuErrorState = DIO_enuGetPinValue(Copy_pstrSwitches->SW_u8PortID,
    2874:	ea 81       	ldd	r30, Y+2	; 0x02
    2876:	fb 81       	ldd	r31, Y+3	; 0x03
    2878:	80 81       	ld	r24, Z
    287a:	ea 81       	ldd	r30, Y+2	; 0x02
    287c:	fb 81       	ldd	r31, Y+3	; 0x03
    287e:	91 81       	ldd	r25, Z+1	; 0x01
    2880:	2c 81       	ldd	r18, Y+4	; 0x04
    2882:	3d 81       	ldd	r19, Y+5	; 0x05
    2884:	69 2f       	mov	r22, r25
    2886:	a9 01       	movw	r20, r18
    2888:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <DIO_enuGetPinValue>
    288c:	89 83       	std	Y+1, r24	; 0x01
    288e:	02 c0       	rjmp	.+4      	; 0x2894 <Switch_enuGetState+0x48>
												 Copy_pstrSwitches->SW_u8PinID,
												 Copy_pu8SwState);
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2890:	82 e0       	ldi	r24, 0x02	; 2
    2892:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2894:	89 81       	ldd	r24, Y+1	; 0x01
}
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	0f 90       	pop	r0
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	cf 91       	pop	r28
    28a2:	df 91       	pop	r29
    28a4:	08 95       	ret

000028a6 <SSDLT_enuInit>:
extern SEG_t SSD_AstrSegConfig[SEG_NUM];
/***********************	Declarations Section End	***********************/


ES_t SSDLT_enuInit(SEG_t * Copy_pstrSegConfig)
{
    28a6:	df 93       	push	r29
    28a8:	cf 93       	push	r28
    28aa:	cd b7       	in	r28, 0x3d	; 61
    28ac:	de b7       	in	r29, 0x3e	; 62
    28ae:	2a 97       	sbiw	r28, 0x0a	; 10
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	f8 94       	cli
    28b4:	de bf       	out	0x3e, r29	; 62
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	cd bf       	out	0x3d, r28	; 61
    28ba:	99 87       	std	Y+9, r25	; 0x09
    28bc:	88 87       	std	Y+8, r24	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    28be:	1f 82       	std	Y+7, r1	; 0x07

	u8 Local_u8Iterator = 0;
    28c0:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8LastBit  = 0;
    28c2:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Check  = 0;
    28c4:	19 82       	std	Y+1, r1	; 0x01
    28c6:	1a 82       	std	Y+2, r1	; 0x02
    28c8:	1b 82       	std	Y+3, r1	; 0x03
    28ca:	1c 82       	std	Y+4, r1	; 0x04

	if(Copy_pstrSegConfig != NULL)
    28cc:	88 85       	ldd	r24, Y+8	; 0x08
    28ce:	99 85       	ldd	r25, Y+9	; 0x09
    28d0:	00 97       	sbiw	r24, 0x00	; 0
    28d2:	09 f4       	brne	.+2      	; 0x28d6 <SSDLT_enuInit+0x30>
    28d4:	35 c3       	rjmp	.+1642   	; 0x2f40 <SSDLT_enuInit+0x69a>
	{
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
    28d6:	1e 82       	std	Y+6, r1	; 0x06
    28d8:	2e c3       	rjmp	.+1628   	; 0x2f36 <SSDLT_enuInit+0x690>
		{
			Local_u32Check |= (DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8APort,
    28da:	8e 81       	ldd	r24, Y+6	; 0x06
    28dc:	48 2f       	mov	r20, r24
    28de:	50 e0       	ldi	r21, 0x00	; 0
    28e0:	ca 01       	movw	r24, r20
    28e2:	88 0f       	add	r24, r24
    28e4:	99 1f       	adc	r25, r25
    28e6:	9c 01       	movw	r18, r24
    28e8:	22 0f       	add	r18, r18
    28ea:	33 1f       	adc	r19, r19
    28ec:	22 0f       	add	r18, r18
    28ee:	33 1f       	adc	r19, r19
    28f0:	22 0f       	add	r18, r18
    28f2:	33 1f       	adc	r19, r19
    28f4:	82 0f       	add	r24, r18
    28f6:	93 1f       	adc	r25, r19
    28f8:	9c 01       	movw	r18, r24
    28fa:	24 0f       	add	r18, r20
    28fc:	35 1f       	adc	r19, r21
    28fe:	88 85       	ldd	r24, Y+8	; 0x08
    2900:	99 85       	ldd	r25, Y+9	; 0x09
    2902:	fc 01       	movw	r30, r24
    2904:	e2 0f       	add	r30, r18
    2906:	f3 1f       	adc	r31, r19
    2908:	60 81       	ld	r22, Z
    290a:	8e 81       	ldd	r24, Y+6	; 0x06
    290c:	48 2f       	mov	r20, r24
    290e:	50 e0       	ldi	r21, 0x00	; 0
    2910:	ca 01       	movw	r24, r20
    2912:	88 0f       	add	r24, r24
    2914:	99 1f       	adc	r25, r25
    2916:	9c 01       	movw	r18, r24
    2918:	22 0f       	add	r18, r18
    291a:	33 1f       	adc	r19, r19
    291c:	22 0f       	add	r18, r18
    291e:	33 1f       	adc	r19, r19
    2920:	22 0f       	add	r18, r18
    2922:	33 1f       	adc	r19, r19
    2924:	82 0f       	add	r24, r18
    2926:	93 1f       	adc	r25, r19
    2928:	9c 01       	movw	r18, r24
    292a:	24 0f       	add	r18, r20
    292c:	35 1f       	adc	r19, r21
    292e:	88 85       	ldd	r24, Y+8	; 0x08
    2930:	99 85       	ldd	r25, Y+9	; 0x09
    2932:	fc 01       	movw	r30, r24
    2934:	e2 0f       	add	r30, r18
    2936:	f3 1f       	adc	r31, r19
    2938:	91 81       	ldd	r25, Z+1	; 0x01
    293a:	86 2f       	mov	r24, r22
    293c:	69 2f       	mov	r22, r25
    293e:	41 e0       	ldi	r20, 0x01	; 1
    2940:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    2944:	28 2f       	mov	r18, r24
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	40 e0       	ldi	r20, 0x00	; 0
    294a:	50 e0       	ldi	r21, 0x00	; 0
    294c:	89 81       	ldd	r24, Y+1	; 0x01
    294e:	9a 81       	ldd	r25, Y+2	; 0x02
    2950:	ab 81       	ldd	r26, Y+3	; 0x03
    2952:	bc 81       	ldd	r27, Y+4	; 0x04
    2954:	82 2b       	or	r24, r18
    2956:	93 2b       	or	r25, r19
    2958:	a4 2b       	or	r26, r20
    295a:	b5 2b       	or	r27, r21
    295c:	89 83       	std	Y+1, r24	; 0x01
    295e:	9a 83       	std	Y+2, r25	; 0x02
    2960:	ab 83       	std	Y+3, r26	; 0x03
    2962:	bc 83       	std	Y+4, r27	; 0x04
													  Copy_pstrSegConfig[Local_u8Iterator].SEG_u8APin, DIO_u8OUTPUT) << 0);

			Local_u32Check |= (DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8BPort,
    2964:	8e 81       	ldd	r24, Y+6	; 0x06
    2966:	48 2f       	mov	r20, r24
    2968:	50 e0       	ldi	r21, 0x00	; 0
    296a:	ca 01       	movw	r24, r20
    296c:	88 0f       	add	r24, r24
    296e:	99 1f       	adc	r25, r25
    2970:	9c 01       	movw	r18, r24
    2972:	22 0f       	add	r18, r18
    2974:	33 1f       	adc	r19, r19
    2976:	22 0f       	add	r18, r18
    2978:	33 1f       	adc	r19, r19
    297a:	22 0f       	add	r18, r18
    297c:	33 1f       	adc	r19, r19
    297e:	82 0f       	add	r24, r18
    2980:	93 1f       	adc	r25, r19
    2982:	9c 01       	movw	r18, r24
    2984:	24 0f       	add	r18, r20
    2986:	35 1f       	adc	r19, r21
    2988:	88 85       	ldd	r24, Y+8	; 0x08
    298a:	99 85       	ldd	r25, Y+9	; 0x09
    298c:	fc 01       	movw	r30, r24
    298e:	e2 0f       	add	r30, r18
    2990:	f3 1f       	adc	r31, r19
    2992:	62 81       	ldd	r22, Z+2	; 0x02
    2994:	8e 81       	ldd	r24, Y+6	; 0x06
    2996:	48 2f       	mov	r20, r24
    2998:	50 e0       	ldi	r21, 0x00	; 0
    299a:	ca 01       	movw	r24, r20
    299c:	88 0f       	add	r24, r24
    299e:	99 1f       	adc	r25, r25
    29a0:	9c 01       	movw	r18, r24
    29a2:	22 0f       	add	r18, r18
    29a4:	33 1f       	adc	r19, r19
    29a6:	22 0f       	add	r18, r18
    29a8:	33 1f       	adc	r19, r19
    29aa:	22 0f       	add	r18, r18
    29ac:	33 1f       	adc	r19, r19
    29ae:	82 0f       	add	r24, r18
    29b0:	93 1f       	adc	r25, r19
    29b2:	9c 01       	movw	r18, r24
    29b4:	24 0f       	add	r18, r20
    29b6:	35 1f       	adc	r19, r21
    29b8:	88 85       	ldd	r24, Y+8	; 0x08
    29ba:	99 85       	ldd	r25, Y+9	; 0x09
    29bc:	fc 01       	movw	r30, r24
    29be:	e2 0f       	add	r30, r18
    29c0:	f3 1f       	adc	r31, r19
    29c2:	93 81       	ldd	r25, Z+3	; 0x03
    29c4:	86 2f       	mov	r24, r22
    29c6:	69 2f       	mov	r22, r25
    29c8:	41 e0       	ldi	r20, 0x01	; 1
    29ca:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    29ce:	88 2f       	mov	r24, r24
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	88 0f       	add	r24, r24
    29d4:	99 1f       	adc	r25, r25
    29d6:	88 0f       	add	r24, r24
    29d8:	99 1f       	adc	r25, r25
    29da:	88 0f       	add	r24, r24
    29dc:	99 1f       	adc	r25, r25
    29de:	9c 01       	movw	r18, r24
    29e0:	44 27       	eor	r20, r20
    29e2:	37 fd       	sbrc	r19, 7
    29e4:	40 95       	com	r20
    29e6:	54 2f       	mov	r21, r20
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
    29ea:	9a 81       	ldd	r25, Y+2	; 0x02
    29ec:	ab 81       	ldd	r26, Y+3	; 0x03
    29ee:	bc 81       	ldd	r27, Y+4	; 0x04
    29f0:	82 2b       	or	r24, r18
    29f2:	93 2b       	or	r25, r19
    29f4:	a4 2b       	or	r26, r20
    29f6:	b5 2b       	or	r27, r21
    29f8:	89 83       	std	Y+1, r24	; 0x01
    29fa:	9a 83       	std	Y+2, r25	; 0x02
    29fc:	ab 83       	std	Y+3, r26	; 0x03
    29fe:	bc 83       	std	Y+4, r27	; 0x04
													  Copy_pstrSegConfig[Local_u8Iterator].SEG_u8BPin, DIO_u8OUTPUT) << 3);

			Local_u32Check |= (DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8CPort,
    2a00:	8e 81       	ldd	r24, Y+6	; 0x06
    2a02:	48 2f       	mov	r20, r24
    2a04:	50 e0       	ldi	r21, 0x00	; 0
    2a06:	ca 01       	movw	r24, r20
    2a08:	88 0f       	add	r24, r24
    2a0a:	99 1f       	adc	r25, r25
    2a0c:	9c 01       	movw	r18, r24
    2a0e:	22 0f       	add	r18, r18
    2a10:	33 1f       	adc	r19, r19
    2a12:	22 0f       	add	r18, r18
    2a14:	33 1f       	adc	r19, r19
    2a16:	22 0f       	add	r18, r18
    2a18:	33 1f       	adc	r19, r19
    2a1a:	82 0f       	add	r24, r18
    2a1c:	93 1f       	adc	r25, r19
    2a1e:	9c 01       	movw	r18, r24
    2a20:	24 0f       	add	r18, r20
    2a22:	35 1f       	adc	r19, r21
    2a24:	88 85       	ldd	r24, Y+8	; 0x08
    2a26:	99 85       	ldd	r25, Y+9	; 0x09
    2a28:	fc 01       	movw	r30, r24
    2a2a:	e2 0f       	add	r30, r18
    2a2c:	f3 1f       	adc	r31, r19
    2a2e:	64 81       	ldd	r22, Z+4	; 0x04
    2a30:	8e 81       	ldd	r24, Y+6	; 0x06
    2a32:	48 2f       	mov	r20, r24
    2a34:	50 e0       	ldi	r21, 0x00	; 0
    2a36:	ca 01       	movw	r24, r20
    2a38:	88 0f       	add	r24, r24
    2a3a:	99 1f       	adc	r25, r25
    2a3c:	9c 01       	movw	r18, r24
    2a3e:	22 0f       	add	r18, r18
    2a40:	33 1f       	adc	r19, r19
    2a42:	22 0f       	add	r18, r18
    2a44:	33 1f       	adc	r19, r19
    2a46:	22 0f       	add	r18, r18
    2a48:	33 1f       	adc	r19, r19
    2a4a:	82 0f       	add	r24, r18
    2a4c:	93 1f       	adc	r25, r19
    2a4e:	9c 01       	movw	r18, r24
    2a50:	24 0f       	add	r18, r20
    2a52:	35 1f       	adc	r19, r21
    2a54:	88 85       	ldd	r24, Y+8	; 0x08
    2a56:	99 85       	ldd	r25, Y+9	; 0x09
    2a58:	fc 01       	movw	r30, r24
    2a5a:	e2 0f       	add	r30, r18
    2a5c:	f3 1f       	adc	r31, r19
    2a5e:	95 81       	ldd	r25, Z+5	; 0x05
    2a60:	86 2f       	mov	r24, r22
    2a62:	69 2f       	mov	r22, r25
    2a64:	41 e0       	ldi	r20, 0x01	; 1
    2a66:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    2a6a:	88 2f       	mov	r24, r24
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	00 24       	eor	r0, r0
    2a70:	96 95       	lsr	r25
    2a72:	87 95       	ror	r24
    2a74:	07 94       	ror	r0
    2a76:	96 95       	lsr	r25
    2a78:	87 95       	ror	r24
    2a7a:	07 94       	ror	r0
    2a7c:	98 2f       	mov	r25, r24
    2a7e:	80 2d       	mov	r24, r0
    2a80:	9c 01       	movw	r18, r24
    2a82:	44 27       	eor	r20, r20
    2a84:	37 fd       	sbrc	r19, 7
    2a86:	40 95       	com	r20
    2a88:	54 2f       	mov	r21, r20
    2a8a:	89 81       	ldd	r24, Y+1	; 0x01
    2a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8e:	ab 81       	ldd	r26, Y+3	; 0x03
    2a90:	bc 81       	ldd	r27, Y+4	; 0x04
    2a92:	82 2b       	or	r24, r18
    2a94:	93 2b       	or	r25, r19
    2a96:	a4 2b       	or	r26, r20
    2a98:	b5 2b       	or	r27, r21
    2a9a:	89 83       	std	Y+1, r24	; 0x01
    2a9c:	9a 83       	std	Y+2, r25	; 0x02
    2a9e:	ab 83       	std	Y+3, r26	; 0x03
    2aa0:	bc 83       	std	Y+4, r27	; 0x04
													  Copy_pstrSegConfig[Local_u8Iterator].SEG_u8CPin, DIO_u8OUTPUT) << 6);

			Local_u32Check |= (DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8DPort,
    2aa2:	8e 81       	ldd	r24, Y+6	; 0x06
    2aa4:	48 2f       	mov	r20, r24
    2aa6:	50 e0       	ldi	r21, 0x00	; 0
    2aa8:	ca 01       	movw	r24, r20
    2aaa:	88 0f       	add	r24, r24
    2aac:	99 1f       	adc	r25, r25
    2aae:	9c 01       	movw	r18, r24
    2ab0:	22 0f       	add	r18, r18
    2ab2:	33 1f       	adc	r19, r19
    2ab4:	22 0f       	add	r18, r18
    2ab6:	33 1f       	adc	r19, r19
    2ab8:	22 0f       	add	r18, r18
    2aba:	33 1f       	adc	r19, r19
    2abc:	82 0f       	add	r24, r18
    2abe:	93 1f       	adc	r25, r19
    2ac0:	9c 01       	movw	r18, r24
    2ac2:	24 0f       	add	r18, r20
    2ac4:	35 1f       	adc	r19, r21
    2ac6:	88 85       	ldd	r24, Y+8	; 0x08
    2ac8:	99 85       	ldd	r25, Y+9	; 0x09
    2aca:	fc 01       	movw	r30, r24
    2acc:	e2 0f       	add	r30, r18
    2ace:	f3 1f       	adc	r31, r19
    2ad0:	66 81       	ldd	r22, Z+6	; 0x06
    2ad2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ad4:	48 2f       	mov	r20, r24
    2ad6:	50 e0       	ldi	r21, 0x00	; 0
    2ad8:	ca 01       	movw	r24, r20
    2ada:	88 0f       	add	r24, r24
    2adc:	99 1f       	adc	r25, r25
    2ade:	9c 01       	movw	r18, r24
    2ae0:	22 0f       	add	r18, r18
    2ae2:	33 1f       	adc	r19, r19
    2ae4:	22 0f       	add	r18, r18
    2ae6:	33 1f       	adc	r19, r19
    2ae8:	22 0f       	add	r18, r18
    2aea:	33 1f       	adc	r19, r19
    2aec:	82 0f       	add	r24, r18
    2aee:	93 1f       	adc	r25, r19
    2af0:	9c 01       	movw	r18, r24
    2af2:	24 0f       	add	r18, r20
    2af4:	35 1f       	adc	r19, r21
    2af6:	88 85       	ldd	r24, Y+8	; 0x08
    2af8:	99 85       	ldd	r25, Y+9	; 0x09
    2afa:	fc 01       	movw	r30, r24
    2afc:	e2 0f       	add	r30, r18
    2afe:	f3 1f       	adc	r31, r19
    2b00:	97 81       	ldd	r25, Z+7	; 0x07
    2b02:	86 2f       	mov	r24, r22
    2b04:	69 2f       	mov	r22, r25
    2b06:	41 e0       	ldi	r20, 0x01	; 1
    2b08:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    2b0c:	88 2f       	mov	r24, r24
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	98 2f       	mov	r25, r24
    2b12:	88 27       	eor	r24, r24
    2b14:	99 0f       	add	r25, r25
    2b16:	9c 01       	movw	r18, r24
    2b18:	44 27       	eor	r20, r20
    2b1a:	37 fd       	sbrc	r19, 7
    2b1c:	40 95       	com	r20
    2b1e:	54 2f       	mov	r21, r20
    2b20:	89 81       	ldd	r24, Y+1	; 0x01
    2b22:	9a 81       	ldd	r25, Y+2	; 0x02
    2b24:	ab 81       	ldd	r26, Y+3	; 0x03
    2b26:	bc 81       	ldd	r27, Y+4	; 0x04
    2b28:	82 2b       	or	r24, r18
    2b2a:	93 2b       	or	r25, r19
    2b2c:	a4 2b       	or	r26, r20
    2b2e:	b5 2b       	or	r27, r21
    2b30:	89 83       	std	Y+1, r24	; 0x01
    2b32:	9a 83       	std	Y+2, r25	; 0x02
    2b34:	ab 83       	std	Y+3, r26	; 0x03
    2b36:	bc 83       	std	Y+4, r27	; 0x04
													  Copy_pstrSegConfig[Local_u8Iterator].SEG_u8DPin, DIO_u8OUTPUT) << 9);

			Local_u32Check |= (DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8EPort,
    2b38:	8e 81       	ldd	r24, Y+6	; 0x06
    2b3a:	48 2f       	mov	r20, r24
    2b3c:	50 e0       	ldi	r21, 0x00	; 0
    2b3e:	ca 01       	movw	r24, r20
    2b40:	88 0f       	add	r24, r24
    2b42:	99 1f       	adc	r25, r25
    2b44:	9c 01       	movw	r18, r24
    2b46:	22 0f       	add	r18, r18
    2b48:	33 1f       	adc	r19, r19
    2b4a:	22 0f       	add	r18, r18
    2b4c:	33 1f       	adc	r19, r19
    2b4e:	22 0f       	add	r18, r18
    2b50:	33 1f       	adc	r19, r19
    2b52:	82 0f       	add	r24, r18
    2b54:	93 1f       	adc	r25, r19
    2b56:	9c 01       	movw	r18, r24
    2b58:	24 0f       	add	r18, r20
    2b5a:	35 1f       	adc	r19, r21
    2b5c:	88 85       	ldd	r24, Y+8	; 0x08
    2b5e:	99 85       	ldd	r25, Y+9	; 0x09
    2b60:	fc 01       	movw	r30, r24
    2b62:	e2 0f       	add	r30, r18
    2b64:	f3 1f       	adc	r31, r19
    2b66:	60 85       	ldd	r22, Z+8	; 0x08
    2b68:	8e 81       	ldd	r24, Y+6	; 0x06
    2b6a:	48 2f       	mov	r20, r24
    2b6c:	50 e0       	ldi	r21, 0x00	; 0
    2b6e:	ca 01       	movw	r24, r20
    2b70:	88 0f       	add	r24, r24
    2b72:	99 1f       	adc	r25, r25
    2b74:	9c 01       	movw	r18, r24
    2b76:	22 0f       	add	r18, r18
    2b78:	33 1f       	adc	r19, r19
    2b7a:	22 0f       	add	r18, r18
    2b7c:	33 1f       	adc	r19, r19
    2b7e:	22 0f       	add	r18, r18
    2b80:	33 1f       	adc	r19, r19
    2b82:	82 0f       	add	r24, r18
    2b84:	93 1f       	adc	r25, r19
    2b86:	9c 01       	movw	r18, r24
    2b88:	24 0f       	add	r18, r20
    2b8a:	35 1f       	adc	r19, r21
    2b8c:	88 85       	ldd	r24, Y+8	; 0x08
    2b8e:	99 85       	ldd	r25, Y+9	; 0x09
    2b90:	fc 01       	movw	r30, r24
    2b92:	e2 0f       	add	r30, r18
    2b94:	f3 1f       	adc	r31, r19
    2b96:	91 85       	ldd	r25, Z+9	; 0x09
    2b98:	86 2f       	mov	r24, r22
    2b9a:	69 2f       	mov	r22, r25
    2b9c:	41 e0       	ldi	r20, 0x01	; 1
    2b9e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    2ba2:	88 2f       	mov	r24, r24
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	98 2f       	mov	r25, r24
    2ba8:	88 27       	eor	r24, r24
    2baa:	92 95       	swap	r25
    2bac:	90 7f       	andi	r25, 0xF0	; 240
    2bae:	9c 01       	movw	r18, r24
    2bb0:	44 27       	eor	r20, r20
    2bb2:	37 fd       	sbrc	r19, 7
    2bb4:	40 95       	com	r20
    2bb6:	54 2f       	mov	r21, r20
    2bb8:	89 81       	ldd	r24, Y+1	; 0x01
    2bba:	9a 81       	ldd	r25, Y+2	; 0x02
    2bbc:	ab 81       	ldd	r26, Y+3	; 0x03
    2bbe:	bc 81       	ldd	r27, Y+4	; 0x04
    2bc0:	82 2b       	or	r24, r18
    2bc2:	93 2b       	or	r25, r19
    2bc4:	a4 2b       	or	r26, r20
    2bc6:	b5 2b       	or	r27, r21
    2bc8:	89 83       	std	Y+1, r24	; 0x01
    2bca:	9a 83       	std	Y+2, r25	; 0x02
    2bcc:	ab 83       	std	Y+3, r26	; 0x03
    2bce:	bc 83       	std	Y+4, r27	; 0x04
													  Copy_pstrSegConfig[Local_u8Iterator].SEG_u8EPin, DIO_u8OUTPUT) << 12);

			Local_u32Check |= (((u32)DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8FPort,
    2bd0:	8e 81       	ldd	r24, Y+6	; 0x06
    2bd2:	48 2f       	mov	r20, r24
    2bd4:	50 e0       	ldi	r21, 0x00	; 0
    2bd6:	ca 01       	movw	r24, r20
    2bd8:	88 0f       	add	r24, r24
    2bda:	99 1f       	adc	r25, r25
    2bdc:	9c 01       	movw	r18, r24
    2bde:	22 0f       	add	r18, r18
    2be0:	33 1f       	adc	r19, r19
    2be2:	22 0f       	add	r18, r18
    2be4:	33 1f       	adc	r19, r19
    2be6:	22 0f       	add	r18, r18
    2be8:	33 1f       	adc	r19, r19
    2bea:	82 0f       	add	r24, r18
    2bec:	93 1f       	adc	r25, r19
    2bee:	9c 01       	movw	r18, r24
    2bf0:	24 0f       	add	r18, r20
    2bf2:	35 1f       	adc	r19, r21
    2bf4:	88 85       	ldd	r24, Y+8	; 0x08
    2bf6:	99 85       	ldd	r25, Y+9	; 0x09
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	e2 0f       	add	r30, r18
    2bfc:	f3 1f       	adc	r31, r19
    2bfe:	62 85       	ldd	r22, Z+10	; 0x0a
    2c00:	8e 81       	ldd	r24, Y+6	; 0x06
    2c02:	48 2f       	mov	r20, r24
    2c04:	50 e0       	ldi	r21, 0x00	; 0
    2c06:	ca 01       	movw	r24, r20
    2c08:	88 0f       	add	r24, r24
    2c0a:	99 1f       	adc	r25, r25
    2c0c:	9c 01       	movw	r18, r24
    2c0e:	22 0f       	add	r18, r18
    2c10:	33 1f       	adc	r19, r19
    2c12:	22 0f       	add	r18, r18
    2c14:	33 1f       	adc	r19, r19
    2c16:	22 0f       	add	r18, r18
    2c18:	33 1f       	adc	r19, r19
    2c1a:	82 0f       	add	r24, r18
    2c1c:	93 1f       	adc	r25, r19
    2c1e:	9c 01       	movw	r18, r24
    2c20:	24 0f       	add	r18, r20
    2c22:	35 1f       	adc	r19, r21
    2c24:	88 85       	ldd	r24, Y+8	; 0x08
    2c26:	99 85       	ldd	r25, Y+9	; 0x09
    2c28:	fc 01       	movw	r30, r24
    2c2a:	e2 0f       	add	r30, r18
    2c2c:	f3 1f       	adc	r31, r19
    2c2e:	93 85       	ldd	r25, Z+11	; 0x0b
    2c30:	86 2f       	mov	r24, r22
    2c32:	69 2f       	mov	r22, r25
    2c34:	41 e0       	ldi	r20, 0x01	; 1
    2c36:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    2c3a:	88 2f       	mov	r24, r24
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	a0 e0       	ldi	r26, 0x00	; 0
    2c40:	b0 e0       	ldi	r27, 0x00	; 0
    2c42:	9c 01       	movw	r18, r24
    2c44:	ad 01       	movw	r20, r26
    2c46:	01 2e       	mov	r0, r17
    2c48:	1f e0       	ldi	r17, 0x0F	; 15
    2c4a:	22 0f       	add	r18, r18
    2c4c:	33 1f       	adc	r19, r19
    2c4e:	44 1f       	adc	r20, r20
    2c50:	55 1f       	adc	r21, r21
    2c52:	1a 95       	dec	r17
    2c54:	d1 f7       	brne	.-12     	; 0x2c4a <SSDLT_enuInit+0x3a4>
    2c56:	10 2d       	mov	r17, r0
    2c58:	89 81       	ldd	r24, Y+1	; 0x01
    2c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5c:	ab 81       	ldd	r26, Y+3	; 0x03
    2c5e:	bc 81       	ldd	r27, Y+4	; 0x04
    2c60:	82 2b       	or	r24, r18
    2c62:	93 2b       	or	r25, r19
    2c64:	a4 2b       	or	r26, r20
    2c66:	b5 2b       	or	r27, r21
    2c68:	89 83       	std	Y+1, r24	; 0x01
    2c6a:	9a 83       	std	Y+2, r25	; 0x02
    2c6c:	ab 83       	std	Y+3, r26	; 0x03
    2c6e:	bc 83       	std	Y+4, r27	; 0x04
													 Copy_pstrSegConfig[Local_u8Iterator].SEG_u8FPin, DIO_u8OUTPUT)) << 15);

			Local_u32Check |= (((u32)DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8GPort,
    2c70:	8e 81       	ldd	r24, Y+6	; 0x06
    2c72:	48 2f       	mov	r20, r24
    2c74:	50 e0       	ldi	r21, 0x00	; 0
    2c76:	ca 01       	movw	r24, r20
    2c78:	88 0f       	add	r24, r24
    2c7a:	99 1f       	adc	r25, r25
    2c7c:	9c 01       	movw	r18, r24
    2c7e:	22 0f       	add	r18, r18
    2c80:	33 1f       	adc	r19, r19
    2c82:	22 0f       	add	r18, r18
    2c84:	33 1f       	adc	r19, r19
    2c86:	22 0f       	add	r18, r18
    2c88:	33 1f       	adc	r19, r19
    2c8a:	82 0f       	add	r24, r18
    2c8c:	93 1f       	adc	r25, r19
    2c8e:	9c 01       	movw	r18, r24
    2c90:	24 0f       	add	r18, r20
    2c92:	35 1f       	adc	r19, r21
    2c94:	88 85       	ldd	r24, Y+8	; 0x08
    2c96:	99 85       	ldd	r25, Y+9	; 0x09
    2c98:	fc 01       	movw	r30, r24
    2c9a:	e2 0f       	add	r30, r18
    2c9c:	f3 1f       	adc	r31, r19
    2c9e:	64 85       	ldd	r22, Z+12	; 0x0c
    2ca0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ca2:	48 2f       	mov	r20, r24
    2ca4:	50 e0       	ldi	r21, 0x00	; 0
    2ca6:	ca 01       	movw	r24, r20
    2ca8:	88 0f       	add	r24, r24
    2caa:	99 1f       	adc	r25, r25
    2cac:	9c 01       	movw	r18, r24
    2cae:	22 0f       	add	r18, r18
    2cb0:	33 1f       	adc	r19, r19
    2cb2:	22 0f       	add	r18, r18
    2cb4:	33 1f       	adc	r19, r19
    2cb6:	22 0f       	add	r18, r18
    2cb8:	33 1f       	adc	r19, r19
    2cba:	82 0f       	add	r24, r18
    2cbc:	93 1f       	adc	r25, r19
    2cbe:	9c 01       	movw	r18, r24
    2cc0:	24 0f       	add	r18, r20
    2cc2:	35 1f       	adc	r19, r21
    2cc4:	88 85       	ldd	r24, Y+8	; 0x08
    2cc6:	99 85       	ldd	r25, Y+9	; 0x09
    2cc8:	fc 01       	movw	r30, r24
    2cca:	e2 0f       	add	r30, r18
    2ccc:	f3 1f       	adc	r31, r19
    2cce:	95 85       	ldd	r25, Z+13	; 0x0d
    2cd0:	86 2f       	mov	r24, r22
    2cd2:	69 2f       	mov	r22, r25
    2cd4:	41 e0       	ldi	r20, 0x01	; 1
    2cd6:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    2cda:	88 2f       	mov	r24, r24
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	a0 e0       	ldi	r26, 0x00	; 0
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	9c 01       	movw	r18, r24
    2ce4:	ad 01       	movw	r20, r26
    2ce6:	01 2e       	mov	r0, r17
    2ce8:	12 e1       	ldi	r17, 0x12	; 18
    2cea:	22 0f       	add	r18, r18
    2cec:	33 1f       	adc	r19, r19
    2cee:	44 1f       	adc	r20, r20
    2cf0:	55 1f       	adc	r21, r21
    2cf2:	1a 95       	dec	r17
    2cf4:	d1 f7       	brne	.-12     	; 0x2cea <SSDLT_enuInit+0x444>
    2cf6:	10 2d       	mov	r17, r0
    2cf8:	89 81       	ldd	r24, Y+1	; 0x01
    2cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    2cfc:	ab 81       	ldd	r26, Y+3	; 0x03
    2cfe:	bc 81       	ldd	r27, Y+4	; 0x04
    2d00:	82 2b       	or	r24, r18
    2d02:	93 2b       	or	r25, r19
    2d04:	a4 2b       	or	r26, r20
    2d06:	b5 2b       	or	r27, r21
    2d08:	89 83       	std	Y+1, r24	; 0x01
    2d0a:	9a 83       	std	Y+2, r25	; 0x02
    2d0c:	ab 83       	std	Y+3, r26	; 0x03
    2d0e:	bc 83       	std	Y+4, r27	; 0x04
													 Copy_pstrSegConfig[Local_u8Iterator].SEG_u8GPin, DIO_u8OUTPUT)) << 18);
			Local_u8LastBit = 21;
    2d10:	85 e1       	ldi	r24, 0x15	; 21
    2d12:	8d 83       	std	Y+5, r24	; 0x05

			if(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8CMN_Port != NOT_CONNECTED ||
    2d14:	8e 81       	ldd	r24, Y+6	; 0x06
    2d16:	48 2f       	mov	r20, r24
    2d18:	50 e0       	ldi	r21, 0x00	; 0
    2d1a:	ca 01       	movw	r24, r20
    2d1c:	88 0f       	add	r24, r24
    2d1e:	99 1f       	adc	r25, r25
    2d20:	9c 01       	movw	r18, r24
    2d22:	22 0f       	add	r18, r18
    2d24:	33 1f       	adc	r19, r19
    2d26:	22 0f       	add	r18, r18
    2d28:	33 1f       	adc	r19, r19
    2d2a:	22 0f       	add	r18, r18
    2d2c:	33 1f       	adc	r19, r19
    2d2e:	82 0f       	add	r24, r18
    2d30:	93 1f       	adc	r25, r19
    2d32:	9c 01       	movw	r18, r24
    2d34:	24 0f       	add	r18, r20
    2d36:	35 1f       	adc	r19, r21
    2d38:	88 85       	ldd	r24, Y+8	; 0x08
    2d3a:	99 85       	ldd	r25, Y+9	; 0x09
    2d3c:	fc 01       	movw	r30, r24
    2d3e:	e2 0f       	add	r30, r18
    2d40:	f3 1f       	adc	r31, r19
    2d42:	86 85       	ldd	r24, Z+14	; 0x0e
    2d44:	82 30       	cpi	r24, 0x02	; 2
    2d46:	d9 f4       	brne	.+54     	; 0x2d7e <SSDLT_enuInit+0x4d8>
    2d48:	8e 81       	ldd	r24, Y+6	; 0x06
    2d4a:	48 2f       	mov	r20, r24
    2d4c:	50 e0       	ldi	r21, 0x00	; 0
    2d4e:	ca 01       	movw	r24, r20
    2d50:	88 0f       	add	r24, r24
    2d52:	99 1f       	adc	r25, r25
    2d54:	9c 01       	movw	r18, r24
    2d56:	22 0f       	add	r18, r18
    2d58:	33 1f       	adc	r19, r19
    2d5a:	22 0f       	add	r18, r18
    2d5c:	33 1f       	adc	r19, r19
    2d5e:	22 0f       	add	r18, r18
    2d60:	33 1f       	adc	r19, r19
    2d62:	82 0f       	add	r24, r18
    2d64:	93 1f       	adc	r25, r19
    2d66:	9c 01       	movw	r18, r24
    2d68:	24 0f       	add	r18, r20
    2d6a:	35 1f       	adc	r19, r21
    2d6c:	88 85       	ldd	r24, Y+8	; 0x08
    2d6e:	99 85       	ldd	r25, Y+9	; 0x09
    2d70:	fc 01       	movw	r30, r24
    2d72:	e2 0f       	add	r30, r18
    2d74:	f3 1f       	adc	r31, r19
    2d76:	87 85       	ldd	r24, Z+15	; 0x0f
    2d78:	82 30       	cpi	r24, 0x02	; 2
    2d7a:	09 f4       	brne	.+2      	; 0x2d7e <SSDLT_enuInit+0x4d8>
    2d7c:	52 c0       	rjmp	.+164    	; 0x2e22 <SSDLT_enuInit+0x57c>
			   Copy_pstrSegConfig[Local_u8Iterator].SEG_u8CMN_Pin != NOT_CONNECTED)
			{
				Local_u32Check |= (((u32)DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8CMN_Port,
    2d7e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d80:	48 2f       	mov	r20, r24
    2d82:	50 e0       	ldi	r21, 0x00	; 0
    2d84:	ca 01       	movw	r24, r20
    2d86:	88 0f       	add	r24, r24
    2d88:	99 1f       	adc	r25, r25
    2d8a:	9c 01       	movw	r18, r24
    2d8c:	22 0f       	add	r18, r18
    2d8e:	33 1f       	adc	r19, r19
    2d90:	22 0f       	add	r18, r18
    2d92:	33 1f       	adc	r19, r19
    2d94:	22 0f       	add	r18, r18
    2d96:	33 1f       	adc	r19, r19
    2d98:	82 0f       	add	r24, r18
    2d9a:	93 1f       	adc	r25, r19
    2d9c:	9c 01       	movw	r18, r24
    2d9e:	24 0f       	add	r18, r20
    2da0:	35 1f       	adc	r19, r21
    2da2:	88 85       	ldd	r24, Y+8	; 0x08
    2da4:	99 85       	ldd	r25, Y+9	; 0x09
    2da6:	fc 01       	movw	r30, r24
    2da8:	e2 0f       	add	r30, r18
    2daa:	f3 1f       	adc	r31, r19
    2dac:	66 85       	ldd	r22, Z+14	; 0x0e
    2dae:	8e 81       	ldd	r24, Y+6	; 0x06
    2db0:	48 2f       	mov	r20, r24
    2db2:	50 e0       	ldi	r21, 0x00	; 0
    2db4:	ca 01       	movw	r24, r20
    2db6:	88 0f       	add	r24, r24
    2db8:	99 1f       	adc	r25, r25
    2dba:	9c 01       	movw	r18, r24
    2dbc:	22 0f       	add	r18, r18
    2dbe:	33 1f       	adc	r19, r19
    2dc0:	22 0f       	add	r18, r18
    2dc2:	33 1f       	adc	r19, r19
    2dc4:	22 0f       	add	r18, r18
    2dc6:	33 1f       	adc	r19, r19
    2dc8:	82 0f       	add	r24, r18
    2dca:	93 1f       	adc	r25, r19
    2dcc:	9c 01       	movw	r18, r24
    2dce:	24 0f       	add	r18, r20
    2dd0:	35 1f       	adc	r19, r21
    2dd2:	88 85       	ldd	r24, Y+8	; 0x08
    2dd4:	99 85       	ldd	r25, Y+9	; 0x09
    2dd6:	fc 01       	movw	r30, r24
    2dd8:	e2 0f       	add	r30, r18
    2dda:	f3 1f       	adc	r31, r19
    2ddc:	97 85       	ldd	r25, Z+15	; 0x0f
    2dde:	86 2f       	mov	r24, r22
    2de0:	69 2f       	mov	r22, r25
    2de2:	41 e0       	ldi	r20, 0x01	; 1
    2de4:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    2de8:	28 2f       	mov	r18, r24
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	40 e0       	ldi	r20, 0x00	; 0
    2dee:	50 e0       	ldi	r21, 0x00	; 0
    2df0:	8d 81       	ldd	r24, Y+5	; 0x05
    2df2:	88 2f       	mov	r24, r24
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	04 c0       	rjmp	.+8      	; 0x2e00 <SSDLT_enuInit+0x55a>
    2df8:	22 0f       	add	r18, r18
    2dfa:	33 1f       	adc	r19, r19
    2dfc:	44 1f       	adc	r20, r20
    2dfe:	55 1f       	adc	r21, r21
    2e00:	8a 95       	dec	r24
    2e02:	d2 f7       	brpl	.-12     	; 0x2df8 <SSDLT_enuInit+0x552>
    2e04:	89 81       	ldd	r24, Y+1	; 0x01
    2e06:	9a 81       	ldd	r25, Y+2	; 0x02
    2e08:	ab 81       	ldd	r26, Y+3	; 0x03
    2e0a:	bc 81       	ldd	r27, Y+4	; 0x04
    2e0c:	82 2b       	or	r24, r18
    2e0e:	93 2b       	or	r25, r19
    2e10:	a4 2b       	or	r26, r20
    2e12:	b5 2b       	or	r27, r21
    2e14:	89 83       	std	Y+1, r24	; 0x01
    2e16:	9a 83       	std	Y+2, r25	; 0x02
    2e18:	ab 83       	std	Y+3, r26	; 0x03
    2e1a:	bc 83       	std	Y+4, r27	; 0x04
												   Copy_pstrSegConfig[Local_u8Iterator].SEG_u8CMN_Pin, DIO_u8OUTPUT) << Local_u8LastBit));
				Local_u8LastBit += 3;
    2e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1e:	8d 5f       	subi	r24, 0xFD	; 253
    2e20:	8d 83       	std	Y+5, r24	; 0x05
			}

			if(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8DOT_Port != NOT_CONNECTED ||
    2e22:	8e 81       	ldd	r24, Y+6	; 0x06
    2e24:	48 2f       	mov	r20, r24
    2e26:	50 e0       	ldi	r21, 0x00	; 0
    2e28:	ca 01       	movw	r24, r20
    2e2a:	88 0f       	add	r24, r24
    2e2c:	99 1f       	adc	r25, r25
    2e2e:	9c 01       	movw	r18, r24
    2e30:	22 0f       	add	r18, r18
    2e32:	33 1f       	adc	r19, r19
    2e34:	22 0f       	add	r18, r18
    2e36:	33 1f       	adc	r19, r19
    2e38:	22 0f       	add	r18, r18
    2e3a:	33 1f       	adc	r19, r19
    2e3c:	82 0f       	add	r24, r18
    2e3e:	93 1f       	adc	r25, r19
    2e40:	9c 01       	movw	r18, r24
    2e42:	24 0f       	add	r18, r20
    2e44:	35 1f       	adc	r19, r21
    2e46:	88 85       	ldd	r24, Y+8	; 0x08
    2e48:	99 85       	ldd	r25, Y+9	; 0x09
    2e4a:	fc 01       	movw	r30, r24
    2e4c:	e2 0f       	add	r30, r18
    2e4e:	f3 1f       	adc	r31, r19
    2e50:	80 89       	ldd	r24, Z+16	; 0x10
    2e52:	82 30       	cpi	r24, 0x02	; 2
    2e54:	d9 f4       	brne	.+54     	; 0x2e8c <SSDLT_enuInit+0x5e6>
    2e56:	8e 81       	ldd	r24, Y+6	; 0x06
    2e58:	48 2f       	mov	r20, r24
    2e5a:	50 e0       	ldi	r21, 0x00	; 0
    2e5c:	ca 01       	movw	r24, r20
    2e5e:	88 0f       	add	r24, r24
    2e60:	99 1f       	adc	r25, r25
    2e62:	9c 01       	movw	r18, r24
    2e64:	22 0f       	add	r18, r18
    2e66:	33 1f       	adc	r19, r19
    2e68:	22 0f       	add	r18, r18
    2e6a:	33 1f       	adc	r19, r19
    2e6c:	22 0f       	add	r18, r18
    2e6e:	33 1f       	adc	r19, r19
    2e70:	82 0f       	add	r24, r18
    2e72:	93 1f       	adc	r25, r19
    2e74:	9c 01       	movw	r18, r24
    2e76:	24 0f       	add	r18, r20
    2e78:	35 1f       	adc	r19, r21
    2e7a:	88 85       	ldd	r24, Y+8	; 0x08
    2e7c:	99 85       	ldd	r25, Y+9	; 0x09
    2e7e:	fc 01       	movw	r30, r24
    2e80:	e2 0f       	add	r30, r18
    2e82:	f3 1f       	adc	r31, r19
    2e84:	81 89       	ldd	r24, Z+17	; 0x11
    2e86:	82 30       	cpi	r24, 0x02	; 2
    2e88:	09 f4       	brne	.+2      	; 0x2e8c <SSDLT_enuInit+0x5e6>
    2e8a:	52 c0       	rjmp	.+164    	; 0x2f30 <SSDLT_enuInit+0x68a>
			   Copy_pstrSegConfig[Local_u8Iterator].SEG_u8DOT_Pin != NOT_CONNECTED)
			{
				Local_u32Check |= (((u32)DIO_enuSetPinDirection(Copy_pstrSegConfig[Local_u8Iterator].SEG_u8DOT_Port,
    2e8c:	8e 81       	ldd	r24, Y+6	; 0x06
    2e8e:	48 2f       	mov	r20, r24
    2e90:	50 e0       	ldi	r21, 0x00	; 0
    2e92:	ca 01       	movw	r24, r20
    2e94:	88 0f       	add	r24, r24
    2e96:	99 1f       	adc	r25, r25
    2e98:	9c 01       	movw	r18, r24
    2e9a:	22 0f       	add	r18, r18
    2e9c:	33 1f       	adc	r19, r19
    2e9e:	22 0f       	add	r18, r18
    2ea0:	33 1f       	adc	r19, r19
    2ea2:	22 0f       	add	r18, r18
    2ea4:	33 1f       	adc	r19, r19
    2ea6:	82 0f       	add	r24, r18
    2ea8:	93 1f       	adc	r25, r19
    2eaa:	9c 01       	movw	r18, r24
    2eac:	24 0f       	add	r18, r20
    2eae:	35 1f       	adc	r19, r21
    2eb0:	88 85       	ldd	r24, Y+8	; 0x08
    2eb2:	99 85       	ldd	r25, Y+9	; 0x09
    2eb4:	fc 01       	movw	r30, r24
    2eb6:	e2 0f       	add	r30, r18
    2eb8:	f3 1f       	adc	r31, r19
    2eba:	60 89       	ldd	r22, Z+16	; 0x10
    2ebc:	8e 81       	ldd	r24, Y+6	; 0x06
    2ebe:	48 2f       	mov	r20, r24
    2ec0:	50 e0       	ldi	r21, 0x00	; 0
    2ec2:	ca 01       	movw	r24, r20
    2ec4:	88 0f       	add	r24, r24
    2ec6:	99 1f       	adc	r25, r25
    2ec8:	9c 01       	movw	r18, r24
    2eca:	22 0f       	add	r18, r18
    2ecc:	33 1f       	adc	r19, r19
    2ece:	22 0f       	add	r18, r18
    2ed0:	33 1f       	adc	r19, r19
    2ed2:	22 0f       	add	r18, r18
    2ed4:	33 1f       	adc	r19, r19
    2ed6:	82 0f       	add	r24, r18
    2ed8:	93 1f       	adc	r25, r19
    2eda:	9c 01       	movw	r18, r24
    2edc:	24 0f       	add	r18, r20
    2ede:	35 1f       	adc	r19, r21
    2ee0:	88 85       	ldd	r24, Y+8	; 0x08
    2ee2:	99 85       	ldd	r25, Y+9	; 0x09
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	e2 0f       	add	r30, r18
    2ee8:	f3 1f       	adc	r31, r19
    2eea:	91 89       	ldd	r25, Z+17	; 0x11
    2eec:	86 2f       	mov	r24, r22
    2eee:	69 2f       	mov	r22, r25
    2ef0:	41 e0       	ldi	r20, 0x01	; 1
    2ef2:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    2ef6:	28 2f       	mov	r18, r24
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	40 e0       	ldi	r20, 0x00	; 0
    2efc:	50 e0       	ldi	r21, 0x00	; 0
    2efe:	8d 81       	ldd	r24, Y+5	; 0x05
    2f00:	88 2f       	mov	r24, r24
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	04 c0       	rjmp	.+8      	; 0x2f0e <SSDLT_enuInit+0x668>
    2f06:	22 0f       	add	r18, r18
    2f08:	33 1f       	adc	r19, r19
    2f0a:	44 1f       	adc	r20, r20
    2f0c:	55 1f       	adc	r21, r21
    2f0e:	8a 95       	dec	r24
    2f10:	d2 f7       	brpl	.-12     	; 0x2f06 <SSDLT_enuInit+0x660>
    2f12:	89 81       	ldd	r24, Y+1	; 0x01
    2f14:	9a 81       	ldd	r25, Y+2	; 0x02
    2f16:	ab 81       	ldd	r26, Y+3	; 0x03
    2f18:	bc 81       	ldd	r27, Y+4	; 0x04
    2f1a:	82 2b       	or	r24, r18
    2f1c:	93 2b       	or	r25, r19
    2f1e:	a4 2b       	or	r26, r20
    2f20:	b5 2b       	or	r27, r21
    2f22:	89 83       	std	Y+1, r24	; 0x01
    2f24:	9a 83       	std	Y+2, r25	; 0x02
    2f26:	ab 83       	std	Y+3, r26	; 0x03
    2f28:	bc 83       	std	Y+4, r27	; 0x04
												   Copy_pstrSegConfig[Local_u8Iterator].SEG_u8DOT_Pin, DIO_u8OUTPUT) << Local_u8LastBit));
				Local_u8LastBit += 3;
    2f2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2c:	8d 5f       	subi	r24, 0xFD	; 253
    2f2e:	8d 83       	std	Y+5, r24	; 0x05
	u8 Local_u8LastBit  = 0;
	u32 Local_u32Check  = 0;

	if(Copy_pstrSegConfig != NULL)
	{
		for(Local_u8Iterator = 0; Local_u8Iterator < SEG_NUM; Local_u8Iterator++)
    2f30:	8e 81       	ldd	r24, Y+6	; 0x06
    2f32:	8f 5f       	subi	r24, 0xFF	; 255
    2f34:	8e 83       	std	Y+6, r24	; 0x06
    2f36:	8e 81       	ldd	r24, Y+6	; 0x06
    2f38:	82 30       	cpi	r24, 0x02	; 2
    2f3a:	08 f4       	brcc	.+2      	; 0x2f3e <SSDLT_enuInit+0x698>
    2f3c:	ce cc       	rjmp	.-1636   	; 0x28da <SSDLT_enuInit+0x34>
    2f3e:	02 c0       	rjmp	.+4      	; 0x2f44 <SSDLT_enuInit+0x69e>

		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2f40:	82 e0       	ldi	r24, 0x02	; 2
    2f42:	8f 83       	std	Y+7, r24	; 0x07
	}


	for(Local_u8Iterator = 0; Local_u8Iterator < Local_u8LastBit; Local_u8Iterator += 3)
    2f44:	1e 82       	std	Y+6, r1	; 0x06
    2f46:	1e c0       	rjmp	.+60     	; 0x2f84 <SSDLT_enuInit+0x6de>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
    2f48:	8e 81       	ldd	r24, Y+6	; 0x06
    2f4a:	28 2f       	mov	r18, r24
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	89 81       	ldd	r24, Y+1	; 0x01
    2f50:	9a 81       	ldd	r25, Y+2	; 0x02
    2f52:	ab 81       	ldd	r26, Y+3	; 0x03
    2f54:	bc 81       	ldd	r27, Y+4	; 0x04
    2f56:	02 2e       	mov	r0, r18
    2f58:	04 c0       	rjmp	.+8      	; 0x2f62 <SSDLT_enuInit+0x6bc>
    2f5a:	b6 95       	lsr	r27
    2f5c:	a7 95       	ror	r26
    2f5e:	97 95       	ror	r25
    2f60:	87 95       	ror	r24
    2f62:	0a 94       	dec	r0
    2f64:	d2 f7       	brpl	.-12     	; 0x2f5a <SSDLT_enuInit+0x6b4>
    2f66:	87 70       	andi	r24, 0x07	; 7
    2f68:	90 70       	andi	r25, 0x00	; 0
    2f6a:	a0 70       	andi	r26, 0x00	; 0
    2f6c:	b0 70       	andi	r27, 0x00	; 0
    2f6e:	81 30       	cpi	r24, 0x01	; 1
    2f70:	91 05       	cpc	r25, r1
    2f72:	a1 05       	cpc	r26, r1
    2f74:	b1 05       	cpc	r27, r1
    2f76:	19 f0       	breq	.+6      	; 0x2f7e <SSDLT_enuInit+0x6d8>
		{
			return Local_enuErrorState;
    2f78:	8f 81       	ldd	r24, Y+7	; 0x07
    2f7a:	8a 87       	std	Y+10, r24	; 0x0a
    2f7c:	0b c0       	rjmp	.+22     	; 0x2f94 <SSDLT_enuInit+0x6ee>
	{
		Local_enuErrorState = ES_NULL_POINTER;
	}


	for(Local_u8Iterator = 0; Local_u8Iterator < Local_u8LastBit; Local_u8Iterator += 3)
    2f7e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f80:	8d 5f       	subi	r24, 0xFD	; 253
    2f82:	8e 83       	std	Y+6, r24	; 0x06
    2f84:	9e 81       	ldd	r25, Y+6	; 0x06
    2f86:	8d 81       	ldd	r24, Y+5	; 0x05
    2f88:	98 17       	cp	r25, r24
    2f8a:	f0 f2       	brcs	.-68     	; 0x2f48 <SSDLT_enuInit+0x6a2>
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
		{
			return Local_enuErrorState;
		}
	}
	Local_enuErrorState = ES_OK;
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	8f 83       	std	Y+7, r24	; 0x07

	return Local_enuErrorState;
    2f90:	8f 81       	ldd	r24, Y+7	; 0x07
    2f92:	8a 87       	std	Y+10, r24	; 0x0a
    2f94:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    2f96:	2a 96       	adiw	r28, 0x0a	; 10
    2f98:	0f b6       	in	r0, 0x3f	; 63
    2f9a:	f8 94       	cli
    2f9c:	de bf       	out	0x3e, r29	; 62
    2f9e:	0f be       	out	0x3f, r0	; 63
    2fa0:	cd bf       	out	0x3d, r28	; 61
    2fa2:	cf 91       	pop	r28
    2fa4:	df 91       	pop	r29
    2fa6:	08 95       	ret

00002fa8 <SSDLT_enuDisplayNum>:

ES_t SSDLT_enuDisplayNum(u8 Copy_u8SegID, u8 Copy_u8Number)
{
    2fa8:	df 93       	push	r29
    2faa:	cf 93       	push	r28
    2fac:	cd b7       	in	r28, 0x3d	; 61
    2fae:	de b7       	in	r29, 0x3e	; 62
    2fb0:	6e 97       	sbiw	r28, 0x1e	; 30
    2fb2:	0f b6       	in	r0, 0x3f	; 63
    2fb4:	f8 94       	cli
    2fb6:	de bf       	out	0x3e, r29	; 62
    2fb8:	0f be       	out	0x3f, r0	; 63
    2fba:	cd bf       	out	0x3d, r28	; 61
    2fbc:	8f 83       	std	Y+7, r24	; 0x07
    2fbe:	68 87       	std	Y+8, r22	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    2fc0:	1e 82       	std	Y+6, r1	; 0x06

	u8 Local_u8Iterator = 0;
    2fc2:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Check = 0;
    2fc4:	19 82       	std	Y+1, r1	; 0x01
    2fc6:	1a 82       	std	Y+2, r1	; 0x02
    2fc8:	1b 82       	std	Y+3, r1	; 0x03
    2fca:	1c 82       	std	Y+4, r1	; 0x04

	if(Copy_u8Number < 10 && Copy_u8SegID < SEG_NUM)
    2fcc:	88 85       	ldd	r24, Y+8	; 0x08
    2fce:	8a 30       	cpi	r24, 0x0A	; 10
    2fd0:	08 f0       	brcs	.+2      	; 0x2fd4 <SSDLT_enuDisplayNum+0x2c>
    2fd2:	f6 c4       	rjmp	.+2540   	; 0x39c0 <SSDLT_enuDisplayNum+0xa18>
    2fd4:	8f 81       	ldd	r24, Y+7	; 0x07
    2fd6:	82 30       	cpi	r24, 0x02	; 2
    2fd8:	08 f0       	brcs	.+2      	; 0x2fdc <SSDLT_enuDisplayNum+0x34>
    2fda:	f2 c4       	rjmp	.+2532   	; 0x39c0 <SSDLT_enuDisplayNum+0xa18>
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    2fdc:	8f 81       	ldd	r24, Y+7	; 0x07
    2fde:	48 2f       	mov	r20, r24
    2fe0:	50 e0       	ldi	r21, 0x00	; 0
    2fe2:	ca 01       	movw	r24, r20
    2fe4:	88 0f       	add	r24, r24
    2fe6:	99 1f       	adc	r25, r25
    2fe8:	9c 01       	movw	r18, r24
    2fea:	22 0f       	add	r18, r18
    2fec:	33 1f       	adc	r19, r19
    2fee:	22 0f       	add	r18, r18
    2ff0:	33 1f       	adc	r19, r19
    2ff2:	22 0f       	add	r18, r18
    2ff4:	33 1f       	adc	r19, r19
    2ff6:	82 0f       	add	r24, r18
    2ff8:	93 1f       	adc	r25, r19
    2ffa:	84 0f       	add	r24, r20
    2ffc:	95 1f       	adc	r25, r21
    2ffe:	fc 01       	movw	r30, r24
    3000:	e8 56       	subi	r30, 0x68	; 104
    3002:	fe 4f       	sbci	r31, 0xFE	; 254
    3004:	80 81       	ld	r24, Z
    3006:	81 30       	cpi	r24, 0x01	; 1
    3008:	09 f0       	breq	.+2      	; 0x300c <SSDLT_enuDisplayNum+0x64>
    300a:	40 c2       	rjmp	.+1152   	; 0x348c <SSDLT_enuDisplayNum+0x4e4>
		{
			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APort,
    300c:	8f 81       	ldd	r24, Y+7	; 0x07
    300e:	48 2f       	mov	r20, r24
    3010:	50 e0       	ldi	r21, 0x00	; 0
    3012:	ca 01       	movw	r24, r20
    3014:	88 0f       	add	r24, r24
    3016:	99 1f       	adc	r25, r25
    3018:	9c 01       	movw	r18, r24
    301a:	22 0f       	add	r18, r18
    301c:	33 1f       	adc	r19, r19
    301e:	22 0f       	add	r18, r18
    3020:	33 1f       	adc	r19, r19
    3022:	22 0f       	add	r18, r18
    3024:	33 1f       	adc	r19, r19
    3026:	82 0f       	add	r24, r18
    3028:	93 1f       	adc	r25, r19
    302a:	84 0f       	add	r24, r20
    302c:	95 1f       	adc	r25, r21
    302e:	fc 01       	movw	r30, r24
    3030:	ea 57       	subi	r30, 0x7A	; 122
    3032:	fe 4f       	sbci	r31, 0xFE	; 254
    3034:	60 81       	ld	r22, Z
    3036:	8f 81       	ldd	r24, Y+7	; 0x07
    3038:	48 2f       	mov	r20, r24
    303a:	50 e0       	ldi	r21, 0x00	; 0
    303c:	ca 01       	movw	r24, r20
    303e:	88 0f       	add	r24, r24
    3040:	99 1f       	adc	r25, r25
    3042:	9c 01       	movw	r18, r24
    3044:	22 0f       	add	r18, r18
    3046:	33 1f       	adc	r19, r19
    3048:	22 0f       	add	r18, r18
    304a:	33 1f       	adc	r19, r19
    304c:	22 0f       	add	r18, r18
    304e:	33 1f       	adc	r19, r19
    3050:	82 0f       	add	r24, r18
    3052:	93 1f       	adc	r25, r19
    3054:	84 0f       	add	r24, r20
    3056:	95 1f       	adc	r25, r21
    3058:	fc 01       	movw	r30, r24
    305a:	e9 57       	subi	r30, 0x79	; 121
    305c:	fe 4f       	sbci	r31, 0xFE	; 254
    305e:	20 81       	ld	r18, Z
    3060:	88 85       	ldd	r24, Y+8	; 0x08
    3062:	88 2f       	mov	r24, r24
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	fc 01       	movw	r30, r24
    3068:	e4 55       	subi	r30, 0x54	; 84
    306a:	fe 4f       	sbci	r31, 0xFE	; 254
    306c:	80 81       	ld	r24, Z
    306e:	98 2f       	mov	r25, r24
    3070:	91 70       	andi	r25, 0x01	; 1
    3072:	86 2f       	mov	r24, r22
    3074:	62 2f       	mov	r22, r18
    3076:	49 2f       	mov	r20, r25
    3078:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    307c:	28 2f       	mov	r18, r24
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	40 e0       	ldi	r20, 0x00	; 0
    3082:	50 e0       	ldi	r21, 0x00	; 0
    3084:	89 81       	ldd	r24, Y+1	; 0x01
    3086:	9a 81       	ldd	r25, Y+2	; 0x02
    3088:	ab 81       	ldd	r26, Y+3	; 0x03
    308a:	bc 81       	ldd	r27, Y+4	; 0x04
    308c:	82 2b       	or	r24, r18
    308e:	93 2b       	or	r25, r19
    3090:	a4 2b       	or	r26, r20
    3092:	b5 2b       	or	r27, r21
    3094:	89 83       	std	Y+1, r24	; 0x01
    3096:	9a 83       	std	Y+2, r25	; 0x02
    3098:	ab 83       	std	Y+3, r26	; 0x03
    309a:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	      SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APin,
											   	  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>0) & 1)) << 0);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPort,
    309c:	8f 81       	ldd	r24, Y+7	; 0x07
    309e:	48 2f       	mov	r20, r24
    30a0:	50 e0       	ldi	r21, 0x00	; 0
    30a2:	ca 01       	movw	r24, r20
    30a4:	88 0f       	add	r24, r24
    30a6:	99 1f       	adc	r25, r25
    30a8:	9c 01       	movw	r18, r24
    30aa:	22 0f       	add	r18, r18
    30ac:	33 1f       	adc	r19, r19
    30ae:	22 0f       	add	r18, r18
    30b0:	33 1f       	adc	r19, r19
    30b2:	22 0f       	add	r18, r18
    30b4:	33 1f       	adc	r19, r19
    30b6:	82 0f       	add	r24, r18
    30b8:	93 1f       	adc	r25, r19
    30ba:	84 0f       	add	r24, r20
    30bc:	95 1f       	adc	r25, r21
    30be:	fc 01       	movw	r30, r24
    30c0:	e8 57       	subi	r30, 0x78	; 120
    30c2:	fe 4f       	sbci	r31, 0xFE	; 254
    30c4:	60 81       	ld	r22, Z
    30c6:	8f 81       	ldd	r24, Y+7	; 0x07
    30c8:	48 2f       	mov	r20, r24
    30ca:	50 e0       	ldi	r21, 0x00	; 0
    30cc:	ca 01       	movw	r24, r20
    30ce:	88 0f       	add	r24, r24
    30d0:	99 1f       	adc	r25, r25
    30d2:	9c 01       	movw	r18, r24
    30d4:	22 0f       	add	r18, r18
    30d6:	33 1f       	adc	r19, r19
    30d8:	22 0f       	add	r18, r18
    30da:	33 1f       	adc	r19, r19
    30dc:	22 0f       	add	r18, r18
    30de:	33 1f       	adc	r19, r19
    30e0:	82 0f       	add	r24, r18
    30e2:	93 1f       	adc	r25, r19
    30e4:	84 0f       	add	r24, r20
    30e6:	95 1f       	adc	r25, r21
    30e8:	fc 01       	movw	r30, r24
    30ea:	e7 57       	subi	r30, 0x77	; 119
    30ec:	fe 4f       	sbci	r31, 0xFE	; 254
    30ee:	20 81       	ld	r18, Z
    30f0:	88 85       	ldd	r24, Y+8	; 0x08
    30f2:	88 2f       	mov	r24, r24
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	fc 01       	movw	r30, r24
    30f8:	e4 55       	subi	r30, 0x54	; 84
    30fa:	fe 4f       	sbci	r31, 0xFE	; 254
    30fc:	80 81       	ld	r24, Z
    30fe:	86 95       	lsr	r24
    3100:	98 2f       	mov	r25, r24
    3102:	91 70       	andi	r25, 0x01	; 1
    3104:	86 2f       	mov	r24, r22
    3106:	62 2f       	mov	r22, r18
    3108:	49 2f       	mov	r20, r25
    310a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    310e:	88 2f       	mov	r24, r24
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	88 0f       	add	r24, r24
    3114:	99 1f       	adc	r25, r25
    3116:	88 0f       	add	r24, r24
    3118:	99 1f       	adc	r25, r25
    311a:	88 0f       	add	r24, r24
    311c:	99 1f       	adc	r25, r25
    311e:	9c 01       	movw	r18, r24
    3120:	44 27       	eor	r20, r20
    3122:	37 fd       	sbrc	r19, 7
    3124:	40 95       	com	r20
    3126:	54 2f       	mov	r21, r20
    3128:	89 81       	ldd	r24, Y+1	; 0x01
    312a:	9a 81       	ldd	r25, Y+2	; 0x02
    312c:	ab 81       	ldd	r26, Y+3	; 0x03
    312e:	bc 81       	ldd	r27, Y+4	; 0x04
    3130:	82 2b       	or	r24, r18
    3132:	93 2b       	or	r25, r19
    3134:	a4 2b       	or	r26, r20
    3136:	b5 2b       	or	r27, r21
    3138:	89 83       	std	Y+1, r24	; 0x01
    313a:	9a 83       	std	Y+2, r25	; 0x02
    313c:	ab 83       	std	Y+3, r26	; 0x03
    313e:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPin,
												  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>1) & 1)) << 3);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPort,
    3140:	8f 81       	ldd	r24, Y+7	; 0x07
    3142:	48 2f       	mov	r20, r24
    3144:	50 e0       	ldi	r21, 0x00	; 0
    3146:	ca 01       	movw	r24, r20
    3148:	88 0f       	add	r24, r24
    314a:	99 1f       	adc	r25, r25
    314c:	9c 01       	movw	r18, r24
    314e:	22 0f       	add	r18, r18
    3150:	33 1f       	adc	r19, r19
    3152:	22 0f       	add	r18, r18
    3154:	33 1f       	adc	r19, r19
    3156:	22 0f       	add	r18, r18
    3158:	33 1f       	adc	r19, r19
    315a:	82 0f       	add	r24, r18
    315c:	93 1f       	adc	r25, r19
    315e:	84 0f       	add	r24, r20
    3160:	95 1f       	adc	r25, r21
    3162:	fc 01       	movw	r30, r24
    3164:	e6 57       	subi	r30, 0x76	; 118
    3166:	fe 4f       	sbci	r31, 0xFE	; 254
    3168:	60 81       	ld	r22, Z
    316a:	8f 81       	ldd	r24, Y+7	; 0x07
    316c:	48 2f       	mov	r20, r24
    316e:	50 e0       	ldi	r21, 0x00	; 0
    3170:	ca 01       	movw	r24, r20
    3172:	88 0f       	add	r24, r24
    3174:	99 1f       	adc	r25, r25
    3176:	9c 01       	movw	r18, r24
    3178:	22 0f       	add	r18, r18
    317a:	33 1f       	adc	r19, r19
    317c:	22 0f       	add	r18, r18
    317e:	33 1f       	adc	r19, r19
    3180:	22 0f       	add	r18, r18
    3182:	33 1f       	adc	r19, r19
    3184:	82 0f       	add	r24, r18
    3186:	93 1f       	adc	r25, r19
    3188:	84 0f       	add	r24, r20
    318a:	95 1f       	adc	r25, r21
    318c:	fc 01       	movw	r30, r24
    318e:	e5 57       	subi	r30, 0x75	; 117
    3190:	fe 4f       	sbci	r31, 0xFE	; 254
    3192:	20 81       	ld	r18, Z
    3194:	88 85       	ldd	r24, Y+8	; 0x08
    3196:	88 2f       	mov	r24, r24
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	fc 01       	movw	r30, r24
    319c:	e4 55       	subi	r30, 0x54	; 84
    319e:	fe 4f       	sbci	r31, 0xFE	; 254
    31a0:	80 81       	ld	r24, Z
    31a2:	86 95       	lsr	r24
    31a4:	86 95       	lsr	r24
    31a6:	98 2f       	mov	r25, r24
    31a8:	91 70       	andi	r25, 0x01	; 1
    31aa:	86 2f       	mov	r24, r22
    31ac:	62 2f       	mov	r22, r18
    31ae:	49 2f       	mov	r20, r25
    31b0:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    31b4:	88 2f       	mov	r24, r24
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	00 24       	eor	r0, r0
    31ba:	96 95       	lsr	r25
    31bc:	87 95       	ror	r24
    31be:	07 94       	ror	r0
    31c0:	96 95       	lsr	r25
    31c2:	87 95       	ror	r24
    31c4:	07 94       	ror	r0
    31c6:	98 2f       	mov	r25, r24
    31c8:	80 2d       	mov	r24, r0
    31ca:	9c 01       	movw	r18, r24
    31cc:	44 27       	eor	r20, r20
    31ce:	37 fd       	sbrc	r19, 7
    31d0:	40 95       	com	r20
    31d2:	54 2f       	mov	r21, r20
    31d4:	89 81       	ldd	r24, Y+1	; 0x01
    31d6:	9a 81       	ldd	r25, Y+2	; 0x02
    31d8:	ab 81       	ldd	r26, Y+3	; 0x03
    31da:	bc 81       	ldd	r27, Y+4	; 0x04
    31dc:	82 2b       	or	r24, r18
    31de:	93 2b       	or	r25, r19
    31e0:	a4 2b       	or	r26, r20
    31e2:	b5 2b       	or	r27, r21
    31e4:	89 83       	std	Y+1, r24	; 0x01
    31e6:	9a 83       	std	Y+2, r25	; 0x02
    31e8:	ab 83       	std	Y+3, r26	; 0x03
    31ea:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPin,
												  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>2) & 1)) << 6);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPort,
    31ec:	8f 81       	ldd	r24, Y+7	; 0x07
    31ee:	48 2f       	mov	r20, r24
    31f0:	50 e0       	ldi	r21, 0x00	; 0
    31f2:	ca 01       	movw	r24, r20
    31f4:	88 0f       	add	r24, r24
    31f6:	99 1f       	adc	r25, r25
    31f8:	9c 01       	movw	r18, r24
    31fa:	22 0f       	add	r18, r18
    31fc:	33 1f       	adc	r19, r19
    31fe:	22 0f       	add	r18, r18
    3200:	33 1f       	adc	r19, r19
    3202:	22 0f       	add	r18, r18
    3204:	33 1f       	adc	r19, r19
    3206:	82 0f       	add	r24, r18
    3208:	93 1f       	adc	r25, r19
    320a:	84 0f       	add	r24, r20
    320c:	95 1f       	adc	r25, r21
    320e:	fc 01       	movw	r30, r24
    3210:	e4 57       	subi	r30, 0x74	; 116
    3212:	fe 4f       	sbci	r31, 0xFE	; 254
    3214:	60 81       	ld	r22, Z
    3216:	8f 81       	ldd	r24, Y+7	; 0x07
    3218:	48 2f       	mov	r20, r24
    321a:	50 e0       	ldi	r21, 0x00	; 0
    321c:	ca 01       	movw	r24, r20
    321e:	88 0f       	add	r24, r24
    3220:	99 1f       	adc	r25, r25
    3222:	9c 01       	movw	r18, r24
    3224:	22 0f       	add	r18, r18
    3226:	33 1f       	adc	r19, r19
    3228:	22 0f       	add	r18, r18
    322a:	33 1f       	adc	r19, r19
    322c:	22 0f       	add	r18, r18
    322e:	33 1f       	adc	r19, r19
    3230:	82 0f       	add	r24, r18
    3232:	93 1f       	adc	r25, r19
    3234:	84 0f       	add	r24, r20
    3236:	95 1f       	adc	r25, r21
    3238:	fc 01       	movw	r30, r24
    323a:	e3 57       	subi	r30, 0x73	; 115
    323c:	fe 4f       	sbci	r31, 0xFE	; 254
    323e:	20 81       	ld	r18, Z
    3240:	88 85       	ldd	r24, Y+8	; 0x08
    3242:	88 2f       	mov	r24, r24
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	fc 01       	movw	r30, r24
    3248:	e4 55       	subi	r30, 0x54	; 84
    324a:	fe 4f       	sbci	r31, 0xFE	; 254
    324c:	80 81       	ld	r24, Z
    324e:	86 95       	lsr	r24
    3250:	86 95       	lsr	r24
    3252:	86 95       	lsr	r24
    3254:	98 2f       	mov	r25, r24
    3256:	91 70       	andi	r25, 0x01	; 1
    3258:	86 2f       	mov	r24, r22
    325a:	62 2f       	mov	r22, r18
    325c:	49 2f       	mov	r20, r25
    325e:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    3262:	88 2f       	mov	r24, r24
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	98 2f       	mov	r25, r24
    3268:	88 27       	eor	r24, r24
    326a:	99 0f       	add	r25, r25
    326c:	9c 01       	movw	r18, r24
    326e:	44 27       	eor	r20, r20
    3270:	37 fd       	sbrc	r19, 7
    3272:	40 95       	com	r20
    3274:	54 2f       	mov	r21, r20
    3276:	89 81       	ldd	r24, Y+1	; 0x01
    3278:	9a 81       	ldd	r25, Y+2	; 0x02
    327a:	ab 81       	ldd	r26, Y+3	; 0x03
    327c:	bc 81       	ldd	r27, Y+4	; 0x04
    327e:	82 2b       	or	r24, r18
    3280:	93 2b       	or	r25, r19
    3282:	a4 2b       	or	r26, r20
    3284:	b5 2b       	or	r27, r21
    3286:	89 83       	std	Y+1, r24	; 0x01
    3288:	9a 83       	std	Y+2, r25	; 0x02
    328a:	ab 83       	std	Y+3, r26	; 0x03
    328c:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPin,
												  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>3) & 1)) << 9) ;

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPort,
    328e:	8f 81       	ldd	r24, Y+7	; 0x07
    3290:	48 2f       	mov	r20, r24
    3292:	50 e0       	ldi	r21, 0x00	; 0
    3294:	ca 01       	movw	r24, r20
    3296:	88 0f       	add	r24, r24
    3298:	99 1f       	adc	r25, r25
    329a:	9c 01       	movw	r18, r24
    329c:	22 0f       	add	r18, r18
    329e:	33 1f       	adc	r19, r19
    32a0:	22 0f       	add	r18, r18
    32a2:	33 1f       	adc	r19, r19
    32a4:	22 0f       	add	r18, r18
    32a6:	33 1f       	adc	r19, r19
    32a8:	82 0f       	add	r24, r18
    32aa:	93 1f       	adc	r25, r19
    32ac:	84 0f       	add	r24, r20
    32ae:	95 1f       	adc	r25, r21
    32b0:	fc 01       	movw	r30, r24
    32b2:	e2 57       	subi	r30, 0x72	; 114
    32b4:	fe 4f       	sbci	r31, 0xFE	; 254
    32b6:	60 81       	ld	r22, Z
    32b8:	8f 81       	ldd	r24, Y+7	; 0x07
    32ba:	48 2f       	mov	r20, r24
    32bc:	50 e0       	ldi	r21, 0x00	; 0
    32be:	ca 01       	movw	r24, r20
    32c0:	88 0f       	add	r24, r24
    32c2:	99 1f       	adc	r25, r25
    32c4:	9c 01       	movw	r18, r24
    32c6:	22 0f       	add	r18, r18
    32c8:	33 1f       	adc	r19, r19
    32ca:	22 0f       	add	r18, r18
    32cc:	33 1f       	adc	r19, r19
    32ce:	22 0f       	add	r18, r18
    32d0:	33 1f       	adc	r19, r19
    32d2:	82 0f       	add	r24, r18
    32d4:	93 1f       	adc	r25, r19
    32d6:	84 0f       	add	r24, r20
    32d8:	95 1f       	adc	r25, r21
    32da:	fc 01       	movw	r30, r24
    32dc:	e1 57       	subi	r30, 0x71	; 113
    32de:	fe 4f       	sbci	r31, 0xFE	; 254
    32e0:	20 81       	ld	r18, Z
    32e2:	88 85       	ldd	r24, Y+8	; 0x08
    32e4:	88 2f       	mov	r24, r24
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	fc 01       	movw	r30, r24
    32ea:	e4 55       	subi	r30, 0x54	; 84
    32ec:	fe 4f       	sbci	r31, 0xFE	; 254
    32ee:	80 81       	ld	r24, Z
    32f0:	82 95       	swap	r24
    32f2:	8f 70       	andi	r24, 0x0F	; 15
    32f4:	98 2f       	mov	r25, r24
    32f6:	91 70       	andi	r25, 0x01	; 1
    32f8:	86 2f       	mov	r24, r22
    32fa:	62 2f       	mov	r22, r18
    32fc:	49 2f       	mov	r20, r25
    32fe:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    3302:	88 2f       	mov	r24, r24
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	98 2f       	mov	r25, r24
    3308:	88 27       	eor	r24, r24
    330a:	92 95       	swap	r25
    330c:	90 7f       	andi	r25, 0xF0	; 240
    330e:	9c 01       	movw	r18, r24
    3310:	44 27       	eor	r20, r20
    3312:	37 fd       	sbrc	r19, 7
    3314:	40 95       	com	r20
    3316:	54 2f       	mov	r21, r20
    3318:	89 81       	ldd	r24, Y+1	; 0x01
    331a:	9a 81       	ldd	r25, Y+2	; 0x02
    331c:	ab 81       	ldd	r26, Y+3	; 0x03
    331e:	bc 81       	ldd	r27, Y+4	; 0x04
    3320:	82 2b       	or	r24, r18
    3322:	93 2b       	or	r25, r19
    3324:	a4 2b       	or	r26, r20
    3326:	b5 2b       	or	r27, r21
    3328:	89 83       	std	Y+1, r24	; 0x01
    332a:	9a 83       	std	Y+2, r25	; 0x02
    332c:	ab 83       	std	Y+3, r26	; 0x03
    332e:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPin,
												  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>4) & 1)) << 12);

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPort,
    3330:	8f 81       	ldd	r24, Y+7	; 0x07
    3332:	48 2f       	mov	r20, r24
    3334:	50 e0       	ldi	r21, 0x00	; 0
    3336:	ca 01       	movw	r24, r20
    3338:	88 0f       	add	r24, r24
    333a:	99 1f       	adc	r25, r25
    333c:	9c 01       	movw	r18, r24
    333e:	22 0f       	add	r18, r18
    3340:	33 1f       	adc	r19, r19
    3342:	22 0f       	add	r18, r18
    3344:	33 1f       	adc	r19, r19
    3346:	22 0f       	add	r18, r18
    3348:	33 1f       	adc	r19, r19
    334a:	82 0f       	add	r24, r18
    334c:	93 1f       	adc	r25, r19
    334e:	84 0f       	add	r24, r20
    3350:	95 1f       	adc	r25, r21
    3352:	fc 01       	movw	r30, r24
    3354:	e0 57       	subi	r30, 0x70	; 112
    3356:	fe 4f       	sbci	r31, 0xFE	; 254
    3358:	60 81       	ld	r22, Z
    335a:	8f 81       	ldd	r24, Y+7	; 0x07
    335c:	48 2f       	mov	r20, r24
    335e:	50 e0       	ldi	r21, 0x00	; 0
    3360:	ca 01       	movw	r24, r20
    3362:	88 0f       	add	r24, r24
    3364:	99 1f       	adc	r25, r25
    3366:	9c 01       	movw	r18, r24
    3368:	22 0f       	add	r18, r18
    336a:	33 1f       	adc	r19, r19
    336c:	22 0f       	add	r18, r18
    336e:	33 1f       	adc	r19, r19
    3370:	22 0f       	add	r18, r18
    3372:	33 1f       	adc	r19, r19
    3374:	82 0f       	add	r24, r18
    3376:	93 1f       	adc	r25, r19
    3378:	84 0f       	add	r24, r20
    337a:	95 1f       	adc	r25, r21
    337c:	fc 01       	movw	r30, r24
    337e:	ef 56       	subi	r30, 0x6F	; 111
    3380:	fe 4f       	sbci	r31, 0xFE	; 254
    3382:	20 81       	ld	r18, Z
    3384:	88 85       	ldd	r24, Y+8	; 0x08
    3386:	88 2f       	mov	r24, r24
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	fc 01       	movw	r30, r24
    338c:	e4 55       	subi	r30, 0x54	; 84
    338e:	fe 4f       	sbci	r31, 0xFE	; 254
    3390:	80 81       	ld	r24, Z
    3392:	82 95       	swap	r24
    3394:	86 95       	lsr	r24
    3396:	87 70       	andi	r24, 0x07	; 7
    3398:	98 2f       	mov	r25, r24
    339a:	91 70       	andi	r25, 0x01	; 1
    339c:	86 2f       	mov	r24, r22
    339e:	62 2f       	mov	r22, r18
    33a0:	49 2f       	mov	r20, r25
    33a2:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    33a6:	88 2f       	mov	r24, r24
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	a0 e0       	ldi	r26, 0x00	; 0
    33ac:	b0 e0       	ldi	r27, 0x00	; 0
    33ae:	9c 01       	movw	r18, r24
    33b0:	ad 01       	movw	r20, r26
    33b2:	01 2e       	mov	r0, r17
    33b4:	1f e0       	ldi	r17, 0x0F	; 15
    33b6:	22 0f       	add	r18, r18
    33b8:	33 1f       	adc	r19, r19
    33ba:	44 1f       	adc	r20, r20
    33bc:	55 1f       	adc	r21, r21
    33be:	1a 95       	dec	r17
    33c0:	d1 f7       	brne	.-12     	; 0x33b6 <SSDLT_enuDisplayNum+0x40e>
    33c2:	10 2d       	mov	r17, r0
    33c4:	89 81       	ldd	r24, Y+1	; 0x01
    33c6:	9a 81       	ldd	r25, Y+2	; 0x02
    33c8:	ab 81       	ldd	r26, Y+3	; 0x03
    33ca:	bc 81       	ldd	r27, Y+4	; 0x04
    33cc:	82 2b       	or	r24, r18
    33ce:	93 2b       	or	r25, r19
    33d0:	a4 2b       	or	r26, r20
    33d2:	b5 2b       	or	r27, r21
    33d4:	89 83       	std	Y+1, r24	; 0x01
    33d6:	9a 83       	std	Y+2, r25	; 0x02
    33d8:	ab 83       	std	Y+3, r26	; 0x03
    33da:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPin,
												  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>5) & 1)) << 15));

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPort,
    33dc:	8f 81       	ldd	r24, Y+7	; 0x07
    33de:	48 2f       	mov	r20, r24
    33e0:	50 e0       	ldi	r21, 0x00	; 0
    33e2:	ca 01       	movw	r24, r20
    33e4:	88 0f       	add	r24, r24
    33e6:	99 1f       	adc	r25, r25
    33e8:	9c 01       	movw	r18, r24
    33ea:	22 0f       	add	r18, r18
    33ec:	33 1f       	adc	r19, r19
    33ee:	22 0f       	add	r18, r18
    33f0:	33 1f       	adc	r19, r19
    33f2:	22 0f       	add	r18, r18
    33f4:	33 1f       	adc	r19, r19
    33f6:	82 0f       	add	r24, r18
    33f8:	93 1f       	adc	r25, r19
    33fa:	84 0f       	add	r24, r20
    33fc:	95 1f       	adc	r25, r21
    33fe:	fc 01       	movw	r30, r24
    3400:	ee 56       	subi	r30, 0x6E	; 110
    3402:	fe 4f       	sbci	r31, 0xFE	; 254
    3404:	60 81       	ld	r22, Z
    3406:	8f 81       	ldd	r24, Y+7	; 0x07
    3408:	48 2f       	mov	r20, r24
    340a:	50 e0       	ldi	r21, 0x00	; 0
    340c:	ca 01       	movw	r24, r20
    340e:	88 0f       	add	r24, r24
    3410:	99 1f       	adc	r25, r25
    3412:	9c 01       	movw	r18, r24
    3414:	22 0f       	add	r18, r18
    3416:	33 1f       	adc	r19, r19
    3418:	22 0f       	add	r18, r18
    341a:	33 1f       	adc	r19, r19
    341c:	22 0f       	add	r18, r18
    341e:	33 1f       	adc	r19, r19
    3420:	82 0f       	add	r24, r18
    3422:	93 1f       	adc	r25, r19
    3424:	84 0f       	add	r24, r20
    3426:	95 1f       	adc	r25, r21
    3428:	fc 01       	movw	r30, r24
    342a:	ed 56       	subi	r30, 0x6D	; 109
    342c:	fe 4f       	sbci	r31, 0xFE	; 254
    342e:	20 81       	ld	r18, Z
    3430:	88 85       	ldd	r24, Y+8	; 0x08
    3432:	88 2f       	mov	r24, r24
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	fc 01       	movw	r30, r24
    3438:	e4 55       	subi	r30, 0x54	; 84
    343a:	fe 4f       	sbci	r31, 0xFE	; 254
    343c:	80 81       	ld	r24, Z
    343e:	82 95       	swap	r24
    3440:	86 95       	lsr	r24
    3442:	86 95       	lsr	r24
    3444:	83 70       	andi	r24, 0x03	; 3
    3446:	98 2f       	mov	r25, r24
    3448:	91 70       	andi	r25, 0x01	; 1
    344a:	86 2f       	mov	r24, r22
    344c:	62 2f       	mov	r22, r18
    344e:	49 2f       	mov	r20, r25
    3450:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    3454:	88 2f       	mov	r24, r24
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	a0 e0       	ldi	r26, 0x00	; 0
    345a:	b0 e0       	ldi	r27, 0x00	; 0
    345c:	9c 01       	movw	r18, r24
    345e:	ad 01       	movw	r20, r26
    3460:	01 2e       	mov	r0, r17
    3462:	12 e1       	ldi	r17, 0x12	; 18
    3464:	22 0f       	add	r18, r18
    3466:	33 1f       	adc	r19, r19
    3468:	44 1f       	adc	r20, r20
    346a:	55 1f       	adc	r21, r21
    346c:	1a 95       	dec	r17
    346e:	d1 f7       	brne	.-12     	; 0x3464 <SSDLT_enuDisplayNum+0x4bc>
    3470:	10 2d       	mov	r17, r0
    3472:	89 81       	ldd	r24, Y+1	; 0x01
    3474:	9a 81       	ldd	r25, Y+2	; 0x02
    3476:	ab 81       	ldd	r26, Y+3	; 0x03
    3478:	bc 81       	ldd	r27, Y+4	; 0x04
    347a:	82 2b       	or	r24, r18
    347c:	93 2b       	or	r25, r19
    347e:	a4 2b       	or	r26, r20
    3480:	b5 2b       	or	r27, r21
    3482:	89 83       	std	Y+1, r24	; 0x01
    3484:	9a 83       	std	Y+2, r25	; 0x02
    3486:	ab 83       	std	Y+3, r26	; 0x03
    3488:	bc 83       	std	Y+4, r27	; 0x04
    348a:	9c c2       	rjmp	.+1336   	; 0x39c4 <SSDLT_enuDisplayNum+0xa1c>
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPin,
												  ((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>6) & 1)) << 18));

		}
		else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    348c:	8f 81       	ldd	r24, Y+7	; 0x07
    348e:	48 2f       	mov	r20, r24
    3490:	50 e0       	ldi	r21, 0x00	; 0
    3492:	ca 01       	movw	r24, r20
    3494:	88 0f       	add	r24, r24
    3496:	99 1f       	adc	r25, r25
    3498:	9c 01       	movw	r18, r24
    349a:	22 0f       	add	r18, r18
    349c:	33 1f       	adc	r19, r19
    349e:	22 0f       	add	r18, r18
    34a0:	33 1f       	adc	r19, r19
    34a2:	22 0f       	add	r18, r18
    34a4:	33 1f       	adc	r19, r19
    34a6:	82 0f       	add	r24, r18
    34a8:	93 1f       	adc	r25, r19
    34aa:	84 0f       	add	r24, r20
    34ac:	95 1f       	adc	r25, r21
    34ae:	fc 01       	movw	r30, r24
    34b0:	e8 56       	subi	r30, 0x68	; 104
    34b2:	fe 4f       	sbci	r31, 0xFE	; 254
    34b4:	80 81       	ld	r24, Z
    34b6:	88 23       	and	r24, r24
    34b8:	09 f0       	breq	.+2      	; 0x34bc <SSDLT_enuDisplayNum+0x514>
    34ba:	7f c2       	rjmp	.+1278   	; 0x39ba <SSDLT_enuDisplayNum+0xa12>
		{
			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APort,
    34bc:	8f 81       	ldd	r24, Y+7	; 0x07
    34be:	48 2f       	mov	r20, r24
    34c0:	50 e0       	ldi	r21, 0x00	; 0
    34c2:	ca 01       	movw	r24, r20
    34c4:	88 0f       	add	r24, r24
    34c6:	99 1f       	adc	r25, r25
    34c8:	9c 01       	movw	r18, r24
    34ca:	22 0f       	add	r18, r18
    34cc:	33 1f       	adc	r19, r19
    34ce:	22 0f       	add	r18, r18
    34d0:	33 1f       	adc	r19, r19
    34d2:	22 0f       	add	r18, r18
    34d4:	33 1f       	adc	r19, r19
    34d6:	82 0f       	add	r24, r18
    34d8:	93 1f       	adc	r25, r19
    34da:	84 0f       	add	r24, r20
    34dc:	95 1f       	adc	r25, r21
    34de:	fc 01       	movw	r30, r24
    34e0:	ea 57       	subi	r30, 0x7A	; 122
    34e2:	fe 4f       	sbci	r31, 0xFE	; 254
    34e4:	80 81       	ld	r24, Z
    34e6:	8e 8f       	std	Y+30, r24	; 0x1e
    34e8:	8f 81       	ldd	r24, Y+7	; 0x07
    34ea:	48 2f       	mov	r20, r24
    34ec:	50 e0       	ldi	r21, 0x00	; 0
    34ee:	ca 01       	movw	r24, r20
    34f0:	88 0f       	add	r24, r24
    34f2:	99 1f       	adc	r25, r25
    34f4:	9c 01       	movw	r18, r24
    34f6:	22 0f       	add	r18, r18
    34f8:	33 1f       	adc	r19, r19
    34fa:	22 0f       	add	r18, r18
    34fc:	33 1f       	adc	r19, r19
    34fe:	22 0f       	add	r18, r18
    3500:	33 1f       	adc	r19, r19
    3502:	82 0f       	add	r24, r18
    3504:	93 1f       	adc	r25, r19
    3506:	84 0f       	add	r24, r20
    3508:	95 1f       	adc	r25, r21
    350a:	fc 01       	movw	r30, r24
    350c:	e9 57       	subi	r30, 0x79	; 121
    350e:	fe 4f       	sbci	r31, 0xFE	; 254
    3510:	80 81       	ld	r24, Z
    3512:	8d 8f       	std	Y+29, r24	; 0x1d
    3514:	88 85       	ldd	r24, Y+8	; 0x08
    3516:	88 2f       	mov	r24, r24
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	fc 01       	movw	r30, r24
    351c:	e4 55       	subi	r30, 0x54	; 84
    351e:	fe 4f       	sbci	r31, 0xFE	; 254
    3520:	80 81       	ld	r24, Z
    3522:	88 2f       	mov	r24, r24
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	81 70       	andi	r24, 0x01	; 1
    3528:	90 70       	andi	r25, 0x00	; 0
    352a:	1c 8e       	std	Y+28, r1	; 0x1c
    352c:	00 97       	sbiw	r24, 0x00	; 0
    352e:	11 f4       	brne	.+4      	; 0x3534 <SSDLT_enuDisplayNum+0x58c>
    3530:	81 e0       	ldi	r24, 0x01	; 1
    3532:	8c 8f       	std	Y+28, r24	; 0x1c
    3534:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3536:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3538:	4c 8d       	ldd	r20, Y+28	; 0x1c
    353a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    353e:	28 2f       	mov	r18, r24
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	40 e0       	ldi	r20, 0x00	; 0
    3544:	50 e0       	ldi	r21, 0x00	; 0
    3546:	89 81       	ldd	r24, Y+1	; 0x01
    3548:	9a 81       	ldd	r25, Y+2	; 0x02
    354a:	ab 81       	ldd	r26, Y+3	; 0x03
    354c:	bc 81       	ldd	r27, Y+4	; 0x04
    354e:	82 2b       	or	r24, r18
    3550:	93 2b       	or	r25, r19
    3552:	a4 2b       	or	r26, r20
    3554:	b5 2b       	or	r27, r21
    3556:	89 83       	std	Y+1, r24	; 0x01
    3558:	9a 83       	std	Y+2, r25	; 0x02
    355a:	ab 83       	std	Y+3, r26	; 0x03
    355c:	bc 83       	std	Y+4, r27	; 0x04
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>0) & 1))) << 0);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPort,
    355e:	8f 81       	ldd	r24, Y+7	; 0x07
    3560:	48 2f       	mov	r20, r24
    3562:	50 e0       	ldi	r21, 0x00	; 0
    3564:	ca 01       	movw	r24, r20
    3566:	88 0f       	add	r24, r24
    3568:	99 1f       	adc	r25, r25
    356a:	9c 01       	movw	r18, r24
    356c:	22 0f       	add	r18, r18
    356e:	33 1f       	adc	r19, r19
    3570:	22 0f       	add	r18, r18
    3572:	33 1f       	adc	r19, r19
    3574:	22 0f       	add	r18, r18
    3576:	33 1f       	adc	r19, r19
    3578:	82 0f       	add	r24, r18
    357a:	93 1f       	adc	r25, r19
    357c:	84 0f       	add	r24, r20
    357e:	95 1f       	adc	r25, r21
    3580:	fc 01       	movw	r30, r24
    3582:	e8 57       	subi	r30, 0x78	; 120
    3584:	fe 4f       	sbci	r31, 0xFE	; 254
    3586:	80 81       	ld	r24, Z
    3588:	8b 8f       	std	Y+27, r24	; 0x1b
    358a:	8f 81       	ldd	r24, Y+7	; 0x07
    358c:	48 2f       	mov	r20, r24
    358e:	50 e0       	ldi	r21, 0x00	; 0
    3590:	ca 01       	movw	r24, r20
    3592:	88 0f       	add	r24, r24
    3594:	99 1f       	adc	r25, r25
    3596:	9c 01       	movw	r18, r24
    3598:	22 0f       	add	r18, r18
    359a:	33 1f       	adc	r19, r19
    359c:	22 0f       	add	r18, r18
    359e:	33 1f       	adc	r19, r19
    35a0:	22 0f       	add	r18, r18
    35a2:	33 1f       	adc	r19, r19
    35a4:	82 0f       	add	r24, r18
    35a6:	93 1f       	adc	r25, r19
    35a8:	84 0f       	add	r24, r20
    35aa:	95 1f       	adc	r25, r21
    35ac:	fc 01       	movw	r30, r24
    35ae:	e7 57       	subi	r30, 0x77	; 119
    35b0:	fe 4f       	sbci	r31, 0xFE	; 254
    35b2:	80 81       	ld	r24, Z
    35b4:	8a 8f       	std	Y+26, r24	; 0x1a
    35b6:	88 85       	ldd	r24, Y+8	; 0x08
    35b8:	88 2f       	mov	r24, r24
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	fc 01       	movw	r30, r24
    35be:	e4 55       	subi	r30, 0x54	; 84
    35c0:	fe 4f       	sbci	r31, 0xFE	; 254
    35c2:	80 81       	ld	r24, Z
    35c4:	86 95       	lsr	r24
    35c6:	88 2f       	mov	r24, r24
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	81 70       	andi	r24, 0x01	; 1
    35cc:	90 70       	andi	r25, 0x00	; 0
    35ce:	19 8e       	std	Y+25, r1	; 0x19
    35d0:	00 97       	sbiw	r24, 0x00	; 0
    35d2:	11 f4       	brne	.+4      	; 0x35d8 <SSDLT_enuDisplayNum+0x630>
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	89 8f       	std	Y+25, r24	; 0x19
    35d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35da:	6a 8d       	ldd	r22, Y+26	; 0x1a
    35dc:	49 8d       	ldd	r20, Y+25	; 0x19
    35de:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    35e2:	88 2f       	mov	r24, r24
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	88 0f       	add	r24, r24
    35e8:	99 1f       	adc	r25, r25
    35ea:	88 0f       	add	r24, r24
    35ec:	99 1f       	adc	r25, r25
    35ee:	88 0f       	add	r24, r24
    35f0:	99 1f       	adc	r25, r25
    35f2:	9c 01       	movw	r18, r24
    35f4:	44 27       	eor	r20, r20
    35f6:	37 fd       	sbrc	r19, 7
    35f8:	40 95       	com	r20
    35fa:	54 2f       	mov	r21, r20
    35fc:	89 81       	ldd	r24, Y+1	; 0x01
    35fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3600:	ab 81       	ldd	r26, Y+3	; 0x03
    3602:	bc 81       	ldd	r27, Y+4	; 0x04
    3604:	82 2b       	or	r24, r18
    3606:	93 2b       	or	r25, r19
    3608:	a4 2b       	or	r26, r20
    360a:	b5 2b       	or	r27, r21
    360c:	89 83       	std	Y+1, r24	; 0x01
    360e:	9a 83       	std	Y+2, r25	; 0x02
    3610:	ab 83       	std	Y+3, r26	; 0x03
    3612:	bc 83       	std	Y+4, r27	; 0x04
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>1) & 1))) << 3);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPort,
    3614:	8f 81       	ldd	r24, Y+7	; 0x07
    3616:	48 2f       	mov	r20, r24
    3618:	50 e0       	ldi	r21, 0x00	; 0
    361a:	ca 01       	movw	r24, r20
    361c:	88 0f       	add	r24, r24
    361e:	99 1f       	adc	r25, r25
    3620:	9c 01       	movw	r18, r24
    3622:	22 0f       	add	r18, r18
    3624:	33 1f       	adc	r19, r19
    3626:	22 0f       	add	r18, r18
    3628:	33 1f       	adc	r19, r19
    362a:	22 0f       	add	r18, r18
    362c:	33 1f       	adc	r19, r19
    362e:	82 0f       	add	r24, r18
    3630:	93 1f       	adc	r25, r19
    3632:	84 0f       	add	r24, r20
    3634:	95 1f       	adc	r25, r21
    3636:	fc 01       	movw	r30, r24
    3638:	e6 57       	subi	r30, 0x76	; 118
    363a:	fe 4f       	sbci	r31, 0xFE	; 254
    363c:	80 81       	ld	r24, Z
    363e:	88 8f       	std	Y+24, r24	; 0x18
    3640:	8f 81       	ldd	r24, Y+7	; 0x07
    3642:	48 2f       	mov	r20, r24
    3644:	50 e0       	ldi	r21, 0x00	; 0
    3646:	ca 01       	movw	r24, r20
    3648:	88 0f       	add	r24, r24
    364a:	99 1f       	adc	r25, r25
    364c:	9c 01       	movw	r18, r24
    364e:	22 0f       	add	r18, r18
    3650:	33 1f       	adc	r19, r19
    3652:	22 0f       	add	r18, r18
    3654:	33 1f       	adc	r19, r19
    3656:	22 0f       	add	r18, r18
    3658:	33 1f       	adc	r19, r19
    365a:	82 0f       	add	r24, r18
    365c:	93 1f       	adc	r25, r19
    365e:	84 0f       	add	r24, r20
    3660:	95 1f       	adc	r25, r21
    3662:	fc 01       	movw	r30, r24
    3664:	e5 57       	subi	r30, 0x75	; 117
    3666:	fe 4f       	sbci	r31, 0xFE	; 254
    3668:	80 81       	ld	r24, Z
    366a:	8f 8b       	std	Y+23, r24	; 0x17
    366c:	88 85       	ldd	r24, Y+8	; 0x08
    366e:	88 2f       	mov	r24, r24
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	fc 01       	movw	r30, r24
    3674:	e4 55       	subi	r30, 0x54	; 84
    3676:	fe 4f       	sbci	r31, 0xFE	; 254
    3678:	80 81       	ld	r24, Z
    367a:	86 95       	lsr	r24
    367c:	86 95       	lsr	r24
    367e:	88 2f       	mov	r24, r24
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	81 70       	andi	r24, 0x01	; 1
    3684:	90 70       	andi	r25, 0x00	; 0
    3686:	1e 8a       	std	Y+22, r1	; 0x16
    3688:	00 97       	sbiw	r24, 0x00	; 0
    368a:	11 f4       	brne	.+4      	; 0x3690 <SSDLT_enuDisplayNum+0x6e8>
    368c:	81 e0       	ldi	r24, 0x01	; 1
    368e:	8e 8b       	std	Y+22, r24	; 0x16
    3690:	88 8d       	ldd	r24, Y+24	; 0x18
    3692:	6f 89       	ldd	r22, Y+23	; 0x17
    3694:	4e 89       	ldd	r20, Y+22	; 0x16
    3696:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    369a:	88 2f       	mov	r24, r24
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	00 24       	eor	r0, r0
    36a0:	96 95       	lsr	r25
    36a2:	87 95       	ror	r24
    36a4:	07 94       	ror	r0
    36a6:	96 95       	lsr	r25
    36a8:	87 95       	ror	r24
    36aa:	07 94       	ror	r0
    36ac:	98 2f       	mov	r25, r24
    36ae:	80 2d       	mov	r24, r0
    36b0:	9c 01       	movw	r18, r24
    36b2:	44 27       	eor	r20, r20
    36b4:	37 fd       	sbrc	r19, 7
    36b6:	40 95       	com	r20
    36b8:	54 2f       	mov	r21, r20
    36ba:	89 81       	ldd	r24, Y+1	; 0x01
    36bc:	9a 81       	ldd	r25, Y+2	; 0x02
    36be:	ab 81       	ldd	r26, Y+3	; 0x03
    36c0:	bc 81       	ldd	r27, Y+4	; 0x04
    36c2:	82 2b       	or	r24, r18
    36c4:	93 2b       	or	r25, r19
    36c6:	a4 2b       	or	r26, r20
    36c8:	b5 2b       	or	r27, r21
    36ca:	89 83       	std	Y+1, r24	; 0x01
    36cc:	9a 83       	std	Y+2, r25	; 0x02
    36ce:	ab 83       	std	Y+3, r26	; 0x03
    36d0:	bc 83       	std	Y+4, r27	; 0x04
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>2) & 1))) << 6);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPort,
    36d2:	8f 81       	ldd	r24, Y+7	; 0x07
    36d4:	48 2f       	mov	r20, r24
    36d6:	50 e0       	ldi	r21, 0x00	; 0
    36d8:	ca 01       	movw	r24, r20
    36da:	88 0f       	add	r24, r24
    36dc:	99 1f       	adc	r25, r25
    36de:	9c 01       	movw	r18, r24
    36e0:	22 0f       	add	r18, r18
    36e2:	33 1f       	adc	r19, r19
    36e4:	22 0f       	add	r18, r18
    36e6:	33 1f       	adc	r19, r19
    36e8:	22 0f       	add	r18, r18
    36ea:	33 1f       	adc	r19, r19
    36ec:	82 0f       	add	r24, r18
    36ee:	93 1f       	adc	r25, r19
    36f0:	84 0f       	add	r24, r20
    36f2:	95 1f       	adc	r25, r21
    36f4:	fc 01       	movw	r30, r24
    36f6:	e4 57       	subi	r30, 0x74	; 116
    36f8:	fe 4f       	sbci	r31, 0xFE	; 254
    36fa:	80 81       	ld	r24, Z
    36fc:	8d 8b       	std	Y+21, r24	; 0x15
    36fe:	8f 81       	ldd	r24, Y+7	; 0x07
    3700:	48 2f       	mov	r20, r24
    3702:	50 e0       	ldi	r21, 0x00	; 0
    3704:	ca 01       	movw	r24, r20
    3706:	88 0f       	add	r24, r24
    3708:	99 1f       	adc	r25, r25
    370a:	9c 01       	movw	r18, r24
    370c:	22 0f       	add	r18, r18
    370e:	33 1f       	adc	r19, r19
    3710:	22 0f       	add	r18, r18
    3712:	33 1f       	adc	r19, r19
    3714:	22 0f       	add	r18, r18
    3716:	33 1f       	adc	r19, r19
    3718:	82 0f       	add	r24, r18
    371a:	93 1f       	adc	r25, r19
    371c:	84 0f       	add	r24, r20
    371e:	95 1f       	adc	r25, r21
    3720:	fc 01       	movw	r30, r24
    3722:	e3 57       	subi	r30, 0x73	; 115
    3724:	fe 4f       	sbci	r31, 0xFE	; 254
    3726:	80 81       	ld	r24, Z
    3728:	8c 8b       	std	Y+20, r24	; 0x14
    372a:	88 85       	ldd	r24, Y+8	; 0x08
    372c:	88 2f       	mov	r24, r24
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	fc 01       	movw	r30, r24
    3732:	e4 55       	subi	r30, 0x54	; 84
    3734:	fe 4f       	sbci	r31, 0xFE	; 254
    3736:	80 81       	ld	r24, Z
    3738:	86 95       	lsr	r24
    373a:	86 95       	lsr	r24
    373c:	86 95       	lsr	r24
    373e:	88 2f       	mov	r24, r24
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	81 70       	andi	r24, 0x01	; 1
    3744:	90 70       	andi	r25, 0x00	; 0
    3746:	1b 8a       	std	Y+19, r1	; 0x13
    3748:	00 97       	sbiw	r24, 0x00	; 0
    374a:	11 f4       	brne	.+4      	; 0x3750 <SSDLT_enuDisplayNum+0x7a8>
    374c:	81 e0       	ldi	r24, 0x01	; 1
    374e:	8b 8b       	std	Y+19, r24	; 0x13
    3750:	8d 89       	ldd	r24, Y+21	; 0x15
    3752:	6c 89       	ldd	r22, Y+20	; 0x14
    3754:	4b 89       	ldd	r20, Y+19	; 0x13
    3756:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    375a:	88 2f       	mov	r24, r24
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	98 2f       	mov	r25, r24
    3760:	88 27       	eor	r24, r24
    3762:	99 0f       	add	r25, r25
    3764:	9c 01       	movw	r18, r24
    3766:	44 27       	eor	r20, r20
    3768:	37 fd       	sbrc	r19, 7
    376a:	40 95       	com	r20
    376c:	54 2f       	mov	r21, r20
    376e:	89 81       	ldd	r24, Y+1	; 0x01
    3770:	9a 81       	ldd	r25, Y+2	; 0x02
    3772:	ab 81       	ldd	r26, Y+3	; 0x03
    3774:	bc 81       	ldd	r27, Y+4	; 0x04
    3776:	82 2b       	or	r24, r18
    3778:	93 2b       	or	r25, r19
    377a:	a4 2b       	or	r26, r20
    377c:	b5 2b       	or	r27, r21
    377e:	89 83       	std	Y+1, r24	; 0x01
    3780:	9a 83       	std	Y+2, r25	; 0x02
    3782:	ab 83       	std	Y+3, r26	; 0x03
    3784:	bc 83       	std	Y+4, r27	; 0x04
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>3) & 1))) << 9);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPort,
    3786:	8f 81       	ldd	r24, Y+7	; 0x07
    3788:	48 2f       	mov	r20, r24
    378a:	50 e0       	ldi	r21, 0x00	; 0
    378c:	ca 01       	movw	r24, r20
    378e:	88 0f       	add	r24, r24
    3790:	99 1f       	adc	r25, r25
    3792:	9c 01       	movw	r18, r24
    3794:	22 0f       	add	r18, r18
    3796:	33 1f       	adc	r19, r19
    3798:	22 0f       	add	r18, r18
    379a:	33 1f       	adc	r19, r19
    379c:	22 0f       	add	r18, r18
    379e:	33 1f       	adc	r19, r19
    37a0:	82 0f       	add	r24, r18
    37a2:	93 1f       	adc	r25, r19
    37a4:	84 0f       	add	r24, r20
    37a6:	95 1f       	adc	r25, r21
    37a8:	fc 01       	movw	r30, r24
    37aa:	e2 57       	subi	r30, 0x72	; 114
    37ac:	fe 4f       	sbci	r31, 0xFE	; 254
    37ae:	80 81       	ld	r24, Z
    37b0:	8a 8b       	std	Y+18, r24	; 0x12
    37b2:	8f 81       	ldd	r24, Y+7	; 0x07
    37b4:	48 2f       	mov	r20, r24
    37b6:	50 e0       	ldi	r21, 0x00	; 0
    37b8:	ca 01       	movw	r24, r20
    37ba:	88 0f       	add	r24, r24
    37bc:	99 1f       	adc	r25, r25
    37be:	9c 01       	movw	r18, r24
    37c0:	22 0f       	add	r18, r18
    37c2:	33 1f       	adc	r19, r19
    37c4:	22 0f       	add	r18, r18
    37c6:	33 1f       	adc	r19, r19
    37c8:	22 0f       	add	r18, r18
    37ca:	33 1f       	adc	r19, r19
    37cc:	82 0f       	add	r24, r18
    37ce:	93 1f       	adc	r25, r19
    37d0:	84 0f       	add	r24, r20
    37d2:	95 1f       	adc	r25, r21
    37d4:	fc 01       	movw	r30, r24
    37d6:	e1 57       	subi	r30, 0x71	; 113
    37d8:	fe 4f       	sbci	r31, 0xFE	; 254
    37da:	80 81       	ld	r24, Z
    37dc:	89 8b       	std	Y+17, r24	; 0x11
    37de:	88 85       	ldd	r24, Y+8	; 0x08
    37e0:	88 2f       	mov	r24, r24
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	fc 01       	movw	r30, r24
    37e6:	e4 55       	subi	r30, 0x54	; 84
    37e8:	fe 4f       	sbci	r31, 0xFE	; 254
    37ea:	80 81       	ld	r24, Z
    37ec:	82 95       	swap	r24
    37ee:	8f 70       	andi	r24, 0x0F	; 15
    37f0:	88 2f       	mov	r24, r24
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	81 70       	andi	r24, 0x01	; 1
    37f6:	90 70       	andi	r25, 0x00	; 0
    37f8:	18 8a       	std	Y+16, r1	; 0x10
    37fa:	00 97       	sbiw	r24, 0x00	; 0
    37fc:	11 f4       	brne	.+4      	; 0x3802 <SSDLT_enuDisplayNum+0x85a>
    37fe:	81 e0       	ldi	r24, 0x01	; 1
    3800:	88 8b       	std	Y+16, r24	; 0x10
    3802:	8a 89       	ldd	r24, Y+18	; 0x12
    3804:	69 89       	ldd	r22, Y+17	; 0x11
    3806:	48 89       	ldd	r20, Y+16	; 0x10
    3808:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    380c:	88 2f       	mov	r24, r24
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	98 2f       	mov	r25, r24
    3812:	88 27       	eor	r24, r24
    3814:	92 95       	swap	r25
    3816:	90 7f       	andi	r25, 0xF0	; 240
    3818:	9c 01       	movw	r18, r24
    381a:	44 27       	eor	r20, r20
    381c:	37 fd       	sbrc	r19, 7
    381e:	40 95       	com	r20
    3820:	54 2f       	mov	r21, r20
    3822:	89 81       	ldd	r24, Y+1	; 0x01
    3824:	9a 81       	ldd	r25, Y+2	; 0x02
    3826:	ab 81       	ldd	r26, Y+3	; 0x03
    3828:	bc 81       	ldd	r27, Y+4	; 0x04
    382a:	82 2b       	or	r24, r18
    382c:	93 2b       	or	r25, r19
    382e:	a4 2b       	or	r26, r20
    3830:	b5 2b       	or	r27, r21
    3832:	89 83       	std	Y+1, r24	; 0x01
    3834:	9a 83       	std	Y+2, r25	; 0x02
    3836:	ab 83       	std	Y+3, r26	; 0x03
    3838:	bc 83       	std	Y+4, r27	; 0x04
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>4) & 1))) << 12);

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPort,
    383a:	8f 81       	ldd	r24, Y+7	; 0x07
    383c:	48 2f       	mov	r20, r24
    383e:	50 e0       	ldi	r21, 0x00	; 0
    3840:	ca 01       	movw	r24, r20
    3842:	88 0f       	add	r24, r24
    3844:	99 1f       	adc	r25, r25
    3846:	9c 01       	movw	r18, r24
    3848:	22 0f       	add	r18, r18
    384a:	33 1f       	adc	r19, r19
    384c:	22 0f       	add	r18, r18
    384e:	33 1f       	adc	r19, r19
    3850:	22 0f       	add	r18, r18
    3852:	33 1f       	adc	r19, r19
    3854:	82 0f       	add	r24, r18
    3856:	93 1f       	adc	r25, r19
    3858:	84 0f       	add	r24, r20
    385a:	95 1f       	adc	r25, r21
    385c:	fc 01       	movw	r30, r24
    385e:	e0 57       	subi	r30, 0x70	; 112
    3860:	fe 4f       	sbci	r31, 0xFE	; 254
    3862:	80 81       	ld	r24, Z
    3864:	8f 87       	std	Y+15, r24	; 0x0f
    3866:	8f 81       	ldd	r24, Y+7	; 0x07
    3868:	48 2f       	mov	r20, r24
    386a:	50 e0       	ldi	r21, 0x00	; 0
    386c:	ca 01       	movw	r24, r20
    386e:	88 0f       	add	r24, r24
    3870:	99 1f       	adc	r25, r25
    3872:	9c 01       	movw	r18, r24
    3874:	22 0f       	add	r18, r18
    3876:	33 1f       	adc	r19, r19
    3878:	22 0f       	add	r18, r18
    387a:	33 1f       	adc	r19, r19
    387c:	22 0f       	add	r18, r18
    387e:	33 1f       	adc	r19, r19
    3880:	82 0f       	add	r24, r18
    3882:	93 1f       	adc	r25, r19
    3884:	84 0f       	add	r24, r20
    3886:	95 1f       	adc	r25, r21
    3888:	fc 01       	movw	r30, r24
    388a:	ef 56       	subi	r30, 0x6F	; 111
    388c:	fe 4f       	sbci	r31, 0xFE	; 254
    388e:	80 81       	ld	r24, Z
    3890:	8e 87       	std	Y+14, r24	; 0x0e
    3892:	88 85       	ldd	r24, Y+8	; 0x08
    3894:	88 2f       	mov	r24, r24
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	fc 01       	movw	r30, r24
    389a:	e4 55       	subi	r30, 0x54	; 84
    389c:	fe 4f       	sbci	r31, 0xFE	; 254
    389e:	80 81       	ld	r24, Z
    38a0:	82 95       	swap	r24
    38a2:	86 95       	lsr	r24
    38a4:	87 70       	andi	r24, 0x07	; 7
    38a6:	88 2f       	mov	r24, r24
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	81 70       	andi	r24, 0x01	; 1
    38ac:	90 70       	andi	r25, 0x00	; 0
    38ae:	1d 86       	std	Y+13, r1	; 0x0d
    38b0:	00 97       	sbiw	r24, 0x00	; 0
    38b2:	11 f4       	brne	.+4      	; 0x38b8 <SSDLT_enuDisplayNum+0x910>
    38b4:	81 e0       	ldi	r24, 0x01	; 1
    38b6:	8d 87       	std	Y+13, r24	; 0x0d
    38b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    38ba:	6e 85       	ldd	r22, Y+14	; 0x0e
    38bc:	4d 85       	ldd	r20, Y+13	; 0x0d
    38be:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    38c2:	88 2f       	mov	r24, r24
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	a0 e0       	ldi	r26, 0x00	; 0
    38c8:	b0 e0       	ldi	r27, 0x00	; 0
    38ca:	9c 01       	movw	r18, r24
    38cc:	ad 01       	movw	r20, r26
    38ce:	01 2e       	mov	r0, r17
    38d0:	1f e0       	ldi	r17, 0x0F	; 15
    38d2:	22 0f       	add	r18, r18
    38d4:	33 1f       	adc	r19, r19
    38d6:	44 1f       	adc	r20, r20
    38d8:	55 1f       	adc	r21, r21
    38da:	1a 95       	dec	r17
    38dc:	d1 f7       	brne	.-12     	; 0x38d2 <SSDLT_enuDisplayNum+0x92a>
    38de:	10 2d       	mov	r17, r0
    38e0:	89 81       	ldd	r24, Y+1	; 0x01
    38e2:	9a 81       	ldd	r25, Y+2	; 0x02
    38e4:	ab 81       	ldd	r26, Y+3	; 0x03
    38e6:	bc 81       	ldd	r27, Y+4	; 0x04
    38e8:	82 2b       	or	r24, r18
    38ea:	93 2b       	or	r25, r19
    38ec:	a4 2b       	or	r26, r20
    38ee:	b5 2b       	or	r27, r21
    38f0:	89 83       	std	Y+1, r24	; 0x01
    38f2:	9a 83       	std	Y+2, r25	; 0x02
    38f4:	ab 83       	std	Y+3, r26	; 0x03
    38f6:	bc 83       	std	Y+4, r27	; 0x04
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>5) & 1))) << 15));

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPort,
    38f8:	8f 81       	ldd	r24, Y+7	; 0x07
    38fa:	48 2f       	mov	r20, r24
    38fc:	50 e0       	ldi	r21, 0x00	; 0
    38fe:	ca 01       	movw	r24, r20
    3900:	88 0f       	add	r24, r24
    3902:	99 1f       	adc	r25, r25
    3904:	9c 01       	movw	r18, r24
    3906:	22 0f       	add	r18, r18
    3908:	33 1f       	adc	r19, r19
    390a:	22 0f       	add	r18, r18
    390c:	33 1f       	adc	r19, r19
    390e:	22 0f       	add	r18, r18
    3910:	33 1f       	adc	r19, r19
    3912:	82 0f       	add	r24, r18
    3914:	93 1f       	adc	r25, r19
    3916:	84 0f       	add	r24, r20
    3918:	95 1f       	adc	r25, r21
    391a:	fc 01       	movw	r30, r24
    391c:	ee 56       	subi	r30, 0x6E	; 110
    391e:	fe 4f       	sbci	r31, 0xFE	; 254
    3920:	80 81       	ld	r24, Z
    3922:	8c 87       	std	Y+12, r24	; 0x0c
    3924:	8f 81       	ldd	r24, Y+7	; 0x07
    3926:	48 2f       	mov	r20, r24
    3928:	50 e0       	ldi	r21, 0x00	; 0
    392a:	ca 01       	movw	r24, r20
    392c:	88 0f       	add	r24, r24
    392e:	99 1f       	adc	r25, r25
    3930:	9c 01       	movw	r18, r24
    3932:	22 0f       	add	r18, r18
    3934:	33 1f       	adc	r19, r19
    3936:	22 0f       	add	r18, r18
    3938:	33 1f       	adc	r19, r19
    393a:	22 0f       	add	r18, r18
    393c:	33 1f       	adc	r19, r19
    393e:	82 0f       	add	r24, r18
    3940:	93 1f       	adc	r25, r19
    3942:	84 0f       	add	r24, r20
    3944:	95 1f       	adc	r25, r21
    3946:	fc 01       	movw	r30, r24
    3948:	ed 56       	subi	r30, 0x6D	; 109
    394a:	fe 4f       	sbci	r31, 0xFE	; 254
    394c:	80 81       	ld	r24, Z
    394e:	8b 87       	std	Y+11, r24	; 0x0b
    3950:	88 85       	ldd	r24, Y+8	; 0x08
    3952:	88 2f       	mov	r24, r24
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	fc 01       	movw	r30, r24
    3958:	e4 55       	subi	r30, 0x54	; 84
    395a:	fe 4f       	sbci	r31, 0xFE	; 254
    395c:	80 81       	ld	r24, Z
    395e:	82 95       	swap	r24
    3960:	86 95       	lsr	r24
    3962:	86 95       	lsr	r24
    3964:	83 70       	andi	r24, 0x03	; 3
    3966:	88 2f       	mov	r24, r24
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	81 70       	andi	r24, 0x01	; 1
    396c:	90 70       	andi	r25, 0x00	; 0
    396e:	1a 86       	std	Y+10, r1	; 0x0a
    3970:	00 97       	sbiw	r24, 0x00	; 0
    3972:	11 f4       	brne	.+4      	; 0x3978 <SSDLT_enuDisplayNum+0x9d0>
    3974:	81 e0       	ldi	r24, 0x01	; 1
    3976:	8a 87       	std	Y+10, r24	; 0x0a
    3978:	8c 85       	ldd	r24, Y+12	; 0x0c
    397a:	6b 85       	ldd	r22, Y+11	; 0x0b
    397c:	4a 85       	ldd	r20, Y+10	; 0x0a
    397e:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    3982:	88 2f       	mov	r24, r24
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	a0 e0       	ldi	r26, 0x00	; 0
    3988:	b0 e0       	ldi	r27, 0x00	; 0
    398a:	9c 01       	movw	r18, r24
    398c:	ad 01       	movw	r20, r26
    398e:	01 2e       	mov	r0, r17
    3990:	12 e1       	ldi	r17, 0x12	; 18
    3992:	22 0f       	add	r18, r18
    3994:	33 1f       	adc	r19, r19
    3996:	44 1f       	adc	r20, r20
    3998:	55 1f       	adc	r21, r21
    399a:	1a 95       	dec	r17
    399c:	d1 f7       	brne	.-12     	; 0x3992 <SSDLT_enuDisplayNum+0x9ea>
    399e:	10 2d       	mov	r17, r0
    39a0:	89 81       	ldd	r24, Y+1	; 0x01
    39a2:	9a 81       	ldd	r25, Y+2	; 0x02
    39a4:	ab 81       	ldd	r26, Y+3	; 0x03
    39a6:	bc 81       	ldd	r27, Y+4	; 0x04
    39a8:	82 2b       	or	r24, r18
    39aa:	93 2b       	or	r25, r19
    39ac:	a4 2b       	or	r26, r20
    39ae:	b5 2b       	or	r27, r21
    39b0:	89 83       	std	Y+1, r24	; 0x01
    39b2:	9a 83       	std	Y+2, r25	; 0x02
    39b4:	ab 83       	std	Y+3, r26	; 0x03
    39b6:	bc 83       	std	Y+4, r27	; 0x04
    39b8:	05 c0       	rjmp	.+10     	; 0x39c4 <SSDLT_enuDisplayNum+0xa1c>
							   SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPin,
							   (!((SSDLT_Au8ComCathodeNumDisplay[Copy_u8Number]>>6) & 1))) << 18));
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    39ba:	83 e0       	ldi	r24, 0x03	; 3
    39bc:	8e 83       	std	Y+6, r24	; 0x06
    39be:	02 c0       	rjmp	.+4      	; 0x39c4 <SSDLT_enuDisplayNum+0xa1c>
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    39c0:	83 e0       	ldi	r24, 0x03	; 3
    39c2:	8e 83       	std	Y+6, r24	; 0x06
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    39c4:	1d 82       	std	Y+5, r1	; 0x05
    39c6:	1e c0       	rjmp	.+60     	; 0x3a04 <SSDLT_enuDisplayNum+0xa5c>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
    39c8:	8d 81       	ldd	r24, Y+5	; 0x05
    39ca:	28 2f       	mov	r18, r24
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	89 81       	ldd	r24, Y+1	; 0x01
    39d0:	9a 81       	ldd	r25, Y+2	; 0x02
    39d2:	ab 81       	ldd	r26, Y+3	; 0x03
    39d4:	bc 81       	ldd	r27, Y+4	; 0x04
    39d6:	02 2e       	mov	r0, r18
    39d8:	04 c0       	rjmp	.+8      	; 0x39e2 <SSDLT_enuDisplayNum+0xa3a>
    39da:	b6 95       	lsr	r27
    39dc:	a7 95       	ror	r26
    39de:	97 95       	ror	r25
    39e0:	87 95       	ror	r24
    39e2:	0a 94       	dec	r0
    39e4:	d2 f7       	brpl	.-12     	; 0x39da <SSDLT_enuDisplayNum+0xa32>
    39e6:	87 70       	andi	r24, 0x07	; 7
    39e8:	90 70       	andi	r25, 0x00	; 0
    39ea:	a0 70       	andi	r26, 0x00	; 0
    39ec:	b0 70       	andi	r27, 0x00	; 0
    39ee:	81 30       	cpi	r24, 0x01	; 1
    39f0:	91 05       	cpc	r25, r1
    39f2:	a1 05       	cpc	r26, r1
    39f4:	b1 05       	cpc	r27, r1
    39f6:	19 f0       	breq	.+6      	; 0x39fe <SSDLT_enuDisplayNum+0xa56>
		{
			return Local_enuErrorState;
    39f8:	8e 81       	ldd	r24, Y+6	; 0x06
    39fa:	89 87       	std	Y+9, r24	; 0x09
    39fc:	0a c0       	rjmp	.+20     	; 0x3a12 <SSDLT_enuDisplayNum+0xa6a>
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    39fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3a00:	8d 5f       	subi	r24, 0xFD	; 253
    3a02:	8d 83       	std	Y+5, r24	; 0x05
    3a04:	8d 81       	ldd	r24, Y+5	; 0x05
    3a06:	85 31       	cpi	r24, 0x15	; 21
    3a08:	f8 f2       	brcs	.-66     	; 0x39c8 <SSDLT_enuDisplayNum+0xa20>
		{
			return Local_enuErrorState;
		}
	}

	Local_enuErrorState = ES_OK;
    3a0a:	81 e0       	ldi	r24, 0x01	; 1
    3a0c:	8e 83       	std	Y+6, r24	; 0x06

	return Local_enuErrorState;
    3a0e:	8e 81       	ldd	r24, Y+6	; 0x06
    3a10:	89 87       	std	Y+9, r24	; 0x09
    3a12:	89 85       	ldd	r24, Y+9	; 0x09
}
    3a14:	6e 96       	adiw	r28, 0x1e	; 30
    3a16:	0f b6       	in	r0, 0x3f	; 63
    3a18:	f8 94       	cli
    3a1a:	de bf       	out	0x3e, r29	; 62
    3a1c:	0f be       	out	0x3f, r0	; 63
    3a1e:	cd bf       	out	0x3d, r28	; 61
    3a20:	cf 91       	pop	r28
    3a22:	df 91       	pop	r29
    3a24:	08 95       	ret

00003a26 <SSDLT_enuEnableCommon>:

ES_t SSDLT_enuEnableCommon(u8 Copy_u8SegID)
{
    3a26:	df 93       	push	r29
    3a28:	cf 93       	push	r28
    3a2a:	00 d0       	rcall	.+0      	; 0x3a2c <SSDLT_enuEnableCommon+0x6>
    3a2c:	cd b7       	in	r28, 0x3d	; 61
    3a2e:	de b7       	in	r29, 0x3e	; 62
    3a30:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3a32:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8SegID < SEG_NUM)
    3a34:	8a 81       	ldd	r24, Y+2	; 0x02
    3a36:	82 30       	cpi	r24, 0x02	; 2
    3a38:	08 f0       	brcs	.+2      	; 0x3a3c <SSDLT_enuEnableCommon+0x16>
    3a3a:	c2 c0       	rjmp	.+388    	; 0x3bc0 <SSDLT_enuEnableCommon+0x19a>
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port != NOT_CONNECTED ||
    3a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a3e:	48 2f       	mov	r20, r24
    3a40:	50 e0       	ldi	r21, 0x00	; 0
    3a42:	ca 01       	movw	r24, r20
    3a44:	88 0f       	add	r24, r24
    3a46:	99 1f       	adc	r25, r25
    3a48:	9c 01       	movw	r18, r24
    3a4a:	22 0f       	add	r18, r18
    3a4c:	33 1f       	adc	r19, r19
    3a4e:	22 0f       	add	r18, r18
    3a50:	33 1f       	adc	r19, r19
    3a52:	22 0f       	add	r18, r18
    3a54:	33 1f       	adc	r19, r19
    3a56:	82 0f       	add	r24, r18
    3a58:	93 1f       	adc	r25, r19
    3a5a:	84 0f       	add	r24, r20
    3a5c:	95 1f       	adc	r25, r21
    3a5e:	fc 01       	movw	r30, r24
    3a60:	ec 56       	subi	r30, 0x6C	; 108
    3a62:	fe 4f       	sbci	r31, 0xFE	; 254
    3a64:	80 81       	ld	r24, Z
    3a66:	82 30       	cpi	r24, 0x02	; 2
    3a68:	c1 f4       	brne	.+48     	; 0x3a9a <SSDLT_enuEnableCommon+0x74>
    3a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a6c:	48 2f       	mov	r20, r24
    3a6e:	50 e0       	ldi	r21, 0x00	; 0
    3a70:	ca 01       	movw	r24, r20
    3a72:	88 0f       	add	r24, r24
    3a74:	99 1f       	adc	r25, r25
    3a76:	9c 01       	movw	r18, r24
    3a78:	22 0f       	add	r18, r18
    3a7a:	33 1f       	adc	r19, r19
    3a7c:	22 0f       	add	r18, r18
    3a7e:	33 1f       	adc	r19, r19
    3a80:	22 0f       	add	r18, r18
    3a82:	33 1f       	adc	r19, r19
    3a84:	82 0f       	add	r24, r18
    3a86:	93 1f       	adc	r25, r19
    3a88:	84 0f       	add	r24, r20
    3a8a:	95 1f       	adc	r25, r21
    3a8c:	fc 01       	movw	r30, r24
    3a8e:	eb 56       	subi	r30, 0x6B	; 107
    3a90:	fe 4f       	sbci	r31, 0xFE	; 254
    3a92:	80 81       	ld	r24, Z
    3a94:	82 30       	cpi	r24, 0x02	; 2
    3a96:	09 f4       	brne	.+2      	; 0x3a9a <SSDLT_enuEnableCommon+0x74>
    3a98:	95 c0       	rjmp	.+298    	; 0x3bc4 <SSDLT_enuEnableCommon+0x19e>
				SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin != NOT_CONNECTED)
		{
			if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    3a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a9c:	48 2f       	mov	r20, r24
    3a9e:	50 e0       	ldi	r21, 0x00	; 0
    3aa0:	ca 01       	movw	r24, r20
    3aa2:	88 0f       	add	r24, r24
    3aa4:	99 1f       	adc	r25, r25
    3aa6:	9c 01       	movw	r18, r24
    3aa8:	22 0f       	add	r18, r18
    3aaa:	33 1f       	adc	r19, r19
    3aac:	22 0f       	add	r18, r18
    3aae:	33 1f       	adc	r19, r19
    3ab0:	22 0f       	add	r18, r18
    3ab2:	33 1f       	adc	r19, r19
    3ab4:	82 0f       	add	r24, r18
    3ab6:	93 1f       	adc	r25, r19
    3ab8:	84 0f       	add	r24, r20
    3aba:	95 1f       	adc	r25, r21
    3abc:	fc 01       	movw	r30, r24
    3abe:	e8 56       	subi	r30, 0x68	; 104
    3ac0:	fe 4f       	sbci	r31, 0xFE	; 254
    3ac2:	80 81       	ld	r24, Z
    3ac4:	81 30       	cpi	r24, 0x01	; 1
    3ac6:	89 f5       	brne	.+98     	; 0x3b2a <SSDLT_enuEnableCommon+0x104>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port,
    3ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    3aca:	48 2f       	mov	r20, r24
    3acc:	50 e0       	ldi	r21, 0x00	; 0
    3ace:	ca 01       	movw	r24, r20
    3ad0:	88 0f       	add	r24, r24
    3ad2:	99 1f       	adc	r25, r25
    3ad4:	9c 01       	movw	r18, r24
    3ad6:	22 0f       	add	r18, r18
    3ad8:	33 1f       	adc	r19, r19
    3ada:	22 0f       	add	r18, r18
    3adc:	33 1f       	adc	r19, r19
    3ade:	22 0f       	add	r18, r18
    3ae0:	33 1f       	adc	r19, r19
    3ae2:	82 0f       	add	r24, r18
    3ae4:	93 1f       	adc	r25, r19
    3ae6:	84 0f       	add	r24, r20
    3ae8:	95 1f       	adc	r25, r21
    3aea:	fc 01       	movw	r30, r24
    3aec:	ec 56       	subi	r30, 0x6C	; 108
    3aee:	fe 4f       	sbci	r31, 0xFE	; 254
    3af0:	60 81       	ld	r22, Z
    3af2:	8a 81       	ldd	r24, Y+2	; 0x02
    3af4:	48 2f       	mov	r20, r24
    3af6:	50 e0       	ldi	r21, 0x00	; 0
    3af8:	ca 01       	movw	r24, r20
    3afa:	88 0f       	add	r24, r24
    3afc:	99 1f       	adc	r25, r25
    3afe:	9c 01       	movw	r18, r24
    3b00:	22 0f       	add	r18, r18
    3b02:	33 1f       	adc	r19, r19
    3b04:	22 0f       	add	r18, r18
    3b06:	33 1f       	adc	r19, r19
    3b08:	22 0f       	add	r18, r18
    3b0a:	33 1f       	adc	r19, r19
    3b0c:	82 0f       	add	r24, r18
    3b0e:	93 1f       	adc	r25, r19
    3b10:	84 0f       	add	r24, r20
    3b12:	95 1f       	adc	r25, r21
    3b14:	fc 01       	movw	r30, r24
    3b16:	eb 56       	subi	r30, 0x6B	; 107
    3b18:	fe 4f       	sbci	r31, 0xFE	; 254
    3b1a:	90 81       	ld	r25, Z
    3b1c:	86 2f       	mov	r24, r22
    3b1e:	69 2f       	mov	r22, r25
    3b20:	40 e0       	ldi	r20, 0x00	; 0
    3b22:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    3b26:	89 83       	std	Y+1, r24	; 0x01
    3b28:	4d c0       	rjmp	.+154    	; 0x3bc4 <SSDLT_enuEnableCommon+0x19e>
														 SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin, DIO_u8LOW);
			}
			else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    3b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b2c:	48 2f       	mov	r20, r24
    3b2e:	50 e0       	ldi	r21, 0x00	; 0
    3b30:	ca 01       	movw	r24, r20
    3b32:	88 0f       	add	r24, r24
    3b34:	99 1f       	adc	r25, r25
    3b36:	9c 01       	movw	r18, r24
    3b38:	22 0f       	add	r18, r18
    3b3a:	33 1f       	adc	r19, r19
    3b3c:	22 0f       	add	r18, r18
    3b3e:	33 1f       	adc	r19, r19
    3b40:	22 0f       	add	r18, r18
    3b42:	33 1f       	adc	r19, r19
    3b44:	82 0f       	add	r24, r18
    3b46:	93 1f       	adc	r25, r19
    3b48:	84 0f       	add	r24, r20
    3b4a:	95 1f       	adc	r25, r21
    3b4c:	fc 01       	movw	r30, r24
    3b4e:	e8 56       	subi	r30, 0x68	; 104
    3b50:	fe 4f       	sbci	r31, 0xFE	; 254
    3b52:	80 81       	ld	r24, Z
    3b54:	88 23       	and	r24, r24
    3b56:	89 f5       	brne	.+98     	; 0x3bba <SSDLT_enuEnableCommon+0x194>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port,
    3b58:	8a 81       	ldd	r24, Y+2	; 0x02
    3b5a:	48 2f       	mov	r20, r24
    3b5c:	50 e0       	ldi	r21, 0x00	; 0
    3b5e:	ca 01       	movw	r24, r20
    3b60:	88 0f       	add	r24, r24
    3b62:	99 1f       	adc	r25, r25
    3b64:	9c 01       	movw	r18, r24
    3b66:	22 0f       	add	r18, r18
    3b68:	33 1f       	adc	r19, r19
    3b6a:	22 0f       	add	r18, r18
    3b6c:	33 1f       	adc	r19, r19
    3b6e:	22 0f       	add	r18, r18
    3b70:	33 1f       	adc	r19, r19
    3b72:	82 0f       	add	r24, r18
    3b74:	93 1f       	adc	r25, r19
    3b76:	84 0f       	add	r24, r20
    3b78:	95 1f       	adc	r25, r21
    3b7a:	fc 01       	movw	r30, r24
    3b7c:	ec 56       	subi	r30, 0x6C	; 108
    3b7e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b80:	60 81       	ld	r22, Z
    3b82:	8a 81       	ldd	r24, Y+2	; 0x02
    3b84:	48 2f       	mov	r20, r24
    3b86:	50 e0       	ldi	r21, 0x00	; 0
    3b88:	ca 01       	movw	r24, r20
    3b8a:	88 0f       	add	r24, r24
    3b8c:	99 1f       	adc	r25, r25
    3b8e:	9c 01       	movw	r18, r24
    3b90:	22 0f       	add	r18, r18
    3b92:	33 1f       	adc	r19, r19
    3b94:	22 0f       	add	r18, r18
    3b96:	33 1f       	adc	r19, r19
    3b98:	22 0f       	add	r18, r18
    3b9a:	33 1f       	adc	r19, r19
    3b9c:	82 0f       	add	r24, r18
    3b9e:	93 1f       	adc	r25, r19
    3ba0:	84 0f       	add	r24, r20
    3ba2:	95 1f       	adc	r25, r21
    3ba4:	fc 01       	movw	r30, r24
    3ba6:	eb 56       	subi	r30, 0x6B	; 107
    3ba8:	fe 4f       	sbci	r31, 0xFE	; 254
    3baa:	90 81       	ld	r25, Z
    3bac:	86 2f       	mov	r24, r22
    3bae:	69 2f       	mov	r22, r25
    3bb0:	41 e0       	ldi	r20, 0x01	; 1
    3bb2:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    3bb6:	89 83       	std	Y+1, r24	; 0x01
    3bb8:	05 c0       	rjmp	.+10     	; 0x3bc4 <SSDLT_enuEnableCommon+0x19e>
														SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin, DIO_u8HIGH);
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    3bba:	83 e0       	ldi	r24, 0x03	; 3
    3bbc:	89 83       	std	Y+1, r24	; 0x01
    3bbe:	02 c0       	rjmp	.+4      	; 0x3bc4 <SSDLT_enuEnableCommon+0x19e>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    3bc0:	83 e0       	ldi	r24, 0x03	; 3
    3bc2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    3bc4:	89 81       	ldd	r24, Y+1	; 0x01
}
    3bc6:	0f 90       	pop	r0
    3bc8:	0f 90       	pop	r0
    3bca:	cf 91       	pop	r28
    3bcc:	df 91       	pop	r29
    3bce:	08 95       	ret

00003bd0 <SSDLT_enuDisableCommon>:

ES_t SSDLT_enuDisableCommon(u8 Copy_u8SegID)
{
    3bd0:	df 93       	push	r29
    3bd2:	cf 93       	push	r28
    3bd4:	00 d0       	rcall	.+0      	; 0x3bd6 <SSDLT_enuDisableCommon+0x6>
    3bd6:	cd b7       	in	r28, 0x3d	; 61
    3bd8:	de b7       	in	r29, 0x3e	; 62
    3bda:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3bdc:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8SegID < SEG_NUM)
    3bde:	8a 81       	ldd	r24, Y+2	; 0x02
    3be0:	82 30       	cpi	r24, 0x02	; 2
    3be2:	08 f0       	brcs	.+2      	; 0x3be6 <SSDLT_enuDisableCommon+0x16>
    3be4:	c2 c0       	rjmp	.+388    	; 0x3d6a <SSDLT_enuDisableCommon+0x19a>
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port != NOT_CONNECTED ||
    3be6:	8a 81       	ldd	r24, Y+2	; 0x02
    3be8:	48 2f       	mov	r20, r24
    3bea:	50 e0       	ldi	r21, 0x00	; 0
    3bec:	ca 01       	movw	r24, r20
    3bee:	88 0f       	add	r24, r24
    3bf0:	99 1f       	adc	r25, r25
    3bf2:	9c 01       	movw	r18, r24
    3bf4:	22 0f       	add	r18, r18
    3bf6:	33 1f       	adc	r19, r19
    3bf8:	22 0f       	add	r18, r18
    3bfa:	33 1f       	adc	r19, r19
    3bfc:	22 0f       	add	r18, r18
    3bfe:	33 1f       	adc	r19, r19
    3c00:	82 0f       	add	r24, r18
    3c02:	93 1f       	adc	r25, r19
    3c04:	84 0f       	add	r24, r20
    3c06:	95 1f       	adc	r25, r21
    3c08:	fc 01       	movw	r30, r24
    3c0a:	ec 56       	subi	r30, 0x6C	; 108
    3c0c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c0e:	80 81       	ld	r24, Z
    3c10:	82 30       	cpi	r24, 0x02	; 2
    3c12:	c1 f4       	brne	.+48     	; 0x3c44 <SSDLT_enuDisableCommon+0x74>
    3c14:	8a 81       	ldd	r24, Y+2	; 0x02
    3c16:	48 2f       	mov	r20, r24
    3c18:	50 e0       	ldi	r21, 0x00	; 0
    3c1a:	ca 01       	movw	r24, r20
    3c1c:	88 0f       	add	r24, r24
    3c1e:	99 1f       	adc	r25, r25
    3c20:	9c 01       	movw	r18, r24
    3c22:	22 0f       	add	r18, r18
    3c24:	33 1f       	adc	r19, r19
    3c26:	22 0f       	add	r18, r18
    3c28:	33 1f       	adc	r19, r19
    3c2a:	22 0f       	add	r18, r18
    3c2c:	33 1f       	adc	r19, r19
    3c2e:	82 0f       	add	r24, r18
    3c30:	93 1f       	adc	r25, r19
    3c32:	84 0f       	add	r24, r20
    3c34:	95 1f       	adc	r25, r21
    3c36:	fc 01       	movw	r30, r24
    3c38:	eb 56       	subi	r30, 0x6B	; 107
    3c3a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c3c:	80 81       	ld	r24, Z
    3c3e:	82 30       	cpi	r24, 0x02	; 2
    3c40:	09 f4       	brne	.+2      	; 0x3c44 <SSDLT_enuDisableCommon+0x74>
    3c42:	95 c0       	rjmp	.+298    	; 0x3d6e <SSDLT_enuDisableCommon+0x19e>
				SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin != NOT_CONNECTED)
		{
			if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    3c44:	8a 81       	ldd	r24, Y+2	; 0x02
    3c46:	48 2f       	mov	r20, r24
    3c48:	50 e0       	ldi	r21, 0x00	; 0
    3c4a:	ca 01       	movw	r24, r20
    3c4c:	88 0f       	add	r24, r24
    3c4e:	99 1f       	adc	r25, r25
    3c50:	9c 01       	movw	r18, r24
    3c52:	22 0f       	add	r18, r18
    3c54:	33 1f       	adc	r19, r19
    3c56:	22 0f       	add	r18, r18
    3c58:	33 1f       	adc	r19, r19
    3c5a:	22 0f       	add	r18, r18
    3c5c:	33 1f       	adc	r19, r19
    3c5e:	82 0f       	add	r24, r18
    3c60:	93 1f       	adc	r25, r19
    3c62:	84 0f       	add	r24, r20
    3c64:	95 1f       	adc	r25, r21
    3c66:	fc 01       	movw	r30, r24
    3c68:	e8 56       	subi	r30, 0x68	; 104
    3c6a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c6c:	80 81       	ld	r24, Z
    3c6e:	81 30       	cpi	r24, 0x01	; 1
    3c70:	89 f5       	brne	.+98     	; 0x3cd4 <SSDLT_enuDisableCommon+0x104>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port,
    3c72:	8a 81       	ldd	r24, Y+2	; 0x02
    3c74:	48 2f       	mov	r20, r24
    3c76:	50 e0       	ldi	r21, 0x00	; 0
    3c78:	ca 01       	movw	r24, r20
    3c7a:	88 0f       	add	r24, r24
    3c7c:	99 1f       	adc	r25, r25
    3c7e:	9c 01       	movw	r18, r24
    3c80:	22 0f       	add	r18, r18
    3c82:	33 1f       	adc	r19, r19
    3c84:	22 0f       	add	r18, r18
    3c86:	33 1f       	adc	r19, r19
    3c88:	22 0f       	add	r18, r18
    3c8a:	33 1f       	adc	r19, r19
    3c8c:	82 0f       	add	r24, r18
    3c8e:	93 1f       	adc	r25, r19
    3c90:	84 0f       	add	r24, r20
    3c92:	95 1f       	adc	r25, r21
    3c94:	fc 01       	movw	r30, r24
    3c96:	ec 56       	subi	r30, 0x6C	; 108
    3c98:	fe 4f       	sbci	r31, 0xFE	; 254
    3c9a:	60 81       	ld	r22, Z
    3c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c9e:	48 2f       	mov	r20, r24
    3ca0:	50 e0       	ldi	r21, 0x00	; 0
    3ca2:	ca 01       	movw	r24, r20
    3ca4:	88 0f       	add	r24, r24
    3ca6:	99 1f       	adc	r25, r25
    3ca8:	9c 01       	movw	r18, r24
    3caa:	22 0f       	add	r18, r18
    3cac:	33 1f       	adc	r19, r19
    3cae:	22 0f       	add	r18, r18
    3cb0:	33 1f       	adc	r19, r19
    3cb2:	22 0f       	add	r18, r18
    3cb4:	33 1f       	adc	r19, r19
    3cb6:	82 0f       	add	r24, r18
    3cb8:	93 1f       	adc	r25, r19
    3cba:	84 0f       	add	r24, r20
    3cbc:	95 1f       	adc	r25, r21
    3cbe:	fc 01       	movw	r30, r24
    3cc0:	eb 56       	subi	r30, 0x6B	; 107
    3cc2:	fe 4f       	sbci	r31, 0xFE	; 254
    3cc4:	90 81       	ld	r25, Z
    3cc6:	86 2f       	mov	r24, r22
    3cc8:	69 2f       	mov	r22, r25
    3cca:	41 e0       	ldi	r20, 0x01	; 1
    3ccc:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    3cd0:	89 83       	std	Y+1, r24	; 0x01
    3cd2:	4d c0       	rjmp	.+154    	; 0x3d6e <SSDLT_enuDisableCommon+0x19e>
														 SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin, DIO_u8HIGH);
			}
			else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    3cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd6:	48 2f       	mov	r20, r24
    3cd8:	50 e0       	ldi	r21, 0x00	; 0
    3cda:	ca 01       	movw	r24, r20
    3cdc:	88 0f       	add	r24, r24
    3cde:	99 1f       	adc	r25, r25
    3ce0:	9c 01       	movw	r18, r24
    3ce2:	22 0f       	add	r18, r18
    3ce4:	33 1f       	adc	r19, r19
    3ce6:	22 0f       	add	r18, r18
    3ce8:	33 1f       	adc	r19, r19
    3cea:	22 0f       	add	r18, r18
    3cec:	33 1f       	adc	r19, r19
    3cee:	82 0f       	add	r24, r18
    3cf0:	93 1f       	adc	r25, r19
    3cf2:	84 0f       	add	r24, r20
    3cf4:	95 1f       	adc	r25, r21
    3cf6:	fc 01       	movw	r30, r24
    3cf8:	e8 56       	subi	r30, 0x68	; 104
    3cfa:	fe 4f       	sbci	r31, 0xFE	; 254
    3cfc:	80 81       	ld	r24, Z
    3cfe:	88 23       	and	r24, r24
    3d00:	89 f5       	brne	.+98     	; 0x3d64 <SSDLT_enuDisableCommon+0x194>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Port,
    3d02:	8a 81       	ldd	r24, Y+2	; 0x02
    3d04:	48 2f       	mov	r20, r24
    3d06:	50 e0       	ldi	r21, 0x00	; 0
    3d08:	ca 01       	movw	r24, r20
    3d0a:	88 0f       	add	r24, r24
    3d0c:	99 1f       	adc	r25, r25
    3d0e:	9c 01       	movw	r18, r24
    3d10:	22 0f       	add	r18, r18
    3d12:	33 1f       	adc	r19, r19
    3d14:	22 0f       	add	r18, r18
    3d16:	33 1f       	adc	r19, r19
    3d18:	22 0f       	add	r18, r18
    3d1a:	33 1f       	adc	r19, r19
    3d1c:	82 0f       	add	r24, r18
    3d1e:	93 1f       	adc	r25, r19
    3d20:	84 0f       	add	r24, r20
    3d22:	95 1f       	adc	r25, r21
    3d24:	fc 01       	movw	r30, r24
    3d26:	ec 56       	subi	r30, 0x6C	; 108
    3d28:	fe 4f       	sbci	r31, 0xFE	; 254
    3d2a:	60 81       	ld	r22, Z
    3d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d2e:	48 2f       	mov	r20, r24
    3d30:	50 e0       	ldi	r21, 0x00	; 0
    3d32:	ca 01       	movw	r24, r20
    3d34:	88 0f       	add	r24, r24
    3d36:	99 1f       	adc	r25, r25
    3d38:	9c 01       	movw	r18, r24
    3d3a:	22 0f       	add	r18, r18
    3d3c:	33 1f       	adc	r19, r19
    3d3e:	22 0f       	add	r18, r18
    3d40:	33 1f       	adc	r19, r19
    3d42:	22 0f       	add	r18, r18
    3d44:	33 1f       	adc	r19, r19
    3d46:	82 0f       	add	r24, r18
    3d48:	93 1f       	adc	r25, r19
    3d4a:	84 0f       	add	r24, r20
    3d4c:	95 1f       	adc	r25, r21
    3d4e:	fc 01       	movw	r30, r24
    3d50:	eb 56       	subi	r30, 0x6B	; 107
    3d52:	fe 4f       	sbci	r31, 0xFE	; 254
    3d54:	90 81       	ld	r25, Z
    3d56:	86 2f       	mov	r24, r22
    3d58:	69 2f       	mov	r22, r25
    3d5a:	40 e0       	ldi	r20, 0x00	; 0
    3d5c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    3d60:	89 83       	std	Y+1, r24	; 0x01
    3d62:	05 c0       	rjmp	.+10     	; 0x3d6e <SSDLT_enuDisableCommon+0x19e>
														SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CMN_Pin, DIO_u8LOW);
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    3d64:	83 e0       	ldi	r24, 0x03	; 3
    3d66:	89 83       	std	Y+1, r24	; 0x01
    3d68:	02 c0       	rjmp	.+4      	; 0x3d6e <SSDLT_enuDisableCommon+0x19e>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    3d6a:	83 e0       	ldi	r24, 0x03	; 3
    3d6c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    3d6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d70:	0f 90       	pop	r0
    3d72:	0f 90       	pop	r0
    3d74:	cf 91       	pop	r28
    3d76:	df 91       	pop	r29
    3d78:	08 95       	ret

00003d7a <SSDLT_enuEnableDot>:

ES_t SSDLT_enuEnableDot(u8 Copy_u8SegID)
{
    3d7a:	df 93       	push	r29
    3d7c:	cf 93       	push	r28
    3d7e:	00 d0       	rcall	.+0      	; 0x3d80 <SSDLT_enuEnableDot+0x6>
    3d80:	cd b7       	in	r28, 0x3d	; 61
    3d82:	de b7       	in	r29, 0x3e	; 62
    3d84:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3d86:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8SegID < SEG_NUM)
    3d88:	8a 81       	ldd	r24, Y+2	; 0x02
    3d8a:	82 30       	cpi	r24, 0x02	; 2
    3d8c:	08 f0       	brcs	.+2      	; 0x3d90 <SSDLT_enuEnableDot+0x16>
    3d8e:	c2 c0       	rjmp	.+388    	; 0x3f14 <SSDLT_enuEnableDot+0x19a>
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port != NOT_CONNECTED ||
    3d90:	8a 81       	ldd	r24, Y+2	; 0x02
    3d92:	48 2f       	mov	r20, r24
    3d94:	50 e0       	ldi	r21, 0x00	; 0
    3d96:	ca 01       	movw	r24, r20
    3d98:	88 0f       	add	r24, r24
    3d9a:	99 1f       	adc	r25, r25
    3d9c:	9c 01       	movw	r18, r24
    3d9e:	22 0f       	add	r18, r18
    3da0:	33 1f       	adc	r19, r19
    3da2:	22 0f       	add	r18, r18
    3da4:	33 1f       	adc	r19, r19
    3da6:	22 0f       	add	r18, r18
    3da8:	33 1f       	adc	r19, r19
    3daa:	82 0f       	add	r24, r18
    3dac:	93 1f       	adc	r25, r19
    3dae:	84 0f       	add	r24, r20
    3db0:	95 1f       	adc	r25, r21
    3db2:	fc 01       	movw	r30, r24
    3db4:	ea 56       	subi	r30, 0x6A	; 106
    3db6:	fe 4f       	sbci	r31, 0xFE	; 254
    3db8:	80 81       	ld	r24, Z
    3dba:	82 30       	cpi	r24, 0x02	; 2
    3dbc:	c1 f4       	brne	.+48     	; 0x3dee <SSDLT_enuEnableDot+0x74>
    3dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc0:	48 2f       	mov	r20, r24
    3dc2:	50 e0       	ldi	r21, 0x00	; 0
    3dc4:	ca 01       	movw	r24, r20
    3dc6:	88 0f       	add	r24, r24
    3dc8:	99 1f       	adc	r25, r25
    3dca:	9c 01       	movw	r18, r24
    3dcc:	22 0f       	add	r18, r18
    3dce:	33 1f       	adc	r19, r19
    3dd0:	22 0f       	add	r18, r18
    3dd2:	33 1f       	adc	r19, r19
    3dd4:	22 0f       	add	r18, r18
    3dd6:	33 1f       	adc	r19, r19
    3dd8:	82 0f       	add	r24, r18
    3dda:	93 1f       	adc	r25, r19
    3ddc:	84 0f       	add	r24, r20
    3dde:	95 1f       	adc	r25, r21
    3de0:	fc 01       	movw	r30, r24
    3de2:	e9 56       	subi	r30, 0x69	; 105
    3de4:	fe 4f       	sbci	r31, 0xFE	; 254
    3de6:	80 81       	ld	r24, Z
    3de8:	82 30       	cpi	r24, 0x02	; 2
    3dea:	09 f4       	brne	.+2      	; 0x3dee <SSDLT_enuEnableDot+0x74>
    3dec:	95 c0       	rjmp	.+298    	; 0x3f18 <SSDLT_enuEnableDot+0x19e>
				SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin != NOT_CONNECTED)
		{
			if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    3dee:	8a 81       	ldd	r24, Y+2	; 0x02
    3df0:	48 2f       	mov	r20, r24
    3df2:	50 e0       	ldi	r21, 0x00	; 0
    3df4:	ca 01       	movw	r24, r20
    3df6:	88 0f       	add	r24, r24
    3df8:	99 1f       	adc	r25, r25
    3dfa:	9c 01       	movw	r18, r24
    3dfc:	22 0f       	add	r18, r18
    3dfe:	33 1f       	adc	r19, r19
    3e00:	22 0f       	add	r18, r18
    3e02:	33 1f       	adc	r19, r19
    3e04:	22 0f       	add	r18, r18
    3e06:	33 1f       	adc	r19, r19
    3e08:	82 0f       	add	r24, r18
    3e0a:	93 1f       	adc	r25, r19
    3e0c:	84 0f       	add	r24, r20
    3e0e:	95 1f       	adc	r25, r21
    3e10:	fc 01       	movw	r30, r24
    3e12:	e8 56       	subi	r30, 0x68	; 104
    3e14:	fe 4f       	sbci	r31, 0xFE	; 254
    3e16:	80 81       	ld	r24, Z
    3e18:	81 30       	cpi	r24, 0x01	; 1
    3e1a:	89 f5       	brne	.+98     	; 0x3e7e <SSDLT_enuEnableDot+0x104>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port,
    3e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e1e:	48 2f       	mov	r20, r24
    3e20:	50 e0       	ldi	r21, 0x00	; 0
    3e22:	ca 01       	movw	r24, r20
    3e24:	88 0f       	add	r24, r24
    3e26:	99 1f       	adc	r25, r25
    3e28:	9c 01       	movw	r18, r24
    3e2a:	22 0f       	add	r18, r18
    3e2c:	33 1f       	adc	r19, r19
    3e2e:	22 0f       	add	r18, r18
    3e30:	33 1f       	adc	r19, r19
    3e32:	22 0f       	add	r18, r18
    3e34:	33 1f       	adc	r19, r19
    3e36:	82 0f       	add	r24, r18
    3e38:	93 1f       	adc	r25, r19
    3e3a:	84 0f       	add	r24, r20
    3e3c:	95 1f       	adc	r25, r21
    3e3e:	fc 01       	movw	r30, r24
    3e40:	ea 56       	subi	r30, 0x6A	; 106
    3e42:	fe 4f       	sbci	r31, 0xFE	; 254
    3e44:	60 81       	ld	r22, Z
    3e46:	8a 81       	ldd	r24, Y+2	; 0x02
    3e48:	48 2f       	mov	r20, r24
    3e4a:	50 e0       	ldi	r21, 0x00	; 0
    3e4c:	ca 01       	movw	r24, r20
    3e4e:	88 0f       	add	r24, r24
    3e50:	99 1f       	adc	r25, r25
    3e52:	9c 01       	movw	r18, r24
    3e54:	22 0f       	add	r18, r18
    3e56:	33 1f       	adc	r19, r19
    3e58:	22 0f       	add	r18, r18
    3e5a:	33 1f       	adc	r19, r19
    3e5c:	22 0f       	add	r18, r18
    3e5e:	33 1f       	adc	r19, r19
    3e60:	82 0f       	add	r24, r18
    3e62:	93 1f       	adc	r25, r19
    3e64:	84 0f       	add	r24, r20
    3e66:	95 1f       	adc	r25, r21
    3e68:	fc 01       	movw	r30, r24
    3e6a:	e9 56       	subi	r30, 0x69	; 105
    3e6c:	fe 4f       	sbci	r31, 0xFE	; 254
    3e6e:	90 81       	ld	r25, Z
    3e70:	86 2f       	mov	r24, r22
    3e72:	69 2f       	mov	r22, r25
    3e74:	41 e0       	ldi	r20, 0x01	; 1
    3e76:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    3e7a:	89 83       	std	Y+1, r24	; 0x01
    3e7c:	4d c0       	rjmp	.+154    	; 0x3f18 <SSDLT_enuEnableDot+0x19e>
														 SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin, DIO_u8HIGH);
			}
			else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    3e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e80:	48 2f       	mov	r20, r24
    3e82:	50 e0       	ldi	r21, 0x00	; 0
    3e84:	ca 01       	movw	r24, r20
    3e86:	88 0f       	add	r24, r24
    3e88:	99 1f       	adc	r25, r25
    3e8a:	9c 01       	movw	r18, r24
    3e8c:	22 0f       	add	r18, r18
    3e8e:	33 1f       	adc	r19, r19
    3e90:	22 0f       	add	r18, r18
    3e92:	33 1f       	adc	r19, r19
    3e94:	22 0f       	add	r18, r18
    3e96:	33 1f       	adc	r19, r19
    3e98:	82 0f       	add	r24, r18
    3e9a:	93 1f       	adc	r25, r19
    3e9c:	84 0f       	add	r24, r20
    3e9e:	95 1f       	adc	r25, r21
    3ea0:	fc 01       	movw	r30, r24
    3ea2:	e8 56       	subi	r30, 0x68	; 104
    3ea4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ea6:	80 81       	ld	r24, Z
    3ea8:	88 23       	and	r24, r24
    3eaa:	89 f5       	brne	.+98     	; 0x3f0e <SSDLT_enuEnableDot+0x194>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port,
    3eac:	8a 81       	ldd	r24, Y+2	; 0x02
    3eae:	48 2f       	mov	r20, r24
    3eb0:	50 e0       	ldi	r21, 0x00	; 0
    3eb2:	ca 01       	movw	r24, r20
    3eb4:	88 0f       	add	r24, r24
    3eb6:	99 1f       	adc	r25, r25
    3eb8:	9c 01       	movw	r18, r24
    3eba:	22 0f       	add	r18, r18
    3ebc:	33 1f       	adc	r19, r19
    3ebe:	22 0f       	add	r18, r18
    3ec0:	33 1f       	adc	r19, r19
    3ec2:	22 0f       	add	r18, r18
    3ec4:	33 1f       	adc	r19, r19
    3ec6:	82 0f       	add	r24, r18
    3ec8:	93 1f       	adc	r25, r19
    3eca:	84 0f       	add	r24, r20
    3ecc:	95 1f       	adc	r25, r21
    3ece:	fc 01       	movw	r30, r24
    3ed0:	ea 56       	subi	r30, 0x6A	; 106
    3ed2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ed4:	60 81       	ld	r22, Z
    3ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ed8:	48 2f       	mov	r20, r24
    3eda:	50 e0       	ldi	r21, 0x00	; 0
    3edc:	ca 01       	movw	r24, r20
    3ede:	88 0f       	add	r24, r24
    3ee0:	99 1f       	adc	r25, r25
    3ee2:	9c 01       	movw	r18, r24
    3ee4:	22 0f       	add	r18, r18
    3ee6:	33 1f       	adc	r19, r19
    3ee8:	22 0f       	add	r18, r18
    3eea:	33 1f       	adc	r19, r19
    3eec:	22 0f       	add	r18, r18
    3eee:	33 1f       	adc	r19, r19
    3ef0:	82 0f       	add	r24, r18
    3ef2:	93 1f       	adc	r25, r19
    3ef4:	84 0f       	add	r24, r20
    3ef6:	95 1f       	adc	r25, r21
    3ef8:	fc 01       	movw	r30, r24
    3efa:	e9 56       	subi	r30, 0x69	; 105
    3efc:	fe 4f       	sbci	r31, 0xFE	; 254
    3efe:	90 81       	ld	r25, Z
    3f00:	86 2f       	mov	r24, r22
    3f02:	69 2f       	mov	r22, r25
    3f04:	40 e0       	ldi	r20, 0x00	; 0
    3f06:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    3f0a:	89 83       	std	Y+1, r24	; 0x01
    3f0c:	05 c0       	rjmp	.+10     	; 0x3f18 <SSDLT_enuEnableDot+0x19e>
														SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin, DIO_u8LOW);
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    3f0e:	83 e0       	ldi	r24, 0x03	; 3
    3f10:	89 83       	std	Y+1, r24	; 0x01
    3f12:	02 c0       	rjmp	.+4      	; 0x3f18 <SSDLT_enuEnableDot+0x19e>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    3f14:	83 e0       	ldi	r24, 0x03	; 3
    3f16:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    3f18:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f1a:	0f 90       	pop	r0
    3f1c:	0f 90       	pop	r0
    3f1e:	cf 91       	pop	r28
    3f20:	df 91       	pop	r29
    3f22:	08 95       	ret

00003f24 <SSDLT_enuDisableDot>:

ES_t SSDLT_enuDisableDot(u8 Copy_u8SegID)
{
    3f24:	df 93       	push	r29
    3f26:	cf 93       	push	r28
    3f28:	00 d0       	rcall	.+0      	; 0x3f2a <SSDLT_enuDisableDot+0x6>
    3f2a:	0f 92       	push	r0
    3f2c:	cd b7       	in	r28, 0x3d	; 61
    3f2e:	de b7       	in	r29, 0x3e	; 62
    3f30:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3f32:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8SegID < SEG_NUM)
    3f34:	8a 81       	ldd	r24, Y+2	; 0x02
    3f36:	82 30       	cpi	r24, 0x02	; 2
    3f38:	08 f0       	brcs	.+2      	; 0x3f3c <SSDLT_enuDisableDot+0x18>
    3f3a:	c5 c0       	rjmp	.+394    	; 0x40c6 <SSDLT_enuDisableDot+0x1a2>
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port != NOT_CONNECTED ||
    3f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f3e:	48 2f       	mov	r20, r24
    3f40:	50 e0       	ldi	r21, 0x00	; 0
    3f42:	ca 01       	movw	r24, r20
    3f44:	88 0f       	add	r24, r24
    3f46:	99 1f       	adc	r25, r25
    3f48:	9c 01       	movw	r18, r24
    3f4a:	22 0f       	add	r18, r18
    3f4c:	33 1f       	adc	r19, r19
    3f4e:	22 0f       	add	r18, r18
    3f50:	33 1f       	adc	r19, r19
    3f52:	22 0f       	add	r18, r18
    3f54:	33 1f       	adc	r19, r19
    3f56:	82 0f       	add	r24, r18
    3f58:	93 1f       	adc	r25, r19
    3f5a:	84 0f       	add	r24, r20
    3f5c:	95 1f       	adc	r25, r21
    3f5e:	fc 01       	movw	r30, r24
    3f60:	ea 56       	subi	r30, 0x6A	; 106
    3f62:	fe 4f       	sbci	r31, 0xFE	; 254
    3f64:	80 81       	ld	r24, Z
    3f66:	82 30       	cpi	r24, 0x02	; 2
    3f68:	c1 f4       	brne	.+48     	; 0x3f9a <SSDLT_enuDisableDot+0x76>
    3f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f6c:	48 2f       	mov	r20, r24
    3f6e:	50 e0       	ldi	r21, 0x00	; 0
    3f70:	ca 01       	movw	r24, r20
    3f72:	88 0f       	add	r24, r24
    3f74:	99 1f       	adc	r25, r25
    3f76:	9c 01       	movw	r18, r24
    3f78:	22 0f       	add	r18, r18
    3f7a:	33 1f       	adc	r19, r19
    3f7c:	22 0f       	add	r18, r18
    3f7e:	33 1f       	adc	r19, r19
    3f80:	22 0f       	add	r18, r18
    3f82:	33 1f       	adc	r19, r19
    3f84:	82 0f       	add	r24, r18
    3f86:	93 1f       	adc	r25, r19
    3f88:	84 0f       	add	r24, r20
    3f8a:	95 1f       	adc	r25, r21
    3f8c:	fc 01       	movw	r30, r24
    3f8e:	e9 56       	subi	r30, 0x69	; 105
    3f90:	fe 4f       	sbci	r31, 0xFE	; 254
    3f92:	80 81       	ld	r24, Z
    3f94:	82 30       	cpi	r24, 0x02	; 2
    3f96:	09 f4       	brne	.+2      	; 0x3f9a <SSDLT_enuDisableDot+0x76>
    3f98:	93 c0       	rjmp	.+294    	; 0x40c0 <SSDLT_enuDisableDot+0x19c>
				SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin != NOT_CONNECTED)
		{
			if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    3f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f9c:	48 2f       	mov	r20, r24
    3f9e:	50 e0       	ldi	r21, 0x00	; 0
    3fa0:	ca 01       	movw	r24, r20
    3fa2:	88 0f       	add	r24, r24
    3fa4:	99 1f       	adc	r25, r25
    3fa6:	9c 01       	movw	r18, r24
    3fa8:	22 0f       	add	r18, r18
    3faa:	33 1f       	adc	r19, r19
    3fac:	22 0f       	add	r18, r18
    3fae:	33 1f       	adc	r19, r19
    3fb0:	22 0f       	add	r18, r18
    3fb2:	33 1f       	adc	r19, r19
    3fb4:	82 0f       	add	r24, r18
    3fb6:	93 1f       	adc	r25, r19
    3fb8:	84 0f       	add	r24, r20
    3fba:	95 1f       	adc	r25, r21
    3fbc:	fc 01       	movw	r30, r24
    3fbe:	e8 56       	subi	r30, 0x68	; 104
    3fc0:	fe 4f       	sbci	r31, 0xFE	; 254
    3fc2:	80 81       	ld	r24, Z
    3fc4:	81 30       	cpi	r24, 0x01	; 1
    3fc6:	89 f5       	brne	.+98     	; 0x402a <SSDLT_enuDisableDot+0x106>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port,
    3fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fca:	48 2f       	mov	r20, r24
    3fcc:	50 e0       	ldi	r21, 0x00	; 0
    3fce:	ca 01       	movw	r24, r20
    3fd0:	88 0f       	add	r24, r24
    3fd2:	99 1f       	adc	r25, r25
    3fd4:	9c 01       	movw	r18, r24
    3fd6:	22 0f       	add	r18, r18
    3fd8:	33 1f       	adc	r19, r19
    3fda:	22 0f       	add	r18, r18
    3fdc:	33 1f       	adc	r19, r19
    3fde:	22 0f       	add	r18, r18
    3fe0:	33 1f       	adc	r19, r19
    3fe2:	82 0f       	add	r24, r18
    3fe4:	93 1f       	adc	r25, r19
    3fe6:	84 0f       	add	r24, r20
    3fe8:	95 1f       	adc	r25, r21
    3fea:	fc 01       	movw	r30, r24
    3fec:	ea 56       	subi	r30, 0x6A	; 106
    3fee:	fe 4f       	sbci	r31, 0xFE	; 254
    3ff0:	60 81       	ld	r22, Z
    3ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff4:	48 2f       	mov	r20, r24
    3ff6:	50 e0       	ldi	r21, 0x00	; 0
    3ff8:	ca 01       	movw	r24, r20
    3ffa:	88 0f       	add	r24, r24
    3ffc:	99 1f       	adc	r25, r25
    3ffe:	9c 01       	movw	r18, r24
    4000:	22 0f       	add	r18, r18
    4002:	33 1f       	adc	r19, r19
    4004:	22 0f       	add	r18, r18
    4006:	33 1f       	adc	r19, r19
    4008:	22 0f       	add	r18, r18
    400a:	33 1f       	adc	r19, r19
    400c:	82 0f       	add	r24, r18
    400e:	93 1f       	adc	r25, r19
    4010:	84 0f       	add	r24, r20
    4012:	95 1f       	adc	r25, r21
    4014:	fc 01       	movw	r30, r24
    4016:	e9 56       	subi	r30, 0x69	; 105
    4018:	fe 4f       	sbci	r31, 0xFE	; 254
    401a:	90 81       	ld	r25, Z
    401c:	86 2f       	mov	r24, r22
    401e:	69 2f       	mov	r22, r25
    4020:	40 e0       	ldi	r20, 0x00	; 0
    4022:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4026:	89 83       	std	Y+1, r24	; 0x01
    4028:	4b c0       	rjmp	.+150    	; 0x40c0 <SSDLT_enuDisableDot+0x19c>
														 SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin, DIO_u8LOW);
			}
			else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    402a:	8a 81       	ldd	r24, Y+2	; 0x02
    402c:	48 2f       	mov	r20, r24
    402e:	50 e0       	ldi	r21, 0x00	; 0
    4030:	ca 01       	movw	r24, r20
    4032:	88 0f       	add	r24, r24
    4034:	99 1f       	adc	r25, r25
    4036:	9c 01       	movw	r18, r24
    4038:	22 0f       	add	r18, r18
    403a:	33 1f       	adc	r19, r19
    403c:	22 0f       	add	r18, r18
    403e:	33 1f       	adc	r19, r19
    4040:	22 0f       	add	r18, r18
    4042:	33 1f       	adc	r19, r19
    4044:	82 0f       	add	r24, r18
    4046:	93 1f       	adc	r25, r19
    4048:	84 0f       	add	r24, r20
    404a:	95 1f       	adc	r25, r21
    404c:	fc 01       	movw	r30, r24
    404e:	e8 56       	subi	r30, 0x68	; 104
    4050:	fe 4f       	sbci	r31, 0xFE	; 254
    4052:	80 81       	ld	r24, Z
    4054:	88 23       	and	r24, r24
    4056:	89 f5       	brne	.+98     	; 0x40ba <SSDLT_enuDisableDot+0x196>
			{
				Local_enuErrorState = DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port,
    4058:	8a 81       	ldd	r24, Y+2	; 0x02
    405a:	48 2f       	mov	r20, r24
    405c:	50 e0       	ldi	r21, 0x00	; 0
    405e:	ca 01       	movw	r24, r20
    4060:	88 0f       	add	r24, r24
    4062:	99 1f       	adc	r25, r25
    4064:	9c 01       	movw	r18, r24
    4066:	22 0f       	add	r18, r18
    4068:	33 1f       	adc	r19, r19
    406a:	22 0f       	add	r18, r18
    406c:	33 1f       	adc	r19, r19
    406e:	22 0f       	add	r18, r18
    4070:	33 1f       	adc	r19, r19
    4072:	82 0f       	add	r24, r18
    4074:	93 1f       	adc	r25, r19
    4076:	84 0f       	add	r24, r20
    4078:	95 1f       	adc	r25, r21
    407a:	fc 01       	movw	r30, r24
    407c:	ea 56       	subi	r30, 0x6A	; 106
    407e:	fe 4f       	sbci	r31, 0xFE	; 254
    4080:	60 81       	ld	r22, Z
    4082:	8a 81       	ldd	r24, Y+2	; 0x02
    4084:	48 2f       	mov	r20, r24
    4086:	50 e0       	ldi	r21, 0x00	; 0
    4088:	ca 01       	movw	r24, r20
    408a:	88 0f       	add	r24, r24
    408c:	99 1f       	adc	r25, r25
    408e:	9c 01       	movw	r18, r24
    4090:	22 0f       	add	r18, r18
    4092:	33 1f       	adc	r19, r19
    4094:	22 0f       	add	r18, r18
    4096:	33 1f       	adc	r19, r19
    4098:	22 0f       	add	r18, r18
    409a:	33 1f       	adc	r19, r19
    409c:	82 0f       	add	r24, r18
    409e:	93 1f       	adc	r25, r19
    40a0:	84 0f       	add	r24, r20
    40a2:	95 1f       	adc	r25, r21
    40a4:	fc 01       	movw	r30, r24
    40a6:	e9 56       	subi	r30, 0x69	; 105
    40a8:	fe 4f       	sbci	r31, 0xFE	; 254
    40aa:	90 81       	ld	r25, Z
    40ac:	86 2f       	mov	r24, r22
    40ae:	69 2f       	mov	r22, r25
    40b0:	41 e0       	ldi	r20, 0x01	; 1
    40b2:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    40b6:	89 83       	std	Y+1, r24	; 0x01
    40b8:	03 c0       	rjmp	.+6      	; 0x40c0 <SSDLT_enuDisableDot+0x19c>
														SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin, DIO_u8HIGH);
			}
			else
			{
				return ES_OUT_OF_RANGE;
    40ba:	83 e0       	ldi	r24, 0x03	; 3
    40bc:	8b 83       	std	Y+3, r24	; 0x03
    40be:	05 c0       	rjmp	.+10     	; 0x40ca <SSDLT_enuDisableDot+0x1a6>
	}
	else
	{
		return ES_OUT_OF_RANGE;
	}
	return Local_enuErrorState;
    40c0:	89 81       	ldd	r24, Y+1	; 0x01
    40c2:	8b 83       	std	Y+3, r24	; 0x03
    40c4:	02 c0       	rjmp	.+4      	; 0x40ca <SSDLT_enuDisableDot+0x1a6>
			}
		}
	}
	else
	{
		return ES_OUT_OF_RANGE;
    40c6:	83 e0       	ldi	r24, 0x03	; 3
    40c8:	8b 83       	std	Y+3, r24	; 0x03
    40ca:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return Local_enuErrorState;
}
    40cc:	0f 90       	pop	r0
    40ce:	0f 90       	pop	r0
    40d0:	0f 90       	pop	r0
    40d2:	cf 91       	pop	r28
    40d4:	df 91       	pop	r29
    40d6:	08 95       	ret

000040d8 <SSDLT_enuClearDisplay>:

ES_t SSDLT_enuClearDisplay(u8 Copy_u8SegID)
{
    40d8:	ef 92       	push	r14
    40da:	ff 92       	push	r15
    40dc:	0f 93       	push	r16
    40de:	1f 93       	push	r17
    40e0:	df 93       	push	r29
    40e2:	cf 93       	push	r28
    40e4:	cd b7       	in	r28, 0x3d	; 61
    40e6:	de b7       	in	r29, 0x3e	; 62
    40e8:	29 97       	sbiw	r28, 0x09	; 9
    40ea:	0f b6       	in	r0, 0x3f	; 63
    40ec:	f8 94       	cli
    40ee:	de bf       	out	0x3e, r29	; 62
    40f0:	0f be       	out	0x3f, r0	; 63
    40f2:	cd bf       	out	0x3d, r28	; 61
    40f4:	88 87       	std	Y+8, r24	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    40f6:	1f 82       	std	Y+7, r1	; 0x07

	u8 Local_u8Iterator = 0;
    40f8:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8LastBit = 0;
    40fa:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Check = 0;
    40fc:	19 82       	std	Y+1, r1	; 0x01
    40fe:	1a 82       	std	Y+2, r1	; 0x02
    4100:	1b 82       	std	Y+3, r1	; 0x03
    4102:	1c 82       	std	Y+4, r1	; 0x04

	if(Copy_u8SegID < SEG_NUM)
    4104:	88 85       	ldd	r24, Y+8	; 0x08
    4106:	82 30       	cpi	r24, 0x02	; 2
    4108:	08 f0       	brcs	.+2      	; 0x410c <SSDLT_enuClearDisplay+0x34>
    410a:	33 c4       	rjmp	.+2150   	; 0x4972 <SSDLT_enuClearDisplay+0x89a>
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    410c:	88 85       	ldd	r24, Y+8	; 0x08
    410e:	48 2f       	mov	r20, r24
    4110:	50 e0       	ldi	r21, 0x00	; 0
    4112:	ca 01       	movw	r24, r20
    4114:	88 0f       	add	r24, r24
    4116:	99 1f       	adc	r25, r25
    4118:	9c 01       	movw	r18, r24
    411a:	22 0f       	add	r18, r18
    411c:	33 1f       	adc	r19, r19
    411e:	22 0f       	add	r18, r18
    4120:	33 1f       	adc	r19, r19
    4122:	22 0f       	add	r18, r18
    4124:	33 1f       	adc	r19, r19
    4126:	82 0f       	add	r24, r18
    4128:	93 1f       	adc	r25, r19
    412a:	84 0f       	add	r24, r20
    412c:	95 1f       	adc	r25, r21
    412e:	fc 01       	movw	r30, r24
    4130:	e8 56       	subi	r30, 0x68	; 104
    4132:	fe 4f       	sbci	r31, 0xFE	; 254
    4134:	80 81       	ld	r24, Z
    4136:	81 30       	cpi	r24, 0x01	; 1
    4138:	09 f0       	breq	.+2      	; 0x413c <SSDLT_enuClearDisplay+0x64>
    413a:	f4 c1       	rjmp	.+1000   	; 0x4524 <SSDLT_enuClearDisplay+0x44c>
		{
			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APort,
    413c:	88 85       	ldd	r24, Y+8	; 0x08
    413e:	48 2f       	mov	r20, r24
    4140:	50 e0       	ldi	r21, 0x00	; 0
    4142:	ca 01       	movw	r24, r20
    4144:	88 0f       	add	r24, r24
    4146:	99 1f       	adc	r25, r25
    4148:	9c 01       	movw	r18, r24
    414a:	22 0f       	add	r18, r18
    414c:	33 1f       	adc	r19, r19
    414e:	22 0f       	add	r18, r18
    4150:	33 1f       	adc	r19, r19
    4152:	22 0f       	add	r18, r18
    4154:	33 1f       	adc	r19, r19
    4156:	82 0f       	add	r24, r18
    4158:	93 1f       	adc	r25, r19
    415a:	84 0f       	add	r24, r20
    415c:	95 1f       	adc	r25, r21
    415e:	fc 01       	movw	r30, r24
    4160:	ea 57       	subi	r30, 0x7A	; 122
    4162:	fe 4f       	sbci	r31, 0xFE	; 254
    4164:	60 81       	ld	r22, Z
    4166:	88 85       	ldd	r24, Y+8	; 0x08
    4168:	48 2f       	mov	r20, r24
    416a:	50 e0       	ldi	r21, 0x00	; 0
    416c:	ca 01       	movw	r24, r20
    416e:	88 0f       	add	r24, r24
    4170:	99 1f       	adc	r25, r25
    4172:	9c 01       	movw	r18, r24
    4174:	22 0f       	add	r18, r18
    4176:	33 1f       	adc	r19, r19
    4178:	22 0f       	add	r18, r18
    417a:	33 1f       	adc	r19, r19
    417c:	22 0f       	add	r18, r18
    417e:	33 1f       	adc	r19, r19
    4180:	82 0f       	add	r24, r18
    4182:	93 1f       	adc	r25, r19
    4184:	84 0f       	add	r24, r20
    4186:	95 1f       	adc	r25, r21
    4188:	fc 01       	movw	r30, r24
    418a:	e9 57       	subi	r30, 0x79	; 121
    418c:	fe 4f       	sbci	r31, 0xFE	; 254
    418e:	90 81       	ld	r25, Z
    4190:	86 2f       	mov	r24, r22
    4192:	69 2f       	mov	r22, r25
    4194:	40 e0       	ldi	r20, 0x00	; 0
    4196:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    419a:	28 2f       	mov	r18, r24
    419c:	30 e0       	ldi	r19, 0x00	; 0
    419e:	40 e0       	ldi	r20, 0x00	; 0
    41a0:	50 e0       	ldi	r21, 0x00	; 0
    41a2:	89 81       	ldd	r24, Y+1	; 0x01
    41a4:	9a 81       	ldd	r25, Y+2	; 0x02
    41a6:	ab 81       	ldd	r26, Y+3	; 0x03
    41a8:	bc 81       	ldd	r27, Y+4	; 0x04
    41aa:	82 2b       	or	r24, r18
    41ac:	93 2b       	or	r25, r19
    41ae:	a4 2b       	or	r26, r20
    41b0:	b5 2b       	or	r27, r21
    41b2:	89 83       	std	Y+1, r24	; 0x01
    41b4:	9a 83       	std	Y+2, r25	; 0x02
    41b6:	ab 83       	std	Y+3, r26	; 0x03
    41b8:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	      SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APin,
											   	  DIO_u8LOW) << 0);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPort,
    41ba:	88 85       	ldd	r24, Y+8	; 0x08
    41bc:	48 2f       	mov	r20, r24
    41be:	50 e0       	ldi	r21, 0x00	; 0
    41c0:	ca 01       	movw	r24, r20
    41c2:	88 0f       	add	r24, r24
    41c4:	99 1f       	adc	r25, r25
    41c6:	9c 01       	movw	r18, r24
    41c8:	22 0f       	add	r18, r18
    41ca:	33 1f       	adc	r19, r19
    41cc:	22 0f       	add	r18, r18
    41ce:	33 1f       	adc	r19, r19
    41d0:	22 0f       	add	r18, r18
    41d2:	33 1f       	adc	r19, r19
    41d4:	82 0f       	add	r24, r18
    41d6:	93 1f       	adc	r25, r19
    41d8:	84 0f       	add	r24, r20
    41da:	95 1f       	adc	r25, r21
    41dc:	fc 01       	movw	r30, r24
    41de:	e8 57       	subi	r30, 0x78	; 120
    41e0:	fe 4f       	sbci	r31, 0xFE	; 254
    41e2:	60 81       	ld	r22, Z
    41e4:	88 85       	ldd	r24, Y+8	; 0x08
    41e6:	48 2f       	mov	r20, r24
    41e8:	50 e0       	ldi	r21, 0x00	; 0
    41ea:	ca 01       	movw	r24, r20
    41ec:	88 0f       	add	r24, r24
    41ee:	99 1f       	adc	r25, r25
    41f0:	9c 01       	movw	r18, r24
    41f2:	22 0f       	add	r18, r18
    41f4:	33 1f       	adc	r19, r19
    41f6:	22 0f       	add	r18, r18
    41f8:	33 1f       	adc	r19, r19
    41fa:	22 0f       	add	r18, r18
    41fc:	33 1f       	adc	r19, r19
    41fe:	82 0f       	add	r24, r18
    4200:	93 1f       	adc	r25, r19
    4202:	84 0f       	add	r24, r20
    4204:	95 1f       	adc	r25, r21
    4206:	fc 01       	movw	r30, r24
    4208:	e7 57       	subi	r30, 0x77	; 119
    420a:	fe 4f       	sbci	r31, 0xFE	; 254
    420c:	90 81       	ld	r25, Z
    420e:	86 2f       	mov	r24, r22
    4210:	69 2f       	mov	r22, r25
    4212:	40 e0       	ldi	r20, 0x00	; 0
    4214:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4218:	88 2f       	mov	r24, r24
    421a:	90 e0       	ldi	r25, 0x00	; 0
    421c:	88 0f       	add	r24, r24
    421e:	99 1f       	adc	r25, r25
    4220:	88 0f       	add	r24, r24
    4222:	99 1f       	adc	r25, r25
    4224:	88 0f       	add	r24, r24
    4226:	99 1f       	adc	r25, r25
    4228:	9c 01       	movw	r18, r24
    422a:	44 27       	eor	r20, r20
    422c:	37 fd       	sbrc	r19, 7
    422e:	40 95       	com	r20
    4230:	54 2f       	mov	r21, r20
    4232:	89 81       	ldd	r24, Y+1	; 0x01
    4234:	9a 81       	ldd	r25, Y+2	; 0x02
    4236:	ab 81       	ldd	r26, Y+3	; 0x03
    4238:	bc 81       	ldd	r27, Y+4	; 0x04
    423a:	82 2b       	or	r24, r18
    423c:	93 2b       	or	r25, r19
    423e:	a4 2b       	or	r26, r20
    4240:	b5 2b       	or	r27, r21
    4242:	89 83       	std	Y+1, r24	; 0x01
    4244:	9a 83       	std	Y+2, r25	; 0x02
    4246:	ab 83       	std	Y+3, r26	; 0x03
    4248:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPin,
												  DIO_u8LOW) << 3);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPort,
    424a:	88 85       	ldd	r24, Y+8	; 0x08
    424c:	48 2f       	mov	r20, r24
    424e:	50 e0       	ldi	r21, 0x00	; 0
    4250:	ca 01       	movw	r24, r20
    4252:	88 0f       	add	r24, r24
    4254:	99 1f       	adc	r25, r25
    4256:	9c 01       	movw	r18, r24
    4258:	22 0f       	add	r18, r18
    425a:	33 1f       	adc	r19, r19
    425c:	22 0f       	add	r18, r18
    425e:	33 1f       	adc	r19, r19
    4260:	22 0f       	add	r18, r18
    4262:	33 1f       	adc	r19, r19
    4264:	82 0f       	add	r24, r18
    4266:	93 1f       	adc	r25, r19
    4268:	84 0f       	add	r24, r20
    426a:	95 1f       	adc	r25, r21
    426c:	fc 01       	movw	r30, r24
    426e:	e6 57       	subi	r30, 0x76	; 118
    4270:	fe 4f       	sbci	r31, 0xFE	; 254
    4272:	60 81       	ld	r22, Z
    4274:	88 85       	ldd	r24, Y+8	; 0x08
    4276:	48 2f       	mov	r20, r24
    4278:	50 e0       	ldi	r21, 0x00	; 0
    427a:	ca 01       	movw	r24, r20
    427c:	88 0f       	add	r24, r24
    427e:	99 1f       	adc	r25, r25
    4280:	9c 01       	movw	r18, r24
    4282:	22 0f       	add	r18, r18
    4284:	33 1f       	adc	r19, r19
    4286:	22 0f       	add	r18, r18
    4288:	33 1f       	adc	r19, r19
    428a:	22 0f       	add	r18, r18
    428c:	33 1f       	adc	r19, r19
    428e:	82 0f       	add	r24, r18
    4290:	93 1f       	adc	r25, r19
    4292:	84 0f       	add	r24, r20
    4294:	95 1f       	adc	r25, r21
    4296:	fc 01       	movw	r30, r24
    4298:	e5 57       	subi	r30, 0x75	; 117
    429a:	fe 4f       	sbci	r31, 0xFE	; 254
    429c:	90 81       	ld	r25, Z
    429e:	86 2f       	mov	r24, r22
    42a0:	69 2f       	mov	r22, r25
    42a2:	40 e0       	ldi	r20, 0x00	; 0
    42a4:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    42a8:	88 2f       	mov	r24, r24
    42aa:	90 e0       	ldi	r25, 0x00	; 0
    42ac:	00 24       	eor	r0, r0
    42ae:	96 95       	lsr	r25
    42b0:	87 95       	ror	r24
    42b2:	07 94       	ror	r0
    42b4:	96 95       	lsr	r25
    42b6:	87 95       	ror	r24
    42b8:	07 94       	ror	r0
    42ba:	98 2f       	mov	r25, r24
    42bc:	80 2d       	mov	r24, r0
    42be:	9c 01       	movw	r18, r24
    42c0:	44 27       	eor	r20, r20
    42c2:	37 fd       	sbrc	r19, 7
    42c4:	40 95       	com	r20
    42c6:	54 2f       	mov	r21, r20
    42c8:	89 81       	ldd	r24, Y+1	; 0x01
    42ca:	9a 81       	ldd	r25, Y+2	; 0x02
    42cc:	ab 81       	ldd	r26, Y+3	; 0x03
    42ce:	bc 81       	ldd	r27, Y+4	; 0x04
    42d0:	82 2b       	or	r24, r18
    42d2:	93 2b       	or	r25, r19
    42d4:	a4 2b       	or	r26, r20
    42d6:	b5 2b       	or	r27, r21
    42d8:	89 83       	std	Y+1, r24	; 0x01
    42da:	9a 83       	std	Y+2, r25	; 0x02
    42dc:	ab 83       	std	Y+3, r26	; 0x03
    42de:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPin,
												  DIO_u8LOW) << 6);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPort,
    42e0:	88 85       	ldd	r24, Y+8	; 0x08
    42e2:	48 2f       	mov	r20, r24
    42e4:	50 e0       	ldi	r21, 0x00	; 0
    42e6:	ca 01       	movw	r24, r20
    42e8:	88 0f       	add	r24, r24
    42ea:	99 1f       	adc	r25, r25
    42ec:	9c 01       	movw	r18, r24
    42ee:	22 0f       	add	r18, r18
    42f0:	33 1f       	adc	r19, r19
    42f2:	22 0f       	add	r18, r18
    42f4:	33 1f       	adc	r19, r19
    42f6:	22 0f       	add	r18, r18
    42f8:	33 1f       	adc	r19, r19
    42fa:	82 0f       	add	r24, r18
    42fc:	93 1f       	adc	r25, r19
    42fe:	84 0f       	add	r24, r20
    4300:	95 1f       	adc	r25, r21
    4302:	fc 01       	movw	r30, r24
    4304:	e4 57       	subi	r30, 0x74	; 116
    4306:	fe 4f       	sbci	r31, 0xFE	; 254
    4308:	60 81       	ld	r22, Z
    430a:	88 85       	ldd	r24, Y+8	; 0x08
    430c:	48 2f       	mov	r20, r24
    430e:	50 e0       	ldi	r21, 0x00	; 0
    4310:	ca 01       	movw	r24, r20
    4312:	88 0f       	add	r24, r24
    4314:	99 1f       	adc	r25, r25
    4316:	9c 01       	movw	r18, r24
    4318:	22 0f       	add	r18, r18
    431a:	33 1f       	adc	r19, r19
    431c:	22 0f       	add	r18, r18
    431e:	33 1f       	adc	r19, r19
    4320:	22 0f       	add	r18, r18
    4322:	33 1f       	adc	r19, r19
    4324:	82 0f       	add	r24, r18
    4326:	93 1f       	adc	r25, r19
    4328:	84 0f       	add	r24, r20
    432a:	95 1f       	adc	r25, r21
    432c:	fc 01       	movw	r30, r24
    432e:	e3 57       	subi	r30, 0x73	; 115
    4330:	fe 4f       	sbci	r31, 0xFE	; 254
    4332:	90 81       	ld	r25, Z
    4334:	86 2f       	mov	r24, r22
    4336:	69 2f       	mov	r22, r25
    4338:	40 e0       	ldi	r20, 0x00	; 0
    433a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    433e:	88 2f       	mov	r24, r24
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	98 2f       	mov	r25, r24
    4344:	88 27       	eor	r24, r24
    4346:	99 0f       	add	r25, r25
    4348:	9c 01       	movw	r18, r24
    434a:	44 27       	eor	r20, r20
    434c:	37 fd       	sbrc	r19, 7
    434e:	40 95       	com	r20
    4350:	54 2f       	mov	r21, r20
    4352:	89 81       	ldd	r24, Y+1	; 0x01
    4354:	9a 81       	ldd	r25, Y+2	; 0x02
    4356:	ab 81       	ldd	r26, Y+3	; 0x03
    4358:	bc 81       	ldd	r27, Y+4	; 0x04
    435a:	82 2b       	or	r24, r18
    435c:	93 2b       	or	r25, r19
    435e:	a4 2b       	or	r26, r20
    4360:	b5 2b       	or	r27, r21
    4362:	89 83       	std	Y+1, r24	; 0x01
    4364:	9a 83       	std	Y+2, r25	; 0x02
    4366:	ab 83       	std	Y+3, r26	; 0x03
    4368:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPin,
												  DIO_u8LOW) << 9) ;

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPort,
    436a:	88 85       	ldd	r24, Y+8	; 0x08
    436c:	48 2f       	mov	r20, r24
    436e:	50 e0       	ldi	r21, 0x00	; 0
    4370:	ca 01       	movw	r24, r20
    4372:	88 0f       	add	r24, r24
    4374:	99 1f       	adc	r25, r25
    4376:	9c 01       	movw	r18, r24
    4378:	22 0f       	add	r18, r18
    437a:	33 1f       	adc	r19, r19
    437c:	22 0f       	add	r18, r18
    437e:	33 1f       	adc	r19, r19
    4380:	22 0f       	add	r18, r18
    4382:	33 1f       	adc	r19, r19
    4384:	82 0f       	add	r24, r18
    4386:	93 1f       	adc	r25, r19
    4388:	84 0f       	add	r24, r20
    438a:	95 1f       	adc	r25, r21
    438c:	fc 01       	movw	r30, r24
    438e:	e2 57       	subi	r30, 0x72	; 114
    4390:	fe 4f       	sbci	r31, 0xFE	; 254
    4392:	60 81       	ld	r22, Z
    4394:	88 85       	ldd	r24, Y+8	; 0x08
    4396:	48 2f       	mov	r20, r24
    4398:	50 e0       	ldi	r21, 0x00	; 0
    439a:	ca 01       	movw	r24, r20
    439c:	88 0f       	add	r24, r24
    439e:	99 1f       	adc	r25, r25
    43a0:	9c 01       	movw	r18, r24
    43a2:	22 0f       	add	r18, r18
    43a4:	33 1f       	adc	r19, r19
    43a6:	22 0f       	add	r18, r18
    43a8:	33 1f       	adc	r19, r19
    43aa:	22 0f       	add	r18, r18
    43ac:	33 1f       	adc	r19, r19
    43ae:	82 0f       	add	r24, r18
    43b0:	93 1f       	adc	r25, r19
    43b2:	84 0f       	add	r24, r20
    43b4:	95 1f       	adc	r25, r21
    43b6:	fc 01       	movw	r30, r24
    43b8:	e1 57       	subi	r30, 0x71	; 113
    43ba:	fe 4f       	sbci	r31, 0xFE	; 254
    43bc:	90 81       	ld	r25, Z
    43be:	86 2f       	mov	r24, r22
    43c0:	69 2f       	mov	r22, r25
    43c2:	40 e0       	ldi	r20, 0x00	; 0
    43c4:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    43c8:	88 2f       	mov	r24, r24
    43ca:	90 e0       	ldi	r25, 0x00	; 0
    43cc:	98 2f       	mov	r25, r24
    43ce:	88 27       	eor	r24, r24
    43d0:	92 95       	swap	r25
    43d2:	90 7f       	andi	r25, 0xF0	; 240
    43d4:	9c 01       	movw	r18, r24
    43d6:	44 27       	eor	r20, r20
    43d8:	37 fd       	sbrc	r19, 7
    43da:	40 95       	com	r20
    43dc:	54 2f       	mov	r21, r20
    43de:	89 81       	ldd	r24, Y+1	; 0x01
    43e0:	9a 81       	ldd	r25, Y+2	; 0x02
    43e2:	ab 81       	ldd	r26, Y+3	; 0x03
    43e4:	bc 81       	ldd	r27, Y+4	; 0x04
    43e6:	82 2b       	or	r24, r18
    43e8:	93 2b       	or	r25, r19
    43ea:	a4 2b       	or	r26, r20
    43ec:	b5 2b       	or	r27, r21
    43ee:	89 83       	std	Y+1, r24	; 0x01
    43f0:	9a 83       	std	Y+2, r25	; 0x02
    43f2:	ab 83       	std	Y+3, r26	; 0x03
    43f4:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPin,
												  DIO_u8LOW) << 12);

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPort,
    43f6:	88 85       	ldd	r24, Y+8	; 0x08
    43f8:	48 2f       	mov	r20, r24
    43fa:	50 e0       	ldi	r21, 0x00	; 0
    43fc:	ca 01       	movw	r24, r20
    43fe:	88 0f       	add	r24, r24
    4400:	99 1f       	adc	r25, r25
    4402:	9c 01       	movw	r18, r24
    4404:	22 0f       	add	r18, r18
    4406:	33 1f       	adc	r19, r19
    4408:	22 0f       	add	r18, r18
    440a:	33 1f       	adc	r19, r19
    440c:	22 0f       	add	r18, r18
    440e:	33 1f       	adc	r19, r19
    4410:	82 0f       	add	r24, r18
    4412:	93 1f       	adc	r25, r19
    4414:	84 0f       	add	r24, r20
    4416:	95 1f       	adc	r25, r21
    4418:	fc 01       	movw	r30, r24
    441a:	e0 57       	subi	r30, 0x70	; 112
    441c:	fe 4f       	sbci	r31, 0xFE	; 254
    441e:	60 81       	ld	r22, Z
    4420:	88 85       	ldd	r24, Y+8	; 0x08
    4422:	48 2f       	mov	r20, r24
    4424:	50 e0       	ldi	r21, 0x00	; 0
    4426:	ca 01       	movw	r24, r20
    4428:	88 0f       	add	r24, r24
    442a:	99 1f       	adc	r25, r25
    442c:	9c 01       	movw	r18, r24
    442e:	22 0f       	add	r18, r18
    4430:	33 1f       	adc	r19, r19
    4432:	22 0f       	add	r18, r18
    4434:	33 1f       	adc	r19, r19
    4436:	22 0f       	add	r18, r18
    4438:	33 1f       	adc	r19, r19
    443a:	82 0f       	add	r24, r18
    443c:	93 1f       	adc	r25, r19
    443e:	84 0f       	add	r24, r20
    4440:	95 1f       	adc	r25, r21
    4442:	fc 01       	movw	r30, r24
    4444:	ef 56       	subi	r30, 0x6F	; 111
    4446:	fe 4f       	sbci	r31, 0xFE	; 254
    4448:	90 81       	ld	r25, Z
    444a:	86 2f       	mov	r24, r22
    444c:	69 2f       	mov	r22, r25
    444e:	40 e0       	ldi	r20, 0x00	; 0
    4450:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4454:	88 2f       	mov	r24, r24
    4456:	90 e0       	ldi	r25, 0x00	; 0
    4458:	a0 e0       	ldi	r26, 0x00	; 0
    445a:	b0 e0       	ldi	r27, 0x00	; 0
    445c:	9c 01       	movw	r18, r24
    445e:	ad 01       	movw	r20, r26
    4460:	01 2e       	mov	r0, r17
    4462:	1f e0       	ldi	r17, 0x0F	; 15
    4464:	22 0f       	add	r18, r18
    4466:	33 1f       	adc	r19, r19
    4468:	44 1f       	adc	r20, r20
    446a:	55 1f       	adc	r21, r21
    446c:	1a 95       	dec	r17
    446e:	d1 f7       	brne	.-12     	; 0x4464 <SSDLT_enuClearDisplay+0x38c>
    4470:	10 2d       	mov	r17, r0
    4472:	89 81       	ldd	r24, Y+1	; 0x01
    4474:	9a 81       	ldd	r25, Y+2	; 0x02
    4476:	ab 81       	ldd	r26, Y+3	; 0x03
    4478:	bc 81       	ldd	r27, Y+4	; 0x04
    447a:	82 2b       	or	r24, r18
    447c:	93 2b       	or	r25, r19
    447e:	a4 2b       	or	r26, r20
    4480:	b5 2b       	or	r27, r21
    4482:	89 83       	std	Y+1, r24	; 0x01
    4484:	9a 83       	std	Y+2, r25	; 0x02
    4486:	ab 83       	std	Y+3, r26	; 0x03
    4488:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPin,
												  DIO_u8LOW) << 15));

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPort,
    448a:	88 85       	ldd	r24, Y+8	; 0x08
    448c:	48 2f       	mov	r20, r24
    448e:	50 e0       	ldi	r21, 0x00	; 0
    4490:	ca 01       	movw	r24, r20
    4492:	88 0f       	add	r24, r24
    4494:	99 1f       	adc	r25, r25
    4496:	9c 01       	movw	r18, r24
    4498:	22 0f       	add	r18, r18
    449a:	33 1f       	adc	r19, r19
    449c:	22 0f       	add	r18, r18
    449e:	33 1f       	adc	r19, r19
    44a0:	22 0f       	add	r18, r18
    44a2:	33 1f       	adc	r19, r19
    44a4:	82 0f       	add	r24, r18
    44a6:	93 1f       	adc	r25, r19
    44a8:	84 0f       	add	r24, r20
    44aa:	95 1f       	adc	r25, r21
    44ac:	fc 01       	movw	r30, r24
    44ae:	ee 56       	subi	r30, 0x6E	; 110
    44b0:	fe 4f       	sbci	r31, 0xFE	; 254
    44b2:	60 81       	ld	r22, Z
    44b4:	88 85       	ldd	r24, Y+8	; 0x08
    44b6:	48 2f       	mov	r20, r24
    44b8:	50 e0       	ldi	r21, 0x00	; 0
    44ba:	ca 01       	movw	r24, r20
    44bc:	88 0f       	add	r24, r24
    44be:	99 1f       	adc	r25, r25
    44c0:	9c 01       	movw	r18, r24
    44c2:	22 0f       	add	r18, r18
    44c4:	33 1f       	adc	r19, r19
    44c6:	22 0f       	add	r18, r18
    44c8:	33 1f       	adc	r19, r19
    44ca:	22 0f       	add	r18, r18
    44cc:	33 1f       	adc	r19, r19
    44ce:	82 0f       	add	r24, r18
    44d0:	93 1f       	adc	r25, r19
    44d2:	84 0f       	add	r24, r20
    44d4:	95 1f       	adc	r25, r21
    44d6:	fc 01       	movw	r30, r24
    44d8:	ed 56       	subi	r30, 0x6D	; 109
    44da:	fe 4f       	sbci	r31, 0xFE	; 254
    44dc:	90 81       	ld	r25, Z
    44de:	86 2f       	mov	r24, r22
    44e0:	69 2f       	mov	r22, r25
    44e2:	40 e0       	ldi	r20, 0x00	; 0
    44e4:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    44e8:	88 2f       	mov	r24, r24
    44ea:	90 e0       	ldi	r25, 0x00	; 0
    44ec:	a0 e0       	ldi	r26, 0x00	; 0
    44ee:	b0 e0       	ldi	r27, 0x00	; 0
    44f0:	9c 01       	movw	r18, r24
    44f2:	ad 01       	movw	r20, r26
    44f4:	01 2e       	mov	r0, r17
    44f6:	12 e1       	ldi	r17, 0x12	; 18
    44f8:	22 0f       	add	r18, r18
    44fa:	33 1f       	adc	r19, r19
    44fc:	44 1f       	adc	r20, r20
    44fe:	55 1f       	adc	r21, r21
    4500:	1a 95       	dec	r17
    4502:	d1 f7       	brne	.-12     	; 0x44f8 <SSDLT_enuClearDisplay+0x420>
    4504:	10 2d       	mov	r17, r0
    4506:	89 81       	ldd	r24, Y+1	; 0x01
    4508:	9a 81       	ldd	r25, Y+2	; 0x02
    450a:	ab 81       	ldd	r26, Y+3	; 0x03
    450c:	bc 81       	ldd	r27, Y+4	; 0x04
    450e:	82 2b       	or	r24, r18
    4510:	93 2b       	or	r25, r19
    4512:	a4 2b       	or	r26, r20
    4514:	b5 2b       	or	r27, r21
    4516:	89 83       	std	Y+1, r24	; 0x01
    4518:	9a 83       	std	Y+2, r25	; 0x02
    451a:	ab 83       	std	Y+3, r26	; 0x03
    451c:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPin,
												  DIO_u8LOW) << 18));
			Local_u8LastBit = 21;
    451e:	85 e1       	ldi	r24, 0x15	; 21
    4520:	8d 83       	std	Y+5, r24	; 0x05
    4522:	0f c2       	rjmp	.+1054   	; 0x4942 <SSDLT_enuClearDisplay+0x86a>
		}
		else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    4524:	88 85       	ldd	r24, Y+8	; 0x08
    4526:	48 2f       	mov	r20, r24
    4528:	50 e0       	ldi	r21, 0x00	; 0
    452a:	ca 01       	movw	r24, r20
    452c:	88 0f       	add	r24, r24
    452e:	99 1f       	adc	r25, r25
    4530:	9c 01       	movw	r18, r24
    4532:	22 0f       	add	r18, r18
    4534:	33 1f       	adc	r19, r19
    4536:	22 0f       	add	r18, r18
    4538:	33 1f       	adc	r19, r19
    453a:	22 0f       	add	r18, r18
    453c:	33 1f       	adc	r19, r19
    453e:	82 0f       	add	r24, r18
    4540:	93 1f       	adc	r25, r19
    4542:	84 0f       	add	r24, r20
    4544:	95 1f       	adc	r25, r21
    4546:	fc 01       	movw	r30, r24
    4548:	e8 56       	subi	r30, 0x68	; 104
    454a:	fe 4f       	sbci	r31, 0xFE	; 254
    454c:	80 81       	ld	r24, Z
    454e:	88 23       	and	r24, r24
    4550:	09 f0       	breq	.+2      	; 0x4554 <SSDLT_enuClearDisplay+0x47c>
    4552:	f4 c1       	rjmp	.+1000   	; 0x493c <SSDLT_enuClearDisplay+0x864>
		{
			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APort,
    4554:	88 85       	ldd	r24, Y+8	; 0x08
    4556:	48 2f       	mov	r20, r24
    4558:	50 e0       	ldi	r21, 0x00	; 0
    455a:	ca 01       	movw	r24, r20
    455c:	88 0f       	add	r24, r24
    455e:	99 1f       	adc	r25, r25
    4560:	9c 01       	movw	r18, r24
    4562:	22 0f       	add	r18, r18
    4564:	33 1f       	adc	r19, r19
    4566:	22 0f       	add	r18, r18
    4568:	33 1f       	adc	r19, r19
    456a:	22 0f       	add	r18, r18
    456c:	33 1f       	adc	r19, r19
    456e:	82 0f       	add	r24, r18
    4570:	93 1f       	adc	r25, r19
    4572:	84 0f       	add	r24, r20
    4574:	95 1f       	adc	r25, r21
    4576:	fc 01       	movw	r30, r24
    4578:	ea 57       	subi	r30, 0x7A	; 122
    457a:	fe 4f       	sbci	r31, 0xFE	; 254
    457c:	60 81       	ld	r22, Z
    457e:	88 85       	ldd	r24, Y+8	; 0x08
    4580:	48 2f       	mov	r20, r24
    4582:	50 e0       	ldi	r21, 0x00	; 0
    4584:	ca 01       	movw	r24, r20
    4586:	88 0f       	add	r24, r24
    4588:	99 1f       	adc	r25, r25
    458a:	9c 01       	movw	r18, r24
    458c:	22 0f       	add	r18, r18
    458e:	33 1f       	adc	r19, r19
    4590:	22 0f       	add	r18, r18
    4592:	33 1f       	adc	r19, r19
    4594:	22 0f       	add	r18, r18
    4596:	33 1f       	adc	r19, r19
    4598:	82 0f       	add	r24, r18
    459a:	93 1f       	adc	r25, r19
    459c:	84 0f       	add	r24, r20
    459e:	95 1f       	adc	r25, r21
    45a0:	fc 01       	movw	r30, r24
    45a2:	e9 57       	subi	r30, 0x79	; 121
    45a4:	fe 4f       	sbci	r31, 0xFE	; 254
    45a6:	90 81       	ld	r25, Z
    45a8:	86 2f       	mov	r24, r22
    45aa:	69 2f       	mov	r22, r25
    45ac:	41 e0       	ldi	r20, 0x01	; 1
    45ae:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    45b2:	28 2f       	mov	r18, r24
    45b4:	30 e0       	ldi	r19, 0x00	; 0
    45b6:	40 e0       	ldi	r20, 0x00	; 0
    45b8:	50 e0       	ldi	r21, 0x00	; 0
    45ba:	89 81       	ldd	r24, Y+1	; 0x01
    45bc:	9a 81       	ldd	r25, Y+2	; 0x02
    45be:	ab 81       	ldd	r26, Y+3	; 0x03
    45c0:	bc 81       	ldd	r27, Y+4	; 0x04
    45c2:	82 2b       	or	r24, r18
    45c4:	93 2b       	or	r25, r19
    45c6:	a4 2b       	or	r26, r20
    45c8:	b5 2b       	or	r27, r21
    45ca:	89 83       	std	Y+1, r24	; 0x01
    45cc:	9a 83       	std	Y+2, r25	; 0x02
    45ce:	ab 83       	std	Y+3, r26	; 0x03
    45d0:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	      SSD_AstrSegConfig[Copy_u8SegID].SEG_u8APin,
											   	  DIO_u8HIGH) << 0);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPort,
    45d2:	88 85       	ldd	r24, Y+8	; 0x08
    45d4:	48 2f       	mov	r20, r24
    45d6:	50 e0       	ldi	r21, 0x00	; 0
    45d8:	ca 01       	movw	r24, r20
    45da:	88 0f       	add	r24, r24
    45dc:	99 1f       	adc	r25, r25
    45de:	9c 01       	movw	r18, r24
    45e0:	22 0f       	add	r18, r18
    45e2:	33 1f       	adc	r19, r19
    45e4:	22 0f       	add	r18, r18
    45e6:	33 1f       	adc	r19, r19
    45e8:	22 0f       	add	r18, r18
    45ea:	33 1f       	adc	r19, r19
    45ec:	82 0f       	add	r24, r18
    45ee:	93 1f       	adc	r25, r19
    45f0:	84 0f       	add	r24, r20
    45f2:	95 1f       	adc	r25, r21
    45f4:	fc 01       	movw	r30, r24
    45f6:	e8 57       	subi	r30, 0x78	; 120
    45f8:	fe 4f       	sbci	r31, 0xFE	; 254
    45fa:	60 81       	ld	r22, Z
    45fc:	88 85       	ldd	r24, Y+8	; 0x08
    45fe:	48 2f       	mov	r20, r24
    4600:	50 e0       	ldi	r21, 0x00	; 0
    4602:	ca 01       	movw	r24, r20
    4604:	88 0f       	add	r24, r24
    4606:	99 1f       	adc	r25, r25
    4608:	9c 01       	movw	r18, r24
    460a:	22 0f       	add	r18, r18
    460c:	33 1f       	adc	r19, r19
    460e:	22 0f       	add	r18, r18
    4610:	33 1f       	adc	r19, r19
    4612:	22 0f       	add	r18, r18
    4614:	33 1f       	adc	r19, r19
    4616:	82 0f       	add	r24, r18
    4618:	93 1f       	adc	r25, r19
    461a:	84 0f       	add	r24, r20
    461c:	95 1f       	adc	r25, r21
    461e:	fc 01       	movw	r30, r24
    4620:	e7 57       	subi	r30, 0x77	; 119
    4622:	fe 4f       	sbci	r31, 0xFE	; 254
    4624:	90 81       	ld	r25, Z
    4626:	86 2f       	mov	r24, r22
    4628:	69 2f       	mov	r22, r25
    462a:	41 e0       	ldi	r20, 0x01	; 1
    462c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4630:	88 2f       	mov	r24, r24
    4632:	90 e0       	ldi	r25, 0x00	; 0
    4634:	88 0f       	add	r24, r24
    4636:	99 1f       	adc	r25, r25
    4638:	88 0f       	add	r24, r24
    463a:	99 1f       	adc	r25, r25
    463c:	88 0f       	add	r24, r24
    463e:	99 1f       	adc	r25, r25
    4640:	9c 01       	movw	r18, r24
    4642:	44 27       	eor	r20, r20
    4644:	37 fd       	sbrc	r19, 7
    4646:	40 95       	com	r20
    4648:	54 2f       	mov	r21, r20
    464a:	89 81       	ldd	r24, Y+1	; 0x01
    464c:	9a 81       	ldd	r25, Y+2	; 0x02
    464e:	ab 81       	ldd	r26, Y+3	; 0x03
    4650:	bc 81       	ldd	r27, Y+4	; 0x04
    4652:	82 2b       	or	r24, r18
    4654:	93 2b       	or	r25, r19
    4656:	a4 2b       	or	r26, r20
    4658:	b5 2b       	or	r27, r21
    465a:	89 83       	std	Y+1, r24	; 0x01
    465c:	9a 83       	std	Y+2, r25	; 0x02
    465e:	ab 83       	std	Y+3, r26	; 0x03
    4660:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8BPin,
												  DIO_u8HIGH) << 3);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPort,
    4662:	88 85       	ldd	r24, Y+8	; 0x08
    4664:	48 2f       	mov	r20, r24
    4666:	50 e0       	ldi	r21, 0x00	; 0
    4668:	ca 01       	movw	r24, r20
    466a:	88 0f       	add	r24, r24
    466c:	99 1f       	adc	r25, r25
    466e:	9c 01       	movw	r18, r24
    4670:	22 0f       	add	r18, r18
    4672:	33 1f       	adc	r19, r19
    4674:	22 0f       	add	r18, r18
    4676:	33 1f       	adc	r19, r19
    4678:	22 0f       	add	r18, r18
    467a:	33 1f       	adc	r19, r19
    467c:	82 0f       	add	r24, r18
    467e:	93 1f       	adc	r25, r19
    4680:	84 0f       	add	r24, r20
    4682:	95 1f       	adc	r25, r21
    4684:	fc 01       	movw	r30, r24
    4686:	e6 57       	subi	r30, 0x76	; 118
    4688:	fe 4f       	sbci	r31, 0xFE	; 254
    468a:	60 81       	ld	r22, Z
    468c:	88 85       	ldd	r24, Y+8	; 0x08
    468e:	48 2f       	mov	r20, r24
    4690:	50 e0       	ldi	r21, 0x00	; 0
    4692:	ca 01       	movw	r24, r20
    4694:	88 0f       	add	r24, r24
    4696:	99 1f       	adc	r25, r25
    4698:	9c 01       	movw	r18, r24
    469a:	22 0f       	add	r18, r18
    469c:	33 1f       	adc	r19, r19
    469e:	22 0f       	add	r18, r18
    46a0:	33 1f       	adc	r19, r19
    46a2:	22 0f       	add	r18, r18
    46a4:	33 1f       	adc	r19, r19
    46a6:	82 0f       	add	r24, r18
    46a8:	93 1f       	adc	r25, r19
    46aa:	84 0f       	add	r24, r20
    46ac:	95 1f       	adc	r25, r21
    46ae:	fc 01       	movw	r30, r24
    46b0:	e5 57       	subi	r30, 0x75	; 117
    46b2:	fe 4f       	sbci	r31, 0xFE	; 254
    46b4:	90 81       	ld	r25, Z
    46b6:	86 2f       	mov	r24, r22
    46b8:	69 2f       	mov	r22, r25
    46ba:	41 e0       	ldi	r20, 0x01	; 1
    46bc:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    46c0:	88 2f       	mov	r24, r24
    46c2:	90 e0       	ldi	r25, 0x00	; 0
    46c4:	00 24       	eor	r0, r0
    46c6:	96 95       	lsr	r25
    46c8:	87 95       	ror	r24
    46ca:	07 94       	ror	r0
    46cc:	96 95       	lsr	r25
    46ce:	87 95       	ror	r24
    46d0:	07 94       	ror	r0
    46d2:	98 2f       	mov	r25, r24
    46d4:	80 2d       	mov	r24, r0
    46d6:	9c 01       	movw	r18, r24
    46d8:	44 27       	eor	r20, r20
    46da:	37 fd       	sbrc	r19, 7
    46dc:	40 95       	com	r20
    46de:	54 2f       	mov	r21, r20
    46e0:	89 81       	ldd	r24, Y+1	; 0x01
    46e2:	9a 81       	ldd	r25, Y+2	; 0x02
    46e4:	ab 81       	ldd	r26, Y+3	; 0x03
    46e6:	bc 81       	ldd	r27, Y+4	; 0x04
    46e8:	82 2b       	or	r24, r18
    46ea:	93 2b       	or	r25, r19
    46ec:	a4 2b       	or	r26, r20
    46ee:	b5 2b       	or	r27, r21
    46f0:	89 83       	std	Y+1, r24	; 0x01
    46f2:	9a 83       	std	Y+2, r25	; 0x02
    46f4:	ab 83       	std	Y+3, r26	; 0x03
    46f6:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8CPin,
												  DIO_u8HIGH) << 6);

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPort,
    46f8:	88 85       	ldd	r24, Y+8	; 0x08
    46fa:	48 2f       	mov	r20, r24
    46fc:	50 e0       	ldi	r21, 0x00	; 0
    46fe:	ca 01       	movw	r24, r20
    4700:	88 0f       	add	r24, r24
    4702:	99 1f       	adc	r25, r25
    4704:	9c 01       	movw	r18, r24
    4706:	22 0f       	add	r18, r18
    4708:	33 1f       	adc	r19, r19
    470a:	22 0f       	add	r18, r18
    470c:	33 1f       	adc	r19, r19
    470e:	22 0f       	add	r18, r18
    4710:	33 1f       	adc	r19, r19
    4712:	82 0f       	add	r24, r18
    4714:	93 1f       	adc	r25, r19
    4716:	84 0f       	add	r24, r20
    4718:	95 1f       	adc	r25, r21
    471a:	fc 01       	movw	r30, r24
    471c:	e4 57       	subi	r30, 0x74	; 116
    471e:	fe 4f       	sbci	r31, 0xFE	; 254
    4720:	60 81       	ld	r22, Z
    4722:	88 85       	ldd	r24, Y+8	; 0x08
    4724:	48 2f       	mov	r20, r24
    4726:	50 e0       	ldi	r21, 0x00	; 0
    4728:	ca 01       	movw	r24, r20
    472a:	88 0f       	add	r24, r24
    472c:	99 1f       	adc	r25, r25
    472e:	9c 01       	movw	r18, r24
    4730:	22 0f       	add	r18, r18
    4732:	33 1f       	adc	r19, r19
    4734:	22 0f       	add	r18, r18
    4736:	33 1f       	adc	r19, r19
    4738:	22 0f       	add	r18, r18
    473a:	33 1f       	adc	r19, r19
    473c:	82 0f       	add	r24, r18
    473e:	93 1f       	adc	r25, r19
    4740:	84 0f       	add	r24, r20
    4742:	95 1f       	adc	r25, r21
    4744:	fc 01       	movw	r30, r24
    4746:	e3 57       	subi	r30, 0x73	; 115
    4748:	fe 4f       	sbci	r31, 0xFE	; 254
    474a:	90 81       	ld	r25, Z
    474c:	86 2f       	mov	r24, r22
    474e:	69 2f       	mov	r22, r25
    4750:	41 e0       	ldi	r20, 0x01	; 1
    4752:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4756:	88 2f       	mov	r24, r24
    4758:	90 e0       	ldi	r25, 0x00	; 0
    475a:	98 2f       	mov	r25, r24
    475c:	88 27       	eor	r24, r24
    475e:	99 0f       	add	r25, r25
    4760:	9c 01       	movw	r18, r24
    4762:	44 27       	eor	r20, r20
    4764:	37 fd       	sbrc	r19, 7
    4766:	40 95       	com	r20
    4768:	54 2f       	mov	r21, r20
    476a:	89 81       	ldd	r24, Y+1	; 0x01
    476c:	9a 81       	ldd	r25, Y+2	; 0x02
    476e:	ab 81       	ldd	r26, Y+3	; 0x03
    4770:	bc 81       	ldd	r27, Y+4	; 0x04
    4772:	82 2b       	or	r24, r18
    4774:	93 2b       	or	r25, r19
    4776:	a4 2b       	or	r26, r20
    4778:	b5 2b       	or	r27, r21
    477a:	89 83       	std	Y+1, r24	; 0x01
    477c:	9a 83       	std	Y+2, r25	; 0x02
    477e:	ab 83       	std	Y+3, r26	; 0x03
    4780:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DPin,
												  DIO_u8HIGH) << 9) ;

			Local_u32Check |= (DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPort,
    4782:	88 85       	ldd	r24, Y+8	; 0x08
    4784:	48 2f       	mov	r20, r24
    4786:	50 e0       	ldi	r21, 0x00	; 0
    4788:	ca 01       	movw	r24, r20
    478a:	88 0f       	add	r24, r24
    478c:	99 1f       	adc	r25, r25
    478e:	9c 01       	movw	r18, r24
    4790:	22 0f       	add	r18, r18
    4792:	33 1f       	adc	r19, r19
    4794:	22 0f       	add	r18, r18
    4796:	33 1f       	adc	r19, r19
    4798:	22 0f       	add	r18, r18
    479a:	33 1f       	adc	r19, r19
    479c:	82 0f       	add	r24, r18
    479e:	93 1f       	adc	r25, r19
    47a0:	84 0f       	add	r24, r20
    47a2:	95 1f       	adc	r25, r21
    47a4:	fc 01       	movw	r30, r24
    47a6:	e2 57       	subi	r30, 0x72	; 114
    47a8:	fe 4f       	sbci	r31, 0xFE	; 254
    47aa:	60 81       	ld	r22, Z
    47ac:	88 85       	ldd	r24, Y+8	; 0x08
    47ae:	48 2f       	mov	r20, r24
    47b0:	50 e0       	ldi	r21, 0x00	; 0
    47b2:	ca 01       	movw	r24, r20
    47b4:	88 0f       	add	r24, r24
    47b6:	99 1f       	adc	r25, r25
    47b8:	9c 01       	movw	r18, r24
    47ba:	22 0f       	add	r18, r18
    47bc:	33 1f       	adc	r19, r19
    47be:	22 0f       	add	r18, r18
    47c0:	33 1f       	adc	r19, r19
    47c2:	22 0f       	add	r18, r18
    47c4:	33 1f       	adc	r19, r19
    47c6:	82 0f       	add	r24, r18
    47c8:	93 1f       	adc	r25, r19
    47ca:	84 0f       	add	r24, r20
    47cc:	95 1f       	adc	r25, r21
    47ce:	fc 01       	movw	r30, r24
    47d0:	e1 57       	subi	r30, 0x71	; 113
    47d2:	fe 4f       	sbci	r31, 0xFE	; 254
    47d4:	90 81       	ld	r25, Z
    47d6:	86 2f       	mov	r24, r22
    47d8:	69 2f       	mov	r22, r25
    47da:	41 e0       	ldi	r20, 0x01	; 1
    47dc:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    47e0:	88 2f       	mov	r24, r24
    47e2:	90 e0       	ldi	r25, 0x00	; 0
    47e4:	98 2f       	mov	r25, r24
    47e6:	88 27       	eor	r24, r24
    47e8:	92 95       	swap	r25
    47ea:	90 7f       	andi	r25, 0xF0	; 240
    47ec:	9c 01       	movw	r18, r24
    47ee:	44 27       	eor	r20, r20
    47f0:	37 fd       	sbrc	r19, 7
    47f2:	40 95       	com	r20
    47f4:	54 2f       	mov	r21, r20
    47f6:	89 81       	ldd	r24, Y+1	; 0x01
    47f8:	9a 81       	ldd	r25, Y+2	; 0x02
    47fa:	ab 81       	ldd	r26, Y+3	; 0x03
    47fc:	bc 81       	ldd	r27, Y+4	; 0x04
    47fe:	82 2b       	or	r24, r18
    4800:	93 2b       	or	r25, r19
    4802:	a4 2b       	or	r26, r20
    4804:	b5 2b       	or	r27, r21
    4806:	89 83       	std	Y+1, r24	; 0x01
    4808:	9a 83       	std	Y+2, r25	; 0x02
    480a:	ab 83       	std	Y+3, r26	; 0x03
    480c:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8EPin,
												  DIO_u8HIGH) << 12);

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPort,
    480e:	88 85       	ldd	r24, Y+8	; 0x08
    4810:	48 2f       	mov	r20, r24
    4812:	50 e0       	ldi	r21, 0x00	; 0
    4814:	ca 01       	movw	r24, r20
    4816:	88 0f       	add	r24, r24
    4818:	99 1f       	adc	r25, r25
    481a:	9c 01       	movw	r18, r24
    481c:	22 0f       	add	r18, r18
    481e:	33 1f       	adc	r19, r19
    4820:	22 0f       	add	r18, r18
    4822:	33 1f       	adc	r19, r19
    4824:	22 0f       	add	r18, r18
    4826:	33 1f       	adc	r19, r19
    4828:	82 0f       	add	r24, r18
    482a:	93 1f       	adc	r25, r19
    482c:	84 0f       	add	r24, r20
    482e:	95 1f       	adc	r25, r21
    4830:	fc 01       	movw	r30, r24
    4832:	e0 57       	subi	r30, 0x70	; 112
    4834:	fe 4f       	sbci	r31, 0xFE	; 254
    4836:	60 81       	ld	r22, Z
    4838:	88 85       	ldd	r24, Y+8	; 0x08
    483a:	48 2f       	mov	r20, r24
    483c:	50 e0       	ldi	r21, 0x00	; 0
    483e:	ca 01       	movw	r24, r20
    4840:	88 0f       	add	r24, r24
    4842:	99 1f       	adc	r25, r25
    4844:	9c 01       	movw	r18, r24
    4846:	22 0f       	add	r18, r18
    4848:	33 1f       	adc	r19, r19
    484a:	22 0f       	add	r18, r18
    484c:	33 1f       	adc	r19, r19
    484e:	22 0f       	add	r18, r18
    4850:	33 1f       	adc	r19, r19
    4852:	82 0f       	add	r24, r18
    4854:	93 1f       	adc	r25, r19
    4856:	84 0f       	add	r24, r20
    4858:	95 1f       	adc	r25, r21
    485a:	fc 01       	movw	r30, r24
    485c:	ef 56       	subi	r30, 0x6F	; 111
    485e:	fe 4f       	sbci	r31, 0xFE	; 254
    4860:	90 81       	ld	r25, Z
    4862:	86 2f       	mov	r24, r22
    4864:	69 2f       	mov	r22, r25
    4866:	41 e0       	ldi	r20, 0x01	; 1
    4868:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    486c:	88 2f       	mov	r24, r24
    486e:	90 e0       	ldi	r25, 0x00	; 0
    4870:	a0 e0       	ldi	r26, 0x00	; 0
    4872:	b0 e0       	ldi	r27, 0x00	; 0
    4874:	9c 01       	movw	r18, r24
    4876:	ad 01       	movw	r20, r26
    4878:	01 2e       	mov	r0, r17
    487a:	1f e0       	ldi	r17, 0x0F	; 15
    487c:	22 0f       	add	r18, r18
    487e:	33 1f       	adc	r19, r19
    4880:	44 1f       	adc	r20, r20
    4882:	55 1f       	adc	r21, r21
    4884:	1a 95       	dec	r17
    4886:	d1 f7       	brne	.-12     	; 0x487c <SSDLT_enuClearDisplay+0x7a4>
    4888:	10 2d       	mov	r17, r0
    488a:	89 81       	ldd	r24, Y+1	; 0x01
    488c:	9a 81       	ldd	r25, Y+2	; 0x02
    488e:	ab 81       	ldd	r26, Y+3	; 0x03
    4890:	bc 81       	ldd	r27, Y+4	; 0x04
    4892:	82 2b       	or	r24, r18
    4894:	93 2b       	or	r25, r19
    4896:	a4 2b       	or	r26, r20
    4898:	b5 2b       	or	r27, r21
    489a:	89 83       	std	Y+1, r24	; 0x01
    489c:	9a 83       	std	Y+2, r25	; 0x02
    489e:	ab 83       	std	Y+3, r26	; 0x03
    48a0:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8FPin,
												  DIO_u8HIGH) << 15));

			Local_u32Check |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPort,
    48a2:	88 85       	ldd	r24, Y+8	; 0x08
    48a4:	48 2f       	mov	r20, r24
    48a6:	50 e0       	ldi	r21, 0x00	; 0
    48a8:	ca 01       	movw	r24, r20
    48aa:	88 0f       	add	r24, r24
    48ac:	99 1f       	adc	r25, r25
    48ae:	9c 01       	movw	r18, r24
    48b0:	22 0f       	add	r18, r18
    48b2:	33 1f       	adc	r19, r19
    48b4:	22 0f       	add	r18, r18
    48b6:	33 1f       	adc	r19, r19
    48b8:	22 0f       	add	r18, r18
    48ba:	33 1f       	adc	r19, r19
    48bc:	82 0f       	add	r24, r18
    48be:	93 1f       	adc	r25, r19
    48c0:	84 0f       	add	r24, r20
    48c2:	95 1f       	adc	r25, r21
    48c4:	fc 01       	movw	r30, r24
    48c6:	ee 56       	subi	r30, 0x6E	; 110
    48c8:	fe 4f       	sbci	r31, 0xFE	; 254
    48ca:	60 81       	ld	r22, Z
    48cc:	88 85       	ldd	r24, Y+8	; 0x08
    48ce:	48 2f       	mov	r20, r24
    48d0:	50 e0       	ldi	r21, 0x00	; 0
    48d2:	ca 01       	movw	r24, r20
    48d4:	88 0f       	add	r24, r24
    48d6:	99 1f       	adc	r25, r25
    48d8:	9c 01       	movw	r18, r24
    48da:	22 0f       	add	r18, r18
    48dc:	33 1f       	adc	r19, r19
    48de:	22 0f       	add	r18, r18
    48e0:	33 1f       	adc	r19, r19
    48e2:	22 0f       	add	r18, r18
    48e4:	33 1f       	adc	r19, r19
    48e6:	82 0f       	add	r24, r18
    48e8:	93 1f       	adc	r25, r19
    48ea:	84 0f       	add	r24, r20
    48ec:	95 1f       	adc	r25, r21
    48ee:	fc 01       	movw	r30, r24
    48f0:	ed 56       	subi	r30, 0x6D	; 109
    48f2:	fe 4f       	sbci	r31, 0xFE	; 254
    48f4:	90 81       	ld	r25, Z
    48f6:	86 2f       	mov	r24, r22
    48f8:	69 2f       	mov	r22, r25
    48fa:	41 e0       	ldi	r20, 0x01	; 1
    48fc:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4900:	88 2f       	mov	r24, r24
    4902:	90 e0       	ldi	r25, 0x00	; 0
    4904:	a0 e0       	ldi	r26, 0x00	; 0
    4906:	b0 e0       	ldi	r27, 0x00	; 0
    4908:	9c 01       	movw	r18, r24
    490a:	ad 01       	movw	r20, r26
    490c:	01 2e       	mov	r0, r17
    490e:	12 e1       	ldi	r17, 0x12	; 18
    4910:	22 0f       	add	r18, r18
    4912:	33 1f       	adc	r19, r19
    4914:	44 1f       	adc	r20, r20
    4916:	55 1f       	adc	r21, r21
    4918:	1a 95       	dec	r17
    491a:	d1 f7       	brne	.-12     	; 0x4910 <SSDLT_enuClearDisplay+0x838>
    491c:	10 2d       	mov	r17, r0
    491e:	89 81       	ldd	r24, Y+1	; 0x01
    4920:	9a 81       	ldd	r25, Y+2	; 0x02
    4922:	ab 81       	ldd	r26, Y+3	; 0x03
    4924:	bc 81       	ldd	r27, Y+4	; 0x04
    4926:	82 2b       	or	r24, r18
    4928:	93 2b       	or	r25, r19
    492a:	a4 2b       	or	r26, r20
    492c:	b5 2b       	or	r27, r21
    492e:	89 83       	std	Y+1, r24	; 0x01
    4930:	9a 83       	std	Y+2, r25	; 0x02
    4932:	ab 83       	std	Y+3, r26	; 0x03
    4934:	bc 83       	std	Y+4, r27	; 0x04
							   	   	   	   	   	  SSD_AstrSegConfig[Copy_u8SegID].SEG_u8GPin,
												  DIO_u8HIGH) << 18));
			Local_u8LastBit = 21;
    4936:	85 e1       	ldi	r24, 0x15	; 21
    4938:	8d 83       	std	Y+5, r24	; 0x05
    493a:	03 c0       	rjmp	.+6      	; 0x4942 <SSDLT_enuClearDisplay+0x86a>
		}
		else
		{
			return ES_OUT_OF_RANGE;
    493c:	03 e0       	ldi	r16, 0x03	; 3
    493e:	09 87       	std	Y+9, r16	; 0x09
    4940:	23 c1       	rjmp	.+582    	; 0x4b88 <SSDLT_enuClearDisplay+0xab0>
	else
	{
		return ES_OUT_OF_RANGE;
	}

	if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port != NOT_CONNECTED ||
    4942:	88 85       	ldd	r24, Y+8	; 0x08
    4944:	48 2f       	mov	r20, r24
    4946:	50 e0       	ldi	r21, 0x00	; 0
    4948:	ca 01       	movw	r24, r20
    494a:	88 0f       	add	r24, r24
    494c:	99 1f       	adc	r25, r25
    494e:	9c 01       	movw	r18, r24
    4950:	22 0f       	add	r18, r18
    4952:	33 1f       	adc	r19, r19
    4954:	22 0f       	add	r18, r18
    4956:	33 1f       	adc	r19, r19
    4958:	22 0f       	add	r18, r18
    495a:	33 1f       	adc	r19, r19
    495c:	82 0f       	add	r24, r18
    495e:	93 1f       	adc	r25, r19
    4960:	84 0f       	add	r24, r20
    4962:	95 1f       	adc	r25, r21
    4964:	fc 01       	movw	r30, r24
    4966:	ea 56       	subi	r30, 0x6A	; 106
    4968:	fe 4f       	sbci	r31, 0xFE	; 254
    496a:	80 81       	ld	r24, Z
    496c:	82 30       	cpi	r24, 0x02	; 2
    496e:	e1 f4       	brne	.+56     	; 0x49a8 <SSDLT_enuClearDisplay+0x8d0>
    4970:	03 c0       	rjmp	.+6      	; 0x4978 <SSDLT_enuClearDisplay+0x8a0>
			return ES_OUT_OF_RANGE;
		}
	}
	else
	{
		return ES_OUT_OF_RANGE;
    4972:	13 e0       	ldi	r17, 0x03	; 3
    4974:	19 87       	std	Y+9, r17	; 0x09
    4976:	08 c1       	rjmp	.+528    	; 0x4b88 <SSDLT_enuClearDisplay+0xab0>
	}

	if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port != NOT_CONNECTED ||
    4978:	88 85       	ldd	r24, Y+8	; 0x08
    497a:	48 2f       	mov	r20, r24
    497c:	50 e0       	ldi	r21, 0x00	; 0
    497e:	ca 01       	movw	r24, r20
    4980:	88 0f       	add	r24, r24
    4982:	99 1f       	adc	r25, r25
    4984:	9c 01       	movw	r18, r24
    4986:	22 0f       	add	r18, r18
    4988:	33 1f       	adc	r19, r19
    498a:	22 0f       	add	r18, r18
    498c:	33 1f       	adc	r19, r19
    498e:	22 0f       	add	r18, r18
    4990:	33 1f       	adc	r19, r19
    4992:	82 0f       	add	r24, r18
    4994:	93 1f       	adc	r25, r19
    4996:	84 0f       	add	r24, r20
    4998:	95 1f       	adc	r25, r21
    499a:	fc 01       	movw	r30, r24
    499c:	e9 56       	subi	r30, 0x69	; 105
    499e:	fe 4f       	sbci	r31, 0xFE	; 254
    49a0:	80 81       	ld	r24, Z
    49a2:	82 30       	cpi	r24, 0x02	; 2
    49a4:	09 f4       	brne	.+2      	; 0x49a8 <SSDLT_enuClearDisplay+0x8d0>
    49a6:	c7 c0       	rjmp	.+398    	; 0x4b36 <SSDLT_enuClearDisplay+0xa5e>
		SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin != NOT_CONNECTED)
	{
		if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_CATHODE)
    49a8:	88 85       	ldd	r24, Y+8	; 0x08
    49aa:	48 2f       	mov	r20, r24
    49ac:	50 e0       	ldi	r21, 0x00	; 0
    49ae:	ca 01       	movw	r24, r20
    49b0:	88 0f       	add	r24, r24
    49b2:	99 1f       	adc	r25, r25
    49b4:	9c 01       	movw	r18, r24
    49b6:	22 0f       	add	r18, r18
    49b8:	33 1f       	adc	r19, r19
    49ba:	22 0f       	add	r18, r18
    49bc:	33 1f       	adc	r19, r19
    49be:	22 0f       	add	r18, r18
    49c0:	33 1f       	adc	r19, r19
    49c2:	82 0f       	add	r24, r18
    49c4:	93 1f       	adc	r25, r19
    49c6:	84 0f       	add	r24, r20
    49c8:	95 1f       	adc	r25, r21
    49ca:	fc 01       	movw	r30, r24
    49cc:	e8 56       	subi	r30, 0x68	; 104
    49ce:	fe 4f       	sbci	r31, 0xFE	; 254
    49d0:	80 81       	ld	r24, Z
    49d2:	81 30       	cpi	r24, 0x01	; 1
    49d4:	09 f0       	breq	.+2      	; 0x49d8 <SSDLT_enuClearDisplay+0x900>
    49d6:	49 c0       	rjmp	.+146    	; 0x4a6a <SSDLT_enuClearDisplay+0x992>
		{
			Local_enuErrorState |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port,
    49d8:	88 85       	ldd	r24, Y+8	; 0x08
    49da:	48 2f       	mov	r20, r24
    49dc:	50 e0       	ldi	r21, 0x00	; 0
    49de:	ca 01       	movw	r24, r20
    49e0:	88 0f       	add	r24, r24
    49e2:	99 1f       	adc	r25, r25
    49e4:	9c 01       	movw	r18, r24
    49e6:	22 0f       	add	r18, r18
    49e8:	33 1f       	adc	r19, r19
    49ea:	22 0f       	add	r18, r18
    49ec:	33 1f       	adc	r19, r19
    49ee:	22 0f       	add	r18, r18
    49f0:	33 1f       	adc	r19, r19
    49f2:	82 0f       	add	r24, r18
    49f4:	93 1f       	adc	r25, r19
    49f6:	84 0f       	add	r24, r20
    49f8:	95 1f       	adc	r25, r21
    49fa:	fc 01       	movw	r30, r24
    49fc:	ea 56       	subi	r30, 0x6A	; 106
    49fe:	fe 4f       	sbci	r31, 0xFE	; 254
    4a00:	60 81       	ld	r22, Z
    4a02:	88 85       	ldd	r24, Y+8	; 0x08
    4a04:	48 2f       	mov	r20, r24
    4a06:	50 e0       	ldi	r21, 0x00	; 0
    4a08:	ca 01       	movw	r24, r20
    4a0a:	88 0f       	add	r24, r24
    4a0c:	99 1f       	adc	r25, r25
    4a0e:	9c 01       	movw	r18, r24
    4a10:	22 0f       	add	r18, r18
    4a12:	33 1f       	adc	r19, r19
    4a14:	22 0f       	add	r18, r18
    4a16:	33 1f       	adc	r19, r19
    4a18:	22 0f       	add	r18, r18
    4a1a:	33 1f       	adc	r19, r19
    4a1c:	82 0f       	add	r24, r18
    4a1e:	93 1f       	adc	r25, r19
    4a20:	84 0f       	add	r24, r20
    4a22:	95 1f       	adc	r25, r21
    4a24:	fc 01       	movw	r30, r24
    4a26:	e9 56       	subi	r30, 0x69	; 105
    4a28:	fe 4f       	sbci	r31, 0xFE	; 254
    4a2a:	90 81       	ld	r25, Z
    4a2c:	86 2f       	mov	r24, r22
    4a2e:	69 2f       	mov	r22, r25
    4a30:	40 e0       	ldi	r20, 0x00	; 0
    4a32:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4a36:	28 2f       	mov	r18, r24
    4a38:	30 e0       	ldi	r19, 0x00	; 0
    4a3a:	40 e0       	ldi	r20, 0x00	; 0
    4a3c:	50 e0       	ldi	r21, 0x00	; 0
    4a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    4a40:	88 2f       	mov	r24, r24
    4a42:	90 e0       	ldi	r25, 0x00	; 0
    4a44:	79 01       	movw	r14, r18
    4a46:	8a 01       	movw	r16, r20
    4a48:	04 c0       	rjmp	.+8      	; 0x4a52 <SSDLT_enuClearDisplay+0x97a>
    4a4a:	ee 0c       	add	r14, r14
    4a4c:	ff 1c       	adc	r15, r15
    4a4e:	00 1f       	adc	r16, r16
    4a50:	11 1f       	adc	r17, r17
    4a52:	8a 95       	dec	r24
    4a54:	d2 f7       	brpl	.-12     	; 0x4a4a <SSDLT_enuClearDisplay+0x972>
    4a56:	d8 01       	movw	r26, r16
    4a58:	c7 01       	movw	r24, r14
    4a5a:	98 2f       	mov	r25, r24
    4a5c:	8f 81       	ldd	r24, Y+7	; 0x07
    4a5e:	89 2b       	or	r24, r25
    4a60:	8f 83       	std	Y+7, r24	; 0x07
													 SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin, DIO_u8LOW) << Local_u8LastBit));
			Local_u8LastBit += 3;
    4a62:	8d 81       	ldd	r24, Y+5	; 0x05
    4a64:	8d 5f       	subi	r24, 0xFD	; 253
    4a66:	8d 83       	std	Y+5, r24	; 0x05
    4a68:	64 c0       	rjmp	.+200    	; 0x4b32 <SSDLT_enuClearDisplay+0xa5a>
		}
		else if(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8Type == COMMON_ANODE)
    4a6a:	88 85       	ldd	r24, Y+8	; 0x08
    4a6c:	48 2f       	mov	r20, r24
    4a6e:	50 e0       	ldi	r21, 0x00	; 0
    4a70:	ca 01       	movw	r24, r20
    4a72:	88 0f       	add	r24, r24
    4a74:	99 1f       	adc	r25, r25
    4a76:	9c 01       	movw	r18, r24
    4a78:	22 0f       	add	r18, r18
    4a7a:	33 1f       	adc	r19, r19
    4a7c:	22 0f       	add	r18, r18
    4a7e:	33 1f       	adc	r19, r19
    4a80:	22 0f       	add	r18, r18
    4a82:	33 1f       	adc	r19, r19
    4a84:	82 0f       	add	r24, r18
    4a86:	93 1f       	adc	r25, r19
    4a88:	84 0f       	add	r24, r20
    4a8a:	95 1f       	adc	r25, r21
    4a8c:	fc 01       	movw	r30, r24
    4a8e:	e8 56       	subi	r30, 0x68	; 104
    4a90:	fe 4f       	sbci	r31, 0xFE	; 254
    4a92:	80 81       	ld	r24, Z
    4a94:	88 23       	and	r24, r24
    4a96:	09 f0       	breq	.+2      	; 0x4a9a <SSDLT_enuClearDisplay+0x9c2>
    4a98:	49 c0       	rjmp	.+146    	; 0x4b2c <SSDLT_enuClearDisplay+0xa54>
		{
			Local_enuErrorState |= (((u32)DIO_enuSetPinValue(SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Port,
    4a9a:	88 85       	ldd	r24, Y+8	; 0x08
    4a9c:	48 2f       	mov	r20, r24
    4a9e:	50 e0       	ldi	r21, 0x00	; 0
    4aa0:	ca 01       	movw	r24, r20
    4aa2:	88 0f       	add	r24, r24
    4aa4:	99 1f       	adc	r25, r25
    4aa6:	9c 01       	movw	r18, r24
    4aa8:	22 0f       	add	r18, r18
    4aaa:	33 1f       	adc	r19, r19
    4aac:	22 0f       	add	r18, r18
    4aae:	33 1f       	adc	r19, r19
    4ab0:	22 0f       	add	r18, r18
    4ab2:	33 1f       	adc	r19, r19
    4ab4:	82 0f       	add	r24, r18
    4ab6:	93 1f       	adc	r25, r19
    4ab8:	84 0f       	add	r24, r20
    4aba:	95 1f       	adc	r25, r21
    4abc:	fc 01       	movw	r30, r24
    4abe:	ea 56       	subi	r30, 0x6A	; 106
    4ac0:	fe 4f       	sbci	r31, 0xFE	; 254
    4ac2:	60 81       	ld	r22, Z
    4ac4:	88 85       	ldd	r24, Y+8	; 0x08
    4ac6:	48 2f       	mov	r20, r24
    4ac8:	50 e0       	ldi	r21, 0x00	; 0
    4aca:	ca 01       	movw	r24, r20
    4acc:	88 0f       	add	r24, r24
    4ace:	99 1f       	adc	r25, r25
    4ad0:	9c 01       	movw	r18, r24
    4ad2:	22 0f       	add	r18, r18
    4ad4:	33 1f       	adc	r19, r19
    4ad6:	22 0f       	add	r18, r18
    4ad8:	33 1f       	adc	r19, r19
    4ada:	22 0f       	add	r18, r18
    4adc:	33 1f       	adc	r19, r19
    4ade:	82 0f       	add	r24, r18
    4ae0:	93 1f       	adc	r25, r19
    4ae2:	84 0f       	add	r24, r20
    4ae4:	95 1f       	adc	r25, r21
    4ae6:	fc 01       	movw	r30, r24
    4ae8:	e9 56       	subi	r30, 0x69	; 105
    4aea:	fe 4f       	sbci	r31, 0xFE	; 254
    4aec:	90 81       	ld	r25, Z
    4aee:	86 2f       	mov	r24, r22
    4af0:	69 2f       	mov	r22, r25
    4af2:	41 e0       	ldi	r20, 0x01	; 1
    4af4:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4af8:	28 2f       	mov	r18, r24
    4afa:	30 e0       	ldi	r19, 0x00	; 0
    4afc:	40 e0       	ldi	r20, 0x00	; 0
    4afe:	50 e0       	ldi	r21, 0x00	; 0
    4b00:	8d 81       	ldd	r24, Y+5	; 0x05
    4b02:	88 2f       	mov	r24, r24
    4b04:	90 e0       	ldi	r25, 0x00	; 0
    4b06:	79 01       	movw	r14, r18
    4b08:	8a 01       	movw	r16, r20
    4b0a:	04 c0       	rjmp	.+8      	; 0x4b14 <SSDLT_enuClearDisplay+0xa3c>
    4b0c:	ee 0c       	add	r14, r14
    4b0e:	ff 1c       	adc	r15, r15
    4b10:	00 1f       	adc	r16, r16
    4b12:	11 1f       	adc	r17, r17
    4b14:	8a 95       	dec	r24
    4b16:	d2 f7       	brpl	.-12     	; 0x4b0c <SSDLT_enuClearDisplay+0xa34>
    4b18:	d8 01       	movw	r26, r16
    4b1a:	c7 01       	movw	r24, r14
    4b1c:	98 2f       	mov	r25, r24
    4b1e:	8f 81       	ldd	r24, Y+7	; 0x07
    4b20:	89 2b       	or	r24, r25
    4b22:	8f 83       	std	Y+7, r24	; 0x07
													SSD_AstrSegConfig[Copy_u8SegID].SEG_u8DOT_Pin, DIO_u8HIGH) << Local_u8LastBit));
			Local_u8LastBit += 3;
    4b24:	8d 81       	ldd	r24, Y+5	; 0x05
    4b26:	8d 5f       	subi	r24, 0xFD	; 253
    4b28:	8d 83       	std	Y+5, r24	; 0x05
    4b2a:	03 c0       	rjmp	.+6      	; 0x4b32 <SSDLT_enuClearDisplay+0xa5a>
		}
		else
		{
			return ES_OUT_OF_RANGE;
    4b2c:	03 e0       	ldi	r16, 0x03	; 3
    4b2e:	09 87       	std	Y+9, r16	; 0x09
    4b30:	2b c0       	rjmp	.+86     	; 0x4b88 <SSDLT_enuClearDisplay+0xab0>
	else
	{
		return ES_OUT_OF_RANGE;
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < Local_u8LastBit; Local_u8Iterator += 3)
    4b32:	1e 82       	std	Y+6, r1	; 0x06
    4b34:	21 c0       	rjmp	.+66     	; 0x4b78 <SSDLT_enuClearDisplay+0xaa0>
		}

	}
	else
	{
		return ES_OUT_OF_RANGE;
    4b36:	13 e0       	ldi	r17, 0x03	; 3
    4b38:	19 87       	std	Y+9, r17	; 0x09
    4b3a:	26 c0       	rjmp	.+76     	; 0x4b88 <SSDLT_enuClearDisplay+0xab0>
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < Local_u8LastBit; Local_u8Iterator += 3)
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
    4b3c:	8e 81       	ldd	r24, Y+6	; 0x06
    4b3e:	28 2f       	mov	r18, r24
    4b40:	30 e0       	ldi	r19, 0x00	; 0
    4b42:	89 81       	ldd	r24, Y+1	; 0x01
    4b44:	9a 81       	ldd	r25, Y+2	; 0x02
    4b46:	ab 81       	ldd	r26, Y+3	; 0x03
    4b48:	bc 81       	ldd	r27, Y+4	; 0x04
    4b4a:	02 2e       	mov	r0, r18
    4b4c:	04 c0       	rjmp	.+8      	; 0x4b56 <SSDLT_enuClearDisplay+0xa7e>
    4b4e:	b6 95       	lsr	r27
    4b50:	a7 95       	ror	r26
    4b52:	97 95       	ror	r25
    4b54:	87 95       	ror	r24
    4b56:	0a 94       	dec	r0
    4b58:	d2 f7       	brpl	.-12     	; 0x4b4e <SSDLT_enuClearDisplay+0xa76>
    4b5a:	87 70       	andi	r24, 0x07	; 7
    4b5c:	90 70       	andi	r25, 0x00	; 0
    4b5e:	a0 70       	andi	r26, 0x00	; 0
    4b60:	b0 70       	andi	r27, 0x00	; 0
    4b62:	81 30       	cpi	r24, 0x01	; 1
    4b64:	91 05       	cpc	r25, r1
    4b66:	a1 05       	cpc	r26, r1
    4b68:	b1 05       	cpc	r27, r1
    4b6a:	19 f0       	breq	.+6      	; 0x4b72 <SSDLT_enuClearDisplay+0xa9a>
		{
			return Local_enuErrorState;
    4b6c:	8f 81       	ldd	r24, Y+7	; 0x07
    4b6e:	89 87       	std	Y+9, r24	; 0x09
    4b70:	0b c0       	rjmp	.+22     	; 0x4b88 <SSDLT_enuClearDisplay+0xab0>
	else
	{
		return ES_OUT_OF_RANGE;
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < Local_u8LastBit; Local_u8Iterator += 3)
    4b72:	8e 81       	ldd	r24, Y+6	; 0x06
    4b74:	8d 5f       	subi	r24, 0xFD	; 253
    4b76:	8e 83       	std	Y+6, r24	; 0x06
    4b78:	9e 81       	ldd	r25, Y+6	; 0x06
    4b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    4b7c:	98 17       	cp	r25, r24
    4b7e:	f0 f2       	brcs	.-68     	; 0x4b3c <SSDLT_enuClearDisplay+0xa64>
		{
			return Local_enuErrorState;
		}
	}

	Local_enuErrorState = ES_OK;
    4b80:	81 e0       	ldi	r24, 0x01	; 1
    4b82:	8f 83       	std	Y+7, r24	; 0x07

	return Local_enuErrorState;
    4b84:	ef 80       	ldd	r14, Y+7	; 0x07
    4b86:	e9 86       	std	Y+9, r14	; 0x09
    4b88:	89 85       	ldd	r24, Y+9	; 0x09
}
    4b8a:	29 96       	adiw	r28, 0x09	; 9
    4b8c:	0f b6       	in	r0, 0x3f	; 63
    4b8e:	f8 94       	cli
    4b90:	de bf       	out	0x3e, r29	; 62
    4b92:	0f be       	out	0x3f, r0	; 63
    4b94:	cd bf       	out	0x3d, r28	; 61
    4b96:	cf 91       	pop	r28
    4b98:	df 91       	pop	r29
    4b9a:	1f 91       	pop	r17
    4b9c:	0f 91       	pop	r16
    4b9e:	ff 90       	pop	r15
    4ba0:	ef 90       	pop	r14
    4ba2:	08 95       	ret

00004ba4 <SSD_enuInit>:
#include "SSD_config.h"
#include "SSD_private.h"
/***********************	Includes Section End	***********************/

ES_t SSD_enuInit(void)
{
    4ba4:	df 93       	push	r29
    4ba6:	cf 93       	push	r28
    4ba8:	cd b7       	in	r28, 0x3d	; 61
    4baa:	de b7       	in	r29, 0x3e	; 62
    4bac:	27 97       	sbiw	r28, 0x07	; 7
    4bae:	0f b6       	in	r0, 0x3f	; 63
    4bb0:	f8 94       	cli
    4bb2:	de bf       	out	0x3e, r29	; 62
    4bb4:	0f be       	out	0x3f, r0	; 63
    4bb6:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    4bb8:	1e 82       	std	Y+6, r1	; 0x06

	u32 Local_u32Check = 0;
    4bba:	1a 82       	std	Y+2, r1	; 0x02
    4bbc:	1b 82       	std	Y+3, r1	; 0x03
    4bbe:	1c 82       	std	Y+4, r1	; 0x04
    4bc0:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8Iterator = 0;
    4bc2:	19 82       	std	Y+1, r1	; 0x01

	Local_u32Check |= (DIO_enuSetPinDirection(SEG_APORT, SEG_APIN, DIO_u8OUTPUT) << 0);
    4bc4:	80 e0       	ldi	r24, 0x00	; 0
    4bc6:	60 e0       	ldi	r22, 0x00	; 0
    4bc8:	41 e0       	ldi	r20, 0x01	; 1
    4bca:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    4bce:	28 2f       	mov	r18, r24
    4bd0:	30 e0       	ldi	r19, 0x00	; 0
    4bd2:	40 e0       	ldi	r20, 0x00	; 0
    4bd4:	50 e0       	ldi	r21, 0x00	; 0
    4bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    4bd8:	9b 81       	ldd	r25, Y+3	; 0x03
    4bda:	ac 81       	ldd	r26, Y+4	; 0x04
    4bdc:	bd 81       	ldd	r27, Y+5	; 0x05
    4bde:	82 2b       	or	r24, r18
    4be0:	93 2b       	or	r25, r19
    4be2:	a4 2b       	or	r26, r20
    4be4:	b5 2b       	or	r27, r21
    4be6:	8a 83       	std	Y+2, r24	; 0x02
    4be8:	9b 83       	std	Y+3, r25	; 0x03
    4bea:	ac 83       	std	Y+4, r26	; 0x04
    4bec:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (DIO_enuSetPinDirection(SEG_BPORT, SEG_BPIN, DIO_u8OUTPUT) << 3);
    4bee:	80 e0       	ldi	r24, 0x00	; 0
    4bf0:	61 e0       	ldi	r22, 0x01	; 1
    4bf2:	41 e0       	ldi	r20, 0x01	; 1
    4bf4:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    4bf8:	88 2f       	mov	r24, r24
    4bfa:	90 e0       	ldi	r25, 0x00	; 0
    4bfc:	88 0f       	add	r24, r24
    4bfe:	99 1f       	adc	r25, r25
    4c00:	88 0f       	add	r24, r24
    4c02:	99 1f       	adc	r25, r25
    4c04:	88 0f       	add	r24, r24
    4c06:	99 1f       	adc	r25, r25
    4c08:	9c 01       	movw	r18, r24
    4c0a:	44 27       	eor	r20, r20
    4c0c:	37 fd       	sbrc	r19, 7
    4c0e:	40 95       	com	r20
    4c10:	54 2f       	mov	r21, r20
    4c12:	8a 81       	ldd	r24, Y+2	; 0x02
    4c14:	9b 81       	ldd	r25, Y+3	; 0x03
    4c16:	ac 81       	ldd	r26, Y+4	; 0x04
    4c18:	bd 81       	ldd	r27, Y+5	; 0x05
    4c1a:	82 2b       	or	r24, r18
    4c1c:	93 2b       	or	r25, r19
    4c1e:	a4 2b       	or	r26, r20
    4c20:	b5 2b       	or	r27, r21
    4c22:	8a 83       	std	Y+2, r24	; 0x02
    4c24:	9b 83       	std	Y+3, r25	; 0x03
    4c26:	ac 83       	std	Y+4, r26	; 0x04
    4c28:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (DIO_enuSetPinDirection(SEG_CPORT, SEG_CPIN, DIO_u8OUTPUT) << 6);
    4c2a:	80 e0       	ldi	r24, 0x00	; 0
    4c2c:	62 e0       	ldi	r22, 0x02	; 2
    4c2e:	41 e0       	ldi	r20, 0x01	; 1
    4c30:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    4c34:	88 2f       	mov	r24, r24
    4c36:	90 e0       	ldi	r25, 0x00	; 0
    4c38:	00 24       	eor	r0, r0
    4c3a:	96 95       	lsr	r25
    4c3c:	87 95       	ror	r24
    4c3e:	07 94       	ror	r0
    4c40:	96 95       	lsr	r25
    4c42:	87 95       	ror	r24
    4c44:	07 94       	ror	r0
    4c46:	98 2f       	mov	r25, r24
    4c48:	80 2d       	mov	r24, r0
    4c4a:	9c 01       	movw	r18, r24
    4c4c:	44 27       	eor	r20, r20
    4c4e:	37 fd       	sbrc	r19, 7
    4c50:	40 95       	com	r20
    4c52:	54 2f       	mov	r21, r20
    4c54:	8a 81       	ldd	r24, Y+2	; 0x02
    4c56:	9b 81       	ldd	r25, Y+3	; 0x03
    4c58:	ac 81       	ldd	r26, Y+4	; 0x04
    4c5a:	bd 81       	ldd	r27, Y+5	; 0x05
    4c5c:	82 2b       	or	r24, r18
    4c5e:	93 2b       	or	r25, r19
    4c60:	a4 2b       	or	r26, r20
    4c62:	b5 2b       	or	r27, r21
    4c64:	8a 83       	std	Y+2, r24	; 0x02
    4c66:	9b 83       	std	Y+3, r25	; 0x03
    4c68:	ac 83       	std	Y+4, r26	; 0x04
    4c6a:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (DIO_enuSetPinDirection(SEG_DPORT, SEG_DPIN, DIO_u8OUTPUT) << 9);
    4c6c:	81 e0       	ldi	r24, 0x01	; 1
    4c6e:	60 e0       	ldi	r22, 0x00	; 0
    4c70:	41 e0       	ldi	r20, 0x01	; 1
    4c72:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    4c76:	88 2f       	mov	r24, r24
    4c78:	90 e0       	ldi	r25, 0x00	; 0
    4c7a:	98 2f       	mov	r25, r24
    4c7c:	88 27       	eor	r24, r24
    4c7e:	99 0f       	add	r25, r25
    4c80:	9c 01       	movw	r18, r24
    4c82:	44 27       	eor	r20, r20
    4c84:	37 fd       	sbrc	r19, 7
    4c86:	40 95       	com	r20
    4c88:	54 2f       	mov	r21, r20
    4c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    4c8c:	9b 81       	ldd	r25, Y+3	; 0x03
    4c8e:	ac 81       	ldd	r26, Y+4	; 0x04
    4c90:	bd 81       	ldd	r27, Y+5	; 0x05
    4c92:	82 2b       	or	r24, r18
    4c94:	93 2b       	or	r25, r19
    4c96:	a4 2b       	or	r26, r20
    4c98:	b5 2b       	or	r27, r21
    4c9a:	8a 83       	std	Y+2, r24	; 0x02
    4c9c:	9b 83       	std	Y+3, r25	; 0x03
    4c9e:	ac 83       	std	Y+4, r26	; 0x04
    4ca0:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (DIO_enuSetPinDirection(SEG_EPORT, SEG_EPIN, DIO_u8OUTPUT) << 12);
    4ca2:	81 e0       	ldi	r24, 0x01	; 1
    4ca4:	61 e0       	ldi	r22, 0x01	; 1
    4ca6:	41 e0       	ldi	r20, 0x01	; 1
    4ca8:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    4cac:	88 2f       	mov	r24, r24
    4cae:	90 e0       	ldi	r25, 0x00	; 0
    4cb0:	98 2f       	mov	r25, r24
    4cb2:	88 27       	eor	r24, r24
    4cb4:	92 95       	swap	r25
    4cb6:	90 7f       	andi	r25, 0xF0	; 240
    4cb8:	9c 01       	movw	r18, r24
    4cba:	44 27       	eor	r20, r20
    4cbc:	37 fd       	sbrc	r19, 7
    4cbe:	40 95       	com	r20
    4cc0:	54 2f       	mov	r21, r20
    4cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    4cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    4cc6:	ac 81       	ldd	r26, Y+4	; 0x04
    4cc8:	bd 81       	ldd	r27, Y+5	; 0x05
    4cca:	82 2b       	or	r24, r18
    4ccc:	93 2b       	or	r25, r19
    4cce:	a4 2b       	or	r26, r20
    4cd0:	b5 2b       	or	r27, r21
    4cd2:	8a 83       	std	Y+2, r24	; 0x02
    4cd4:	9b 83       	std	Y+3, r25	; 0x03
    4cd6:	ac 83       	std	Y+4, r26	; 0x04
    4cd8:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (((u32)DIO_enuSetPinDirection(SEG_GPORT, SEG_GPIN, DIO_u8OUTPUT)) << 15);
    4cda:	81 e0       	ldi	r24, 0x01	; 1
    4cdc:	63 e0       	ldi	r22, 0x03	; 3
    4cde:	41 e0       	ldi	r20, 0x01	; 1
    4ce0:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    4ce4:	88 2f       	mov	r24, r24
    4ce6:	90 e0       	ldi	r25, 0x00	; 0
    4ce8:	a0 e0       	ldi	r26, 0x00	; 0
    4cea:	b0 e0       	ldi	r27, 0x00	; 0
    4cec:	9c 01       	movw	r18, r24
    4cee:	ad 01       	movw	r20, r26
    4cf0:	01 2e       	mov	r0, r17
    4cf2:	1f e0       	ldi	r17, 0x0F	; 15
    4cf4:	22 0f       	add	r18, r18
    4cf6:	33 1f       	adc	r19, r19
    4cf8:	44 1f       	adc	r20, r20
    4cfa:	55 1f       	adc	r21, r21
    4cfc:	1a 95       	dec	r17
    4cfe:	d1 f7       	brne	.-12     	; 0x4cf4 <SSD_enuInit+0x150>
    4d00:	10 2d       	mov	r17, r0
    4d02:	8a 81       	ldd	r24, Y+2	; 0x02
    4d04:	9b 81       	ldd	r25, Y+3	; 0x03
    4d06:	ac 81       	ldd	r26, Y+4	; 0x04
    4d08:	bd 81       	ldd	r27, Y+5	; 0x05
    4d0a:	82 2b       	or	r24, r18
    4d0c:	93 2b       	or	r25, r19
    4d0e:	a4 2b       	or	r26, r20
    4d10:	b5 2b       	or	r27, r21
    4d12:	8a 83       	std	Y+2, r24	; 0x02
    4d14:	9b 83       	std	Y+3, r25	; 0x03
    4d16:	ac 83       	std	Y+4, r26	; 0x04
    4d18:	bd 83       	std	Y+5, r27	; 0x05
	Local_u32Check |= (((u32)DIO_enuSetPinDirection(SEG_GPORT, SEG_GPIN, DIO_u8OUTPUT)) << 18);
    4d1a:	81 e0       	ldi	r24, 0x01	; 1
    4d1c:	63 e0       	ldi	r22, 0x03	; 3
    4d1e:	41 e0       	ldi	r20, 0x01	; 1
    4d20:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    4d24:	88 2f       	mov	r24, r24
    4d26:	90 e0       	ldi	r25, 0x00	; 0
    4d28:	a0 e0       	ldi	r26, 0x00	; 0
    4d2a:	b0 e0       	ldi	r27, 0x00	; 0
    4d2c:	9c 01       	movw	r18, r24
    4d2e:	ad 01       	movw	r20, r26
    4d30:	01 2e       	mov	r0, r17
    4d32:	12 e1       	ldi	r17, 0x12	; 18
    4d34:	22 0f       	add	r18, r18
    4d36:	33 1f       	adc	r19, r19
    4d38:	44 1f       	adc	r20, r20
    4d3a:	55 1f       	adc	r21, r21
    4d3c:	1a 95       	dec	r17
    4d3e:	d1 f7       	brne	.-12     	; 0x4d34 <SSD_enuInit+0x190>
    4d40:	10 2d       	mov	r17, r0
    4d42:	8a 81       	ldd	r24, Y+2	; 0x02
    4d44:	9b 81       	ldd	r25, Y+3	; 0x03
    4d46:	ac 81       	ldd	r26, Y+4	; 0x04
    4d48:	bd 81       	ldd	r27, Y+5	; 0x05
    4d4a:	82 2b       	or	r24, r18
    4d4c:	93 2b       	or	r25, r19
    4d4e:	a4 2b       	or	r26, r20
    4d50:	b5 2b       	or	r27, r21
    4d52:	8a 83       	std	Y+2, r24	; 0x02
    4d54:	9b 83       	std	Y+3, r25	; 0x03
    4d56:	ac 83       	std	Y+4, r26	; 0x04
    4d58:	bd 83       	std	Y+5, r27	; 0x05
	 *  	0000 0000 0000 0100 1001 0010 0100 1001
	 * */

	//Because we work as pre compile config we will use #if
	#if SEG_CMN_PIN <= DIO_u8PIN7 && SEG_CMN_PORT <= DIO_u8PORTD
		Local_u32Check |= (((u32)DIO_enuSetPinDirection(SEG_CMN_PORT, SEG_CMN_PIN, DIO_u8OUTPUT)) << 21);
    4d5a:	82 e0       	ldi	r24, 0x02	; 2
    4d5c:	62 e0       	ldi	r22, 0x02	; 2
    4d5e:	41 e0       	ldi	r20, 0x01	; 1
    4d60:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    4d64:	88 2f       	mov	r24, r24
    4d66:	90 e0       	ldi	r25, 0x00	; 0
    4d68:	a0 e0       	ldi	r26, 0x00	; 0
    4d6a:	b0 e0       	ldi	r27, 0x00	; 0
    4d6c:	9c 01       	movw	r18, r24
    4d6e:	ad 01       	movw	r20, r26
    4d70:	01 2e       	mov	r0, r17
    4d72:	15 e1       	ldi	r17, 0x15	; 21
    4d74:	22 0f       	add	r18, r18
    4d76:	33 1f       	adc	r19, r19
    4d78:	44 1f       	adc	r20, r20
    4d7a:	55 1f       	adc	r21, r21
    4d7c:	1a 95       	dec	r17
    4d7e:	d1 f7       	brne	.-12     	; 0x4d74 <SSD_enuInit+0x1d0>
    4d80:	10 2d       	mov	r17, r0
    4d82:	8a 81       	ldd	r24, Y+2	; 0x02
    4d84:	9b 81       	ldd	r25, Y+3	; 0x03
    4d86:	ac 81       	ldd	r26, Y+4	; 0x04
    4d88:	bd 81       	ldd	r27, Y+5	; 0x05
    4d8a:	82 2b       	or	r24, r18
    4d8c:	93 2b       	or	r25, r19
    4d8e:	a4 2b       	or	r26, r20
    4d90:	b5 2b       	or	r27, r21
    4d92:	8a 83       	std	Y+2, r24	; 0x02
    4d94:	9b 83       	std	Y+3, r25	; 0x03
    4d96:	ac 83       	std	Y+4, r26	; 0x04
    4d98:	bd 83       	std	Y+5, r27	; 0x05
	#else
		#error "Your Common pin has a wrong selection!"
	#endif

	#if SEG_DOT_PIN <= DIO_u8PIN7 && SEG_DOT_PORT <= DIO_u8PORTD
		Local_u32Check |= (((u32)DIO_enuSetPinDirection(SEG_DOT_PORT, SEG_DOT_PIN, DIO_u8OUTPUT)) << 24);
    4d9a:	82 e0       	ldi	r24, 0x02	; 2
    4d9c:	62 e0       	ldi	r22, 0x02	; 2
    4d9e:	41 e0       	ldi	r20, 0x01	; 1
    4da0:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    4da4:	88 2f       	mov	r24, r24
    4da6:	90 e0       	ldi	r25, 0x00	; 0
    4da8:	a0 e0       	ldi	r26, 0x00	; 0
    4daa:	b0 e0       	ldi	r27, 0x00	; 0
    4dac:	58 2f       	mov	r21, r24
    4dae:	44 27       	eor	r20, r20
    4db0:	33 27       	eor	r19, r19
    4db2:	22 27       	eor	r18, r18
    4db4:	8a 81       	ldd	r24, Y+2	; 0x02
    4db6:	9b 81       	ldd	r25, Y+3	; 0x03
    4db8:	ac 81       	ldd	r26, Y+4	; 0x04
    4dba:	bd 81       	ldd	r27, Y+5	; 0x05
    4dbc:	82 2b       	or	r24, r18
    4dbe:	93 2b       	or	r25, r19
    4dc0:	a4 2b       	or	r26, r20
    4dc2:	b5 2b       	or	r27, r21
    4dc4:	8a 83       	std	Y+2, r24	; 0x02
    4dc6:	9b 83       	std	Y+3, r25	; 0x03
    4dc8:	ac 83       	std	Y+4, r26	; 0x04
    4dca:	bd 83       	std	Y+5, r27	; 0x05
	#else
		#error "Your DOT pin has a wrong selection!"
	#endif


	for(Local_u8Iterator = 0; Local_u8Iterator < 27; Local_u8Iterator += 3)
    4dcc:	19 82       	std	Y+1, r1	; 0x01
    4dce:	1e c0       	rjmp	.+60     	; 0x4e0c <SSD_enuInit+0x268>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
    4dd0:	89 81       	ldd	r24, Y+1	; 0x01
    4dd2:	28 2f       	mov	r18, r24
    4dd4:	30 e0       	ldi	r19, 0x00	; 0
    4dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    4dd8:	9b 81       	ldd	r25, Y+3	; 0x03
    4dda:	ac 81       	ldd	r26, Y+4	; 0x04
    4ddc:	bd 81       	ldd	r27, Y+5	; 0x05
    4dde:	02 2e       	mov	r0, r18
    4de0:	04 c0       	rjmp	.+8      	; 0x4dea <SSD_enuInit+0x246>
    4de2:	b6 95       	lsr	r27
    4de4:	a7 95       	ror	r26
    4de6:	97 95       	ror	r25
    4de8:	87 95       	ror	r24
    4dea:	0a 94       	dec	r0
    4dec:	d2 f7       	brpl	.-12     	; 0x4de2 <SSD_enuInit+0x23e>
    4dee:	87 70       	andi	r24, 0x07	; 7
    4df0:	90 70       	andi	r25, 0x00	; 0
    4df2:	a0 70       	andi	r26, 0x00	; 0
    4df4:	b0 70       	andi	r27, 0x00	; 0
    4df6:	81 30       	cpi	r24, 0x01	; 1
    4df8:	91 05       	cpc	r25, r1
    4dfa:	a1 05       	cpc	r26, r1
    4dfc:	b1 05       	cpc	r27, r1
    4dfe:	19 f0       	breq	.+6      	; 0x4e06 <SSD_enuInit+0x262>
		{
			return Local_enuErrorState;
    4e00:	8e 81       	ldd	r24, Y+6	; 0x06
    4e02:	8f 83       	std	Y+7, r24	; 0x07
    4e04:	0a c0       	rjmp	.+20     	; 0x4e1a <SSD_enuInit+0x276>
	#else
		#error "Your DOT pin has a wrong selection!"
	#endif


	for(Local_u8Iterator = 0; Local_u8Iterator < 27; Local_u8Iterator += 3)
    4e06:	89 81       	ldd	r24, Y+1	; 0x01
    4e08:	8d 5f       	subi	r24, 0xFD	; 253
    4e0a:	89 83       	std	Y+1, r24	; 0x01
    4e0c:	89 81       	ldd	r24, Y+1	; 0x01
    4e0e:	8b 31       	cpi	r24, 0x1B	; 27
    4e10:	f8 f2       	brcs	.-66     	; 0x4dd0 <SSD_enuInit+0x22c>
		{
			return Local_enuErrorState;
		}
	}

	Local_enuErrorState = ES_OK;
    4e12:	81 e0       	ldi	r24, 0x01	; 1
    4e14:	8e 83       	std	Y+6, r24	; 0x06

	return Local_enuErrorState;
    4e16:	8e 81       	ldd	r24, Y+6	; 0x06
    4e18:	8f 83       	std	Y+7, r24	; 0x07
    4e1a:	8f 81       	ldd	r24, Y+7	; 0x07
}
    4e1c:	27 96       	adiw	r28, 0x07	; 7
    4e1e:	0f b6       	in	r0, 0x3f	; 63
    4e20:	f8 94       	cli
    4e22:	de bf       	out	0x3e, r29	; 62
    4e24:	0f be       	out	0x3f, r0	; 63
    4e26:	cd bf       	out	0x3d, r28	; 61
    4e28:	cf 91       	pop	r28
    4e2a:	df 91       	pop	r29
    4e2c:	08 95       	ret

00004e2e <SSD_enuDisplayNum>:

ES_t SSD_enuDisplayNum(u8 Copy_u8Number)
{
    4e2e:	df 93       	push	r29
    4e30:	cf 93       	push	r28
    4e32:	cd b7       	in	r28, 0x3d	; 61
    4e34:	de b7       	in	r29, 0x3e	; 62
    4e36:	28 97       	sbiw	r28, 0x08	; 8
    4e38:	0f b6       	in	r0, 0x3f	; 63
    4e3a:	f8 94       	cli
    4e3c:	de bf       	out	0x3e, r29	; 62
    4e3e:	0f be       	out	0x3f, r0	; 63
    4e40:	cd bf       	out	0x3d, r28	; 61
    4e42:	8f 83       	std	Y+7, r24	; 0x07
	ES_t Local_enuErrorState = ES_NOK;
    4e44:	1e 82       	std	Y+6, r1	; 0x06

	u32 Local_u32Check = 0;
    4e46:	1a 82       	std	Y+2, r1	; 0x02
    4e48:	1b 82       	std	Y+3, r1	; 0x03
    4e4a:	1c 82       	std	Y+4, r1	; 0x04
    4e4c:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8Iterator = 0;
    4e4e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Number < 10)
    4e50:	8f 81       	ldd	r24, Y+7	; 0x07
    4e52:	8a 30       	cpi	r24, 0x0A	; 10
    4e54:	08 f0       	brcs	.+2      	; 0x4e58 <SSD_enuDisplayNum+0x2a>
    4e56:	1b c1       	rjmp	.+566    	; 0x508e <SSD_enuDisplayNum+0x260>
	{
		#if SEG_TYPE == COMMON_CATHODE
			Local_u32Check |= (DIO_enuSetPinValue(SEG_APORT, SEG_APIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 0) & 1)) << 0);
    4e58:	8f 81       	ldd	r24, Y+7	; 0x07
    4e5a:	88 2f       	mov	r24, r24
    4e5c:	90 e0       	ldi	r25, 0x00	; 0
    4e5e:	fc 01       	movw	r30, r24
    4e60:	ea 54       	subi	r30, 0x4A	; 74
    4e62:	fe 4f       	sbci	r31, 0xFE	; 254
    4e64:	80 81       	ld	r24, Z
    4e66:	98 2f       	mov	r25, r24
    4e68:	91 70       	andi	r25, 0x01	; 1
    4e6a:	80 e0       	ldi	r24, 0x00	; 0
    4e6c:	60 e0       	ldi	r22, 0x00	; 0
    4e6e:	49 2f       	mov	r20, r25
    4e70:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4e74:	28 2f       	mov	r18, r24
    4e76:	30 e0       	ldi	r19, 0x00	; 0
    4e78:	40 e0       	ldi	r20, 0x00	; 0
    4e7a:	50 e0       	ldi	r21, 0x00	; 0
    4e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e7e:	9b 81       	ldd	r25, Y+3	; 0x03
    4e80:	ac 81       	ldd	r26, Y+4	; 0x04
    4e82:	bd 81       	ldd	r27, Y+5	; 0x05
    4e84:	82 2b       	or	r24, r18
    4e86:	93 2b       	or	r25, r19
    4e88:	a4 2b       	or	r26, r20
    4e8a:	b5 2b       	or	r27, r21
    4e8c:	8a 83       	std	Y+2, r24	; 0x02
    4e8e:	9b 83       	std	Y+3, r25	; 0x03
    4e90:	ac 83       	std	Y+4, r26	; 0x04
    4e92:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (DIO_enuSetPinValue(SEG_BPORT, SEG_BPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 1) & 1)) << 3);
    4e94:	8f 81       	ldd	r24, Y+7	; 0x07
    4e96:	88 2f       	mov	r24, r24
    4e98:	90 e0       	ldi	r25, 0x00	; 0
    4e9a:	fc 01       	movw	r30, r24
    4e9c:	ea 54       	subi	r30, 0x4A	; 74
    4e9e:	fe 4f       	sbci	r31, 0xFE	; 254
    4ea0:	80 81       	ld	r24, Z
    4ea2:	86 95       	lsr	r24
    4ea4:	98 2f       	mov	r25, r24
    4ea6:	91 70       	andi	r25, 0x01	; 1
    4ea8:	80 e0       	ldi	r24, 0x00	; 0
    4eaa:	61 e0       	ldi	r22, 0x01	; 1
    4eac:	49 2f       	mov	r20, r25
    4eae:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4eb2:	88 2f       	mov	r24, r24
    4eb4:	90 e0       	ldi	r25, 0x00	; 0
    4eb6:	88 0f       	add	r24, r24
    4eb8:	99 1f       	adc	r25, r25
    4eba:	88 0f       	add	r24, r24
    4ebc:	99 1f       	adc	r25, r25
    4ebe:	88 0f       	add	r24, r24
    4ec0:	99 1f       	adc	r25, r25
    4ec2:	9c 01       	movw	r18, r24
    4ec4:	44 27       	eor	r20, r20
    4ec6:	37 fd       	sbrc	r19, 7
    4ec8:	40 95       	com	r20
    4eca:	54 2f       	mov	r21, r20
    4ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    4ece:	9b 81       	ldd	r25, Y+3	; 0x03
    4ed0:	ac 81       	ldd	r26, Y+4	; 0x04
    4ed2:	bd 81       	ldd	r27, Y+5	; 0x05
    4ed4:	82 2b       	or	r24, r18
    4ed6:	93 2b       	or	r25, r19
    4ed8:	a4 2b       	or	r26, r20
    4eda:	b5 2b       	or	r27, r21
    4edc:	8a 83       	std	Y+2, r24	; 0x02
    4ede:	9b 83       	std	Y+3, r25	; 0x03
    4ee0:	ac 83       	std	Y+4, r26	; 0x04
    4ee2:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (DIO_enuSetPinValue(SEG_CPORT, SEG_CPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 2) & 1)) << 6);
    4ee4:	8f 81       	ldd	r24, Y+7	; 0x07
    4ee6:	88 2f       	mov	r24, r24
    4ee8:	90 e0       	ldi	r25, 0x00	; 0
    4eea:	fc 01       	movw	r30, r24
    4eec:	ea 54       	subi	r30, 0x4A	; 74
    4eee:	fe 4f       	sbci	r31, 0xFE	; 254
    4ef0:	80 81       	ld	r24, Z
    4ef2:	86 95       	lsr	r24
    4ef4:	86 95       	lsr	r24
    4ef6:	98 2f       	mov	r25, r24
    4ef8:	91 70       	andi	r25, 0x01	; 1
    4efa:	80 e0       	ldi	r24, 0x00	; 0
    4efc:	62 e0       	ldi	r22, 0x02	; 2
    4efe:	49 2f       	mov	r20, r25
    4f00:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4f04:	88 2f       	mov	r24, r24
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	00 24       	eor	r0, r0
    4f0a:	96 95       	lsr	r25
    4f0c:	87 95       	ror	r24
    4f0e:	07 94       	ror	r0
    4f10:	96 95       	lsr	r25
    4f12:	87 95       	ror	r24
    4f14:	07 94       	ror	r0
    4f16:	98 2f       	mov	r25, r24
    4f18:	80 2d       	mov	r24, r0
    4f1a:	9c 01       	movw	r18, r24
    4f1c:	44 27       	eor	r20, r20
    4f1e:	37 fd       	sbrc	r19, 7
    4f20:	40 95       	com	r20
    4f22:	54 2f       	mov	r21, r20
    4f24:	8a 81       	ldd	r24, Y+2	; 0x02
    4f26:	9b 81       	ldd	r25, Y+3	; 0x03
    4f28:	ac 81       	ldd	r26, Y+4	; 0x04
    4f2a:	bd 81       	ldd	r27, Y+5	; 0x05
    4f2c:	82 2b       	or	r24, r18
    4f2e:	93 2b       	or	r25, r19
    4f30:	a4 2b       	or	r26, r20
    4f32:	b5 2b       	or	r27, r21
    4f34:	8a 83       	std	Y+2, r24	; 0x02
    4f36:	9b 83       	std	Y+3, r25	; 0x03
    4f38:	ac 83       	std	Y+4, r26	; 0x04
    4f3a:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (DIO_enuSetPinValue(SEG_DPORT, SEG_DPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 3) & 1)) << 9);
    4f3c:	8f 81       	ldd	r24, Y+7	; 0x07
    4f3e:	88 2f       	mov	r24, r24
    4f40:	90 e0       	ldi	r25, 0x00	; 0
    4f42:	fc 01       	movw	r30, r24
    4f44:	ea 54       	subi	r30, 0x4A	; 74
    4f46:	fe 4f       	sbci	r31, 0xFE	; 254
    4f48:	80 81       	ld	r24, Z
    4f4a:	86 95       	lsr	r24
    4f4c:	86 95       	lsr	r24
    4f4e:	86 95       	lsr	r24
    4f50:	98 2f       	mov	r25, r24
    4f52:	91 70       	andi	r25, 0x01	; 1
    4f54:	81 e0       	ldi	r24, 0x01	; 1
    4f56:	60 e0       	ldi	r22, 0x00	; 0
    4f58:	49 2f       	mov	r20, r25
    4f5a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4f5e:	88 2f       	mov	r24, r24
    4f60:	90 e0       	ldi	r25, 0x00	; 0
    4f62:	98 2f       	mov	r25, r24
    4f64:	88 27       	eor	r24, r24
    4f66:	99 0f       	add	r25, r25
    4f68:	9c 01       	movw	r18, r24
    4f6a:	44 27       	eor	r20, r20
    4f6c:	37 fd       	sbrc	r19, 7
    4f6e:	40 95       	com	r20
    4f70:	54 2f       	mov	r21, r20
    4f72:	8a 81       	ldd	r24, Y+2	; 0x02
    4f74:	9b 81       	ldd	r25, Y+3	; 0x03
    4f76:	ac 81       	ldd	r26, Y+4	; 0x04
    4f78:	bd 81       	ldd	r27, Y+5	; 0x05
    4f7a:	82 2b       	or	r24, r18
    4f7c:	93 2b       	or	r25, r19
    4f7e:	a4 2b       	or	r26, r20
    4f80:	b5 2b       	or	r27, r21
    4f82:	8a 83       	std	Y+2, r24	; 0x02
    4f84:	9b 83       	std	Y+3, r25	; 0x03
    4f86:	ac 83       	std	Y+4, r26	; 0x04
    4f88:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (DIO_enuSetPinValue(SEG_EPORT, SEG_EPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 4) & 1)) << 12);
    4f8a:	8f 81       	ldd	r24, Y+7	; 0x07
    4f8c:	88 2f       	mov	r24, r24
    4f8e:	90 e0       	ldi	r25, 0x00	; 0
    4f90:	fc 01       	movw	r30, r24
    4f92:	ea 54       	subi	r30, 0x4A	; 74
    4f94:	fe 4f       	sbci	r31, 0xFE	; 254
    4f96:	80 81       	ld	r24, Z
    4f98:	82 95       	swap	r24
    4f9a:	8f 70       	andi	r24, 0x0F	; 15
    4f9c:	98 2f       	mov	r25, r24
    4f9e:	91 70       	andi	r25, 0x01	; 1
    4fa0:	81 e0       	ldi	r24, 0x01	; 1
    4fa2:	61 e0       	ldi	r22, 0x01	; 1
    4fa4:	49 2f       	mov	r20, r25
    4fa6:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4faa:	88 2f       	mov	r24, r24
    4fac:	90 e0       	ldi	r25, 0x00	; 0
    4fae:	98 2f       	mov	r25, r24
    4fb0:	88 27       	eor	r24, r24
    4fb2:	92 95       	swap	r25
    4fb4:	90 7f       	andi	r25, 0xF0	; 240
    4fb6:	9c 01       	movw	r18, r24
    4fb8:	44 27       	eor	r20, r20
    4fba:	37 fd       	sbrc	r19, 7
    4fbc:	40 95       	com	r20
    4fbe:	54 2f       	mov	r21, r20
    4fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    4fc2:	9b 81       	ldd	r25, Y+3	; 0x03
    4fc4:	ac 81       	ldd	r26, Y+4	; 0x04
    4fc6:	bd 81       	ldd	r27, Y+5	; 0x05
    4fc8:	82 2b       	or	r24, r18
    4fca:	93 2b       	or	r25, r19
    4fcc:	a4 2b       	or	r26, r20
    4fce:	b5 2b       	or	r27, r21
    4fd0:	8a 83       	std	Y+2, r24	; 0x02
    4fd2:	9b 83       	std	Y+3, r25	; 0x03
    4fd4:	ac 83       	std	Y+4, r26	; 0x04
    4fd6:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_FPORT, SEG_FPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 5) & 1))) << 15);
    4fd8:	8f 81       	ldd	r24, Y+7	; 0x07
    4fda:	88 2f       	mov	r24, r24
    4fdc:	90 e0       	ldi	r25, 0x00	; 0
    4fde:	fc 01       	movw	r30, r24
    4fe0:	ea 54       	subi	r30, 0x4A	; 74
    4fe2:	fe 4f       	sbci	r31, 0xFE	; 254
    4fe4:	80 81       	ld	r24, Z
    4fe6:	82 95       	swap	r24
    4fe8:	86 95       	lsr	r24
    4fea:	87 70       	andi	r24, 0x07	; 7
    4fec:	98 2f       	mov	r25, r24
    4fee:	91 70       	andi	r25, 0x01	; 1
    4ff0:	81 e0       	ldi	r24, 0x01	; 1
    4ff2:	62 e0       	ldi	r22, 0x02	; 2
    4ff4:	49 2f       	mov	r20, r25
    4ff6:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    4ffa:	88 2f       	mov	r24, r24
    4ffc:	90 e0       	ldi	r25, 0x00	; 0
    4ffe:	a0 e0       	ldi	r26, 0x00	; 0
    5000:	b0 e0       	ldi	r27, 0x00	; 0
    5002:	9c 01       	movw	r18, r24
    5004:	ad 01       	movw	r20, r26
    5006:	01 2e       	mov	r0, r17
    5008:	1f e0       	ldi	r17, 0x0F	; 15
    500a:	22 0f       	add	r18, r18
    500c:	33 1f       	adc	r19, r19
    500e:	44 1f       	adc	r20, r20
    5010:	55 1f       	adc	r21, r21
    5012:	1a 95       	dec	r17
    5014:	d1 f7       	brne	.-12     	; 0x500a <SSD_enuDisplayNum+0x1dc>
    5016:	10 2d       	mov	r17, r0
    5018:	8a 81       	ldd	r24, Y+2	; 0x02
    501a:	9b 81       	ldd	r25, Y+3	; 0x03
    501c:	ac 81       	ldd	r26, Y+4	; 0x04
    501e:	bd 81       	ldd	r27, Y+5	; 0x05
    5020:	82 2b       	or	r24, r18
    5022:	93 2b       	or	r25, r19
    5024:	a4 2b       	or	r26, r20
    5026:	b5 2b       	or	r27, r21
    5028:	8a 83       	std	Y+2, r24	; 0x02
    502a:	9b 83       	std	Y+3, r25	; 0x03
    502c:	ac 83       	std	Y+4, r26	; 0x04
    502e:	bd 83       	std	Y+5, r27	; 0x05
			Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_GPORT, SEG_GPIN,((SSD_Au8ComCathodeNumDisplay[Copy_u8Number] >> 6) & 1))) << 18);
    5030:	8f 81       	ldd	r24, Y+7	; 0x07
    5032:	88 2f       	mov	r24, r24
    5034:	90 e0       	ldi	r25, 0x00	; 0
    5036:	fc 01       	movw	r30, r24
    5038:	ea 54       	subi	r30, 0x4A	; 74
    503a:	fe 4f       	sbci	r31, 0xFE	; 254
    503c:	80 81       	ld	r24, Z
    503e:	82 95       	swap	r24
    5040:	86 95       	lsr	r24
    5042:	86 95       	lsr	r24
    5044:	83 70       	andi	r24, 0x03	; 3
    5046:	98 2f       	mov	r25, r24
    5048:	91 70       	andi	r25, 0x01	; 1
    504a:	81 e0       	ldi	r24, 0x01	; 1
    504c:	63 e0       	ldi	r22, 0x03	; 3
    504e:	49 2f       	mov	r20, r25
    5050:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    5054:	88 2f       	mov	r24, r24
    5056:	90 e0       	ldi	r25, 0x00	; 0
    5058:	a0 e0       	ldi	r26, 0x00	; 0
    505a:	b0 e0       	ldi	r27, 0x00	; 0
    505c:	9c 01       	movw	r18, r24
    505e:	ad 01       	movw	r20, r26
    5060:	01 2e       	mov	r0, r17
    5062:	12 e1       	ldi	r17, 0x12	; 18
    5064:	22 0f       	add	r18, r18
    5066:	33 1f       	adc	r19, r19
    5068:	44 1f       	adc	r20, r20
    506a:	55 1f       	adc	r21, r21
    506c:	1a 95       	dec	r17
    506e:	d1 f7       	brne	.-12     	; 0x5064 <SSD_enuDisplayNum+0x236>
    5070:	10 2d       	mov	r17, r0
    5072:	8a 81       	ldd	r24, Y+2	; 0x02
    5074:	9b 81       	ldd	r25, Y+3	; 0x03
    5076:	ac 81       	ldd	r26, Y+4	; 0x04
    5078:	bd 81       	ldd	r27, Y+5	; 0x05
    507a:	82 2b       	or	r24, r18
    507c:	93 2b       	or	r25, r19
    507e:	a4 2b       	or	r26, r20
    5080:	b5 2b       	or	r27, r21
    5082:	8a 83       	std	Y+2, r24	; 0x02
    5084:	9b 83       	std	Y+3, r25	; 0x03
    5086:	ac 83       	std	Y+4, r26	; 0x04
    5088:	bd 83       	std	Y+5, r27	; 0x05
	else
	{
		return ES_OUT_OF_RANGE;
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    508a:	19 82       	std	Y+1, r1	; 0x01
    508c:	21 c0       	rjmp	.+66     	; 0x50d0 <SSD_enuDisplayNum+0x2a2>
			#error "Your type selection is invalid!"
		#endif
	}
	else
	{
		return ES_OUT_OF_RANGE;
    508e:	83 e0       	ldi	r24, 0x03	; 3
    5090:	88 87       	std	Y+8, r24	; 0x08
    5092:	25 c0       	rjmp	.+74     	; 0x50de <SSD_enuDisplayNum+0x2b0>
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
    5094:	89 81       	ldd	r24, Y+1	; 0x01
    5096:	28 2f       	mov	r18, r24
    5098:	30 e0       	ldi	r19, 0x00	; 0
    509a:	8a 81       	ldd	r24, Y+2	; 0x02
    509c:	9b 81       	ldd	r25, Y+3	; 0x03
    509e:	ac 81       	ldd	r26, Y+4	; 0x04
    50a0:	bd 81       	ldd	r27, Y+5	; 0x05
    50a2:	02 2e       	mov	r0, r18
    50a4:	04 c0       	rjmp	.+8      	; 0x50ae <SSD_enuDisplayNum+0x280>
    50a6:	b6 95       	lsr	r27
    50a8:	a7 95       	ror	r26
    50aa:	97 95       	ror	r25
    50ac:	87 95       	ror	r24
    50ae:	0a 94       	dec	r0
    50b0:	d2 f7       	brpl	.-12     	; 0x50a6 <SSD_enuDisplayNum+0x278>
    50b2:	87 70       	andi	r24, 0x07	; 7
    50b4:	90 70       	andi	r25, 0x00	; 0
    50b6:	a0 70       	andi	r26, 0x00	; 0
    50b8:	b0 70       	andi	r27, 0x00	; 0
    50ba:	81 30       	cpi	r24, 0x01	; 1
    50bc:	91 05       	cpc	r25, r1
    50be:	a1 05       	cpc	r26, r1
    50c0:	b1 05       	cpc	r27, r1
    50c2:	19 f0       	breq	.+6      	; 0x50ca <SSD_enuDisplayNum+0x29c>
		{
			return Local_enuErrorState;
    50c4:	8e 81       	ldd	r24, Y+6	; 0x06
    50c6:	88 87       	std	Y+8, r24	; 0x08
    50c8:	0a c0       	rjmp	.+20     	; 0x50de <SSD_enuDisplayNum+0x2b0>
	else
	{
		return ES_OUT_OF_RANGE;
	}

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    50ca:	89 81       	ldd	r24, Y+1	; 0x01
    50cc:	8d 5f       	subi	r24, 0xFD	; 253
    50ce:	89 83       	std	Y+1, r24	; 0x01
    50d0:	89 81       	ldd	r24, Y+1	; 0x01
    50d2:	85 31       	cpi	r24, 0x15	; 21
    50d4:	f8 f2       	brcs	.-66     	; 0x5094 <SSD_enuDisplayNum+0x266>
		{
			return Local_enuErrorState;
		}
	}

	Local_enuErrorState = ES_OK;
    50d6:	81 e0       	ldi	r24, 0x01	; 1
    50d8:	8e 83       	std	Y+6, r24	; 0x06

	return Local_enuErrorState;
    50da:	8e 81       	ldd	r24, Y+6	; 0x06
    50dc:	88 87       	std	Y+8, r24	; 0x08
    50de:	88 85       	ldd	r24, Y+8	; 0x08
}
    50e0:	28 96       	adiw	r28, 0x08	; 8
    50e2:	0f b6       	in	r0, 0x3f	; 63
    50e4:	f8 94       	cli
    50e6:	de bf       	out	0x3e, r29	; 62
    50e8:	0f be       	out	0x3f, r0	; 63
    50ea:	cd bf       	out	0x3d, r28	; 61
    50ec:	cf 91       	pop	r28
    50ee:	df 91       	pop	r29
    50f0:	08 95       	ret

000050f2 <SSD_enuEnableCommon>:

ES_t SSD_enuEnableCommon(void)
{
    50f2:	df 93       	push	r29
    50f4:	cf 93       	push	r28
    50f6:	0f 92       	push	r0
    50f8:	cd b7       	in	r28, 0x3d	; 61
    50fa:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    50fc:	19 82       	std	Y+1, r1	; 0x01

	#if SEG_CMN_PIN <= DIO_u8PIN7 && SEG_CMN_PORT <= DIO_u8PORTD
		#if SEG_TYPE == COMMON_CATHODE
			Local_enuErrorState = DIO_enuSetPinValue(SEG_CMN_PORT, SEG_CMN_PIN, DIO_u8LOW);
    50fe:	82 e0       	ldi	r24, 0x02	; 2
    5100:	62 e0       	ldi	r22, 0x02	; 2
    5102:	40 e0       	ldi	r20, 0x00	; 0
    5104:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    5108:	89 83       	std	Y+1, r24	; 0x01

	#else
		#error "Your Common pin has a wrong selection!"
	#endif

	return Local_enuErrorState;
    510a:	89 81       	ldd	r24, Y+1	; 0x01
}
    510c:	0f 90       	pop	r0
    510e:	cf 91       	pop	r28
    5110:	df 91       	pop	r29
    5112:	08 95       	ret

00005114 <SSD_enuDisableCommon>:

ES_t SSD_enuDisableCommon(void)
{
    5114:	df 93       	push	r29
    5116:	cf 93       	push	r28
    5118:	0f 92       	push	r0
    511a:	cd b7       	in	r28, 0x3d	; 61
    511c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    511e:	19 82       	std	Y+1, r1	; 0x01

	#if SEG_CMN_PIN <= DIO_u8PIN7 && SEG_CMN_PORT <= DIO_u8PORTD
		#if SEG_TYPE == COMMON_CATHODE
			Local_enuErrorState = DIO_enuSetPinValue(SEG_CMN_PORT, SEG_CMN_PIN, DIO_u8HIGH);
    5120:	82 e0       	ldi	r24, 0x02	; 2
    5122:	62 e0       	ldi	r22, 0x02	; 2
    5124:	41 e0       	ldi	r20, 0x01	; 1
    5126:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    512a:	89 83       	std	Y+1, r24	; 0x01

	#else
		#error "Your Common pin has a wrong selection!"
	#endif

	return Local_enuErrorState;
    512c:	89 81       	ldd	r24, Y+1	; 0x01
}
    512e:	0f 90       	pop	r0
    5130:	cf 91       	pop	r28
    5132:	df 91       	pop	r29
    5134:	08 95       	ret

00005136 <SSD_enuEnableDot>:

ES_t SSD_enuEnableDot(void)
{
    5136:	df 93       	push	r29
    5138:	cf 93       	push	r28
    513a:	0f 92       	push	r0
    513c:	cd b7       	in	r28, 0x3d	; 61
    513e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    5140:	19 82       	std	Y+1, r1	; 0x01

	#if SEG_DOT_PIN <= DIO_u8PIN7 && SEG_DOT_PORT <= DIO_u8PORTD
		#if SEG_TYPE == COMMON_CATHODE
			Local_enuErrorState = DIO_enuSetPinValue(SEG_DOT_PORT, SEG_DOT_PIN, DIO_u8HIGH);
    5142:	82 e0       	ldi	r24, 0x02	; 2
    5144:	62 e0       	ldi	r22, 0x02	; 2
    5146:	41 e0       	ldi	r20, 0x01	; 1
    5148:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    514c:	89 83       	std	Y+1, r24	; 0x01

	#else
		#error "Your DOT pin has a wrong selection!"
	#endif

	return Local_enuErrorState;
    514e:	89 81       	ldd	r24, Y+1	; 0x01
}
    5150:	0f 90       	pop	r0
    5152:	cf 91       	pop	r28
    5154:	df 91       	pop	r29
    5156:	08 95       	ret

00005158 <SSD_enuDisableDot>:

ES_t SSD_enuDisableDot(void)
{
    5158:	df 93       	push	r29
    515a:	cf 93       	push	r28
    515c:	0f 92       	push	r0
    515e:	cd b7       	in	r28, 0x3d	; 61
    5160:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    5162:	19 82       	std	Y+1, r1	; 0x01

	#if SEG_DOT_PIN <= DIO_u8PIN7 && SEG_DOT_PORT <= DIO_u8PORTD
		#if SEG_TYPE == COMMON_CATHODE
			Local_enuErrorState = DIO_enuSetPinValue(SEG_DOT_PORT, SEG_DOT_PIN, DIO_u8LOW);
    5164:	82 e0       	ldi	r24, 0x02	; 2
    5166:	62 e0       	ldi	r22, 0x02	; 2
    5168:	40 e0       	ldi	r20, 0x00	; 0
    516a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    516e:	89 83       	std	Y+1, r24	; 0x01

	#else
		#error "Your DOT pin has a wrong selection!"
	#endif

	return Local_enuErrorState;
    5170:	89 81       	ldd	r24, Y+1	; 0x01
}
    5172:	0f 90       	pop	r0
    5174:	cf 91       	pop	r28
    5176:	df 91       	pop	r29
    5178:	08 95       	ret

0000517a <SSD_enuClearDisplay>:

ES_t SSD_enuClearDisplay(void)
{
    517a:	df 93       	push	r29
    517c:	cf 93       	push	r28
    517e:	cd b7       	in	r28, 0x3d	; 61
    5180:	de b7       	in	r29, 0x3e	; 62
    5182:	27 97       	sbiw	r28, 0x07	; 7
    5184:	0f b6       	in	r0, 0x3f	; 63
    5186:	f8 94       	cli
    5188:	de bf       	out	0x3e, r29	; 62
    518a:	0f be       	out	0x3f, r0	; 63
    518c:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    518e:	1e 82       	std	Y+6, r1	; 0x06

	u32 Local_u32Check = 0;
    5190:	1a 82       	std	Y+2, r1	; 0x02
    5192:	1b 82       	std	Y+3, r1	; 0x03
    5194:	1c 82       	std	Y+4, r1	; 0x04
    5196:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8Iterator = 0;
    5198:	19 82       	std	Y+1, r1	; 0x01

	#if SEG_TYPE == COMMON_CATHODE
		Local_u32Check |= (DIO_enuSetPinValue(SEG_APORT, SEG_APIN,DIO_u8LOW) << 0);
    519a:	80 e0       	ldi	r24, 0x00	; 0
    519c:	60 e0       	ldi	r22, 0x00	; 0
    519e:	40 e0       	ldi	r20, 0x00	; 0
    51a0:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    51a4:	28 2f       	mov	r18, r24
    51a6:	30 e0       	ldi	r19, 0x00	; 0
    51a8:	40 e0       	ldi	r20, 0x00	; 0
    51aa:	50 e0       	ldi	r21, 0x00	; 0
    51ac:	8a 81       	ldd	r24, Y+2	; 0x02
    51ae:	9b 81       	ldd	r25, Y+3	; 0x03
    51b0:	ac 81       	ldd	r26, Y+4	; 0x04
    51b2:	bd 81       	ldd	r27, Y+5	; 0x05
    51b4:	82 2b       	or	r24, r18
    51b6:	93 2b       	or	r25, r19
    51b8:	a4 2b       	or	r26, r20
    51ba:	b5 2b       	or	r27, r21
    51bc:	8a 83       	std	Y+2, r24	; 0x02
    51be:	9b 83       	std	Y+3, r25	; 0x03
    51c0:	ac 83       	std	Y+4, r26	; 0x04
    51c2:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (DIO_enuSetPinValue(SEG_BPORT, SEG_BPIN,DIO_u8LOW) << 3);
    51c4:	80 e0       	ldi	r24, 0x00	; 0
    51c6:	61 e0       	ldi	r22, 0x01	; 1
    51c8:	40 e0       	ldi	r20, 0x00	; 0
    51ca:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    51ce:	88 2f       	mov	r24, r24
    51d0:	90 e0       	ldi	r25, 0x00	; 0
    51d2:	88 0f       	add	r24, r24
    51d4:	99 1f       	adc	r25, r25
    51d6:	88 0f       	add	r24, r24
    51d8:	99 1f       	adc	r25, r25
    51da:	88 0f       	add	r24, r24
    51dc:	99 1f       	adc	r25, r25
    51de:	9c 01       	movw	r18, r24
    51e0:	44 27       	eor	r20, r20
    51e2:	37 fd       	sbrc	r19, 7
    51e4:	40 95       	com	r20
    51e6:	54 2f       	mov	r21, r20
    51e8:	8a 81       	ldd	r24, Y+2	; 0x02
    51ea:	9b 81       	ldd	r25, Y+3	; 0x03
    51ec:	ac 81       	ldd	r26, Y+4	; 0x04
    51ee:	bd 81       	ldd	r27, Y+5	; 0x05
    51f0:	82 2b       	or	r24, r18
    51f2:	93 2b       	or	r25, r19
    51f4:	a4 2b       	or	r26, r20
    51f6:	b5 2b       	or	r27, r21
    51f8:	8a 83       	std	Y+2, r24	; 0x02
    51fa:	9b 83       	std	Y+3, r25	; 0x03
    51fc:	ac 83       	std	Y+4, r26	; 0x04
    51fe:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (DIO_enuSetPinValue(SEG_CPORT, SEG_CPIN,DIO_u8LOW) << 6);
    5200:	80 e0       	ldi	r24, 0x00	; 0
    5202:	62 e0       	ldi	r22, 0x02	; 2
    5204:	40 e0       	ldi	r20, 0x00	; 0
    5206:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    520a:	88 2f       	mov	r24, r24
    520c:	90 e0       	ldi	r25, 0x00	; 0
    520e:	00 24       	eor	r0, r0
    5210:	96 95       	lsr	r25
    5212:	87 95       	ror	r24
    5214:	07 94       	ror	r0
    5216:	96 95       	lsr	r25
    5218:	87 95       	ror	r24
    521a:	07 94       	ror	r0
    521c:	98 2f       	mov	r25, r24
    521e:	80 2d       	mov	r24, r0
    5220:	9c 01       	movw	r18, r24
    5222:	44 27       	eor	r20, r20
    5224:	37 fd       	sbrc	r19, 7
    5226:	40 95       	com	r20
    5228:	54 2f       	mov	r21, r20
    522a:	8a 81       	ldd	r24, Y+2	; 0x02
    522c:	9b 81       	ldd	r25, Y+3	; 0x03
    522e:	ac 81       	ldd	r26, Y+4	; 0x04
    5230:	bd 81       	ldd	r27, Y+5	; 0x05
    5232:	82 2b       	or	r24, r18
    5234:	93 2b       	or	r25, r19
    5236:	a4 2b       	or	r26, r20
    5238:	b5 2b       	or	r27, r21
    523a:	8a 83       	std	Y+2, r24	; 0x02
    523c:	9b 83       	std	Y+3, r25	; 0x03
    523e:	ac 83       	std	Y+4, r26	; 0x04
    5240:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (DIO_enuSetPinValue(SEG_DPORT, SEG_DPIN,DIO_u8LOW) << 9);
    5242:	81 e0       	ldi	r24, 0x01	; 1
    5244:	60 e0       	ldi	r22, 0x00	; 0
    5246:	40 e0       	ldi	r20, 0x00	; 0
    5248:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    524c:	88 2f       	mov	r24, r24
    524e:	90 e0       	ldi	r25, 0x00	; 0
    5250:	98 2f       	mov	r25, r24
    5252:	88 27       	eor	r24, r24
    5254:	99 0f       	add	r25, r25
    5256:	9c 01       	movw	r18, r24
    5258:	44 27       	eor	r20, r20
    525a:	37 fd       	sbrc	r19, 7
    525c:	40 95       	com	r20
    525e:	54 2f       	mov	r21, r20
    5260:	8a 81       	ldd	r24, Y+2	; 0x02
    5262:	9b 81       	ldd	r25, Y+3	; 0x03
    5264:	ac 81       	ldd	r26, Y+4	; 0x04
    5266:	bd 81       	ldd	r27, Y+5	; 0x05
    5268:	82 2b       	or	r24, r18
    526a:	93 2b       	or	r25, r19
    526c:	a4 2b       	or	r26, r20
    526e:	b5 2b       	or	r27, r21
    5270:	8a 83       	std	Y+2, r24	; 0x02
    5272:	9b 83       	std	Y+3, r25	; 0x03
    5274:	ac 83       	std	Y+4, r26	; 0x04
    5276:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (DIO_enuSetPinValue(SEG_EPORT, SEG_EPIN,DIO_u8LOW) << 12);
    5278:	81 e0       	ldi	r24, 0x01	; 1
    527a:	61 e0       	ldi	r22, 0x01	; 1
    527c:	40 e0       	ldi	r20, 0x00	; 0
    527e:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    5282:	88 2f       	mov	r24, r24
    5284:	90 e0       	ldi	r25, 0x00	; 0
    5286:	98 2f       	mov	r25, r24
    5288:	88 27       	eor	r24, r24
    528a:	92 95       	swap	r25
    528c:	90 7f       	andi	r25, 0xF0	; 240
    528e:	9c 01       	movw	r18, r24
    5290:	44 27       	eor	r20, r20
    5292:	37 fd       	sbrc	r19, 7
    5294:	40 95       	com	r20
    5296:	54 2f       	mov	r21, r20
    5298:	8a 81       	ldd	r24, Y+2	; 0x02
    529a:	9b 81       	ldd	r25, Y+3	; 0x03
    529c:	ac 81       	ldd	r26, Y+4	; 0x04
    529e:	bd 81       	ldd	r27, Y+5	; 0x05
    52a0:	82 2b       	or	r24, r18
    52a2:	93 2b       	or	r25, r19
    52a4:	a4 2b       	or	r26, r20
    52a6:	b5 2b       	or	r27, r21
    52a8:	8a 83       	std	Y+2, r24	; 0x02
    52aa:	9b 83       	std	Y+3, r25	; 0x03
    52ac:	ac 83       	std	Y+4, r26	; 0x04
    52ae:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_FPORT, SEG_FPIN,DIO_u8LOW)) << 15);
    52b0:	81 e0       	ldi	r24, 0x01	; 1
    52b2:	62 e0       	ldi	r22, 0x02	; 2
    52b4:	40 e0       	ldi	r20, 0x00	; 0
    52b6:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    52ba:	88 2f       	mov	r24, r24
    52bc:	90 e0       	ldi	r25, 0x00	; 0
    52be:	a0 e0       	ldi	r26, 0x00	; 0
    52c0:	b0 e0       	ldi	r27, 0x00	; 0
    52c2:	9c 01       	movw	r18, r24
    52c4:	ad 01       	movw	r20, r26
    52c6:	01 2e       	mov	r0, r17
    52c8:	1f e0       	ldi	r17, 0x0F	; 15
    52ca:	22 0f       	add	r18, r18
    52cc:	33 1f       	adc	r19, r19
    52ce:	44 1f       	adc	r20, r20
    52d0:	55 1f       	adc	r21, r21
    52d2:	1a 95       	dec	r17
    52d4:	d1 f7       	brne	.-12     	; 0x52ca <SSD_enuClearDisplay+0x150>
    52d6:	10 2d       	mov	r17, r0
    52d8:	8a 81       	ldd	r24, Y+2	; 0x02
    52da:	9b 81       	ldd	r25, Y+3	; 0x03
    52dc:	ac 81       	ldd	r26, Y+4	; 0x04
    52de:	bd 81       	ldd	r27, Y+5	; 0x05
    52e0:	82 2b       	or	r24, r18
    52e2:	93 2b       	or	r25, r19
    52e4:	a4 2b       	or	r26, r20
    52e6:	b5 2b       	or	r27, r21
    52e8:	8a 83       	std	Y+2, r24	; 0x02
    52ea:	9b 83       	std	Y+3, r25	; 0x03
    52ec:	ac 83       	std	Y+4, r26	; 0x04
    52ee:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_GPORT, SEG_GPIN,DIO_u8LOW)) << 18);
    52f0:	81 e0       	ldi	r24, 0x01	; 1
    52f2:	63 e0       	ldi	r22, 0x03	; 3
    52f4:	40 e0       	ldi	r20, 0x00	; 0
    52f6:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    52fa:	88 2f       	mov	r24, r24
    52fc:	90 e0       	ldi	r25, 0x00	; 0
    52fe:	a0 e0       	ldi	r26, 0x00	; 0
    5300:	b0 e0       	ldi	r27, 0x00	; 0
    5302:	9c 01       	movw	r18, r24
    5304:	ad 01       	movw	r20, r26
    5306:	01 2e       	mov	r0, r17
    5308:	12 e1       	ldi	r17, 0x12	; 18
    530a:	22 0f       	add	r18, r18
    530c:	33 1f       	adc	r19, r19
    530e:	44 1f       	adc	r20, r20
    5310:	55 1f       	adc	r21, r21
    5312:	1a 95       	dec	r17
    5314:	d1 f7       	brne	.-12     	; 0x530a <SSD_enuClearDisplay+0x190>
    5316:	10 2d       	mov	r17, r0
    5318:	8a 81       	ldd	r24, Y+2	; 0x02
    531a:	9b 81       	ldd	r25, Y+3	; 0x03
    531c:	ac 81       	ldd	r26, Y+4	; 0x04
    531e:	bd 81       	ldd	r27, Y+5	; 0x05
    5320:	82 2b       	or	r24, r18
    5322:	93 2b       	or	r25, r19
    5324:	a4 2b       	or	r26, r20
    5326:	b5 2b       	or	r27, r21
    5328:	8a 83       	std	Y+2, r24	; 0x02
    532a:	9b 83       	std	Y+3, r25	; 0x03
    532c:	ac 83       	std	Y+4, r26	; 0x04
    532e:	bd 83       	std	Y+5, r27	; 0x05
		Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_GPORT, SEG_GPIN,DIO_u8HIGH)) << 18);
	#else
		#error "Your type selection is invalid!"
	#endif

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    5330:	19 82       	std	Y+1, r1	; 0x01
    5332:	1e c0       	rjmp	.+60     	; 0x5370 <SSD_enuClearDisplay+0x1f6>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & 7) != ES_OK)
    5334:	89 81       	ldd	r24, Y+1	; 0x01
    5336:	28 2f       	mov	r18, r24
    5338:	30 e0       	ldi	r19, 0x00	; 0
    533a:	8a 81       	ldd	r24, Y+2	; 0x02
    533c:	9b 81       	ldd	r25, Y+3	; 0x03
    533e:	ac 81       	ldd	r26, Y+4	; 0x04
    5340:	bd 81       	ldd	r27, Y+5	; 0x05
    5342:	02 2e       	mov	r0, r18
    5344:	04 c0       	rjmp	.+8      	; 0x534e <SSD_enuClearDisplay+0x1d4>
    5346:	b6 95       	lsr	r27
    5348:	a7 95       	ror	r26
    534a:	97 95       	ror	r25
    534c:	87 95       	ror	r24
    534e:	0a 94       	dec	r0
    5350:	d2 f7       	brpl	.-12     	; 0x5346 <SSD_enuClearDisplay+0x1cc>
    5352:	87 70       	andi	r24, 0x07	; 7
    5354:	90 70       	andi	r25, 0x00	; 0
    5356:	a0 70       	andi	r26, 0x00	; 0
    5358:	b0 70       	andi	r27, 0x00	; 0
    535a:	81 30       	cpi	r24, 0x01	; 1
    535c:	91 05       	cpc	r25, r1
    535e:	a1 05       	cpc	r26, r1
    5360:	b1 05       	cpc	r27, r1
    5362:	19 f0       	breq	.+6      	; 0x536a <SSD_enuClearDisplay+0x1f0>
		{
			return Local_enuErrorState;
    5364:	8e 81       	ldd	r24, Y+6	; 0x06
    5366:	8f 83       	std	Y+7, r24	; 0x07
    5368:	0a c0       	rjmp	.+20     	; 0x537e <SSD_enuClearDisplay+0x204>
		Local_u32Check |= (((u32)DIO_enuSetPinValue(SEG_GPORT, SEG_GPIN,DIO_u8HIGH)) << 18);
	#else
		#error "Your type selection is invalid!"
	#endif

	for(Local_u8Iterator = 0; Local_u8Iterator < 21; Local_u8Iterator += 3)
    536a:	89 81       	ldd	r24, Y+1	; 0x01
    536c:	8d 5f       	subi	r24, 0xFD	; 253
    536e:	89 83       	std	Y+1, r24	; 0x01
    5370:	89 81       	ldd	r24, Y+1	; 0x01
    5372:	85 31       	cpi	r24, 0x15	; 21
    5374:	f8 f2       	brcs	.-66     	; 0x5334 <SSD_enuClearDisplay+0x1ba>
		{
			return Local_enuErrorState;
		}
	}

	Local_enuErrorState = ES_OK;
    5376:	81 e0       	ldi	r24, 0x01	; 1
    5378:	8e 83       	std	Y+6, r24	; 0x06
	return Local_enuErrorState;
    537a:	8e 81       	ldd	r24, Y+6	; 0x06
    537c:	8f 83       	std	Y+7, r24	; 0x07
    537e:	8f 81       	ldd	r24, Y+7	; 0x07
}
    5380:	27 96       	adiw	r28, 0x07	; 7
    5382:	0f b6       	in	r0, 0x3f	; 63
    5384:	f8 94       	cli
    5386:	de bf       	out	0x3e, r29	; 62
    5388:	0f be       	out	0x3f, r0	; 63
    538a:	cd bf       	out	0x3d, r28	; 61
    538c:	cf 91       	pop	r28
    538e:	df 91       	pop	r29
    5390:	08 95       	ret

00005392 <LED_enuInit>:

extern u8 LED_num;
/***********************	Includes Section End	***********************/

ES_t LED_enuInit(LED_t * Copy_pstrLedConfiguration)
{
    5392:	df 93       	push	r29
    5394:	cf 93       	push	r28
    5396:	00 d0       	rcall	.+0      	; 0x5398 <LED_enuInit+0x6>
    5398:	00 d0       	rcall	.+0      	; 0x539a <LED_enuInit+0x8>
    539a:	0f 92       	push	r0
    539c:	cd b7       	in	r28, 0x3d	; 61
    539e:	de b7       	in	r29, 0x3e	; 62
    53a0:	9c 83       	std	Y+4, r25	; 0x04
    53a2:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    53a4:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_pstrLedConfiguration != NULL)
    53a6:	8b 81       	ldd	r24, Y+3	; 0x03
    53a8:	9c 81       	ldd	r25, Y+4	; 0x04
    53aa:	00 97       	sbiw	r24, 0x00	; 0
    53ac:	09 f4       	brne	.+2      	; 0x53b0 <LED_enuInit+0x1e>
    53ae:	26 c1       	rjmp	.+588    	; 0x55fc <LED_enuInit+0x26a>
	{
		u8 Local_u8Iterator = 0;
    53b0:	19 82       	std	Y+1, r1	; 0x01

		for(Local_u8Iterator = 0; Local_u8Iterator < LED_num; Local_u8Iterator++)
    53b2:	19 82       	std	Y+1, r1	; 0x01
    53b4:	1c c1       	rjmp	.+568    	; 0x55ee <LED_enuInit+0x25c>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PortID,
    53b6:	89 81       	ldd	r24, Y+1	; 0x01
    53b8:	88 2f       	mov	r24, r24
    53ba:	90 e0       	ldi	r25, 0x00	; 0
    53bc:	9c 01       	movw	r18, r24
    53be:	22 0f       	add	r18, r18
    53c0:	33 1f       	adc	r19, r19
    53c2:	22 0f       	add	r18, r18
    53c4:	33 1f       	adc	r19, r19
    53c6:	8b 81       	ldd	r24, Y+3	; 0x03
    53c8:	9c 81       	ldd	r25, Y+4	; 0x04
    53ca:	fc 01       	movw	r30, r24
    53cc:	e2 0f       	add	r30, r18
    53ce:	f3 1f       	adc	r31, r19
    53d0:	40 81       	ld	r20, Z
    53d2:	89 81       	ldd	r24, Y+1	; 0x01
    53d4:	88 2f       	mov	r24, r24
    53d6:	90 e0       	ldi	r25, 0x00	; 0
    53d8:	9c 01       	movw	r18, r24
    53da:	22 0f       	add	r18, r18
    53dc:	33 1f       	adc	r19, r19
    53de:	22 0f       	add	r18, r18
    53e0:	33 1f       	adc	r19, r19
    53e2:	8b 81       	ldd	r24, Y+3	; 0x03
    53e4:	9c 81       	ldd	r25, Y+4	; 0x04
    53e6:	fc 01       	movw	r30, r24
    53e8:	e2 0f       	add	r30, r18
    53ea:	f3 1f       	adc	r31, r19
    53ec:	91 81       	ldd	r25, Z+1	; 0x01
    53ee:	84 2f       	mov	r24, r20
    53f0:	69 2f       	mov	r22, r25
    53f2:	41 e0       	ldi	r20, 0x01	; 1
    53f4:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    53f8:	8a 83       	std	Y+2, r24	; 0x02
														 Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PinID,
														 DIO_u8OUTPUT
														);

			if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8Connection == LED_u8SINK)
    53fa:	89 81       	ldd	r24, Y+1	; 0x01
    53fc:	88 2f       	mov	r24, r24
    53fe:	90 e0       	ldi	r25, 0x00	; 0
    5400:	9c 01       	movw	r18, r24
    5402:	22 0f       	add	r18, r18
    5404:	33 1f       	adc	r19, r19
    5406:	22 0f       	add	r18, r18
    5408:	33 1f       	adc	r19, r19
    540a:	8b 81       	ldd	r24, Y+3	; 0x03
    540c:	9c 81       	ldd	r25, Y+4	; 0x04
    540e:	fc 01       	movw	r30, r24
    5410:	e2 0f       	add	r30, r18
    5412:	f3 1f       	adc	r31, r19
    5414:	82 81       	ldd	r24, Z+2	; 0x02
    5416:	88 30       	cpi	r24, 0x08	; 8
    5418:	09 f0       	breq	.+2      	; 0x541c <LED_enuInit+0x8a>
    541a:	69 c0       	rjmp	.+210    	; 0x54ee <LED_enuInit+0x15c>
			{
				if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8InitState == LED_u8ON)
    541c:	89 81       	ldd	r24, Y+1	; 0x01
    541e:	88 2f       	mov	r24, r24
    5420:	90 e0       	ldi	r25, 0x00	; 0
    5422:	9c 01       	movw	r18, r24
    5424:	22 0f       	add	r18, r18
    5426:	33 1f       	adc	r19, r19
    5428:	22 0f       	add	r18, r18
    542a:	33 1f       	adc	r19, r19
    542c:	8b 81       	ldd	r24, Y+3	; 0x03
    542e:	9c 81       	ldd	r25, Y+4	; 0x04
    5430:	fc 01       	movw	r30, r24
    5432:	e2 0f       	add	r30, r18
    5434:	f3 1f       	adc	r31, r19
    5436:	83 81       	ldd	r24, Z+3	; 0x03
    5438:	8a 30       	cpi	r24, 0x0A	; 10
    543a:	19 f5       	brne	.+70     	; 0x5482 <LED_enuInit+0xf0>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PortID,
    543c:	89 81       	ldd	r24, Y+1	; 0x01
    543e:	88 2f       	mov	r24, r24
    5440:	90 e0       	ldi	r25, 0x00	; 0
    5442:	9c 01       	movw	r18, r24
    5444:	22 0f       	add	r18, r18
    5446:	33 1f       	adc	r19, r19
    5448:	22 0f       	add	r18, r18
    544a:	33 1f       	adc	r19, r19
    544c:	8b 81       	ldd	r24, Y+3	; 0x03
    544e:	9c 81       	ldd	r25, Y+4	; 0x04
    5450:	fc 01       	movw	r30, r24
    5452:	e2 0f       	add	r30, r18
    5454:	f3 1f       	adc	r31, r19
    5456:	40 81       	ld	r20, Z
    5458:	89 81       	ldd	r24, Y+1	; 0x01
    545a:	88 2f       	mov	r24, r24
    545c:	90 e0       	ldi	r25, 0x00	; 0
    545e:	9c 01       	movw	r18, r24
    5460:	22 0f       	add	r18, r18
    5462:	33 1f       	adc	r19, r19
    5464:	22 0f       	add	r18, r18
    5466:	33 1f       	adc	r19, r19
    5468:	8b 81       	ldd	r24, Y+3	; 0x03
    546a:	9c 81       	ldd	r25, Y+4	; 0x04
    546c:	fc 01       	movw	r30, r24
    546e:	e2 0f       	add	r30, r18
    5470:	f3 1f       	adc	r31, r19
    5472:	91 81       	ldd	r25, Z+1	; 0x01
    5474:	84 2f       	mov	r24, r20
    5476:	69 2f       	mov	r22, r25
    5478:	40 e0       	ldi	r20, 0x00	; 0
    547a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    547e:	8a 83       	std	Y+2, r24	; 0x02
    5480:	b3 c0       	rjmp	.+358    	; 0x55e8 <LED_enuInit+0x256>
							           	   	   	   	   	     Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PinID,
															 DIO_u8LOW);

				}
				else if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8InitState == LED_u8OFF)
    5482:	89 81       	ldd	r24, Y+1	; 0x01
    5484:	88 2f       	mov	r24, r24
    5486:	90 e0       	ldi	r25, 0x00	; 0
    5488:	9c 01       	movw	r18, r24
    548a:	22 0f       	add	r18, r18
    548c:	33 1f       	adc	r19, r19
    548e:	22 0f       	add	r18, r18
    5490:	33 1f       	adc	r19, r19
    5492:	8b 81       	ldd	r24, Y+3	; 0x03
    5494:	9c 81       	ldd	r25, Y+4	; 0x04
    5496:	fc 01       	movw	r30, r24
    5498:	e2 0f       	add	r30, r18
    549a:	f3 1f       	adc	r31, r19
    549c:	83 81       	ldd	r24, Z+3	; 0x03
    549e:	8b 30       	cpi	r24, 0x0B	; 11
    54a0:	19 f5       	brne	.+70     	; 0x54e8 <LED_enuInit+0x156>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PortID,
    54a2:	89 81       	ldd	r24, Y+1	; 0x01
    54a4:	88 2f       	mov	r24, r24
    54a6:	90 e0       	ldi	r25, 0x00	; 0
    54a8:	9c 01       	movw	r18, r24
    54aa:	22 0f       	add	r18, r18
    54ac:	33 1f       	adc	r19, r19
    54ae:	22 0f       	add	r18, r18
    54b0:	33 1f       	adc	r19, r19
    54b2:	8b 81       	ldd	r24, Y+3	; 0x03
    54b4:	9c 81       	ldd	r25, Y+4	; 0x04
    54b6:	fc 01       	movw	r30, r24
    54b8:	e2 0f       	add	r30, r18
    54ba:	f3 1f       	adc	r31, r19
    54bc:	40 81       	ld	r20, Z
    54be:	89 81       	ldd	r24, Y+1	; 0x01
    54c0:	88 2f       	mov	r24, r24
    54c2:	90 e0       	ldi	r25, 0x00	; 0
    54c4:	9c 01       	movw	r18, r24
    54c6:	22 0f       	add	r18, r18
    54c8:	33 1f       	adc	r19, r19
    54ca:	22 0f       	add	r18, r18
    54cc:	33 1f       	adc	r19, r19
    54ce:	8b 81       	ldd	r24, Y+3	; 0x03
    54d0:	9c 81       	ldd	r25, Y+4	; 0x04
    54d2:	fc 01       	movw	r30, r24
    54d4:	e2 0f       	add	r30, r18
    54d6:	f3 1f       	adc	r31, r19
    54d8:	91 81       	ldd	r25, Z+1	; 0x01
    54da:	84 2f       	mov	r24, r20
    54dc:	69 2f       	mov	r22, r25
    54de:	41 e0       	ldi	r20, 0x01	; 1
    54e0:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    54e4:	8a 83       	std	Y+2, r24	; 0x02
    54e6:	80 c0       	rjmp	.+256    	; 0x55e8 <LED_enuInit+0x256>
							           	   	   	   	   	   	 Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PinID,
															 DIO_u8HIGH);
				}
				else
				{
					return ES_OUT_OF_RANGE;
    54e8:	83 e0       	ldi	r24, 0x03	; 3
    54ea:	8d 83       	std	Y+5, r24	; 0x05
    54ec:	8b c0       	rjmp	.+278    	; 0x5604 <LED_enuInit+0x272>
				}
			}
			else if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8Connection == LED_u8SOURCE)
    54ee:	89 81       	ldd	r24, Y+1	; 0x01
    54f0:	88 2f       	mov	r24, r24
    54f2:	90 e0       	ldi	r25, 0x00	; 0
    54f4:	9c 01       	movw	r18, r24
    54f6:	22 0f       	add	r18, r18
    54f8:	33 1f       	adc	r19, r19
    54fa:	22 0f       	add	r18, r18
    54fc:	33 1f       	adc	r19, r19
    54fe:	8b 81       	ldd	r24, Y+3	; 0x03
    5500:	9c 81       	ldd	r25, Y+4	; 0x04
    5502:	fc 01       	movw	r30, r24
    5504:	e2 0f       	add	r30, r18
    5506:	f3 1f       	adc	r31, r19
    5508:	82 81       	ldd	r24, Z+2	; 0x02
    550a:	89 30       	cpi	r24, 0x09	; 9
    550c:	09 f0       	breq	.+2      	; 0x5510 <LED_enuInit+0x17e>
    550e:	69 c0       	rjmp	.+210    	; 0x55e2 <LED_enuInit+0x250>
			{
				if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8InitState == LED_u8ON)
    5510:	89 81       	ldd	r24, Y+1	; 0x01
    5512:	88 2f       	mov	r24, r24
    5514:	90 e0       	ldi	r25, 0x00	; 0
    5516:	9c 01       	movw	r18, r24
    5518:	22 0f       	add	r18, r18
    551a:	33 1f       	adc	r19, r19
    551c:	22 0f       	add	r18, r18
    551e:	33 1f       	adc	r19, r19
    5520:	8b 81       	ldd	r24, Y+3	; 0x03
    5522:	9c 81       	ldd	r25, Y+4	; 0x04
    5524:	fc 01       	movw	r30, r24
    5526:	e2 0f       	add	r30, r18
    5528:	f3 1f       	adc	r31, r19
    552a:	83 81       	ldd	r24, Z+3	; 0x03
    552c:	8a 30       	cpi	r24, 0x0A	; 10
    552e:	19 f5       	brne	.+70     	; 0x5576 <LED_enuInit+0x1e4>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PortID,
    5530:	89 81       	ldd	r24, Y+1	; 0x01
    5532:	88 2f       	mov	r24, r24
    5534:	90 e0       	ldi	r25, 0x00	; 0
    5536:	9c 01       	movw	r18, r24
    5538:	22 0f       	add	r18, r18
    553a:	33 1f       	adc	r19, r19
    553c:	22 0f       	add	r18, r18
    553e:	33 1f       	adc	r19, r19
    5540:	8b 81       	ldd	r24, Y+3	; 0x03
    5542:	9c 81       	ldd	r25, Y+4	; 0x04
    5544:	fc 01       	movw	r30, r24
    5546:	e2 0f       	add	r30, r18
    5548:	f3 1f       	adc	r31, r19
    554a:	40 81       	ld	r20, Z
    554c:	89 81       	ldd	r24, Y+1	; 0x01
    554e:	88 2f       	mov	r24, r24
    5550:	90 e0       	ldi	r25, 0x00	; 0
    5552:	9c 01       	movw	r18, r24
    5554:	22 0f       	add	r18, r18
    5556:	33 1f       	adc	r19, r19
    5558:	22 0f       	add	r18, r18
    555a:	33 1f       	adc	r19, r19
    555c:	8b 81       	ldd	r24, Y+3	; 0x03
    555e:	9c 81       	ldd	r25, Y+4	; 0x04
    5560:	fc 01       	movw	r30, r24
    5562:	e2 0f       	add	r30, r18
    5564:	f3 1f       	adc	r31, r19
    5566:	91 81       	ldd	r25, Z+1	; 0x01
    5568:	84 2f       	mov	r24, r20
    556a:	69 2f       	mov	r22, r25
    556c:	41 e0       	ldi	r20, 0x01	; 1
    556e:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    5572:	8a 83       	std	Y+2, r24	; 0x02
    5574:	39 c0       	rjmp	.+114    	; 0x55e8 <LED_enuInit+0x256>
							           	   	   	   	   	     Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PinID,
															 DIO_u8HIGH);

				}
				else if(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8InitState == LED_u8OFF)
    5576:	89 81       	ldd	r24, Y+1	; 0x01
    5578:	88 2f       	mov	r24, r24
    557a:	90 e0       	ldi	r25, 0x00	; 0
    557c:	9c 01       	movw	r18, r24
    557e:	22 0f       	add	r18, r18
    5580:	33 1f       	adc	r19, r19
    5582:	22 0f       	add	r18, r18
    5584:	33 1f       	adc	r19, r19
    5586:	8b 81       	ldd	r24, Y+3	; 0x03
    5588:	9c 81       	ldd	r25, Y+4	; 0x04
    558a:	fc 01       	movw	r30, r24
    558c:	e2 0f       	add	r30, r18
    558e:	f3 1f       	adc	r31, r19
    5590:	83 81       	ldd	r24, Z+3	; 0x03
    5592:	8b 30       	cpi	r24, 0x0B	; 11
    5594:	19 f5       	brne	.+70     	; 0x55dc <LED_enuInit+0x24a>
				{
					Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PortID,
    5596:	89 81       	ldd	r24, Y+1	; 0x01
    5598:	88 2f       	mov	r24, r24
    559a:	90 e0       	ldi	r25, 0x00	; 0
    559c:	9c 01       	movw	r18, r24
    559e:	22 0f       	add	r18, r18
    55a0:	33 1f       	adc	r19, r19
    55a2:	22 0f       	add	r18, r18
    55a4:	33 1f       	adc	r19, r19
    55a6:	8b 81       	ldd	r24, Y+3	; 0x03
    55a8:	9c 81       	ldd	r25, Y+4	; 0x04
    55aa:	fc 01       	movw	r30, r24
    55ac:	e2 0f       	add	r30, r18
    55ae:	f3 1f       	adc	r31, r19
    55b0:	40 81       	ld	r20, Z
    55b2:	89 81       	ldd	r24, Y+1	; 0x01
    55b4:	88 2f       	mov	r24, r24
    55b6:	90 e0       	ldi	r25, 0x00	; 0
    55b8:	9c 01       	movw	r18, r24
    55ba:	22 0f       	add	r18, r18
    55bc:	33 1f       	adc	r19, r19
    55be:	22 0f       	add	r18, r18
    55c0:	33 1f       	adc	r19, r19
    55c2:	8b 81       	ldd	r24, Y+3	; 0x03
    55c4:	9c 81       	ldd	r25, Y+4	; 0x04
    55c6:	fc 01       	movw	r30, r24
    55c8:	e2 0f       	add	r30, r18
    55ca:	f3 1f       	adc	r31, r19
    55cc:	91 81       	ldd	r25, Z+1	; 0x01
    55ce:	84 2f       	mov	r24, r20
    55d0:	69 2f       	mov	r22, r25
    55d2:	40 e0       	ldi	r20, 0x00	; 0
    55d4:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    55d8:	8a 83       	std	Y+2, r24	; 0x02
    55da:	06 c0       	rjmp	.+12     	; 0x55e8 <LED_enuInit+0x256>
							           	   	   	   	   	   	 Copy_pstrLedConfiguration[Local_u8Iterator].LED_u8PinID,
															 DIO_u8LOW);
				}
				else
				{
					return ES_OUT_OF_RANGE;
    55dc:	83 e0       	ldi	r24, 0x03	; 3
    55de:	8d 83       	std	Y+5, r24	; 0x05
    55e0:	11 c0       	rjmp	.+34     	; 0x5604 <LED_enuInit+0x272>
				}
			}
			else
			{
				return ES_OUT_OF_RANGE;
    55e2:	83 e0       	ldi	r24, 0x03	; 3
    55e4:	8d 83       	std	Y+5, r24	; 0x05
    55e6:	0e c0       	rjmp	.+28     	; 0x5604 <LED_enuInit+0x272>

	if(Copy_pstrLedConfiguration != NULL)
	{
		u8 Local_u8Iterator = 0;

		for(Local_u8Iterator = 0; Local_u8Iterator < LED_num; Local_u8Iterator++)
    55e8:	89 81       	ldd	r24, Y+1	; 0x01
    55ea:	8f 5f       	subi	r24, 0xFF	; 255
    55ec:	89 83       	std	Y+1, r24	; 0x01
    55ee:	90 91 c0 01 	lds	r25, 0x01C0
    55f2:	89 81       	ldd	r24, Y+1	; 0x01
    55f4:	89 17       	cp	r24, r25
    55f6:	08 f4       	brcc	.+2      	; 0x55fa <LED_enuInit+0x268>
    55f8:	de ce       	rjmp	.-580    	; 0x53b6 <LED_enuInit+0x24>
    55fa:	02 c0       	rjmp	.+4      	; 0x5600 <LED_enuInit+0x26e>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    55fc:	82 e0       	ldi	r24, 0x02	; 2
    55fe:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    5600:	8a 81       	ldd	r24, Y+2	; 0x02
    5602:	8d 83       	std	Y+5, r24	; 0x05
    5604:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5606:	0f 90       	pop	r0
    5608:	0f 90       	pop	r0
    560a:	0f 90       	pop	r0
    560c:	0f 90       	pop	r0
    560e:	0f 90       	pop	r0
    5610:	cf 91       	pop	r28
    5612:	df 91       	pop	r29
    5614:	08 95       	ret

00005616 <LED_enuTurnON>:

ES_t LED_enuTurnON(LED_t * Copy_pstrLedID)
{
    5616:	df 93       	push	r29
    5618:	cf 93       	push	r28
    561a:	00 d0       	rcall	.+0      	; 0x561c <LED_enuTurnON+0x6>
    561c:	00 d0       	rcall	.+0      	; 0x561e <LED_enuTurnON+0x8>
    561e:	cd b7       	in	r28, 0x3d	; 61
    5620:	de b7       	in	r29, 0x3e	; 62
    5622:	9b 83       	std	Y+3, r25	; 0x03
    5624:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    5626:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pstrLedID != NULL)
    5628:	8a 81       	ldd	r24, Y+2	; 0x02
    562a:	9b 81       	ldd	r25, Y+3	; 0x03
    562c:	00 97       	sbiw	r24, 0x00	; 0
    562e:	41 f1       	breq	.+80     	; 0x5680 <LED_enuTurnON+0x6a>
	{
		if(Copy_pstrLedID->LED_u8Connection == LED_u8SINK)
    5630:	ea 81       	ldd	r30, Y+2	; 0x02
    5632:	fb 81       	ldd	r31, Y+3	; 0x03
    5634:	82 81       	ldd	r24, Z+2	; 0x02
    5636:	88 30       	cpi	r24, 0x08	; 8
    5638:	61 f4       	brne	.+24     	; 0x5652 <LED_enuTurnON+0x3c>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8LOW);
    563a:	ea 81       	ldd	r30, Y+2	; 0x02
    563c:	fb 81       	ldd	r31, Y+3	; 0x03
    563e:	80 81       	ld	r24, Z
    5640:	ea 81       	ldd	r30, Y+2	; 0x02
    5642:	fb 81       	ldd	r31, Y+3	; 0x03
    5644:	91 81       	ldd	r25, Z+1	; 0x01
    5646:	69 2f       	mov	r22, r25
    5648:	40 e0       	ldi	r20, 0x00	; 0
    564a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    564e:	89 83       	std	Y+1, r24	; 0x01
    5650:	14 c0       	rjmp	.+40     	; 0x567a <LED_enuTurnON+0x64>
		}
		else if(Copy_pstrLedID->LED_u8Connection == LED_u8SOURCE)
    5652:	ea 81       	ldd	r30, Y+2	; 0x02
    5654:	fb 81       	ldd	r31, Y+3	; 0x03
    5656:	82 81       	ldd	r24, Z+2	; 0x02
    5658:	89 30       	cpi	r24, 0x09	; 9
    565a:	61 f4       	brne	.+24     	; 0x5674 <LED_enuTurnON+0x5e>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8HIGH);
    565c:	ea 81       	ldd	r30, Y+2	; 0x02
    565e:	fb 81       	ldd	r31, Y+3	; 0x03
    5660:	80 81       	ld	r24, Z
    5662:	ea 81       	ldd	r30, Y+2	; 0x02
    5664:	fb 81       	ldd	r31, Y+3	; 0x03
    5666:	91 81       	ldd	r25, Z+1	; 0x01
    5668:	69 2f       	mov	r22, r25
    566a:	41 e0       	ldi	r20, 0x01	; 1
    566c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    5670:	89 83       	std	Y+1, r24	; 0x01
    5672:	03 c0       	rjmp	.+6      	; 0x567a <LED_enuTurnON+0x64>
		}
		else
		{
			return ES_OUT_OF_RANGE;
    5674:	83 e0       	ldi	r24, 0x03	; 3
    5676:	8c 83       	std	Y+4, r24	; 0x04
    5678:	05 c0       	rjmp	.+10     	; 0x5684 <LED_enuTurnON+0x6e>
	else
	{
		return ES_NULL_POINTER;
	}

	return Local_enuErrorState;
    567a:	89 81       	ldd	r24, Y+1	; 0x01
    567c:	8c 83       	std	Y+4, r24	; 0x04
    567e:	02 c0       	rjmp	.+4      	; 0x5684 <LED_enuTurnON+0x6e>
			return ES_OUT_OF_RANGE;
		}
	}
	else
	{
		return ES_NULL_POINTER;
    5680:	82 e0       	ldi	r24, 0x02	; 2
    5682:	8c 83       	std	Y+4, r24	; 0x04
    5684:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return Local_enuErrorState;
}
    5686:	0f 90       	pop	r0
    5688:	0f 90       	pop	r0
    568a:	0f 90       	pop	r0
    568c:	0f 90       	pop	r0
    568e:	cf 91       	pop	r28
    5690:	df 91       	pop	r29
    5692:	08 95       	ret

00005694 <LED_enuTurnOFF>:

ES_t LED_enuTurnOFF(LED_t * Copy_pstrLedID)
{
    5694:	df 93       	push	r29
    5696:	cf 93       	push	r28
    5698:	00 d0       	rcall	.+0      	; 0x569a <LED_enuTurnOFF+0x6>
    569a:	00 d0       	rcall	.+0      	; 0x569c <LED_enuTurnOFF+0x8>
    569c:	cd b7       	in	r28, 0x3d	; 61
    569e:	de b7       	in	r29, 0x3e	; 62
    56a0:	9b 83       	std	Y+3, r25	; 0x03
    56a2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    56a4:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pstrLedID != NULL)
    56a6:	8a 81       	ldd	r24, Y+2	; 0x02
    56a8:	9b 81       	ldd	r25, Y+3	; 0x03
    56aa:	00 97       	sbiw	r24, 0x00	; 0
    56ac:	41 f1       	breq	.+80     	; 0x56fe <LED_enuTurnOFF+0x6a>
	{
		if(Copy_pstrLedID->LED_u8Connection == LED_u8SINK)
    56ae:	ea 81       	ldd	r30, Y+2	; 0x02
    56b0:	fb 81       	ldd	r31, Y+3	; 0x03
    56b2:	82 81       	ldd	r24, Z+2	; 0x02
    56b4:	88 30       	cpi	r24, 0x08	; 8
    56b6:	61 f4       	brne	.+24     	; 0x56d0 <LED_enuTurnOFF+0x3c>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8HIGH);
    56b8:	ea 81       	ldd	r30, Y+2	; 0x02
    56ba:	fb 81       	ldd	r31, Y+3	; 0x03
    56bc:	80 81       	ld	r24, Z
    56be:	ea 81       	ldd	r30, Y+2	; 0x02
    56c0:	fb 81       	ldd	r31, Y+3	; 0x03
    56c2:	91 81       	ldd	r25, Z+1	; 0x01
    56c4:	69 2f       	mov	r22, r25
    56c6:	41 e0       	ldi	r20, 0x01	; 1
    56c8:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    56cc:	89 83       	std	Y+1, r24	; 0x01
    56ce:	14 c0       	rjmp	.+40     	; 0x56f8 <LED_enuTurnOFF+0x64>
		}
		else if(Copy_pstrLedID->LED_u8Connection == LED_u8SOURCE)
    56d0:	ea 81       	ldd	r30, Y+2	; 0x02
    56d2:	fb 81       	ldd	r31, Y+3	; 0x03
    56d4:	82 81       	ldd	r24, Z+2	; 0x02
    56d6:	89 30       	cpi	r24, 0x09	; 9
    56d8:	61 f4       	brne	.+24     	; 0x56f2 <LED_enuTurnOFF+0x5e>
		{
			Local_enuErrorState = DIO_enuSetPinValue(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID, DIO_u8LOW);
    56da:	ea 81       	ldd	r30, Y+2	; 0x02
    56dc:	fb 81       	ldd	r31, Y+3	; 0x03
    56de:	80 81       	ld	r24, Z
    56e0:	ea 81       	ldd	r30, Y+2	; 0x02
    56e2:	fb 81       	ldd	r31, Y+3	; 0x03
    56e4:	91 81       	ldd	r25, Z+1	; 0x01
    56e6:	69 2f       	mov	r22, r25
    56e8:	40 e0       	ldi	r20, 0x00	; 0
    56ea:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    56ee:	89 83       	std	Y+1, r24	; 0x01
    56f0:	03 c0       	rjmp	.+6      	; 0x56f8 <LED_enuTurnOFF+0x64>
		}
		else
		{
			return ES_OUT_OF_RANGE;
    56f2:	83 e0       	ldi	r24, 0x03	; 3
    56f4:	8c 83       	std	Y+4, r24	; 0x04
    56f6:	05 c0       	rjmp	.+10     	; 0x5702 <LED_enuTurnOFF+0x6e>
	else
	{
		return ES_NULL_POINTER;
	}

	return Local_enuErrorState;
    56f8:	89 81       	ldd	r24, Y+1	; 0x01
    56fa:	8c 83       	std	Y+4, r24	; 0x04
    56fc:	02 c0       	rjmp	.+4      	; 0x5702 <LED_enuTurnOFF+0x6e>
			return ES_OUT_OF_RANGE;
		}
	}
	else
	{
		return ES_NULL_POINTER;
    56fe:	82 e0       	ldi	r24, 0x02	; 2
    5700:	8c 83       	std	Y+4, r24	; 0x04
    5702:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return Local_enuErrorState;
}
    5704:	0f 90       	pop	r0
    5706:	0f 90       	pop	r0
    5708:	0f 90       	pop	r0
    570a:	0f 90       	pop	r0
    570c:	cf 91       	pop	r28
    570e:	df 91       	pop	r29
    5710:	08 95       	ret

00005712 <LCD_enuInit>:
#include "LCD_private.h"
#include <util/delay.h>
/***********************	Includes Section End	***********************/

ES_t LCD_enuInit(void)
{
    5712:	df 93       	push	r29
    5714:	cf 93       	push	r28
    5716:	cd b7       	in	r28, 0x3d	; 61
    5718:	de b7       	in	r29, 0x3e	; 62
    571a:	e9 97       	sbiw	r28, 0x39	; 57
    571c:	0f b6       	in	r0, 0x3f	; 63
    571e:	f8 94       	cli
    5720:	de bf       	out	0x3e, r29	; 62
    5722:	0f be       	out	0x3f, r0	; 63
    5724:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    5726:	19 ae       	std	Y+57, r1	; 0x39

	/* Shared configuration in two LCD modes */
	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    5728:	80 e0       	ldi	r24, 0x00	; 0
    572a:	60 e0       	ldi	r22, 0x00	; 0
    572c:	41 e0       	ldi	r20, 0x01	; 1
    572e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    5732:	80 e0       	ldi	r24, 0x00	; 0
    5734:	61 e0       	ldi	r22, 0x01	; 1
    5736:	41 e0       	ldi	r20, 0x01	; 1
    5738:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    573c:	80 e0       	ldi	r24, 0x00	; 0
    573e:	62 e0       	ldi	r22, 0x02	; 2
    5740:	41 e0       	ldi	r20, 0x01	; 1
    5742:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    5746:	81 e0       	ldi	r24, 0x01	; 1
    5748:	67 e0       	ldi	r22, 0x07	; 7
    574a:	41 e0       	ldi	r20, 0x01	; 1
    574c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    5750:	81 e0       	ldi	r24, 0x01	; 1
    5752:	66 e0       	ldi	r22, 0x06	; 6
    5754:	41 e0       	ldi	r20, 0x01	; 1
    5756:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    575a:	81 e0       	ldi	r24, 0x01	; 1
    575c:	65 e0       	ldi	r22, 0x05	; 5
    575e:	41 e0       	ldi	r20, 0x01	; 1
    5760:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    5764:	81 e0       	ldi	r24, 0x01	; 1
    5766:	64 e0       	ldi	r22, 0x04	; 4
    5768:	41 e0       	ldi	r20, 0x01	; 1
    576a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    576e:	80 e0       	ldi	r24, 0x00	; 0
    5770:	90 e0       	ldi	r25, 0x00	; 0
    5772:	ac e0       	ldi	r26, 0x0C	; 12
    5774:	b2 e4       	ldi	r27, 0x42	; 66
    5776:	8d ab       	std	Y+53, r24	; 0x35
    5778:	9e ab       	std	Y+54, r25	; 0x36
    577a:	af ab       	std	Y+55, r26	; 0x37
    577c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    577e:	6d a9       	ldd	r22, Y+53	; 0x35
    5780:	7e a9       	ldd	r23, Y+54	; 0x36
    5782:	8f a9       	ldd	r24, Y+55	; 0x37
    5784:	98 ad       	ldd	r25, Y+56	; 0x38
    5786:	20 e0       	ldi	r18, 0x00	; 0
    5788:	30 e0       	ldi	r19, 0x00	; 0
    578a:	4a e7       	ldi	r20, 0x7A	; 122
    578c:	53 e4       	ldi	r21, 0x43	; 67
    578e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5792:	dc 01       	movw	r26, r24
    5794:	cb 01       	movw	r24, r22
    5796:	89 ab       	std	Y+49, r24	; 0x31
    5798:	9a ab       	std	Y+50, r25	; 0x32
    579a:	ab ab       	std	Y+51, r26	; 0x33
    579c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    579e:	69 a9       	ldd	r22, Y+49	; 0x31
    57a0:	7a a9       	ldd	r23, Y+50	; 0x32
    57a2:	8b a9       	ldd	r24, Y+51	; 0x33
    57a4:	9c a9       	ldd	r25, Y+52	; 0x34
    57a6:	20 e0       	ldi	r18, 0x00	; 0
    57a8:	30 e0       	ldi	r19, 0x00	; 0
    57aa:	40 e8       	ldi	r20, 0x80	; 128
    57ac:	5f e3       	ldi	r21, 0x3F	; 63
    57ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    57b2:	88 23       	and	r24, r24
    57b4:	2c f4       	brge	.+10     	; 0x57c0 <LCD_enuInit+0xae>
		__ticks = 1;
    57b6:	81 e0       	ldi	r24, 0x01	; 1
    57b8:	90 e0       	ldi	r25, 0x00	; 0
    57ba:	98 ab       	std	Y+48, r25	; 0x30
    57bc:	8f a7       	std	Y+47, r24	; 0x2f
    57be:	3f c0       	rjmp	.+126    	; 0x583e <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    57c0:	69 a9       	ldd	r22, Y+49	; 0x31
    57c2:	7a a9       	ldd	r23, Y+50	; 0x32
    57c4:	8b a9       	ldd	r24, Y+51	; 0x33
    57c6:	9c a9       	ldd	r25, Y+52	; 0x34
    57c8:	20 e0       	ldi	r18, 0x00	; 0
    57ca:	3f ef       	ldi	r19, 0xFF	; 255
    57cc:	4f e7       	ldi	r20, 0x7F	; 127
    57ce:	57 e4       	ldi	r21, 0x47	; 71
    57d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    57d4:	18 16       	cp	r1, r24
    57d6:	4c f5       	brge	.+82     	; 0x582a <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57d8:	6d a9       	ldd	r22, Y+53	; 0x35
    57da:	7e a9       	ldd	r23, Y+54	; 0x36
    57dc:	8f a9       	ldd	r24, Y+55	; 0x37
    57de:	98 ad       	ldd	r25, Y+56	; 0x38
    57e0:	20 e0       	ldi	r18, 0x00	; 0
    57e2:	30 e0       	ldi	r19, 0x00	; 0
    57e4:	40 e2       	ldi	r20, 0x20	; 32
    57e6:	51 e4       	ldi	r21, 0x41	; 65
    57e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57ec:	dc 01       	movw	r26, r24
    57ee:	cb 01       	movw	r24, r22
    57f0:	bc 01       	movw	r22, r24
    57f2:	cd 01       	movw	r24, r26
    57f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57f8:	dc 01       	movw	r26, r24
    57fa:	cb 01       	movw	r24, r22
    57fc:	98 ab       	std	Y+48, r25	; 0x30
    57fe:	8f a7       	std	Y+47, r24	; 0x2f
    5800:	0f c0       	rjmp	.+30     	; 0x5820 <LCD_enuInit+0x10e>
    5802:	89 e1       	ldi	r24, 0x19	; 25
    5804:	90 e0       	ldi	r25, 0x00	; 0
    5806:	9e a7       	std	Y+46, r25	; 0x2e
    5808:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    580a:	8d a5       	ldd	r24, Y+45	; 0x2d
    580c:	9e a5       	ldd	r25, Y+46	; 0x2e
    580e:	01 97       	sbiw	r24, 0x01	; 1
    5810:	f1 f7       	brne	.-4      	; 0x580e <LCD_enuInit+0xfc>
    5812:	9e a7       	std	Y+46, r25	; 0x2e
    5814:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5816:	8f a5       	ldd	r24, Y+47	; 0x2f
    5818:	98 a9       	ldd	r25, Y+48	; 0x30
    581a:	01 97       	sbiw	r24, 0x01	; 1
    581c:	98 ab       	std	Y+48, r25	; 0x30
    581e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5820:	8f a5       	ldd	r24, Y+47	; 0x2f
    5822:	98 a9       	ldd	r25, Y+48	; 0x30
    5824:	00 97       	sbiw	r24, 0x00	; 0
    5826:	69 f7       	brne	.-38     	; 0x5802 <LCD_enuInit+0xf0>
    5828:	14 c0       	rjmp	.+40     	; 0x5852 <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    582a:	69 a9       	ldd	r22, Y+49	; 0x31
    582c:	7a a9       	ldd	r23, Y+50	; 0x32
    582e:	8b a9       	ldd	r24, Y+51	; 0x33
    5830:	9c a9       	ldd	r25, Y+52	; 0x34
    5832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5836:	dc 01       	movw	r26, r24
    5838:	cb 01       	movw	r24, r22
    583a:	98 ab       	std	Y+48, r25	; 0x30
    583c:	8f a7       	std	Y+47, r24	; 0x2f
    583e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5840:	98 a9       	ldd	r25, Y+48	; 0x30
    5842:	9c a7       	std	Y+44, r25	; 0x2c
    5844:	8b a7       	std	Y+43, r24	; 0x2b
    5846:	8b a5       	ldd	r24, Y+43	; 0x2b
    5848:	9c a5       	ldd	r25, Y+44	; 0x2c
    584a:	01 97       	sbiw	r24, 0x01	; 1
    584c:	f1 f7       	brne	.-4      	; 0x584a <LCD_enuInit+0x138>
    584e:	9c a7       	std	Y+44, r25	; 0x2c
    5850:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);


	#if LCD_MODE == EIGHT_BIT
		DIO_enuSetPinDirection(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    5852:	82 e0       	ldi	r24, 0x02	; 2
    5854:	63 e0       	ldi	r22, 0x03	; 3
    5856:	41 e0       	ldi	r20, 0x01	; 1
    5858:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    585c:	82 e0       	ldi	r24, 0x02	; 2
    585e:	62 e0       	ldi	r22, 0x02	; 2
    5860:	41 e0       	ldi	r20, 0x01	; 1
    5862:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    5866:	82 e0       	ldi	r24, 0x02	; 2
    5868:	61 e0       	ldi	r22, 0x01	; 1
    586a:	41 e0       	ldi	r20, 0x01	; 1
    586c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    5870:	82 e0       	ldi	r24, 0x02	; 2
    5872:	60 e0       	ldi	r22, 0x00	; 0
    5874:	41 e0       	ldi	r20, 0x01	; 1
    5876:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>

		/* Function Set */
		LCD_invoidSendCommand(0x38);
    587a:	88 e3       	ldi	r24, 0x38	; 56
    587c:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <LCD_invoidSendCommand>
    5880:	80 e0       	ldi	r24, 0x00	; 0
    5882:	90 e0       	ldi	r25, 0x00	; 0
    5884:	a0 e8       	ldi	r26, 0x80	; 128
    5886:	bf e3       	ldi	r27, 0x3F	; 63
    5888:	8f a3       	std	Y+39, r24	; 0x27
    588a:	98 a7       	std	Y+40, r25	; 0x28
    588c:	a9 a7       	std	Y+41, r26	; 0x29
    588e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5890:	6f a1       	ldd	r22, Y+39	; 0x27
    5892:	78 a5       	ldd	r23, Y+40	; 0x28
    5894:	89 a5       	ldd	r24, Y+41	; 0x29
    5896:	9a a5       	ldd	r25, Y+42	; 0x2a
    5898:	20 e0       	ldi	r18, 0x00	; 0
    589a:	30 e0       	ldi	r19, 0x00	; 0
    589c:	4a e7       	ldi	r20, 0x7A	; 122
    589e:	53 e4       	ldi	r21, 0x43	; 67
    58a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58a4:	dc 01       	movw	r26, r24
    58a6:	cb 01       	movw	r24, r22
    58a8:	8b a3       	std	Y+35, r24	; 0x23
    58aa:	9c a3       	std	Y+36, r25	; 0x24
    58ac:	ad a3       	std	Y+37, r26	; 0x25
    58ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    58b0:	6b a1       	ldd	r22, Y+35	; 0x23
    58b2:	7c a1       	ldd	r23, Y+36	; 0x24
    58b4:	8d a1       	ldd	r24, Y+37	; 0x25
    58b6:	9e a1       	ldd	r25, Y+38	; 0x26
    58b8:	20 e0       	ldi	r18, 0x00	; 0
    58ba:	30 e0       	ldi	r19, 0x00	; 0
    58bc:	40 e8       	ldi	r20, 0x80	; 128
    58be:	5f e3       	ldi	r21, 0x3F	; 63
    58c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    58c4:	88 23       	and	r24, r24
    58c6:	2c f4       	brge	.+10     	; 0x58d2 <LCD_enuInit+0x1c0>
		__ticks = 1;
    58c8:	81 e0       	ldi	r24, 0x01	; 1
    58ca:	90 e0       	ldi	r25, 0x00	; 0
    58cc:	9a a3       	std	Y+34, r25	; 0x22
    58ce:	89 a3       	std	Y+33, r24	; 0x21
    58d0:	3f c0       	rjmp	.+126    	; 0x5950 <LCD_enuInit+0x23e>
	else if (__tmp > 65535)
    58d2:	6b a1       	ldd	r22, Y+35	; 0x23
    58d4:	7c a1       	ldd	r23, Y+36	; 0x24
    58d6:	8d a1       	ldd	r24, Y+37	; 0x25
    58d8:	9e a1       	ldd	r25, Y+38	; 0x26
    58da:	20 e0       	ldi	r18, 0x00	; 0
    58dc:	3f ef       	ldi	r19, 0xFF	; 255
    58de:	4f e7       	ldi	r20, 0x7F	; 127
    58e0:	57 e4       	ldi	r21, 0x47	; 71
    58e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    58e6:	18 16       	cp	r1, r24
    58e8:	4c f5       	brge	.+82     	; 0x593c <LCD_enuInit+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58ea:	6f a1       	ldd	r22, Y+39	; 0x27
    58ec:	78 a5       	ldd	r23, Y+40	; 0x28
    58ee:	89 a5       	ldd	r24, Y+41	; 0x29
    58f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    58f2:	20 e0       	ldi	r18, 0x00	; 0
    58f4:	30 e0       	ldi	r19, 0x00	; 0
    58f6:	40 e2       	ldi	r20, 0x20	; 32
    58f8:	51 e4       	ldi	r21, 0x41	; 65
    58fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58fe:	dc 01       	movw	r26, r24
    5900:	cb 01       	movw	r24, r22
    5902:	bc 01       	movw	r22, r24
    5904:	cd 01       	movw	r24, r26
    5906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    590a:	dc 01       	movw	r26, r24
    590c:	cb 01       	movw	r24, r22
    590e:	9a a3       	std	Y+34, r25	; 0x22
    5910:	89 a3       	std	Y+33, r24	; 0x21
    5912:	0f c0       	rjmp	.+30     	; 0x5932 <LCD_enuInit+0x220>
    5914:	89 e1       	ldi	r24, 0x19	; 25
    5916:	90 e0       	ldi	r25, 0x00	; 0
    5918:	98 a3       	std	Y+32, r25	; 0x20
    591a:	8f 8f       	std	Y+31, r24	; 0x1f
    591c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    591e:	98 a1       	ldd	r25, Y+32	; 0x20
    5920:	01 97       	sbiw	r24, 0x01	; 1
    5922:	f1 f7       	brne	.-4      	; 0x5920 <LCD_enuInit+0x20e>
    5924:	98 a3       	std	Y+32, r25	; 0x20
    5926:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5928:	89 a1       	ldd	r24, Y+33	; 0x21
    592a:	9a a1       	ldd	r25, Y+34	; 0x22
    592c:	01 97       	sbiw	r24, 0x01	; 1
    592e:	9a a3       	std	Y+34, r25	; 0x22
    5930:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5932:	89 a1       	ldd	r24, Y+33	; 0x21
    5934:	9a a1       	ldd	r25, Y+34	; 0x22
    5936:	00 97       	sbiw	r24, 0x00	; 0
    5938:	69 f7       	brne	.-38     	; 0x5914 <LCD_enuInit+0x202>
    593a:	14 c0       	rjmp	.+40     	; 0x5964 <LCD_enuInit+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    593c:	6b a1       	ldd	r22, Y+35	; 0x23
    593e:	7c a1       	ldd	r23, Y+36	; 0x24
    5940:	8d a1       	ldd	r24, Y+37	; 0x25
    5942:	9e a1       	ldd	r25, Y+38	; 0x26
    5944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5948:	dc 01       	movw	r26, r24
    594a:	cb 01       	movw	r24, r22
    594c:	9a a3       	std	Y+34, r25	; 0x22
    594e:	89 a3       	std	Y+33, r24	; 0x21
    5950:	89 a1       	ldd	r24, Y+33	; 0x21
    5952:	9a a1       	ldd	r25, Y+34	; 0x22
    5954:	9e 8f       	std	Y+30, r25	; 0x1e
    5956:	8d 8f       	std	Y+29, r24	; 0x1d
    5958:	8d 8d       	ldd	r24, Y+29	; 0x1d
    595a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    595c:	01 97       	sbiw	r24, 0x01	; 1
    595e:	f1 f7       	brne	.-4      	; 0x595c <LCD_enuInit+0x24a>
    5960:	9e 8f       	std	Y+30, r25	; 0x1e
    5962:	8d 8f       	std	Y+29, r24	; 0x1d
		#error "Invalid LCD Mode"
	#endif

		_delay_ms(1);
		/* Display ON Cursor Blink*/
		LCD_invoidSendCommand(0x0F);
    5964:	8f e0       	ldi	r24, 0x0F	; 15
    5966:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <LCD_invoidSendCommand>
    596a:	80 e0       	ldi	r24, 0x00	; 0
    596c:	90 e0       	ldi	r25, 0x00	; 0
    596e:	a0 e8       	ldi	r26, 0x80	; 128
    5970:	bf e3       	ldi	r27, 0x3F	; 63
    5972:	89 8f       	std	Y+25, r24	; 0x19
    5974:	9a 8f       	std	Y+26, r25	; 0x1a
    5976:	ab 8f       	std	Y+27, r26	; 0x1b
    5978:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    597a:	69 8d       	ldd	r22, Y+25	; 0x19
    597c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    597e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5980:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5982:	20 e0       	ldi	r18, 0x00	; 0
    5984:	30 e0       	ldi	r19, 0x00	; 0
    5986:	4a e7       	ldi	r20, 0x7A	; 122
    5988:	53 e4       	ldi	r21, 0x43	; 67
    598a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    598e:	dc 01       	movw	r26, r24
    5990:	cb 01       	movw	r24, r22
    5992:	8d 8b       	std	Y+21, r24	; 0x15
    5994:	9e 8b       	std	Y+22, r25	; 0x16
    5996:	af 8b       	std	Y+23, r26	; 0x17
    5998:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    599a:	6d 89       	ldd	r22, Y+21	; 0x15
    599c:	7e 89       	ldd	r23, Y+22	; 0x16
    599e:	8f 89       	ldd	r24, Y+23	; 0x17
    59a0:	98 8d       	ldd	r25, Y+24	; 0x18
    59a2:	20 e0       	ldi	r18, 0x00	; 0
    59a4:	30 e0       	ldi	r19, 0x00	; 0
    59a6:	40 e8       	ldi	r20, 0x80	; 128
    59a8:	5f e3       	ldi	r21, 0x3F	; 63
    59aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    59ae:	88 23       	and	r24, r24
    59b0:	2c f4       	brge	.+10     	; 0x59bc <LCD_enuInit+0x2aa>
		__ticks = 1;
    59b2:	81 e0       	ldi	r24, 0x01	; 1
    59b4:	90 e0       	ldi	r25, 0x00	; 0
    59b6:	9c 8b       	std	Y+20, r25	; 0x14
    59b8:	8b 8b       	std	Y+19, r24	; 0x13
    59ba:	3f c0       	rjmp	.+126    	; 0x5a3a <LCD_enuInit+0x328>
	else if (__tmp > 65535)
    59bc:	6d 89       	ldd	r22, Y+21	; 0x15
    59be:	7e 89       	ldd	r23, Y+22	; 0x16
    59c0:	8f 89       	ldd	r24, Y+23	; 0x17
    59c2:	98 8d       	ldd	r25, Y+24	; 0x18
    59c4:	20 e0       	ldi	r18, 0x00	; 0
    59c6:	3f ef       	ldi	r19, 0xFF	; 255
    59c8:	4f e7       	ldi	r20, 0x7F	; 127
    59ca:	57 e4       	ldi	r21, 0x47	; 71
    59cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    59d0:	18 16       	cp	r1, r24
    59d2:	4c f5       	brge	.+82     	; 0x5a26 <LCD_enuInit+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59d4:	69 8d       	ldd	r22, Y+25	; 0x19
    59d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    59d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    59da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    59dc:	20 e0       	ldi	r18, 0x00	; 0
    59de:	30 e0       	ldi	r19, 0x00	; 0
    59e0:	40 e2       	ldi	r20, 0x20	; 32
    59e2:	51 e4       	ldi	r21, 0x41	; 65
    59e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59e8:	dc 01       	movw	r26, r24
    59ea:	cb 01       	movw	r24, r22
    59ec:	bc 01       	movw	r22, r24
    59ee:	cd 01       	movw	r24, r26
    59f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59f4:	dc 01       	movw	r26, r24
    59f6:	cb 01       	movw	r24, r22
    59f8:	9c 8b       	std	Y+20, r25	; 0x14
    59fa:	8b 8b       	std	Y+19, r24	; 0x13
    59fc:	0f c0       	rjmp	.+30     	; 0x5a1c <LCD_enuInit+0x30a>
    59fe:	89 e1       	ldi	r24, 0x19	; 25
    5a00:	90 e0       	ldi	r25, 0x00	; 0
    5a02:	9a 8b       	std	Y+18, r25	; 0x12
    5a04:	89 8b       	std	Y+17, r24	; 0x11
    5a06:	89 89       	ldd	r24, Y+17	; 0x11
    5a08:	9a 89       	ldd	r25, Y+18	; 0x12
    5a0a:	01 97       	sbiw	r24, 0x01	; 1
    5a0c:	f1 f7       	brne	.-4      	; 0x5a0a <LCD_enuInit+0x2f8>
    5a0e:	9a 8b       	std	Y+18, r25	; 0x12
    5a10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a12:	8b 89       	ldd	r24, Y+19	; 0x13
    5a14:	9c 89       	ldd	r25, Y+20	; 0x14
    5a16:	01 97       	sbiw	r24, 0x01	; 1
    5a18:	9c 8b       	std	Y+20, r25	; 0x14
    5a1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a1c:	8b 89       	ldd	r24, Y+19	; 0x13
    5a1e:	9c 89       	ldd	r25, Y+20	; 0x14
    5a20:	00 97       	sbiw	r24, 0x00	; 0
    5a22:	69 f7       	brne	.-38     	; 0x59fe <LCD_enuInit+0x2ec>
    5a24:	14 c0       	rjmp	.+40     	; 0x5a4e <LCD_enuInit+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a26:	6d 89       	ldd	r22, Y+21	; 0x15
    5a28:	7e 89       	ldd	r23, Y+22	; 0x16
    5a2a:	8f 89       	ldd	r24, Y+23	; 0x17
    5a2c:	98 8d       	ldd	r25, Y+24	; 0x18
    5a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a32:	dc 01       	movw	r26, r24
    5a34:	cb 01       	movw	r24, r22
    5a36:	9c 8b       	std	Y+20, r25	; 0x14
    5a38:	8b 8b       	std	Y+19, r24	; 0x13
    5a3a:	8b 89       	ldd	r24, Y+19	; 0x13
    5a3c:	9c 89       	ldd	r25, Y+20	; 0x14
    5a3e:	98 8b       	std	Y+16, r25	; 0x10
    5a40:	8f 87       	std	Y+15, r24	; 0x0f
    5a42:	8f 85       	ldd	r24, Y+15	; 0x0f
    5a44:	98 89       	ldd	r25, Y+16	; 0x10
    5a46:	01 97       	sbiw	r24, 0x01	; 1
    5a48:	f1 f7       	brne	.-4      	; 0x5a46 <LCD_enuInit+0x334>
    5a4a:	98 8b       	std	Y+16, r25	; 0x10
    5a4c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		/* Clear Display */
		LCD_invoidSendCommand(0x01);
    5a4e:	81 e0       	ldi	r24, 0x01	; 1
    5a50:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <LCD_invoidSendCommand>
    5a54:	80 e0       	ldi	r24, 0x00	; 0
    5a56:	90 e0       	ldi	r25, 0x00	; 0
    5a58:	a0 e0       	ldi	r26, 0x00	; 0
    5a5a:	b0 e4       	ldi	r27, 0x40	; 64
    5a5c:	8b 87       	std	Y+11, r24	; 0x0b
    5a5e:	9c 87       	std	Y+12, r25	; 0x0c
    5a60:	ad 87       	std	Y+13, r26	; 0x0d
    5a62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a64:	6b 85       	ldd	r22, Y+11	; 0x0b
    5a66:	7c 85       	ldd	r23, Y+12	; 0x0c
    5a68:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a6c:	20 e0       	ldi	r18, 0x00	; 0
    5a6e:	30 e0       	ldi	r19, 0x00	; 0
    5a70:	4a e7       	ldi	r20, 0x7A	; 122
    5a72:	53 e4       	ldi	r21, 0x43	; 67
    5a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a78:	dc 01       	movw	r26, r24
    5a7a:	cb 01       	movw	r24, r22
    5a7c:	8f 83       	std	Y+7, r24	; 0x07
    5a7e:	98 87       	std	Y+8, r25	; 0x08
    5a80:	a9 87       	std	Y+9, r26	; 0x09
    5a82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5a84:	6f 81       	ldd	r22, Y+7	; 0x07
    5a86:	78 85       	ldd	r23, Y+8	; 0x08
    5a88:	89 85       	ldd	r24, Y+9	; 0x09
    5a8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a8c:	20 e0       	ldi	r18, 0x00	; 0
    5a8e:	30 e0       	ldi	r19, 0x00	; 0
    5a90:	40 e8       	ldi	r20, 0x80	; 128
    5a92:	5f e3       	ldi	r21, 0x3F	; 63
    5a94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5a98:	88 23       	and	r24, r24
    5a9a:	2c f4       	brge	.+10     	; 0x5aa6 <LCD_enuInit+0x394>
		__ticks = 1;
    5a9c:	81 e0       	ldi	r24, 0x01	; 1
    5a9e:	90 e0       	ldi	r25, 0x00	; 0
    5aa0:	9e 83       	std	Y+6, r25	; 0x06
    5aa2:	8d 83       	std	Y+5, r24	; 0x05
    5aa4:	3f c0       	rjmp	.+126    	; 0x5b24 <LCD_enuInit+0x412>
	else if (__tmp > 65535)
    5aa6:	6f 81       	ldd	r22, Y+7	; 0x07
    5aa8:	78 85       	ldd	r23, Y+8	; 0x08
    5aaa:	89 85       	ldd	r24, Y+9	; 0x09
    5aac:	9a 85       	ldd	r25, Y+10	; 0x0a
    5aae:	20 e0       	ldi	r18, 0x00	; 0
    5ab0:	3f ef       	ldi	r19, 0xFF	; 255
    5ab2:	4f e7       	ldi	r20, 0x7F	; 127
    5ab4:	57 e4       	ldi	r21, 0x47	; 71
    5ab6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5aba:	18 16       	cp	r1, r24
    5abc:	4c f5       	brge	.+82     	; 0x5b10 <LCD_enuInit+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5abe:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ac0:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ac2:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ac4:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ac6:	20 e0       	ldi	r18, 0x00	; 0
    5ac8:	30 e0       	ldi	r19, 0x00	; 0
    5aca:	40 e2       	ldi	r20, 0x20	; 32
    5acc:	51 e4       	ldi	r21, 0x41	; 65
    5ace:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ad2:	dc 01       	movw	r26, r24
    5ad4:	cb 01       	movw	r24, r22
    5ad6:	bc 01       	movw	r22, r24
    5ad8:	cd 01       	movw	r24, r26
    5ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ade:	dc 01       	movw	r26, r24
    5ae0:	cb 01       	movw	r24, r22
    5ae2:	9e 83       	std	Y+6, r25	; 0x06
    5ae4:	8d 83       	std	Y+5, r24	; 0x05
    5ae6:	0f c0       	rjmp	.+30     	; 0x5b06 <LCD_enuInit+0x3f4>
    5ae8:	89 e1       	ldi	r24, 0x19	; 25
    5aea:	90 e0       	ldi	r25, 0x00	; 0
    5aec:	9c 83       	std	Y+4, r25	; 0x04
    5aee:	8b 83       	std	Y+3, r24	; 0x03
    5af0:	8b 81       	ldd	r24, Y+3	; 0x03
    5af2:	9c 81       	ldd	r25, Y+4	; 0x04
    5af4:	01 97       	sbiw	r24, 0x01	; 1
    5af6:	f1 f7       	brne	.-4      	; 0x5af4 <LCD_enuInit+0x3e2>
    5af8:	9c 83       	std	Y+4, r25	; 0x04
    5afa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5afc:	8d 81       	ldd	r24, Y+5	; 0x05
    5afe:	9e 81       	ldd	r25, Y+6	; 0x06
    5b00:	01 97       	sbiw	r24, 0x01	; 1
    5b02:	9e 83       	std	Y+6, r25	; 0x06
    5b04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b06:	8d 81       	ldd	r24, Y+5	; 0x05
    5b08:	9e 81       	ldd	r25, Y+6	; 0x06
    5b0a:	00 97       	sbiw	r24, 0x00	; 0
    5b0c:	69 f7       	brne	.-38     	; 0x5ae8 <LCD_enuInit+0x3d6>
    5b0e:	14 c0       	rjmp	.+40     	; 0x5b38 <LCD_enuInit+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b10:	6f 81       	ldd	r22, Y+7	; 0x07
    5b12:	78 85       	ldd	r23, Y+8	; 0x08
    5b14:	89 85       	ldd	r24, Y+9	; 0x09
    5b16:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b1c:	dc 01       	movw	r26, r24
    5b1e:	cb 01       	movw	r24, r22
    5b20:	9e 83       	std	Y+6, r25	; 0x06
    5b22:	8d 83       	std	Y+5, r24	; 0x05
    5b24:	8d 81       	ldd	r24, Y+5	; 0x05
    5b26:	9e 81       	ldd	r25, Y+6	; 0x06
    5b28:	9a 83       	std	Y+2, r25	; 0x02
    5b2a:	89 83       	std	Y+1, r24	; 0x01
    5b2c:	89 81       	ldd	r24, Y+1	; 0x01
    5b2e:	9a 81       	ldd	r25, Y+2	; 0x02
    5b30:	01 97       	sbiw	r24, 0x01	; 1
    5b32:	f1 f7       	brne	.-4      	; 0x5b30 <LCD_enuInit+0x41e>
    5b34:	9a 83       	std	Y+2, r25	; 0x02
    5b36:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		/* Entry Mode */
		LCD_invoidSendCommand(0x06);
    5b38:	86 e0       	ldi	r24, 0x06	; 6
    5b3a:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <LCD_invoidSendCommand>

	return Local_enuErrorState;
    5b3e:	89 ad       	ldd	r24, Y+57	; 0x39
}
    5b40:	e9 96       	adiw	r28, 0x39	; 57
    5b42:	0f b6       	in	r0, 0x3f	; 63
    5b44:	f8 94       	cli
    5b46:	de bf       	out	0x3e, r29	; 62
    5b48:	0f be       	out	0x3f, r0	; 63
    5b4a:	cd bf       	out	0x3d, r28	; 61
    5b4c:	cf 91       	pop	r28
    5b4e:	df 91       	pop	r29
    5b50:	08 95       	ret

00005b52 <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    5b52:	df 93       	push	r29
    5b54:	cf 93       	push	r28
    5b56:	00 d0       	rcall	.+0      	; 0x5b58 <LCD_enuSendCommand+0x6>
    5b58:	cd b7       	in	r28, 0x3d	; 61
    5b5a:	de b7       	in	r29, 0x3e	; 62
    5b5c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    5b5e:	19 82       	std	Y+1, r1	; 0x01

	/* Set RS as Command */
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    5b60:	80 e0       	ldi	r24, 0x00	; 0
    5b62:	60 e0       	ldi	r22, 0x00	; 0
    5b64:	40 e0       	ldi	r20, 0x00	; 0
    5b66:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>

	LCD_voidLatch(Copy_u8Command);
    5b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    5b6c:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <LCD_voidLatch>

	return Local_enuErrorState;
    5b70:	89 81       	ldd	r24, Y+1	; 0x01
}
    5b72:	0f 90       	pop	r0
    5b74:	0f 90       	pop	r0
    5b76:	cf 91       	pop	r28
    5b78:	df 91       	pop	r29
    5b7a:	08 95       	ret

00005b7c <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Char)
{
    5b7c:	df 93       	push	r29
    5b7e:	cf 93       	push	r28
    5b80:	00 d0       	rcall	.+0      	; 0x5b82 <LCD_enuDisplayChar+0x6>
    5b82:	cd b7       	in	r28, 0x3d	; 61
    5b84:	de b7       	in	r29, 0x3e	; 62
    5b86:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    5b88:	19 82       	std	Y+1, r1	; 0x01

	/* Set RS as DATA */
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    5b8a:	80 e0       	ldi	r24, 0x00	; 0
    5b8c:	60 e0       	ldi	r22, 0x00	; 0
    5b8e:	41 e0       	ldi	r20, 0x01	; 1
    5b90:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>

	LCD_voidLatch(Copy_u8Char);
    5b94:	8a 81       	ldd	r24, Y+2	; 0x02
    5b96:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <LCD_voidLatch>

	return Local_enuErrorState;
    5b9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    5b9c:	0f 90       	pop	r0
    5b9e:	0f 90       	pop	r0
    5ba0:	cf 91       	pop	r28
    5ba2:	df 91       	pop	r29
    5ba4:	08 95       	ret

00005ba6 <LCD_enuDisplayNumber>:

ES_t LCD_enuDisplayNumber(s32 Copy_s32Number)
{
    5ba6:	ef 92       	push	r14
    5ba8:	ff 92       	push	r15
    5baa:	0f 93       	push	r16
    5bac:	1f 93       	push	r17
    5bae:	df 93       	push	r29
    5bb0:	cf 93       	push	r28
    5bb2:	cd b7       	in	r28, 0x3d	; 61
    5bb4:	de b7       	in	r29, 0x3e	; 62
    5bb6:	2a 97       	sbiw	r28, 0x0a	; 10
    5bb8:	0f b6       	in	r0, 0x3f	; 63
    5bba:	f8 94       	cli
    5bbc:	de bf       	out	0x3e, r29	; 62
    5bbe:	0f be       	out	0x3f, r0	; 63
    5bc0:	cd bf       	out	0x3d, r28	; 61
    5bc2:	6f 83       	std	Y+7, r22	; 0x07
    5bc4:	78 87       	std	Y+8, r23	; 0x08
    5bc6:	89 87       	std	Y+9, r24	; 0x09
    5bc8:	9a 87       	std	Y+10, r25	; 0x0a
	ES_t Local_enuErrorState = ES_NOK;
    5bca:	1e 82       	std	Y+6, r1	; 0x06

	u8 Local_u8Digit = 0;
    5bcc:	1d 82       	std	Y+5, r1	; 0x05
	f64 Local_f64NumberOfDigits = 1;
    5bce:	80 e0       	ldi	r24, 0x00	; 0
    5bd0:	90 e0       	ldi	r25, 0x00	; 0
    5bd2:	a0 e8       	ldi	r26, 0x80	; 128
    5bd4:	bf e3       	ldi	r27, 0x3F	; 63
    5bd6:	89 83       	std	Y+1, r24	; 0x01
    5bd8:	9a 83       	std	Y+2, r25	; 0x02
    5bda:	ab 83       	std	Y+3, r26	; 0x03
    5bdc:	bc 83       	std	Y+4, r27	; 0x04

	/* Set RS as DATA */
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    5bde:	80 e0       	ldi	r24, 0x00	; 0
    5be0:	60 e0       	ldi	r22, 0x00	; 0
    5be2:	41 e0       	ldi	r20, 0x01	; 1
    5be4:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>

	if(Copy_s32Number < 0)
    5be8:	8f 81       	ldd	r24, Y+7	; 0x07
    5bea:	98 85       	ldd	r25, Y+8	; 0x08
    5bec:	a9 85       	ldd	r26, Y+9	; 0x09
    5bee:	ba 85       	ldd	r27, Y+10	; 0x0a
    5bf0:	bb 23       	and	r27, r27
    5bf2:	94 f4       	brge	.+36     	; 0x5c18 <LCD_enuDisplayNumber+0x72>
	{
		Copy_s32Number *= -1;
    5bf4:	8f 81       	ldd	r24, Y+7	; 0x07
    5bf6:	98 85       	ldd	r25, Y+8	; 0x08
    5bf8:	a9 85       	ldd	r26, Y+9	; 0x09
    5bfa:	ba 85       	ldd	r27, Y+10	; 0x0a
    5bfc:	b0 95       	com	r27
    5bfe:	a0 95       	com	r26
    5c00:	90 95       	com	r25
    5c02:	81 95       	neg	r24
    5c04:	9f 4f       	sbci	r25, 0xFF	; 255
    5c06:	af 4f       	sbci	r26, 0xFF	; 255
    5c08:	bf 4f       	sbci	r27, 0xFF	; 255
    5c0a:	8f 83       	std	Y+7, r24	; 0x07
    5c0c:	98 87       	std	Y+8, r25	; 0x08
    5c0e:	a9 87       	std	Y+9, r26	; 0x09
    5c10:	ba 87       	std	Y+10, r27	; 0x0a
		LCD_voidLatch('-');
    5c12:	8d e2       	ldi	r24, 0x2D	; 45
    5c14:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <LCD_voidLatch>
	}

	if(Copy_s32Number < 10)
    5c18:	8f 81       	ldd	r24, Y+7	; 0x07
    5c1a:	98 85       	ldd	r25, Y+8	; 0x08
    5c1c:	a9 85       	ldd	r26, Y+9	; 0x09
    5c1e:	ba 85       	ldd	r27, Y+10	; 0x0a
    5c20:	8a 30       	cpi	r24, 0x0A	; 10
    5c22:	91 05       	cpc	r25, r1
    5c24:	a1 05       	cpc	r26, r1
    5c26:	b1 05       	cpc	r27, r1
    5c28:	0c f5       	brge	.+66     	; 0x5c6c <LCD_enuDisplayNumber+0xc6>
	{
		Copy_s32Number += 48;
    5c2a:	8f 81       	ldd	r24, Y+7	; 0x07
    5c2c:	98 85       	ldd	r25, Y+8	; 0x08
    5c2e:	a9 85       	ldd	r26, Y+9	; 0x09
    5c30:	ba 85       	ldd	r27, Y+10	; 0x0a
    5c32:	c0 96       	adiw	r24, 0x30	; 48
    5c34:	a1 1d       	adc	r26, r1
    5c36:	b1 1d       	adc	r27, r1
    5c38:	8f 83       	std	Y+7, r24	; 0x07
    5c3a:	98 87       	std	Y+8, r25	; 0x08
    5c3c:	a9 87       	std	Y+9, r26	; 0x09
    5c3e:	ba 87       	std	Y+10, r27	; 0x0a
		LCD_voidLatch(Copy_s32Number);
    5c40:	8f 81       	ldd	r24, Y+7	; 0x07
    5c42:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <LCD_voidLatch>
		Local_enuErrorState = ES_OK;
    5c46:	81 e0       	ldi	r24, 0x01	; 1
    5c48:	8e 83       	std	Y+6, r24	; 0x06
    5c4a:	9e c0       	rjmp	.+316    	; 0x5d88 <LCD_enuDisplayNumber+0x1e2>
	else
	{
		/* Count digits of number log10 */
		while(Local_f64NumberOfDigits <= Copy_s32Number)
		{
			Local_f64NumberOfDigits *= 10;
    5c4c:	69 81       	ldd	r22, Y+1	; 0x01
    5c4e:	7a 81       	ldd	r23, Y+2	; 0x02
    5c50:	8b 81       	ldd	r24, Y+3	; 0x03
    5c52:	9c 81       	ldd	r25, Y+4	; 0x04
    5c54:	20 e0       	ldi	r18, 0x00	; 0
    5c56:	30 e0       	ldi	r19, 0x00	; 0
    5c58:	40 e2       	ldi	r20, 0x20	; 32
    5c5a:	51 e4       	ldi	r21, 0x41	; 65
    5c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c60:	dc 01       	movw	r26, r24
    5c62:	cb 01       	movw	r24, r22
    5c64:	89 83       	std	Y+1, r24	; 0x01
    5c66:	9a 83       	std	Y+2, r25	; 0x02
    5c68:	ab 83       	std	Y+3, r26	; 0x03
    5c6a:	bc 83       	std	Y+4, r27	; 0x04
		Local_enuErrorState = ES_OK;
	}
	else
	{
		/* Count digits of number log10 */
		while(Local_f64NumberOfDigits <= Copy_s32Number)
    5c6c:	6f 81       	ldd	r22, Y+7	; 0x07
    5c6e:	78 85       	ldd	r23, Y+8	; 0x08
    5c70:	89 85       	ldd	r24, Y+9	; 0x09
    5c72:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c74:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5c78:	dc 01       	movw	r26, r24
    5c7a:	cb 01       	movw	r24, r22
    5c7c:	bc 01       	movw	r22, r24
    5c7e:	cd 01       	movw	r24, r26
    5c80:	29 81       	ldd	r18, Y+1	; 0x01
    5c82:	3a 81       	ldd	r19, Y+2	; 0x02
    5c84:	4b 81       	ldd	r20, Y+3	; 0x03
    5c86:	5c 81       	ldd	r21, Y+4	; 0x04
    5c88:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    5c8c:	88 23       	and	r24, r24
    5c8e:	f4 f6       	brge	.-68     	; 0x5c4c <LCD_enuDisplayNumber+0xa6>
		{
			Local_f64NumberOfDigits *= 10;
		}
		Local_f64NumberOfDigits /= 10;
    5c90:	69 81       	ldd	r22, Y+1	; 0x01
    5c92:	7a 81       	ldd	r23, Y+2	; 0x02
    5c94:	8b 81       	ldd	r24, Y+3	; 0x03
    5c96:	9c 81       	ldd	r25, Y+4	; 0x04
    5c98:	20 e0       	ldi	r18, 0x00	; 0
    5c9a:	30 e0       	ldi	r19, 0x00	; 0
    5c9c:	40 e2       	ldi	r20, 0x20	; 32
    5c9e:	51 e4       	ldi	r21, 0x41	; 65
    5ca0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5ca4:	dc 01       	movw	r26, r24
    5ca6:	cb 01       	movw	r24, r22
    5ca8:	89 83       	std	Y+1, r24	; 0x01
    5caa:	9a 83       	std	Y+2, r25	; 0x02
    5cac:	ab 83       	std	Y+3, r26	; 0x03
    5cae:	bc 83       	std	Y+4, r27	; 0x04
    5cb0:	5c c0       	rjmp	.+184    	; 0x5d6a <LCD_enuDisplayNumber+0x1c4>

		while(Local_f64NumberOfDigits >= 1)
		{
			Local_u8Digit = (u8)(Copy_s32Number / Local_f64NumberOfDigits);
    5cb2:	6f 81       	ldd	r22, Y+7	; 0x07
    5cb4:	78 85       	ldd	r23, Y+8	; 0x08
    5cb6:	89 85       	ldd	r24, Y+9	; 0x09
    5cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cba:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5cbe:	dc 01       	movw	r26, r24
    5cc0:	cb 01       	movw	r24, r22
    5cc2:	bc 01       	movw	r22, r24
    5cc4:	cd 01       	movw	r24, r26
    5cc6:	29 81       	ldd	r18, Y+1	; 0x01
    5cc8:	3a 81       	ldd	r19, Y+2	; 0x02
    5cca:	4b 81       	ldd	r20, Y+3	; 0x03
    5ccc:	5c 81       	ldd	r21, Y+4	; 0x04
    5cce:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5cd2:	dc 01       	movw	r26, r24
    5cd4:	cb 01       	movw	r24, r22
    5cd6:	bc 01       	movw	r22, r24
    5cd8:	cd 01       	movw	r24, r26
    5cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cde:	dc 01       	movw	r26, r24
    5ce0:	cb 01       	movw	r24, r22
    5ce2:	8d 83       	std	Y+5, r24	; 0x05
			Copy_s32Number -= ((u32)(Local_u8Digit * Local_f64NumberOfDigits));
    5ce4:	ef 80       	ldd	r14, Y+7	; 0x07
    5ce6:	f8 84       	ldd	r15, Y+8	; 0x08
    5ce8:	09 85       	ldd	r16, Y+9	; 0x09
    5cea:	1a 85       	ldd	r17, Y+10	; 0x0a
    5cec:	8d 81       	ldd	r24, Y+5	; 0x05
    5cee:	88 2f       	mov	r24, r24
    5cf0:	90 e0       	ldi	r25, 0x00	; 0
    5cf2:	aa 27       	eor	r26, r26
    5cf4:	97 fd       	sbrc	r25, 7
    5cf6:	a0 95       	com	r26
    5cf8:	ba 2f       	mov	r27, r26
    5cfa:	bc 01       	movw	r22, r24
    5cfc:	cd 01       	movw	r24, r26
    5cfe:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5d02:	dc 01       	movw	r26, r24
    5d04:	cb 01       	movw	r24, r22
    5d06:	bc 01       	movw	r22, r24
    5d08:	cd 01       	movw	r24, r26
    5d0a:	29 81       	ldd	r18, Y+1	; 0x01
    5d0c:	3a 81       	ldd	r19, Y+2	; 0x02
    5d0e:	4b 81       	ldd	r20, Y+3	; 0x03
    5d10:	5c 81       	ldd	r21, Y+4	; 0x04
    5d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d16:	dc 01       	movw	r26, r24
    5d18:	cb 01       	movw	r24, r22
    5d1a:	bc 01       	movw	r22, r24
    5d1c:	cd 01       	movw	r24, r26
    5d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d22:	dc 01       	movw	r26, r24
    5d24:	cb 01       	movw	r24, r22
    5d26:	a8 01       	movw	r20, r16
    5d28:	97 01       	movw	r18, r14
    5d2a:	28 1b       	sub	r18, r24
    5d2c:	39 0b       	sbc	r19, r25
    5d2e:	4a 0b       	sbc	r20, r26
    5d30:	5b 0b       	sbc	r21, r27
    5d32:	da 01       	movw	r26, r20
    5d34:	c9 01       	movw	r24, r18
    5d36:	8f 83       	std	Y+7, r24	; 0x07
    5d38:	98 87       	std	Y+8, r25	; 0x08
    5d3a:	a9 87       	std	Y+9, r26	; 0x09
    5d3c:	ba 87       	std	Y+10, r27	; 0x0a
			Local_u8Digit += 48;
    5d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    5d40:	80 5d       	subi	r24, 0xD0	; 208
    5d42:	8d 83       	std	Y+5, r24	; 0x05
			Local_f64NumberOfDigits /= 10;
    5d44:	69 81       	ldd	r22, Y+1	; 0x01
    5d46:	7a 81       	ldd	r23, Y+2	; 0x02
    5d48:	8b 81       	ldd	r24, Y+3	; 0x03
    5d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    5d4c:	20 e0       	ldi	r18, 0x00	; 0
    5d4e:	30 e0       	ldi	r19, 0x00	; 0
    5d50:	40 e2       	ldi	r20, 0x20	; 32
    5d52:	51 e4       	ldi	r21, 0x41	; 65
    5d54:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5d58:	dc 01       	movw	r26, r24
    5d5a:	cb 01       	movw	r24, r22
    5d5c:	89 83       	std	Y+1, r24	; 0x01
    5d5e:	9a 83       	std	Y+2, r25	; 0x02
    5d60:	ab 83       	std	Y+3, r26	; 0x03
    5d62:	bc 83       	std	Y+4, r27	; 0x04

			LCD_voidLatch(Local_u8Digit);
    5d64:	8d 81       	ldd	r24, Y+5	; 0x05
    5d66:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <LCD_voidLatch>
		{
			Local_f64NumberOfDigits *= 10;
		}
		Local_f64NumberOfDigits /= 10;

		while(Local_f64NumberOfDigits >= 1)
    5d6a:	69 81       	ldd	r22, Y+1	; 0x01
    5d6c:	7a 81       	ldd	r23, Y+2	; 0x02
    5d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    5d70:	9c 81       	ldd	r25, Y+4	; 0x04
    5d72:	20 e0       	ldi	r18, 0x00	; 0
    5d74:	30 e0       	ldi	r19, 0x00	; 0
    5d76:	40 e8       	ldi	r20, 0x80	; 128
    5d78:	5f e3       	ldi	r21, 0x3F	; 63
    5d7a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    5d7e:	88 23       	and	r24, r24
    5d80:	0c f0       	brlt	.+2      	; 0x5d84 <LCD_enuDisplayNumber+0x1de>
    5d82:	97 cf       	rjmp	.-210    	; 0x5cb2 <LCD_enuDisplayNumber+0x10c>
			Local_u8Digit += 48;
			Local_f64NumberOfDigits /= 10;

			LCD_voidLatch(Local_u8Digit);
		}
		Local_enuErrorState = ES_OK;
    5d84:	81 e0       	ldi	r24, 0x01	; 1
    5d86:	8e 83       	std	Y+6, r24	; 0x06
	}


	return Local_enuErrorState;
    5d88:	8e 81       	ldd	r24, Y+6	; 0x06
}
    5d8a:	2a 96       	adiw	r28, 0x0a	; 10
    5d8c:	0f b6       	in	r0, 0x3f	; 63
    5d8e:	f8 94       	cli
    5d90:	de bf       	out	0x3e, r29	; 62
    5d92:	0f be       	out	0x3f, r0	; 63
    5d94:	cd bf       	out	0x3d, r28	; 61
    5d96:	cf 91       	pop	r28
    5d98:	df 91       	pop	r29
    5d9a:	1f 91       	pop	r17
    5d9c:	0f 91       	pop	r16
    5d9e:	ff 90       	pop	r15
    5da0:	ef 90       	pop	r14
    5da2:	08 95       	ret

00005da4 <LCD_enuDisplaySpecialChar>:

ES_t LCD_enuDisplaySpecialChar(u8 Copy_u8RowPosition , u8 Copy_u8ColPosition, u8 *Copy_pu8ExtraChar)
{
    5da4:	df 93       	push	r29
    5da6:	cf 93       	push	r28
    5da8:	00 d0       	rcall	.+0      	; 0x5daa <LCD_enuDisplaySpecialChar+0x6>
    5daa:	00 d0       	rcall	.+0      	; 0x5dac <LCD_enuDisplaySpecialChar+0x8>
    5dac:	00 d0       	rcall	.+0      	; 0x5dae <LCD_enuDisplaySpecialChar+0xa>
    5dae:	cd b7       	in	r28, 0x3d	; 61
    5db0:	de b7       	in	r29, 0x3e	; 62
    5db2:	8b 83       	std	Y+3, r24	; 0x03
    5db4:	6c 83       	std	Y+4, r22	; 0x04
    5db6:	5e 83       	std	Y+6, r21	; 0x06
    5db8:	4d 83       	std	Y+5, r20	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    5dba:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8Iterator = 0;
    5dbc:	19 82       	std	Y+1, r1	; 0x01

		LCD_invoidSendCommand(0x40);
    5dbe:	80 e4       	ldi	r24, 0x40	; 64
    5dc0:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <LCD_invoidSendCommand>

		/* Set RS as DATA */
		DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    5dc4:	80 e0       	ldi	r24, 0x00	; 0
    5dc6:	60 e0       	ldi	r22, 0x00	; 0
    5dc8:	41 e0       	ldi	r20, 0x01	; 1
    5dca:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>

		for(Local_u8Iterator = 0; Local_u8Iterator < 8; Local_u8Iterator++)
    5dce:	19 82       	std	Y+1, r1	; 0x01
    5dd0:	0e c0       	rjmp	.+28     	; 0x5dee <LCD_enuDisplaySpecialChar+0x4a>
		{
			LCD_voidLatch(Copy_pu8ExtraChar[Local_u8Iterator]);
    5dd2:	89 81       	ldd	r24, Y+1	; 0x01
    5dd4:	28 2f       	mov	r18, r24
    5dd6:	30 e0       	ldi	r19, 0x00	; 0
    5dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    5dda:	9e 81       	ldd	r25, Y+6	; 0x06
    5ddc:	fc 01       	movw	r30, r24
    5dde:	e2 0f       	add	r30, r18
    5de0:	f3 1f       	adc	r31, r19
    5de2:	80 81       	ld	r24, Z
    5de4:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <LCD_voidLatch>
		LCD_invoidSendCommand(0x40);

		/* Set RS as DATA */
		DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);

		for(Local_u8Iterator = 0; Local_u8Iterator < 8; Local_u8Iterator++)
    5de8:	89 81       	ldd	r24, Y+1	; 0x01
    5dea:	8f 5f       	subi	r24, 0xFF	; 255
    5dec:	89 83       	std	Y+1, r24	; 0x01
    5dee:	89 81       	ldd	r24, Y+1	; 0x01
    5df0:	88 30       	cpi	r24, 0x08	; 8
    5df2:	78 f3       	brcs	.-34     	; 0x5dd2 <LCD_enuDisplaySpecialChar+0x2e>
		{
			LCD_voidLatch(Copy_pu8ExtraChar[Local_u8Iterator]);
		}

		LCD_enuLocalGoToXY(Copy_u8RowPosition, Copy_u8ColPosition);
    5df4:	8b 81       	ldd	r24, Y+3	; 0x03
    5df6:	6c 81       	ldd	r22, Y+4	; 0x04
    5df8:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <LCD_enuLocalGoToXY>

		DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    5dfc:	80 e0       	ldi	r24, 0x00	; 0
    5dfe:	60 e0       	ldi	r22, 0x00	; 0
    5e00:	41 e0       	ldi	r20, 0x01	; 1
    5e02:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
		LCD_voidLatch(0);
    5e06:	80 e0       	ldi	r24, 0x00	; 0
    5e08:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <LCD_voidLatch>

	return Local_enuErrorState;
    5e0c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5e0e:	26 96       	adiw	r28, 0x06	; 6
    5e10:	0f b6       	in	r0, 0x3f	; 63
    5e12:	f8 94       	cli
    5e14:	de bf       	out	0x3e, r29	; 62
    5e16:	0f be       	out	0x3f, r0	; 63
    5e18:	cd bf       	out	0x3d, r28	; 61
    5e1a:	cf 91       	pop	r28
    5e1c:	df 91       	pop	r29
    5e1e:	08 95       	ret

00005e20 <LCD_enuSendString>:



ES_t LCD_enuSendString(u8 *Copy_pu8string)
{
    5e20:	df 93       	push	r29
    5e22:	cf 93       	push	r28
    5e24:	00 d0       	rcall	.+0      	; 0x5e26 <LCD_enuSendString+0x6>
    5e26:	00 d0       	rcall	.+0      	; 0x5e28 <LCD_enuSendString+0x8>
    5e28:	cd b7       	in	r28, 0x3d	; 61
    5e2a:	de b7       	in	r29, 0x3e	; 62
    5e2c:	9c 83       	std	Y+4, r25	; 0x04
    5e2e:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    5e30:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8Counter = 0;
    5e32:	19 82       	std	Y+1, r1	; 0x01
	/* Set RS as DATA */
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    5e34:	80 e0       	ldi	r24, 0x00	; 0
    5e36:	60 e0       	ldi	r22, 0x00	; 0
    5e38:	41 e0       	ldi	r20, 0x01	; 1
    5e3a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>

	if(Copy_pu8string != NULL)
    5e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    5e40:	9c 81       	ldd	r25, Y+4	; 0x04
    5e42:	00 97       	sbiw	r24, 0x00	; 0
    5e44:	09 f1       	breq	.+66     	; 0x5e88 <LCD_enuSendString+0x68>
    5e46:	18 c0       	rjmp	.+48     	; 0x5e78 <LCD_enuSendString+0x58>
	{
		while(*Copy_pu8string)
		{
			LCD_voidLatch(*Copy_pu8string);
    5e48:	eb 81       	ldd	r30, Y+3	; 0x03
    5e4a:	fc 81       	ldd	r31, Y+4	; 0x04
    5e4c:	80 81       	ld	r24, Z
    5e4e:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <LCD_voidLatch>
			Copy_pu8string++;
    5e52:	8b 81       	ldd	r24, Y+3	; 0x03
    5e54:	9c 81       	ldd	r25, Y+4	; 0x04
    5e56:	01 96       	adiw	r24, 0x01	; 1
    5e58:	9c 83       	std	Y+4, r25	; 0x04
    5e5a:	8b 83       	std	Y+3, r24	; 0x03
			Local_u8Counter++;
    5e5c:	89 81       	ldd	r24, Y+1	; 0x01
    5e5e:	8f 5f       	subi	r24, 0xFF	; 255
    5e60:	89 83       	std	Y+1, r24	; 0x01

			/* Go to Second Line */
			if(Local_u8Counter == 16)
    5e62:	89 81       	ldd	r24, Y+1	; 0x01
    5e64:	80 31       	cpi	r24, 0x10	; 16
    5e66:	41 f4       	brne	.+16     	; 0x5e78 <LCD_enuSendString+0x58>
			{
				LCD_invoidSendCommand(0xC0);
    5e68:	80 ec       	ldi	r24, 0xC0	; 192
    5e6a:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <LCD_invoidSendCommand>
				DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    5e6e:	80 e0       	ldi	r24, 0x00	; 0
    5e70:	60 e0       	ldi	r22, 0x00	; 0
    5e72:	41 e0       	ldi	r20, 0x01	; 1
    5e74:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
	/* Set RS as DATA */
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);

	if(Copy_pu8string != NULL)
	{
		while(*Copy_pu8string)
    5e78:	eb 81       	ldd	r30, Y+3	; 0x03
    5e7a:	fc 81       	ldd	r31, Y+4	; 0x04
    5e7c:	80 81       	ld	r24, Z
    5e7e:	88 23       	and	r24, r24
    5e80:	19 f7       	brne	.-58     	; 0x5e48 <LCD_enuSendString+0x28>
			{
				LCD_invoidSendCommand(0xC0);
				DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
			}
		}
		Local_enuErrorState = ES_OK;
    5e82:	81 e0       	ldi	r24, 0x01	; 1
    5e84:	8a 83       	std	Y+2, r24	; 0x02
    5e86:	02 c0       	rjmp	.+4      	; 0x5e8c <LCD_enuSendString+0x6c>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    5e88:	82 e0       	ldi	r24, 0x02	; 2
    5e8a:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    5e8c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5e8e:	0f 90       	pop	r0
    5e90:	0f 90       	pop	r0
    5e92:	0f 90       	pop	r0
    5e94:	0f 90       	pop	r0
    5e96:	cf 91       	pop	r28
    5e98:	df 91       	pop	r29
    5e9a:	08 95       	ret

00005e9c <LCD_enuSetPosition>:

ES_t LCD_enuSetPosition(u8 Copy_u8Row, u8 Copy_u8Column)
{
    5e9c:	df 93       	push	r29
    5e9e:	cf 93       	push	r28
    5ea0:	00 d0       	rcall	.+0      	; 0x5ea2 <LCD_enuSetPosition+0x6>
    5ea2:	0f 92       	push	r0
    5ea4:	cd b7       	in	r28, 0x3d	; 61
    5ea6:	de b7       	in	r29, 0x3e	; 62
    5ea8:	8a 83       	std	Y+2, r24	; 0x02
    5eaa:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    5eac:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorState = LCD_enuLocalGoToXY(Copy_u8Row, Copy_u8Column);
    5eae:	8a 81       	ldd	r24, Y+2	; 0x02
    5eb0:	6b 81       	ldd	r22, Y+3	; 0x03
    5eb2:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <LCD_enuLocalGoToXY>
    5eb6:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    5eb8:	89 81       	ldd	r24, Y+1	; 0x01
}
    5eba:	0f 90       	pop	r0
    5ebc:	0f 90       	pop	r0
    5ebe:	0f 90       	pop	r0
    5ec0:	cf 91       	pop	r28
    5ec2:	df 91       	pop	r29
    5ec4:	08 95       	ret

00005ec6 <LCD_enuLocalGoToXY>:

static ES_t LCD_enuLocalGoToXY(u8 Copy_u8Row, u8 Copy_u8Column)
{
    5ec6:	df 93       	push	r29
    5ec8:	cf 93       	push	r28
    5eca:	00 d0       	rcall	.+0      	; 0x5ecc <LCD_enuLocalGoToXY+0x6>
    5ecc:	00 d0       	rcall	.+0      	; 0x5ece <LCD_enuLocalGoToXY+0x8>
    5ece:	0f 92       	push	r0
    5ed0:	cd b7       	in	r28, 0x3d	; 61
    5ed2:	de b7       	in	r29, 0x3e	; 62
    5ed4:	8c 83       	std	Y+4, r24	; 0x04
    5ed6:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    5ed8:	19 82       	std	Y+1, r1	; 0x01

	u8 Local_u8RowLocation [] = {0x80 , 0xC0};
    5eda:	80 e8       	ldi	r24, 0x80	; 128
    5edc:	8a 83       	std	Y+2, r24	; 0x02
    5ede:	80 ec       	ldi	r24, 0xC0	; 192
    5ee0:	8b 83       	std	Y+3, r24	; 0x03
	LCD_enuSendCommand(Local_u8RowLocation [Copy_u8Row-1]+(Copy_u8Column-1));
    5ee2:	8c 81       	ldd	r24, Y+4	; 0x04
    5ee4:	88 2f       	mov	r24, r24
    5ee6:	90 e0       	ldi	r25, 0x00	; 0
    5ee8:	9c 01       	movw	r18, r24
    5eea:	21 50       	subi	r18, 0x01	; 1
    5eec:	30 40       	sbci	r19, 0x00	; 0
    5eee:	ce 01       	movw	r24, r28
    5ef0:	02 96       	adiw	r24, 0x02	; 2
    5ef2:	fc 01       	movw	r30, r24
    5ef4:	e2 0f       	add	r30, r18
    5ef6:	f3 1f       	adc	r31, r19
    5ef8:	90 81       	ld	r25, Z
    5efa:	8d 81       	ldd	r24, Y+5	; 0x05
    5efc:	89 0f       	add	r24, r25
    5efe:	81 50       	subi	r24, 0x01	; 1
    5f00:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <LCD_enuSendCommand>

	return Local_enuErrorState;
    5f04:	89 81       	ldd	r24, Y+1	; 0x01
}
    5f06:	0f 90       	pop	r0
    5f08:	0f 90       	pop	r0
    5f0a:	0f 90       	pop	r0
    5f0c:	0f 90       	pop	r0
    5f0e:	0f 90       	pop	r0
    5f10:	cf 91       	pop	r28
    5f12:	df 91       	pop	r29
    5f14:	08 95       	ret

00005f16 <LCD_voidLatch>:
static void LCD_voidLatch(u8 Copy_u8Data)
{
    5f16:	df 93       	push	r29
    5f18:	cf 93       	push	r28
    5f1a:	cd b7       	in	r28, 0x3d	; 61
    5f1c:	de b7       	in	r29, 0x3e	; 62
    5f1e:	6d 97       	sbiw	r28, 0x1d	; 29
    5f20:	0f b6       	in	r0, 0x3f	; 63
    5f22:	f8 94       	cli
    5f24:	de bf       	out	0x3e, r29	; 62
    5f26:	0f be       	out	0x3f, r0	; 63
    5f28:	cd bf       	out	0x3d, r28	; 61
    5f2a:	8d 8f       	std	Y+29, r24	; 0x1d

	// Set RW as write operation, EN is Low
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    5f2c:	80 e0       	ldi	r24, 0x00	; 0
    5f2e:	61 e0       	ldi	r22, 0x01	; 1
    5f30:	40 e0       	ldi	r20, 0x00	; 0
    5f32:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
	//DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
	// Write Command or Data
	DIO_enuSetPinValue(D7_PORT, D7_PIN, ((Copy_u8Data >> 7) & 1));
    5f36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5f38:	98 2f       	mov	r25, r24
    5f3a:	99 1f       	adc	r25, r25
    5f3c:	99 27       	eor	r25, r25
    5f3e:	99 1f       	adc	r25, r25
    5f40:	81 e0       	ldi	r24, 0x01	; 1
    5f42:	67 e0       	ldi	r22, 0x07	; 7
    5f44:	49 2f       	mov	r20, r25
    5f46:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT, D6_PIN, ((Copy_u8Data >> 6) & 1));
    5f4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5f4c:	82 95       	swap	r24
    5f4e:	86 95       	lsr	r24
    5f50:	86 95       	lsr	r24
    5f52:	83 70       	andi	r24, 0x03	; 3
    5f54:	98 2f       	mov	r25, r24
    5f56:	91 70       	andi	r25, 0x01	; 1
    5f58:	81 e0       	ldi	r24, 0x01	; 1
    5f5a:	66 e0       	ldi	r22, 0x06	; 6
    5f5c:	49 2f       	mov	r20, r25
    5f5e:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT, D5_PIN, ((Copy_u8Data >> 5) & 1));
    5f62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5f64:	82 95       	swap	r24
    5f66:	86 95       	lsr	r24
    5f68:	87 70       	andi	r24, 0x07	; 7
    5f6a:	98 2f       	mov	r25, r24
    5f6c:	91 70       	andi	r25, 0x01	; 1
    5f6e:	81 e0       	ldi	r24, 0x01	; 1
    5f70:	65 e0       	ldi	r22, 0x05	; 5
    5f72:	49 2f       	mov	r20, r25
    5f74:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT, D4_PIN, ((Copy_u8Data >> 4) & 1));
    5f78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5f7a:	82 95       	swap	r24
    5f7c:	8f 70       	andi	r24, 0x0F	; 15
    5f7e:	98 2f       	mov	r25, r24
    5f80:	91 70       	andi	r25, 0x01	; 1
    5f82:	81 e0       	ldi	r24, 0x01	; 1
    5f84:	64 e0       	ldi	r22, 0x04	; 4
    5f86:	49 2f       	mov	r20, r25
    5f88:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
	#if LCD_MODE == EIGHT_BIT
		DIO_enuSetPinValue(D3_PORT, D3_PIN, ((Copy_u8Data >> 3) & 1));
    5f8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5f8e:	86 95       	lsr	r24
    5f90:	86 95       	lsr	r24
    5f92:	86 95       	lsr	r24
    5f94:	98 2f       	mov	r25, r24
    5f96:	91 70       	andi	r25, 0x01	; 1
    5f98:	82 e0       	ldi	r24, 0x02	; 2
    5f9a:	63 e0       	ldi	r22, 0x03	; 3
    5f9c:	49 2f       	mov	r20, r25
    5f9e:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D2_PORT, D2_PIN, ((Copy_u8Data >> 2) & 1));
    5fa2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5fa4:	86 95       	lsr	r24
    5fa6:	86 95       	lsr	r24
    5fa8:	98 2f       	mov	r25, r24
    5faa:	91 70       	andi	r25, 0x01	; 1
    5fac:	82 e0       	ldi	r24, 0x02	; 2
    5fae:	62 e0       	ldi	r22, 0x02	; 2
    5fb0:	49 2f       	mov	r20, r25
    5fb2:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D1_PORT, D1_PIN, ((Copy_u8Data >> 1) & 1));
    5fb6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5fb8:	86 95       	lsr	r24
    5fba:	98 2f       	mov	r25, r24
    5fbc:	91 70       	andi	r25, 0x01	; 1
    5fbe:	82 e0       	ldi	r24, 0x02	; 2
    5fc0:	61 e0       	ldi	r22, 0x01	; 1
    5fc2:	49 2f       	mov	r20, r25
    5fc4:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D0_PORT, D0_PIN, ((Copy_u8Data >> 0) & 1));
    5fc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5fca:	98 2f       	mov	r25, r24
    5fcc:	91 70       	andi	r25, 0x01	; 1
    5fce:	82 e0       	ldi	r24, 0x02	; 2
    5fd0:	60 e0       	ldi	r22, 0x00	; 0
    5fd2:	49 2f       	mov	r20, r25
    5fd4:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT, D6_PIN, ((Copy_u8Data >> 2) & 1));
		DIO_enuSetPinValue(D5_PORT, D5_PIN, ((Copy_u8Data >> 1) & 1));
		DIO_enuSetPinValue(D4_PORT, D4_PIN, ((Copy_u8Data >> 0) & 1));
	#endif
	//Enable Latch "EN is High" because latch happen in rising edge
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8HIGH);
    5fd8:	80 e0       	ldi	r24, 0x00	; 0
    5fda:	62 e0       	ldi	r22, 0x02	; 2
    5fdc:	41 e0       	ldi	r20, 0x01	; 1
    5fde:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    5fe2:	80 e0       	ldi	r24, 0x00	; 0
    5fe4:	90 e0       	ldi	r25, 0x00	; 0
    5fe6:	a0 e2       	ldi	r26, 0x20	; 32
    5fe8:	b1 e4       	ldi	r27, 0x41	; 65
    5fea:	89 8f       	std	Y+25, r24	; 0x19
    5fec:	9a 8f       	std	Y+26, r25	; 0x1a
    5fee:	ab 8f       	std	Y+27, r26	; 0x1b
    5ff0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ff2:	69 8d       	ldd	r22, Y+25	; 0x19
    5ff4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5ff6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5ff8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5ffa:	20 e0       	ldi	r18, 0x00	; 0
    5ffc:	30 e0       	ldi	r19, 0x00	; 0
    5ffe:	4a e7       	ldi	r20, 0x7A	; 122
    6000:	53 e4       	ldi	r21, 0x43	; 67
    6002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6006:	dc 01       	movw	r26, r24
    6008:	cb 01       	movw	r24, r22
    600a:	8d 8b       	std	Y+21, r24	; 0x15
    600c:	9e 8b       	std	Y+22, r25	; 0x16
    600e:	af 8b       	std	Y+23, r26	; 0x17
    6010:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6012:	6d 89       	ldd	r22, Y+21	; 0x15
    6014:	7e 89       	ldd	r23, Y+22	; 0x16
    6016:	8f 89       	ldd	r24, Y+23	; 0x17
    6018:	98 8d       	ldd	r25, Y+24	; 0x18
    601a:	20 e0       	ldi	r18, 0x00	; 0
    601c:	30 e0       	ldi	r19, 0x00	; 0
    601e:	40 e8       	ldi	r20, 0x80	; 128
    6020:	5f e3       	ldi	r21, 0x3F	; 63
    6022:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6026:	88 23       	and	r24, r24
    6028:	2c f4       	brge	.+10     	; 0x6034 <LCD_voidLatch+0x11e>
		__ticks = 1;
    602a:	81 e0       	ldi	r24, 0x01	; 1
    602c:	90 e0       	ldi	r25, 0x00	; 0
    602e:	9c 8b       	std	Y+20, r25	; 0x14
    6030:	8b 8b       	std	Y+19, r24	; 0x13
    6032:	3f c0       	rjmp	.+126    	; 0x60b2 <LCD_voidLatch+0x19c>
	else if (__tmp > 65535)
    6034:	6d 89       	ldd	r22, Y+21	; 0x15
    6036:	7e 89       	ldd	r23, Y+22	; 0x16
    6038:	8f 89       	ldd	r24, Y+23	; 0x17
    603a:	98 8d       	ldd	r25, Y+24	; 0x18
    603c:	20 e0       	ldi	r18, 0x00	; 0
    603e:	3f ef       	ldi	r19, 0xFF	; 255
    6040:	4f e7       	ldi	r20, 0x7F	; 127
    6042:	57 e4       	ldi	r21, 0x47	; 71
    6044:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6048:	18 16       	cp	r1, r24
    604a:	4c f5       	brge	.+82     	; 0x609e <LCD_voidLatch+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    604c:	69 8d       	ldd	r22, Y+25	; 0x19
    604e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6050:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6052:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6054:	20 e0       	ldi	r18, 0x00	; 0
    6056:	30 e0       	ldi	r19, 0x00	; 0
    6058:	40 e2       	ldi	r20, 0x20	; 32
    605a:	51 e4       	ldi	r21, 0x41	; 65
    605c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6060:	dc 01       	movw	r26, r24
    6062:	cb 01       	movw	r24, r22
    6064:	bc 01       	movw	r22, r24
    6066:	cd 01       	movw	r24, r26
    6068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    606c:	dc 01       	movw	r26, r24
    606e:	cb 01       	movw	r24, r22
    6070:	9c 8b       	std	Y+20, r25	; 0x14
    6072:	8b 8b       	std	Y+19, r24	; 0x13
    6074:	0f c0       	rjmp	.+30     	; 0x6094 <LCD_voidLatch+0x17e>
    6076:	89 e1       	ldi	r24, 0x19	; 25
    6078:	90 e0       	ldi	r25, 0x00	; 0
    607a:	9a 8b       	std	Y+18, r25	; 0x12
    607c:	89 8b       	std	Y+17, r24	; 0x11
    607e:	89 89       	ldd	r24, Y+17	; 0x11
    6080:	9a 89       	ldd	r25, Y+18	; 0x12
    6082:	01 97       	sbiw	r24, 0x01	; 1
    6084:	f1 f7       	brne	.-4      	; 0x6082 <LCD_voidLatch+0x16c>
    6086:	9a 8b       	std	Y+18, r25	; 0x12
    6088:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    608a:	8b 89       	ldd	r24, Y+19	; 0x13
    608c:	9c 89       	ldd	r25, Y+20	; 0x14
    608e:	01 97       	sbiw	r24, 0x01	; 1
    6090:	9c 8b       	std	Y+20, r25	; 0x14
    6092:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6094:	8b 89       	ldd	r24, Y+19	; 0x13
    6096:	9c 89       	ldd	r25, Y+20	; 0x14
    6098:	00 97       	sbiw	r24, 0x00	; 0
    609a:	69 f7       	brne	.-38     	; 0x6076 <LCD_voidLatch+0x160>
    609c:	14 c0       	rjmp	.+40     	; 0x60c6 <LCD_voidLatch+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    609e:	6d 89       	ldd	r22, Y+21	; 0x15
    60a0:	7e 89       	ldd	r23, Y+22	; 0x16
    60a2:	8f 89       	ldd	r24, Y+23	; 0x17
    60a4:	98 8d       	ldd	r25, Y+24	; 0x18
    60a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60aa:	dc 01       	movw	r26, r24
    60ac:	cb 01       	movw	r24, r22
    60ae:	9c 8b       	std	Y+20, r25	; 0x14
    60b0:	8b 8b       	std	Y+19, r24	; 0x13
    60b2:	8b 89       	ldd	r24, Y+19	; 0x13
    60b4:	9c 89       	ldd	r25, Y+20	; 0x14
    60b6:	98 8b       	std	Y+16, r25	; 0x10
    60b8:	8f 87       	std	Y+15, r24	; 0x0f
    60ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    60bc:	98 89       	ldd	r25, Y+16	; 0x10
    60be:	01 97       	sbiw	r24, 0x01	; 1
    60c0:	f1 f7       	brne	.-4      	; 0x60be <LCD_voidLatch+0x1a8>
    60c2:	98 8b       	std	Y+16, r25	; 0x10
    60c4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10); // Garbage Number
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    60c6:	80 e0       	ldi	r24, 0x00	; 0
    60c8:	62 e0       	ldi	r22, 0x02	; 2
    60ca:	40 e0       	ldi	r20, 0x00	; 0
    60cc:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    60d0:	80 e0       	ldi	r24, 0x00	; 0
    60d2:	90 e0       	ldi	r25, 0x00	; 0
    60d4:	a0 e2       	ldi	r26, 0x20	; 32
    60d6:	b1 e4       	ldi	r27, 0x41	; 65
    60d8:	8b 87       	std	Y+11, r24	; 0x0b
    60da:	9c 87       	std	Y+12, r25	; 0x0c
    60dc:	ad 87       	std	Y+13, r26	; 0x0d
    60de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    60e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    60e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    60e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    60e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    60e8:	20 e0       	ldi	r18, 0x00	; 0
    60ea:	30 e0       	ldi	r19, 0x00	; 0
    60ec:	4a e7       	ldi	r20, 0x7A	; 122
    60ee:	53 e4       	ldi	r21, 0x43	; 67
    60f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60f4:	dc 01       	movw	r26, r24
    60f6:	cb 01       	movw	r24, r22
    60f8:	8f 83       	std	Y+7, r24	; 0x07
    60fa:	98 87       	std	Y+8, r25	; 0x08
    60fc:	a9 87       	std	Y+9, r26	; 0x09
    60fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6100:	6f 81       	ldd	r22, Y+7	; 0x07
    6102:	78 85       	ldd	r23, Y+8	; 0x08
    6104:	89 85       	ldd	r24, Y+9	; 0x09
    6106:	9a 85       	ldd	r25, Y+10	; 0x0a
    6108:	20 e0       	ldi	r18, 0x00	; 0
    610a:	30 e0       	ldi	r19, 0x00	; 0
    610c:	40 e8       	ldi	r20, 0x80	; 128
    610e:	5f e3       	ldi	r21, 0x3F	; 63
    6110:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6114:	88 23       	and	r24, r24
    6116:	2c f4       	brge	.+10     	; 0x6122 <LCD_voidLatch+0x20c>
		__ticks = 1;
    6118:	81 e0       	ldi	r24, 0x01	; 1
    611a:	90 e0       	ldi	r25, 0x00	; 0
    611c:	9e 83       	std	Y+6, r25	; 0x06
    611e:	8d 83       	std	Y+5, r24	; 0x05
    6120:	3f c0       	rjmp	.+126    	; 0x61a0 <LCD_voidLatch+0x28a>
	else if (__tmp > 65535)
    6122:	6f 81       	ldd	r22, Y+7	; 0x07
    6124:	78 85       	ldd	r23, Y+8	; 0x08
    6126:	89 85       	ldd	r24, Y+9	; 0x09
    6128:	9a 85       	ldd	r25, Y+10	; 0x0a
    612a:	20 e0       	ldi	r18, 0x00	; 0
    612c:	3f ef       	ldi	r19, 0xFF	; 255
    612e:	4f e7       	ldi	r20, 0x7F	; 127
    6130:	57 e4       	ldi	r21, 0x47	; 71
    6132:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6136:	18 16       	cp	r1, r24
    6138:	4c f5       	brge	.+82     	; 0x618c <LCD_voidLatch+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    613a:	6b 85       	ldd	r22, Y+11	; 0x0b
    613c:	7c 85       	ldd	r23, Y+12	; 0x0c
    613e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6140:	9e 85       	ldd	r25, Y+14	; 0x0e
    6142:	20 e0       	ldi	r18, 0x00	; 0
    6144:	30 e0       	ldi	r19, 0x00	; 0
    6146:	40 e2       	ldi	r20, 0x20	; 32
    6148:	51 e4       	ldi	r21, 0x41	; 65
    614a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    614e:	dc 01       	movw	r26, r24
    6150:	cb 01       	movw	r24, r22
    6152:	bc 01       	movw	r22, r24
    6154:	cd 01       	movw	r24, r26
    6156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    615a:	dc 01       	movw	r26, r24
    615c:	cb 01       	movw	r24, r22
    615e:	9e 83       	std	Y+6, r25	; 0x06
    6160:	8d 83       	std	Y+5, r24	; 0x05
    6162:	0f c0       	rjmp	.+30     	; 0x6182 <LCD_voidLatch+0x26c>
    6164:	89 e1       	ldi	r24, 0x19	; 25
    6166:	90 e0       	ldi	r25, 0x00	; 0
    6168:	9c 83       	std	Y+4, r25	; 0x04
    616a:	8b 83       	std	Y+3, r24	; 0x03
    616c:	8b 81       	ldd	r24, Y+3	; 0x03
    616e:	9c 81       	ldd	r25, Y+4	; 0x04
    6170:	01 97       	sbiw	r24, 0x01	; 1
    6172:	f1 f7       	brne	.-4      	; 0x6170 <LCD_voidLatch+0x25a>
    6174:	9c 83       	std	Y+4, r25	; 0x04
    6176:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6178:	8d 81       	ldd	r24, Y+5	; 0x05
    617a:	9e 81       	ldd	r25, Y+6	; 0x06
    617c:	01 97       	sbiw	r24, 0x01	; 1
    617e:	9e 83       	std	Y+6, r25	; 0x06
    6180:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6182:	8d 81       	ldd	r24, Y+5	; 0x05
    6184:	9e 81       	ldd	r25, Y+6	; 0x06
    6186:	00 97       	sbiw	r24, 0x00	; 0
    6188:	69 f7       	brne	.-38     	; 0x6164 <LCD_voidLatch+0x24e>
    618a:	14 c0       	rjmp	.+40     	; 0x61b4 <LCD_voidLatch+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    618c:	6f 81       	ldd	r22, Y+7	; 0x07
    618e:	78 85       	ldd	r23, Y+8	; 0x08
    6190:	89 85       	ldd	r24, Y+9	; 0x09
    6192:	9a 85       	ldd	r25, Y+10	; 0x0a
    6194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6198:	dc 01       	movw	r26, r24
    619a:	cb 01       	movw	r24, r22
    619c:	9e 83       	std	Y+6, r25	; 0x06
    619e:	8d 83       	std	Y+5, r24	; 0x05
    61a0:	8d 81       	ldd	r24, Y+5	; 0x05
    61a2:	9e 81       	ldd	r25, Y+6	; 0x06
    61a4:	9a 83       	std	Y+2, r25	; 0x02
    61a6:	89 83       	std	Y+1, r24	; 0x01
    61a8:	89 81       	ldd	r24, Y+1	; 0x01
    61aa:	9a 81       	ldd	r25, Y+2	; 0x02
    61ac:	01 97       	sbiw	r24, 0x01	; 1
    61ae:	f1 f7       	brne	.-4      	; 0x61ac <LCD_voidLatch+0x296>
    61b0:	9a 83       	std	Y+2, r25	; 0x02
    61b2:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(10); //For speed difference between MC and LCD.

}
    61b4:	6d 96       	adiw	r28, 0x1d	; 29
    61b6:	0f b6       	in	r0, 0x3f	; 63
    61b8:	f8 94       	cli
    61ba:	de bf       	out	0x3e, r29	; 62
    61bc:	0f be       	out	0x3f, r0	; 63
    61be:	cd bf       	out	0x3d, r28	; 61
    61c0:	cf 91       	pop	r28
    61c2:	df 91       	pop	r29
    61c4:	08 95       	ret

000061c6 <LCD_invoidSendCommand>:
static inline void LCD_invoidSendCommand(u8 Copy_u8Command)
{
    61c6:	df 93       	push	r29
    61c8:	cf 93       	push	r28
    61ca:	cd b7       	in	r28, 0x3d	; 61
    61cc:	de b7       	in	r29, 0x3e	; 62
    61ce:	6d 97       	sbiw	r28, 0x1d	; 29
    61d0:	0f b6       	in	r0, 0x3f	; 63
    61d2:	f8 94       	cli
    61d4:	de bf       	out	0x3e, r29	; 62
    61d6:	0f be       	out	0x3f, r0	; 63
    61d8:	cd bf       	out	0x3d, r28	; 61
    61da:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Set RS as Command, EN is Low */
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    61dc:	80 e0       	ldi	r24, 0x00	; 0
    61de:	60 e0       	ldi	r22, 0x00	; 0
    61e0:	40 e0       	ldi	r20, 0x00	; 0
    61e2:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    61e6:	80 e0       	ldi	r24, 0x00	; 0
    61e8:	62 e0       	ldi	r22, 0x02	; 2
    61ea:	40 e0       	ldi	r20, 0x00	; 0
    61ec:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>

	if(Copy_u8Command == 0x28)
    61f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    61f2:	88 32       	cpi	r24, 0x28	; 40
    61f4:	09 f0       	breq	.+2      	; 0x61f8 <LCD_invoidSendCommand+0x32>
    61f6:	19 c1       	rjmp	.+562    	; 0x642a <LCD_invoidSendCommand+0x264>
	{
		DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command >> 7) & 1));
    61f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    61fa:	98 2f       	mov	r25, r24
    61fc:	99 1f       	adc	r25, r25
    61fe:	99 27       	eor	r25, r25
    6200:	99 1f       	adc	r25, r25
    6202:	81 e0       	ldi	r24, 0x01	; 1
    6204:	67 e0       	ldi	r22, 0x07	; 7
    6206:	49 2f       	mov	r20, r25
    6208:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command >> 6) & 1));
    620c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    620e:	82 95       	swap	r24
    6210:	86 95       	lsr	r24
    6212:	86 95       	lsr	r24
    6214:	83 70       	andi	r24, 0x03	; 3
    6216:	98 2f       	mov	r25, r24
    6218:	91 70       	andi	r25, 0x01	; 1
    621a:	81 e0       	ldi	r24, 0x01	; 1
    621c:	66 e0       	ldi	r22, 0x06	; 6
    621e:	49 2f       	mov	r20, r25
    6220:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command >> 5) & 1));
    6224:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6226:	82 95       	swap	r24
    6228:	86 95       	lsr	r24
    622a:	87 70       	andi	r24, 0x07	; 7
    622c:	98 2f       	mov	r25, r24
    622e:	91 70       	andi	r25, 0x01	; 1
    6230:	81 e0       	ldi	r24, 0x01	; 1
    6232:	65 e0       	ldi	r22, 0x05	; 5
    6234:	49 2f       	mov	r20, r25
    6236:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command >> 4) & 1));
    623a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    623c:	82 95       	swap	r24
    623e:	8f 70       	andi	r24, 0x0F	; 15
    6240:	98 2f       	mov	r25, r24
    6242:	91 70       	andi	r25, 0x01	; 1
    6244:	81 e0       	ldi	r24, 0x01	; 1
    6246:	64 e0       	ldi	r22, 0x04	; 4
    6248:	49 2f       	mov	r20, r25
    624a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>

		// Enable Latch "EN is High" because latch happen in rising edge
		DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8HIGH);
    624e:	80 e0       	ldi	r24, 0x00	; 0
    6250:	62 e0       	ldi	r22, 0x02	; 2
    6252:	41 e0       	ldi	r20, 0x01	; 1
    6254:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    6258:	80 e0       	ldi	r24, 0x00	; 0
    625a:	90 e0       	ldi	r25, 0x00	; 0
    625c:	a0 e2       	ldi	r26, 0x20	; 32
    625e:	b1 e4       	ldi	r27, 0x41	; 65
    6260:	89 8f       	std	Y+25, r24	; 0x19
    6262:	9a 8f       	std	Y+26, r25	; 0x1a
    6264:	ab 8f       	std	Y+27, r26	; 0x1b
    6266:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6268:	69 8d       	ldd	r22, Y+25	; 0x19
    626a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    626c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    626e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6270:	20 e0       	ldi	r18, 0x00	; 0
    6272:	30 e0       	ldi	r19, 0x00	; 0
    6274:	4a e7       	ldi	r20, 0x7A	; 122
    6276:	53 e4       	ldi	r21, 0x43	; 67
    6278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    627c:	dc 01       	movw	r26, r24
    627e:	cb 01       	movw	r24, r22
    6280:	8d 8b       	std	Y+21, r24	; 0x15
    6282:	9e 8b       	std	Y+22, r25	; 0x16
    6284:	af 8b       	std	Y+23, r26	; 0x17
    6286:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6288:	6d 89       	ldd	r22, Y+21	; 0x15
    628a:	7e 89       	ldd	r23, Y+22	; 0x16
    628c:	8f 89       	ldd	r24, Y+23	; 0x17
    628e:	98 8d       	ldd	r25, Y+24	; 0x18
    6290:	20 e0       	ldi	r18, 0x00	; 0
    6292:	30 e0       	ldi	r19, 0x00	; 0
    6294:	40 e8       	ldi	r20, 0x80	; 128
    6296:	5f e3       	ldi	r21, 0x3F	; 63
    6298:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    629c:	88 23       	and	r24, r24
    629e:	2c f4       	brge	.+10     	; 0x62aa <LCD_invoidSendCommand+0xe4>
		__ticks = 1;
    62a0:	81 e0       	ldi	r24, 0x01	; 1
    62a2:	90 e0       	ldi	r25, 0x00	; 0
    62a4:	9c 8b       	std	Y+20, r25	; 0x14
    62a6:	8b 8b       	std	Y+19, r24	; 0x13
    62a8:	3f c0       	rjmp	.+126    	; 0x6328 <LCD_invoidSendCommand+0x162>
	else if (__tmp > 65535)
    62aa:	6d 89       	ldd	r22, Y+21	; 0x15
    62ac:	7e 89       	ldd	r23, Y+22	; 0x16
    62ae:	8f 89       	ldd	r24, Y+23	; 0x17
    62b0:	98 8d       	ldd	r25, Y+24	; 0x18
    62b2:	20 e0       	ldi	r18, 0x00	; 0
    62b4:	3f ef       	ldi	r19, 0xFF	; 255
    62b6:	4f e7       	ldi	r20, 0x7F	; 127
    62b8:	57 e4       	ldi	r21, 0x47	; 71
    62ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    62be:	18 16       	cp	r1, r24
    62c0:	4c f5       	brge	.+82     	; 0x6314 <LCD_invoidSendCommand+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    62c2:	69 8d       	ldd	r22, Y+25	; 0x19
    62c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    62c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    62c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    62ca:	20 e0       	ldi	r18, 0x00	; 0
    62cc:	30 e0       	ldi	r19, 0x00	; 0
    62ce:	40 e2       	ldi	r20, 0x20	; 32
    62d0:	51 e4       	ldi	r21, 0x41	; 65
    62d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62d6:	dc 01       	movw	r26, r24
    62d8:	cb 01       	movw	r24, r22
    62da:	bc 01       	movw	r22, r24
    62dc:	cd 01       	movw	r24, r26
    62de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62e2:	dc 01       	movw	r26, r24
    62e4:	cb 01       	movw	r24, r22
    62e6:	9c 8b       	std	Y+20, r25	; 0x14
    62e8:	8b 8b       	std	Y+19, r24	; 0x13
    62ea:	0f c0       	rjmp	.+30     	; 0x630a <LCD_invoidSendCommand+0x144>
    62ec:	89 e1       	ldi	r24, 0x19	; 25
    62ee:	90 e0       	ldi	r25, 0x00	; 0
    62f0:	9a 8b       	std	Y+18, r25	; 0x12
    62f2:	89 8b       	std	Y+17, r24	; 0x11
    62f4:	89 89       	ldd	r24, Y+17	; 0x11
    62f6:	9a 89       	ldd	r25, Y+18	; 0x12
    62f8:	01 97       	sbiw	r24, 0x01	; 1
    62fa:	f1 f7       	brne	.-4      	; 0x62f8 <LCD_invoidSendCommand+0x132>
    62fc:	9a 8b       	std	Y+18, r25	; 0x12
    62fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6300:	8b 89       	ldd	r24, Y+19	; 0x13
    6302:	9c 89       	ldd	r25, Y+20	; 0x14
    6304:	01 97       	sbiw	r24, 0x01	; 1
    6306:	9c 8b       	std	Y+20, r25	; 0x14
    6308:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    630a:	8b 89       	ldd	r24, Y+19	; 0x13
    630c:	9c 89       	ldd	r25, Y+20	; 0x14
    630e:	00 97       	sbiw	r24, 0x00	; 0
    6310:	69 f7       	brne	.-38     	; 0x62ec <LCD_invoidSendCommand+0x126>
    6312:	14 c0       	rjmp	.+40     	; 0x633c <LCD_invoidSendCommand+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6314:	6d 89       	ldd	r22, Y+21	; 0x15
    6316:	7e 89       	ldd	r23, Y+22	; 0x16
    6318:	8f 89       	ldd	r24, Y+23	; 0x17
    631a:	98 8d       	ldd	r25, Y+24	; 0x18
    631c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6320:	dc 01       	movw	r26, r24
    6322:	cb 01       	movw	r24, r22
    6324:	9c 8b       	std	Y+20, r25	; 0x14
    6326:	8b 8b       	std	Y+19, r24	; 0x13
    6328:	8b 89       	ldd	r24, Y+19	; 0x13
    632a:	9c 89       	ldd	r25, Y+20	; 0x14
    632c:	98 8b       	std	Y+16, r25	; 0x10
    632e:	8f 87       	std	Y+15, r24	; 0x0f
    6330:	8f 85       	ldd	r24, Y+15	; 0x0f
    6332:	98 89       	ldd	r25, Y+16	; 0x10
    6334:	01 97       	sbiw	r24, 0x01	; 1
    6336:	f1 f7       	brne	.-4      	; 0x6334 <LCD_invoidSendCommand+0x16e>
    6338:	98 8b       	std	Y+16, r25	; 0x10
    633a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10); // Garbage Number
		DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    633c:	80 e0       	ldi	r24, 0x00	; 0
    633e:	62 e0       	ldi	r22, 0x02	; 2
    6340:	40 e0       	ldi	r20, 0x00	; 0
    6342:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    6346:	80 e0       	ldi	r24, 0x00	; 0
    6348:	90 e0       	ldi	r25, 0x00	; 0
    634a:	a8 e4       	ldi	r26, 0x48	; 72
    634c:	b2 e4       	ldi	r27, 0x42	; 66
    634e:	8b 87       	std	Y+11, r24	; 0x0b
    6350:	9c 87       	std	Y+12, r25	; 0x0c
    6352:	ad 87       	std	Y+13, r26	; 0x0d
    6354:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6356:	6b 85       	ldd	r22, Y+11	; 0x0b
    6358:	7c 85       	ldd	r23, Y+12	; 0x0c
    635a:	8d 85       	ldd	r24, Y+13	; 0x0d
    635c:	9e 85       	ldd	r25, Y+14	; 0x0e
    635e:	20 e0       	ldi	r18, 0x00	; 0
    6360:	30 e0       	ldi	r19, 0x00	; 0
    6362:	4a e7       	ldi	r20, 0x7A	; 122
    6364:	53 e4       	ldi	r21, 0x43	; 67
    6366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    636a:	dc 01       	movw	r26, r24
    636c:	cb 01       	movw	r24, r22
    636e:	8f 83       	std	Y+7, r24	; 0x07
    6370:	98 87       	std	Y+8, r25	; 0x08
    6372:	a9 87       	std	Y+9, r26	; 0x09
    6374:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6376:	6f 81       	ldd	r22, Y+7	; 0x07
    6378:	78 85       	ldd	r23, Y+8	; 0x08
    637a:	89 85       	ldd	r24, Y+9	; 0x09
    637c:	9a 85       	ldd	r25, Y+10	; 0x0a
    637e:	20 e0       	ldi	r18, 0x00	; 0
    6380:	30 e0       	ldi	r19, 0x00	; 0
    6382:	40 e8       	ldi	r20, 0x80	; 128
    6384:	5f e3       	ldi	r21, 0x3F	; 63
    6386:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    638a:	88 23       	and	r24, r24
    638c:	2c f4       	brge	.+10     	; 0x6398 <LCD_invoidSendCommand+0x1d2>
		__ticks = 1;
    638e:	81 e0       	ldi	r24, 0x01	; 1
    6390:	90 e0       	ldi	r25, 0x00	; 0
    6392:	9e 83       	std	Y+6, r25	; 0x06
    6394:	8d 83       	std	Y+5, r24	; 0x05
    6396:	3f c0       	rjmp	.+126    	; 0x6416 <LCD_invoidSendCommand+0x250>
	else if (__tmp > 65535)
    6398:	6f 81       	ldd	r22, Y+7	; 0x07
    639a:	78 85       	ldd	r23, Y+8	; 0x08
    639c:	89 85       	ldd	r24, Y+9	; 0x09
    639e:	9a 85       	ldd	r25, Y+10	; 0x0a
    63a0:	20 e0       	ldi	r18, 0x00	; 0
    63a2:	3f ef       	ldi	r19, 0xFF	; 255
    63a4:	4f e7       	ldi	r20, 0x7F	; 127
    63a6:	57 e4       	ldi	r21, 0x47	; 71
    63a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    63ac:	18 16       	cp	r1, r24
    63ae:	4c f5       	brge	.+82     	; 0x6402 <LCD_invoidSendCommand+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    63b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    63b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    63b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    63b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    63b8:	20 e0       	ldi	r18, 0x00	; 0
    63ba:	30 e0       	ldi	r19, 0x00	; 0
    63bc:	40 e2       	ldi	r20, 0x20	; 32
    63be:	51 e4       	ldi	r21, 0x41	; 65
    63c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    63c4:	dc 01       	movw	r26, r24
    63c6:	cb 01       	movw	r24, r22
    63c8:	bc 01       	movw	r22, r24
    63ca:	cd 01       	movw	r24, r26
    63cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63d0:	dc 01       	movw	r26, r24
    63d2:	cb 01       	movw	r24, r22
    63d4:	9e 83       	std	Y+6, r25	; 0x06
    63d6:	8d 83       	std	Y+5, r24	; 0x05
    63d8:	0f c0       	rjmp	.+30     	; 0x63f8 <LCD_invoidSendCommand+0x232>
    63da:	89 e1       	ldi	r24, 0x19	; 25
    63dc:	90 e0       	ldi	r25, 0x00	; 0
    63de:	9c 83       	std	Y+4, r25	; 0x04
    63e0:	8b 83       	std	Y+3, r24	; 0x03
    63e2:	8b 81       	ldd	r24, Y+3	; 0x03
    63e4:	9c 81       	ldd	r25, Y+4	; 0x04
    63e6:	01 97       	sbiw	r24, 0x01	; 1
    63e8:	f1 f7       	brne	.-4      	; 0x63e6 <LCD_invoidSendCommand+0x220>
    63ea:	9c 83       	std	Y+4, r25	; 0x04
    63ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    63ee:	8d 81       	ldd	r24, Y+5	; 0x05
    63f0:	9e 81       	ldd	r25, Y+6	; 0x06
    63f2:	01 97       	sbiw	r24, 0x01	; 1
    63f4:	9e 83       	std	Y+6, r25	; 0x06
    63f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    63f8:	8d 81       	ldd	r24, Y+5	; 0x05
    63fa:	9e 81       	ldd	r25, Y+6	; 0x06
    63fc:	00 97       	sbiw	r24, 0x00	; 0
    63fe:	69 f7       	brne	.-38     	; 0x63da <LCD_invoidSendCommand+0x214>
    6400:	14 c0       	rjmp	.+40     	; 0x642a <LCD_invoidSendCommand+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6402:	6f 81       	ldd	r22, Y+7	; 0x07
    6404:	78 85       	ldd	r23, Y+8	; 0x08
    6406:	89 85       	ldd	r24, Y+9	; 0x09
    6408:	9a 85       	ldd	r25, Y+10	; 0x0a
    640a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    640e:	dc 01       	movw	r26, r24
    6410:	cb 01       	movw	r24, r22
    6412:	9e 83       	std	Y+6, r25	; 0x06
    6414:	8d 83       	std	Y+5, r24	; 0x05
    6416:	8d 81       	ldd	r24, Y+5	; 0x05
    6418:	9e 81       	ldd	r25, Y+6	; 0x06
    641a:	9a 83       	std	Y+2, r25	; 0x02
    641c:	89 83       	std	Y+1, r24	; 0x01
    641e:	89 81       	ldd	r24, Y+1	; 0x01
    6420:	9a 81       	ldd	r25, Y+2	; 0x02
    6422:	01 97       	sbiw	r24, 0x01	; 1
    6424:	f1 f7       	brne	.-4      	; 0x6422 <LCD_invoidSendCommand+0x25c>
    6426:	9a 83       	std	Y+2, r25	; 0x02
    6428:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(50);
	}

	LCD_voidLatch(Copy_u8Command);
    642a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    642c:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <LCD_voidLatch>

}
    6430:	6d 96       	adiw	r28, 0x1d	; 29
    6432:	0f b6       	in	r0, 0x3f	; 63
    6434:	f8 94       	cli
    6436:	de bf       	out	0x3e, r29	; 62
    6438:	0f be       	out	0x3f, r0	; 63
    643a:	cd bf       	out	0x3d, r28	; 61
    643c:	cf 91       	pop	r28
    643e:	df 91       	pop	r29
    6440:	08 95       	ret

00006442 <KPAD_enuInit>:

#include "Keypad_private.h"
#include "Keypad_config.h"

ES_t KPAD_enuInit(void)
{
    6442:	df 93       	push	r29
    6444:	cf 93       	push	r28
    6446:	cd b7       	in	r28, 0x3d	; 61
    6448:	de b7       	in	r29, 0x3e	; 62
    644a:	27 97       	sbiw	r28, 0x07	; 7
    644c:	0f b6       	in	r0, 0x3f	; 63
    644e:	f8 94       	cli
    6450:	de bf       	out	0x3e, r29	; 62
    6452:	0f be       	out	0x3f, r0	; 63
    6454:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    6456:	1e 82       	std	Y+6, r1	; 0x06

	u8 Local_u8Iterator = KPAD_ZERO;
    6458:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Check = KPAD_ZERO;
    645a:	19 82       	std	Y+1, r1	; 0x01
    645c:	1a 82       	std	Y+2, r1	; 0x02
    645e:	1b 82       	std	Y+3, r1	; 0x03
    6460:	1c 82       	std	Y+4, r1	; 0x04

	Local_u32Check |= (DIO_enuSetPinDirection(ROW1_PORT, ROW1_PIN, DIO_u8INPUT) << KPAD_SHIFTBIT_ZERO);
    6462:	80 e0       	ldi	r24, 0x00	; 0
    6464:	64 e0       	ldi	r22, 0x04	; 4
    6466:	40 e0       	ldi	r20, 0x00	; 0
    6468:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    646c:	28 2f       	mov	r18, r24
    646e:	30 e0       	ldi	r19, 0x00	; 0
    6470:	40 e0       	ldi	r20, 0x00	; 0
    6472:	50 e0       	ldi	r21, 0x00	; 0
    6474:	89 81       	ldd	r24, Y+1	; 0x01
    6476:	9a 81       	ldd	r25, Y+2	; 0x02
    6478:	ab 81       	ldd	r26, Y+3	; 0x03
    647a:	bc 81       	ldd	r27, Y+4	; 0x04
    647c:	82 2b       	or	r24, r18
    647e:	93 2b       	or	r25, r19
    6480:	a4 2b       	or	r26, r20
    6482:	b5 2b       	or	r27, r21
    6484:	89 83       	std	Y+1, r24	; 0x01
    6486:	9a 83       	std	Y+2, r25	; 0x02
    6488:	ab 83       	std	Y+3, r26	; 0x03
    648a:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (DIO_enuSetPinDirection(ROW2_PORT, ROW2_PIN, DIO_u8INPUT) << KPAD_SHIFTBIT_THREE);
    648c:	80 e0       	ldi	r24, 0x00	; 0
    648e:	65 e0       	ldi	r22, 0x05	; 5
    6490:	40 e0       	ldi	r20, 0x00	; 0
    6492:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    6496:	88 2f       	mov	r24, r24
    6498:	90 e0       	ldi	r25, 0x00	; 0
    649a:	88 0f       	add	r24, r24
    649c:	99 1f       	adc	r25, r25
    649e:	88 0f       	add	r24, r24
    64a0:	99 1f       	adc	r25, r25
    64a2:	88 0f       	add	r24, r24
    64a4:	99 1f       	adc	r25, r25
    64a6:	9c 01       	movw	r18, r24
    64a8:	44 27       	eor	r20, r20
    64aa:	37 fd       	sbrc	r19, 7
    64ac:	40 95       	com	r20
    64ae:	54 2f       	mov	r21, r20
    64b0:	89 81       	ldd	r24, Y+1	; 0x01
    64b2:	9a 81       	ldd	r25, Y+2	; 0x02
    64b4:	ab 81       	ldd	r26, Y+3	; 0x03
    64b6:	bc 81       	ldd	r27, Y+4	; 0x04
    64b8:	82 2b       	or	r24, r18
    64ba:	93 2b       	or	r25, r19
    64bc:	a4 2b       	or	r26, r20
    64be:	b5 2b       	or	r27, r21
    64c0:	89 83       	std	Y+1, r24	; 0x01
    64c2:	9a 83       	std	Y+2, r25	; 0x02
    64c4:	ab 83       	std	Y+3, r26	; 0x03
    64c6:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (DIO_enuSetPinDirection(ROW3_PORT, ROW3_PIN, DIO_u8INPUT) << KPAD_SHIFTBIT_SIX);
    64c8:	80 e0       	ldi	r24, 0x00	; 0
    64ca:	66 e0       	ldi	r22, 0x06	; 6
    64cc:	40 e0       	ldi	r20, 0x00	; 0
    64ce:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    64d2:	88 2f       	mov	r24, r24
    64d4:	90 e0       	ldi	r25, 0x00	; 0
    64d6:	00 24       	eor	r0, r0
    64d8:	96 95       	lsr	r25
    64da:	87 95       	ror	r24
    64dc:	07 94       	ror	r0
    64de:	96 95       	lsr	r25
    64e0:	87 95       	ror	r24
    64e2:	07 94       	ror	r0
    64e4:	98 2f       	mov	r25, r24
    64e6:	80 2d       	mov	r24, r0
    64e8:	9c 01       	movw	r18, r24
    64ea:	44 27       	eor	r20, r20
    64ec:	37 fd       	sbrc	r19, 7
    64ee:	40 95       	com	r20
    64f0:	54 2f       	mov	r21, r20
    64f2:	89 81       	ldd	r24, Y+1	; 0x01
    64f4:	9a 81       	ldd	r25, Y+2	; 0x02
    64f6:	ab 81       	ldd	r26, Y+3	; 0x03
    64f8:	bc 81       	ldd	r27, Y+4	; 0x04
    64fa:	82 2b       	or	r24, r18
    64fc:	93 2b       	or	r25, r19
    64fe:	a4 2b       	or	r26, r20
    6500:	b5 2b       	or	r27, r21
    6502:	89 83       	std	Y+1, r24	; 0x01
    6504:	9a 83       	std	Y+2, r25	; 0x02
    6506:	ab 83       	std	Y+3, r26	; 0x03
    6508:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (DIO_enuSetPinDirection(ROW4_PORT, ROW4_PIN, DIO_u8INPUT) << KPAD_SHIFTBIT_NINE);
    650a:	80 e0       	ldi	r24, 0x00	; 0
    650c:	67 e0       	ldi	r22, 0x07	; 7
    650e:	40 e0       	ldi	r20, 0x00	; 0
    6510:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    6514:	88 2f       	mov	r24, r24
    6516:	90 e0       	ldi	r25, 0x00	; 0
    6518:	98 2f       	mov	r25, r24
    651a:	88 27       	eor	r24, r24
    651c:	99 0f       	add	r25, r25
    651e:	9c 01       	movw	r18, r24
    6520:	44 27       	eor	r20, r20
    6522:	37 fd       	sbrc	r19, 7
    6524:	40 95       	com	r20
    6526:	54 2f       	mov	r21, r20
    6528:	89 81       	ldd	r24, Y+1	; 0x01
    652a:	9a 81       	ldd	r25, Y+2	; 0x02
    652c:	ab 81       	ldd	r26, Y+3	; 0x03
    652e:	bc 81       	ldd	r27, Y+4	; 0x04
    6530:	82 2b       	or	r24, r18
    6532:	93 2b       	or	r25, r19
    6534:	a4 2b       	or	r26, r20
    6536:	b5 2b       	or	r27, r21
    6538:	89 83       	std	Y+1, r24	; 0x01
    653a:	9a 83       	std	Y+2, r25	; 0x02
    653c:	ab 83       	std	Y+3, r26	; 0x03
    653e:	bc 83       	std	Y+4, r27	; 0x04

	Local_u32Check |= (DIO_enuSetPinValue(ROW1_PORT, ROW1_PIN, DIO_u8PULL_UP) << KPAD_SHIFTBIT_TWELVE);
    6540:	80 e0       	ldi	r24, 0x00	; 0
    6542:	64 e0       	ldi	r22, 0x04	; 4
    6544:	41 e0       	ldi	r20, 0x01	; 1
    6546:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    654a:	88 2f       	mov	r24, r24
    654c:	90 e0       	ldi	r25, 0x00	; 0
    654e:	98 2f       	mov	r25, r24
    6550:	88 27       	eor	r24, r24
    6552:	92 95       	swap	r25
    6554:	90 7f       	andi	r25, 0xF0	; 240
    6556:	9c 01       	movw	r18, r24
    6558:	44 27       	eor	r20, r20
    655a:	37 fd       	sbrc	r19, 7
    655c:	40 95       	com	r20
    655e:	54 2f       	mov	r21, r20
    6560:	89 81       	ldd	r24, Y+1	; 0x01
    6562:	9a 81       	ldd	r25, Y+2	; 0x02
    6564:	ab 81       	ldd	r26, Y+3	; 0x03
    6566:	bc 81       	ldd	r27, Y+4	; 0x04
    6568:	82 2b       	or	r24, r18
    656a:	93 2b       	or	r25, r19
    656c:	a4 2b       	or	r26, r20
    656e:	b5 2b       	or	r27, r21
    6570:	89 83       	std	Y+1, r24	; 0x01
    6572:	9a 83       	std	Y+2, r25	; 0x02
    6574:	ab 83       	std	Y+3, r26	; 0x03
    6576:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (((u32)DIO_enuSetPinValue(ROW2_PORT, ROW2_PIN, DIO_u8PULL_UP)) << KPAD_SHIFTBIT_FIFTEEN);
    6578:	80 e0       	ldi	r24, 0x00	; 0
    657a:	65 e0       	ldi	r22, 0x05	; 5
    657c:	41 e0       	ldi	r20, 0x01	; 1
    657e:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    6582:	88 2f       	mov	r24, r24
    6584:	90 e0       	ldi	r25, 0x00	; 0
    6586:	a0 e0       	ldi	r26, 0x00	; 0
    6588:	b0 e0       	ldi	r27, 0x00	; 0
    658a:	9c 01       	movw	r18, r24
    658c:	ad 01       	movw	r20, r26
    658e:	01 2e       	mov	r0, r17
    6590:	1f e0       	ldi	r17, 0x0F	; 15
    6592:	22 0f       	add	r18, r18
    6594:	33 1f       	adc	r19, r19
    6596:	44 1f       	adc	r20, r20
    6598:	55 1f       	adc	r21, r21
    659a:	1a 95       	dec	r17
    659c:	d1 f7       	brne	.-12     	; 0x6592 <KPAD_enuInit+0x150>
    659e:	10 2d       	mov	r17, r0
    65a0:	89 81       	ldd	r24, Y+1	; 0x01
    65a2:	9a 81       	ldd	r25, Y+2	; 0x02
    65a4:	ab 81       	ldd	r26, Y+3	; 0x03
    65a6:	bc 81       	ldd	r27, Y+4	; 0x04
    65a8:	82 2b       	or	r24, r18
    65aa:	93 2b       	or	r25, r19
    65ac:	a4 2b       	or	r26, r20
    65ae:	b5 2b       	or	r27, r21
    65b0:	89 83       	std	Y+1, r24	; 0x01
    65b2:	9a 83       	std	Y+2, r25	; 0x02
    65b4:	ab 83       	std	Y+3, r26	; 0x03
    65b6:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (((u32)DIO_enuSetPinValue(ROW3_PORT, ROW3_PIN, DIO_u8PULL_UP)) << KPAD_SHIFTBIT_EIGHTEEN);
    65b8:	80 e0       	ldi	r24, 0x00	; 0
    65ba:	66 e0       	ldi	r22, 0x06	; 6
    65bc:	41 e0       	ldi	r20, 0x01	; 1
    65be:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    65c2:	88 2f       	mov	r24, r24
    65c4:	90 e0       	ldi	r25, 0x00	; 0
    65c6:	a0 e0       	ldi	r26, 0x00	; 0
    65c8:	b0 e0       	ldi	r27, 0x00	; 0
    65ca:	9c 01       	movw	r18, r24
    65cc:	ad 01       	movw	r20, r26
    65ce:	01 2e       	mov	r0, r17
    65d0:	12 e1       	ldi	r17, 0x12	; 18
    65d2:	22 0f       	add	r18, r18
    65d4:	33 1f       	adc	r19, r19
    65d6:	44 1f       	adc	r20, r20
    65d8:	55 1f       	adc	r21, r21
    65da:	1a 95       	dec	r17
    65dc:	d1 f7       	brne	.-12     	; 0x65d2 <KPAD_enuInit+0x190>
    65de:	10 2d       	mov	r17, r0
    65e0:	89 81       	ldd	r24, Y+1	; 0x01
    65e2:	9a 81       	ldd	r25, Y+2	; 0x02
    65e4:	ab 81       	ldd	r26, Y+3	; 0x03
    65e6:	bc 81       	ldd	r27, Y+4	; 0x04
    65e8:	82 2b       	or	r24, r18
    65ea:	93 2b       	or	r25, r19
    65ec:	a4 2b       	or	r26, r20
    65ee:	b5 2b       	or	r27, r21
    65f0:	89 83       	std	Y+1, r24	; 0x01
    65f2:	9a 83       	std	Y+2, r25	; 0x02
    65f4:	ab 83       	std	Y+3, r26	; 0x03
    65f6:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (((u32)DIO_enuSetPinValue(ROW4_PORT, ROW4_PIN, DIO_u8PULL_UP)) << KPAD_SHIFTBIT_TWENTYONE);
    65f8:	80 e0       	ldi	r24, 0x00	; 0
    65fa:	67 e0       	ldi	r22, 0x07	; 7
    65fc:	41 e0       	ldi	r20, 0x01	; 1
    65fe:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    6602:	88 2f       	mov	r24, r24
    6604:	90 e0       	ldi	r25, 0x00	; 0
    6606:	a0 e0       	ldi	r26, 0x00	; 0
    6608:	b0 e0       	ldi	r27, 0x00	; 0
    660a:	9c 01       	movw	r18, r24
    660c:	ad 01       	movw	r20, r26
    660e:	01 2e       	mov	r0, r17
    6610:	15 e1       	ldi	r17, 0x15	; 21
    6612:	22 0f       	add	r18, r18
    6614:	33 1f       	adc	r19, r19
    6616:	44 1f       	adc	r20, r20
    6618:	55 1f       	adc	r21, r21
    661a:	1a 95       	dec	r17
    661c:	d1 f7       	brne	.-12     	; 0x6612 <KPAD_enuInit+0x1d0>
    661e:	10 2d       	mov	r17, r0
    6620:	89 81       	ldd	r24, Y+1	; 0x01
    6622:	9a 81       	ldd	r25, Y+2	; 0x02
    6624:	ab 81       	ldd	r26, Y+3	; 0x03
    6626:	bc 81       	ldd	r27, Y+4	; 0x04
    6628:	82 2b       	or	r24, r18
    662a:	93 2b       	or	r25, r19
    662c:	a4 2b       	or	r26, r20
    662e:	b5 2b       	or	r27, r21
    6630:	89 83       	std	Y+1, r24	; 0x01
    6632:	9a 83       	std	Y+2, r25	; 0x02
    6634:	ab 83       	std	Y+3, r26	; 0x03
    6636:	bc 83       	std	Y+4, r27	; 0x04

	for(Local_u8Iterator = KPAD_ZERO; Local_u8Iterator < KPAD_TWENTYFOUR; Local_u8Iterator += KPAD_THREE)
    6638:	1d 82       	std	Y+5, r1	; 0x05
    663a:	1e c0       	rjmp	.+60     	; 0x6678 <KPAD_enuInit+0x236>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & KPAD_SEVEN) != ES_OK)
    663c:	8d 81       	ldd	r24, Y+5	; 0x05
    663e:	28 2f       	mov	r18, r24
    6640:	30 e0       	ldi	r19, 0x00	; 0
    6642:	89 81       	ldd	r24, Y+1	; 0x01
    6644:	9a 81       	ldd	r25, Y+2	; 0x02
    6646:	ab 81       	ldd	r26, Y+3	; 0x03
    6648:	bc 81       	ldd	r27, Y+4	; 0x04
    664a:	02 2e       	mov	r0, r18
    664c:	04 c0       	rjmp	.+8      	; 0x6656 <KPAD_enuInit+0x214>
    664e:	b6 95       	lsr	r27
    6650:	a7 95       	ror	r26
    6652:	97 95       	ror	r25
    6654:	87 95       	ror	r24
    6656:	0a 94       	dec	r0
    6658:	d2 f7       	brpl	.-12     	; 0x664e <KPAD_enuInit+0x20c>
    665a:	87 70       	andi	r24, 0x07	; 7
    665c:	90 70       	andi	r25, 0x00	; 0
    665e:	a0 70       	andi	r26, 0x00	; 0
    6660:	b0 70       	andi	r27, 0x00	; 0
    6662:	81 30       	cpi	r24, 0x01	; 1
    6664:	91 05       	cpc	r25, r1
    6666:	a1 05       	cpc	r26, r1
    6668:	b1 05       	cpc	r27, r1
    666a:	19 f0       	breq	.+6      	; 0x6672 <KPAD_enuInit+0x230>
		{
			return Local_enuErrorState;
    666c:	8e 81       	ldd	r24, Y+6	; 0x06
    666e:	8f 83       	std	Y+7, r24	; 0x07
    6670:	1c c1       	rjmp	.+568    	; 0x68aa <KPAD_enuInit+0x468>
	Local_u32Check |= (DIO_enuSetPinValue(ROW1_PORT, ROW1_PIN, DIO_u8PULL_UP) << KPAD_SHIFTBIT_TWELVE);
	Local_u32Check |= (((u32)DIO_enuSetPinValue(ROW2_PORT, ROW2_PIN, DIO_u8PULL_UP)) << KPAD_SHIFTBIT_FIFTEEN);
	Local_u32Check |= (((u32)DIO_enuSetPinValue(ROW3_PORT, ROW3_PIN, DIO_u8PULL_UP)) << KPAD_SHIFTBIT_EIGHTEEN);
	Local_u32Check |= (((u32)DIO_enuSetPinValue(ROW4_PORT, ROW4_PIN, DIO_u8PULL_UP)) << KPAD_SHIFTBIT_TWENTYONE);

	for(Local_u8Iterator = KPAD_ZERO; Local_u8Iterator < KPAD_TWENTYFOUR; Local_u8Iterator += KPAD_THREE)
    6672:	8d 81       	ldd	r24, Y+5	; 0x05
    6674:	8d 5f       	subi	r24, 0xFD	; 253
    6676:	8d 83       	std	Y+5, r24	; 0x05
    6678:	8d 81       	ldd	r24, Y+5	; 0x05
    667a:	88 31       	cpi	r24, 0x18	; 24
    667c:	f8 f2       	brcs	.-66     	; 0x663c <KPAD_enuInit+0x1fa>
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & KPAD_SEVEN) != ES_OK)
		{
			return Local_enuErrorState;
		}
	}
	Local_u32Check = KPAD_ZERO;
    667e:	19 82       	std	Y+1, r1	; 0x01
    6680:	1a 82       	std	Y+2, r1	; 0x02
    6682:	1b 82       	std	Y+3, r1	; 0x03
    6684:	1c 82       	std	Y+4, r1	; 0x04

	Local_u32Check |= (DIO_enuSetPinDirection(COL1_PORT, COL1_PIN, DIO_u8OUTPUT) << KPAD_SHIFTBIT_ZERO);
    6686:	81 e0       	ldi	r24, 0x01	; 1
    6688:	60 e0       	ldi	r22, 0x00	; 0
    668a:	41 e0       	ldi	r20, 0x01	; 1
    668c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    6690:	28 2f       	mov	r18, r24
    6692:	30 e0       	ldi	r19, 0x00	; 0
    6694:	40 e0       	ldi	r20, 0x00	; 0
    6696:	50 e0       	ldi	r21, 0x00	; 0
    6698:	89 81       	ldd	r24, Y+1	; 0x01
    669a:	9a 81       	ldd	r25, Y+2	; 0x02
    669c:	ab 81       	ldd	r26, Y+3	; 0x03
    669e:	bc 81       	ldd	r27, Y+4	; 0x04
    66a0:	82 2b       	or	r24, r18
    66a2:	93 2b       	or	r25, r19
    66a4:	a4 2b       	or	r26, r20
    66a6:	b5 2b       	or	r27, r21
    66a8:	89 83       	std	Y+1, r24	; 0x01
    66aa:	9a 83       	std	Y+2, r25	; 0x02
    66ac:	ab 83       	std	Y+3, r26	; 0x03
    66ae:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (DIO_enuSetPinDirection(COL2_PORT, COL2_PIN, DIO_u8OUTPUT) << KPAD_SHIFTBIT_THREE);
    66b0:	81 e0       	ldi	r24, 0x01	; 1
    66b2:	61 e0       	ldi	r22, 0x01	; 1
    66b4:	41 e0       	ldi	r20, 0x01	; 1
    66b6:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    66ba:	88 2f       	mov	r24, r24
    66bc:	90 e0       	ldi	r25, 0x00	; 0
    66be:	88 0f       	add	r24, r24
    66c0:	99 1f       	adc	r25, r25
    66c2:	88 0f       	add	r24, r24
    66c4:	99 1f       	adc	r25, r25
    66c6:	88 0f       	add	r24, r24
    66c8:	99 1f       	adc	r25, r25
    66ca:	9c 01       	movw	r18, r24
    66cc:	44 27       	eor	r20, r20
    66ce:	37 fd       	sbrc	r19, 7
    66d0:	40 95       	com	r20
    66d2:	54 2f       	mov	r21, r20
    66d4:	89 81       	ldd	r24, Y+1	; 0x01
    66d6:	9a 81       	ldd	r25, Y+2	; 0x02
    66d8:	ab 81       	ldd	r26, Y+3	; 0x03
    66da:	bc 81       	ldd	r27, Y+4	; 0x04
    66dc:	82 2b       	or	r24, r18
    66de:	93 2b       	or	r25, r19
    66e0:	a4 2b       	or	r26, r20
    66e2:	b5 2b       	or	r27, r21
    66e4:	89 83       	std	Y+1, r24	; 0x01
    66e6:	9a 83       	std	Y+2, r25	; 0x02
    66e8:	ab 83       	std	Y+3, r26	; 0x03
    66ea:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (DIO_enuSetPinDirection(COL3_PORT, COL3_PIN, DIO_u8OUTPUT) << KPAD_SHIFTBIT_SIX);
    66ec:	81 e0       	ldi	r24, 0x01	; 1
    66ee:	62 e0       	ldi	r22, 0x02	; 2
    66f0:	41 e0       	ldi	r20, 0x01	; 1
    66f2:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    66f6:	88 2f       	mov	r24, r24
    66f8:	90 e0       	ldi	r25, 0x00	; 0
    66fa:	00 24       	eor	r0, r0
    66fc:	96 95       	lsr	r25
    66fe:	87 95       	ror	r24
    6700:	07 94       	ror	r0
    6702:	96 95       	lsr	r25
    6704:	87 95       	ror	r24
    6706:	07 94       	ror	r0
    6708:	98 2f       	mov	r25, r24
    670a:	80 2d       	mov	r24, r0
    670c:	9c 01       	movw	r18, r24
    670e:	44 27       	eor	r20, r20
    6710:	37 fd       	sbrc	r19, 7
    6712:	40 95       	com	r20
    6714:	54 2f       	mov	r21, r20
    6716:	89 81       	ldd	r24, Y+1	; 0x01
    6718:	9a 81       	ldd	r25, Y+2	; 0x02
    671a:	ab 81       	ldd	r26, Y+3	; 0x03
    671c:	bc 81       	ldd	r27, Y+4	; 0x04
    671e:	82 2b       	or	r24, r18
    6720:	93 2b       	or	r25, r19
    6722:	a4 2b       	or	r26, r20
    6724:	b5 2b       	or	r27, r21
    6726:	89 83       	std	Y+1, r24	; 0x01
    6728:	9a 83       	std	Y+2, r25	; 0x02
    672a:	ab 83       	std	Y+3, r26	; 0x03
    672c:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (DIO_enuSetPinDirection(COL4_PORT, COL4_PIN, DIO_u8OUTPUT) << KPAD_SHIFTBIT_NINE);
    672e:	81 e0       	ldi	r24, 0x01	; 1
    6730:	63 e0       	ldi	r22, 0x03	; 3
    6732:	41 e0       	ldi	r20, 0x01	; 1
    6734:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
    6738:	88 2f       	mov	r24, r24
    673a:	90 e0       	ldi	r25, 0x00	; 0
    673c:	98 2f       	mov	r25, r24
    673e:	88 27       	eor	r24, r24
    6740:	99 0f       	add	r25, r25
    6742:	9c 01       	movw	r18, r24
    6744:	44 27       	eor	r20, r20
    6746:	37 fd       	sbrc	r19, 7
    6748:	40 95       	com	r20
    674a:	54 2f       	mov	r21, r20
    674c:	89 81       	ldd	r24, Y+1	; 0x01
    674e:	9a 81       	ldd	r25, Y+2	; 0x02
    6750:	ab 81       	ldd	r26, Y+3	; 0x03
    6752:	bc 81       	ldd	r27, Y+4	; 0x04
    6754:	82 2b       	or	r24, r18
    6756:	93 2b       	or	r25, r19
    6758:	a4 2b       	or	r26, r20
    675a:	b5 2b       	or	r27, r21
    675c:	89 83       	std	Y+1, r24	; 0x01
    675e:	9a 83       	std	Y+2, r25	; 0x02
    6760:	ab 83       	std	Y+3, r26	; 0x03
    6762:	bc 83       	std	Y+4, r27	; 0x04

	Local_u32Check |= (DIO_enuSetPinValue(COL1_PORT, COL1_PIN, DIO_u8HIGH) << KPAD_SHIFTBIT_TWELVE);
    6764:	81 e0       	ldi	r24, 0x01	; 1
    6766:	60 e0       	ldi	r22, 0x00	; 0
    6768:	41 e0       	ldi	r20, 0x01	; 1
    676a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    676e:	88 2f       	mov	r24, r24
    6770:	90 e0       	ldi	r25, 0x00	; 0
    6772:	98 2f       	mov	r25, r24
    6774:	88 27       	eor	r24, r24
    6776:	92 95       	swap	r25
    6778:	90 7f       	andi	r25, 0xF0	; 240
    677a:	9c 01       	movw	r18, r24
    677c:	44 27       	eor	r20, r20
    677e:	37 fd       	sbrc	r19, 7
    6780:	40 95       	com	r20
    6782:	54 2f       	mov	r21, r20
    6784:	89 81       	ldd	r24, Y+1	; 0x01
    6786:	9a 81       	ldd	r25, Y+2	; 0x02
    6788:	ab 81       	ldd	r26, Y+3	; 0x03
    678a:	bc 81       	ldd	r27, Y+4	; 0x04
    678c:	82 2b       	or	r24, r18
    678e:	93 2b       	or	r25, r19
    6790:	a4 2b       	or	r26, r20
    6792:	b5 2b       	or	r27, r21
    6794:	89 83       	std	Y+1, r24	; 0x01
    6796:	9a 83       	std	Y+2, r25	; 0x02
    6798:	ab 83       	std	Y+3, r26	; 0x03
    679a:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (((u32)DIO_enuSetPinValue(COL2_PORT, COL2_PIN, DIO_u8HIGH)) << KPAD_SHIFTBIT_FIFTEEN);
    679c:	81 e0       	ldi	r24, 0x01	; 1
    679e:	61 e0       	ldi	r22, 0x01	; 1
    67a0:	41 e0       	ldi	r20, 0x01	; 1
    67a2:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    67a6:	88 2f       	mov	r24, r24
    67a8:	90 e0       	ldi	r25, 0x00	; 0
    67aa:	a0 e0       	ldi	r26, 0x00	; 0
    67ac:	b0 e0       	ldi	r27, 0x00	; 0
    67ae:	9c 01       	movw	r18, r24
    67b0:	ad 01       	movw	r20, r26
    67b2:	01 2e       	mov	r0, r17
    67b4:	1f e0       	ldi	r17, 0x0F	; 15
    67b6:	22 0f       	add	r18, r18
    67b8:	33 1f       	adc	r19, r19
    67ba:	44 1f       	adc	r20, r20
    67bc:	55 1f       	adc	r21, r21
    67be:	1a 95       	dec	r17
    67c0:	d1 f7       	brne	.-12     	; 0x67b6 <KPAD_enuInit+0x374>
    67c2:	10 2d       	mov	r17, r0
    67c4:	89 81       	ldd	r24, Y+1	; 0x01
    67c6:	9a 81       	ldd	r25, Y+2	; 0x02
    67c8:	ab 81       	ldd	r26, Y+3	; 0x03
    67ca:	bc 81       	ldd	r27, Y+4	; 0x04
    67cc:	82 2b       	or	r24, r18
    67ce:	93 2b       	or	r25, r19
    67d0:	a4 2b       	or	r26, r20
    67d2:	b5 2b       	or	r27, r21
    67d4:	89 83       	std	Y+1, r24	; 0x01
    67d6:	9a 83       	std	Y+2, r25	; 0x02
    67d8:	ab 83       	std	Y+3, r26	; 0x03
    67da:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (((u32)DIO_enuSetPinValue(COL3_PORT, COL3_PIN, DIO_u8HIGH)) << KPAD_SHIFTBIT_EIGHTEEN);
    67dc:	81 e0       	ldi	r24, 0x01	; 1
    67de:	62 e0       	ldi	r22, 0x02	; 2
    67e0:	41 e0       	ldi	r20, 0x01	; 1
    67e2:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    67e6:	88 2f       	mov	r24, r24
    67e8:	90 e0       	ldi	r25, 0x00	; 0
    67ea:	a0 e0       	ldi	r26, 0x00	; 0
    67ec:	b0 e0       	ldi	r27, 0x00	; 0
    67ee:	9c 01       	movw	r18, r24
    67f0:	ad 01       	movw	r20, r26
    67f2:	01 2e       	mov	r0, r17
    67f4:	12 e1       	ldi	r17, 0x12	; 18
    67f6:	22 0f       	add	r18, r18
    67f8:	33 1f       	adc	r19, r19
    67fa:	44 1f       	adc	r20, r20
    67fc:	55 1f       	adc	r21, r21
    67fe:	1a 95       	dec	r17
    6800:	d1 f7       	brne	.-12     	; 0x67f6 <KPAD_enuInit+0x3b4>
    6802:	10 2d       	mov	r17, r0
    6804:	89 81       	ldd	r24, Y+1	; 0x01
    6806:	9a 81       	ldd	r25, Y+2	; 0x02
    6808:	ab 81       	ldd	r26, Y+3	; 0x03
    680a:	bc 81       	ldd	r27, Y+4	; 0x04
    680c:	82 2b       	or	r24, r18
    680e:	93 2b       	or	r25, r19
    6810:	a4 2b       	or	r26, r20
    6812:	b5 2b       	or	r27, r21
    6814:	89 83       	std	Y+1, r24	; 0x01
    6816:	9a 83       	std	Y+2, r25	; 0x02
    6818:	ab 83       	std	Y+3, r26	; 0x03
    681a:	bc 83       	std	Y+4, r27	; 0x04
	Local_u32Check |= (((u32)DIO_enuSetPinValue(COL4_PORT, COL4_PIN, DIO_u8HIGH)) << KPAD_SHIFTBIT_TWENTYONE);
    681c:	81 e0       	ldi	r24, 0x01	; 1
    681e:	63 e0       	ldi	r22, 0x03	; 3
    6820:	41 e0       	ldi	r20, 0x01	; 1
    6822:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    6826:	88 2f       	mov	r24, r24
    6828:	90 e0       	ldi	r25, 0x00	; 0
    682a:	a0 e0       	ldi	r26, 0x00	; 0
    682c:	b0 e0       	ldi	r27, 0x00	; 0
    682e:	9c 01       	movw	r18, r24
    6830:	ad 01       	movw	r20, r26
    6832:	01 2e       	mov	r0, r17
    6834:	15 e1       	ldi	r17, 0x15	; 21
    6836:	22 0f       	add	r18, r18
    6838:	33 1f       	adc	r19, r19
    683a:	44 1f       	adc	r20, r20
    683c:	55 1f       	adc	r21, r21
    683e:	1a 95       	dec	r17
    6840:	d1 f7       	brne	.-12     	; 0x6836 <KPAD_enuInit+0x3f4>
    6842:	10 2d       	mov	r17, r0
    6844:	89 81       	ldd	r24, Y+1	; 0x01
    6846:	9a 81       	ldd	r25, Y+2	; 0x02
    6848:	ab 81       	ldd	r26, Y+3	; 0x03
    684a:	bc 81       	ldd	r27, Y+4	; 0x04
    684c:	82 2b       	or	r24, r18
    684e:	93 2b       	or	r25, r19
    6850:	a4 2b       	or	r26, r20
    6852:	b5 2b       	or	r27, r21
    6854:	89 83       	std	Y+1, r24	; 0x01
    6856:	9a 83       	std	Y+2, r25	; 0x02
    6858:	ab 83       	std	Y+3, r26	; 0x03
    685a:	bc 83       	std	Y+4, r27	; 0x04

	for(Local_u8Iterator = KPAD_ZERO; Local_u8Iterator < KPAD_TWENTYFOUR; Local_u8Iterator += KPAD_THREE)
    685c:	1d 82       	std	Y+5, r1	; 0x05
    685e:	1e c0       	rjmp	.+60     	; 0x689c <KPAD_enuInit+0x45a>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & KPAD_SEVEN) != ES_OK)
    6860:	8d 81       	ldd	r24, Y+5	; 0x05
    6862:	28 2f       	mov	r18, r24
    6864:	30 e0       	ldi	r19, 0x00	; 0
    6866:	89 81       	ldd	r24, Y+1	; 0x01
    6868:	9a 81       	ldd	r25, Y+2	; 0x02
    686a:	ab 81       	ldd	r26, Y+3	; 0x03
    686c:	bc 81       	ldd	r27, Y+4	; 0x04
    686e:	02 2e       	mov	r0, r18
    6870:	04 c0       	rjmp	.+8      	; 0x687a <KPAD_enuInit+0x438>
    6872:	b6 95       	lsr	r27
    6874:	a7 95       	ror	r26
    6876:	97 95       	ror	r25
    6878:	87 95       	ror	r24
    687a:	0a 94       	dec	r0
    687c:	d2 f7       	brpl	.-12     	; 0x6872 <KPAD_enuInit+0x430>
    687e:	87 70       	andi	r24, 0x07	; 7
    6880:	90 70       	andi	r25, 0x00	; 0
    6882:	a0 70       	andi	r26, 0x00	; 0
    6884:	b0 70       	andi	r27, 0x00	; 0
    6886:	81 30       	cpi	r24, 0x01	; 1
    6888:	91 05       	cpc	r25, r1
    688a:	a1 05       	cpc	r26, r1
    688c:	b1 05       	cpc	r27, r1
    688e:	19 f0       	breq	.+6      	; 0x6896 <KPAD_enuInit+0x454>
		{
			return Local_enuErrorState;
    6890:	8e 81       	ldd	r24, Y+6	; 0x06
    6892:	8f 83       	std	Y+7, r24	; 0x07
    6894:	0a c0       	rjmp	.+20     	; 0x68aa <KPAD_enuInit+0x468>
	Local_u32Check |= (DIO_enuSetPinValue(COL1_PORT, COL1_PIN, DIO_u8HIGH) << KPAD_SHIFTBIT_TWELVE);
	Local_u32Check |= (((u32)DIO_enuSetPinValue(COL2_PORT, COL2_PIN, DIO_u8HIGH)) << KPAD_SHIFTBIT_FIFTEEN);
	Local_u32Check |= (((u32)DIO_enuSetPinValue(COL3_PORT, COL3_PIN, DIO_u8HIGH)) << KPAD_SHIFTBIT_EIGHTEEN);
	Local_u32Check |= (((u32)DIO_enuSetPinValue(COL4_PORT, COL4_PIN, DIO_u8HIGH)) << KPAD_SHIFTBIT_TWENTYONE);

	for(Local_u8Iterator = KPAD_ZERO; Local_u8Iterator < KPAD_TWENTYFOUR; Local_u8Iterator += KPAD_THREE)
    6896:	8d 81       	ldd	r24, Y+5	; 0x05
    6898:	8d 5f       	subi	r24, 0xFD	; 253
    689a:	8d 83       	std	Y+5, r24	; 0x05
    689c:	8d 81       	ldd	r24, Y+5	; 0x05
    689e:	88 31       	cpi	r24, 0x18	; 24
    68a0:	f8 f2       	brcs	.-66     	; 0x6860 <KPAD_enuInit+0x41e>
		{
			return Local_enuErrorState;
		}
	}

	Local_enuErrorState = ES_OK;
    68a2:	81 e0       	ldi	r24, 0x01	; 1
    68a4:	8e 83       	std	Y+6, r24	; 0x06

	return Local_enuErrorState;
    68a6:	8e 81       	ldd	r24, Y+6	; 0x06
    68a8:	8f 83       	std	Y+7, r24	; 0x07
    68aa:	8f 81       	ldd	r24, Y+7	; 0x07
}
    68ac:	27 96       	adiw	r28, 0x07	; 7
    68ae:	0f b6       	in	r0, 0x3f	; 63
    68b0:	f8 94       	cli
    68b2:	de bf       	out	0x3e, r29	; 62
    68b4:	0f be       	out	0x3f, r0	; 63
    68b6:	cd bf       	out	0x3d, r28	; 61
    68b8:	cf 91       	pop	r28
    68ba:	df 91       	pop	r29
    68bc:	08 95       	ret

000068be <KPAD_enuGetPassedKey>:

ES_t KPAD_enuGetPassedKey(u8 *Copy_pu8KeyNumber)
{
    68be:	df 93       	push	r29
    68c0:	cf 93       	push	r28
    68c2:	cd b7       	in	r28, 0x3d	; 61
    68c4:	de b7       	in	r29, 0x3e	; 62
    68c6:	2c 97       	sbiw	r28, 0x0c	; 12
    68c8:	0f b6       	in	r0, 0x3f	; 63
    68ca:	f8 94       	cli
    68cc:	de bf       	out	0x3e, r29	; 62
    68ce:	0f be       	out	0x3f, r0	; 63
    68d0:	cd bf       	out	0x3d, r28	; 61
    68d2:	9b 87       	std	Y+11, r25	; 0x0b
    68d4:	8a 87       	std	Y+10, r24	; 0x0a
	ES_t Local_enuErrorState = ES_NOK;
    68d6:	18 86       	std	Y+8, r1	; 0x08
	u8 Local_u8ColIndex = KPAD_ZERO, Local_u8RowIndex = KPAD_ZERO, Local_u8KeyState = KPAD_ZERO;
    68d8:	1f 82       	std	Y+7, r1	; 0x07
    68da:	1e 82       	std	Y+6, r1	; 0x06
    68dc:	19 86       	std	Y+9, r1	; 0x09
	u8 Local_u8Iterator = KPAD_ZERO;
    68de:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Check = KPAD_ZERO;
    68e0:	19 82       	std	Y+1, r1	; 0x01
    68e2:	1a 82       	std	Y+2, r1	; 0x02
    68e4:	1b 82       	std	Y+3, r1	; 0x03
    68e6:	1c 82       	std	Y+4, r1	; 0x04


	static u8 Local_u8AKPADARR[KPAD_ROWNUM][KPAD_COLNUM] = KPAD_ARR_VAL;

	/* Initial value of key pressed */
	if(Copy_pu8KeyNumber != NULL)
    68e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    68ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    68ec:	00 97       	sbiw	r24, 0x00	; 0
    68ee:	31 f0       	breq	.+12     	; 0x68fc <KPAD_enuGetPassedKey+0x3e>
	{
		*Copy_pu8KeyNumber = NO_PRESSED_KEY;
    68f0:	ea 85       	ldd	r30, Y+10	; 0x0a
    68f2:	fb 85       	ldd	r31, Y+11	; 0x0b
    68f4:	8f ef       	ldi	r24, 0xFF	; 255
    68f6:	80 83       	st	Z, r24
	else
	{
		return ES_NULL_POINTER;
	}

	for(Local_u8ColIndex = KPAD_ZERO; Local_u8ColIndex < KPAD_COLNUM; Local_u8ColIndex++)
    68f8:	1f 82       	std	Y+7, r1	; 0x07
    68fa:	e9 c0       	rjmp	.+466    	; 0x6ace <KPAD_enuGetPassedKey+0x210>
	{
		*Copy_pu8KeyNumber = NO_PRESSED_KEY;
	}
	else
	{
		return ES_NULL_POINTER;
    68fc:	82 e0       	ldi	r24, 0x02	; 2
    68fe:	8c 87       	std	Y+12, r24	; 0x0c
    6900:	11 c1       	rjmp	.+546    	; 0x6b24 <KPAD_enuGetPassedKey+0x266>
	}

	for(Local_u8ColIndex = KPAD_ZERO; Local_u8ColIndex < KPAD_COLNUM; Local_u8ColIndex++)
	{
		/* Activate Column */
		Local_u32Check |= (DIO_enuSetPinValue(Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ZERO],
    6902:	8f 81       	ldd	r24, Y+7	; 0x07
    6904:	88 2f       	mov	r24, r24
    6906:	90 e0       	ldi	r25, 0x00	; 0
    6908:	88 0f       	add	r24, r24
    690a:	99 1f       	adc	r25, r25
    690c:	fc 01       	movw	r30, r24
    690e:	eb 51       	subi	r30, 0x1B	; 27
    6910:	fe 4f       	sbci	r31, 0xFE	; 254
    6912:	20 81       	ld	r18, Z
    6914:	8f 81       	ldd	r24, Y+7	; 0x07
    6916:	88 2f       	mov	r24, r24
    6918:	90 e0       	ldi	r25, 0x00	; 0
    691a:	88 0f       	add	r24, r24
    691c:	99 1f       	adc	r25, r25
    691e:	fc 01       	movw	r30, r24
    6920:	ea 51       	subi	r30, 0x1A	; 26
    6922:	fe 4f       	sbci	r31, 0xFE	; 254
    6924:	90 81       	ld	r25, Z
    6926:	82 2f       	mov	r24, r18
    6928:	69 2f       	mov	r22, r25
    692a:	40 e0       	ldi	r20, 0x00	; 0
    692c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    6930:	28 2f       	mov	r18, r24
    6932:	30 e0       	ldi	r19, 0x00	; 0
    6934:	40 e0       	ldi	r20, 0x00	; 0
    6936:	50 e0       	ldi	r21, 0x00	; 0
    6938:	89 81       	ldd	r24, Y+1	; 0x01
    693a:	9a 81       	ldd	r25, Y+2	; 0x02
    693c:	ab 81       	ldd	r26, Y+3	; 0x03
    693e:	bc 81       	ldd	r27, Y+4	; 0x04
    6940:	82 2b       	or	r24, r18
    6942:	93 2b       	or	r25, r19
    6944:	a4 2b       	or	r26, r20
    6946:	b5 2b       	or	r27, r21
    6948:	89 83       	std	Y+1, r24	; 0x01
    694a:	9a 83       	std	Y+2, r25	; 0x02
    694c:	ab 83       	std	Y+3, r26	; 0x03
    694e:	bc 83       	std	Y+4, r27	; 0x04
						   Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ONE], DIO_u8LOW) << KPAD_SHIFTBIT_ZERO);

		for(Local_u8RowIndex = KPAD_ZERO; Local_u8RowIndex < KPAD_ROWNUM; Local_u8RowIndex++)
    6950:	1e 82       	std	Y+6, r1	; 0x06
    6952:	89 c0       	rjmp	.+274    	; 0x6a66 <KPAD_enuGetPassedKey+0x1a8>
		{
			/* Read the current row */
			 Local_u32Check |= (DIO_enuGetPinValue(Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ZERO],
    6954:	8e 81       	ldd	r24, Y+6	; 0x06
    6956:	88 2f       	mov	r24, r24
    6958:	90 e0       	ldi	r25, 0x00	; 0
    695a:	88 0f       	add	r24, r24
    695c:	99 1f       	adc	r25, r25
    695e:	fc 01       	movw	r30, r24
    6960:	e3 52       	subi	r30, 0x23	; 35
    6962:	fe 4f       	sbci	r31, 0xFE	; 254
    6964:	40 81       	ld	r20, Z
    6966:	8e 81       	ldd	r24, Y+6	; 0x06
    6968:	88 2f       	mov	r24, r24
    696a:	90 e0       	ldi	r25, 0x00	; 0
    696c:	88 0f       	add	r24, r24
    696e:	99 1f       	adc	r25, r25
    6970:	fc 01       	movw	r30, r24
    6972:	e2 52       	subi	r30, 0x22	; 34
    6974:	fe 4f       	sbci	r31, 0xFE	; 254
    6976:	90 81       	ld	r25, Z
    6978:	9e 01       	movw	r18, r28
    697a:	27 5f       	subi	r18, 0xF7	; 247
    697c:	3f 4f       	sbci	r19, 0xFF	; 255
    697e:	84 2f       	mov	r24, r20
    6980:	69 2f       	mov	r22, r25
    6982:	a9 01       	movw	r20, r18
    6984:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <DIO_enuGetPinValue>
    6988:	88 2f       	mov	r24, r24
    698a:	90 e0       	ldi	r25, 0x00	; 0
    698c:	88 0f       	add	r24, r24
    698e:	99 1f       	adc	r25, r25
    6990:	88 0f       	add	r24, r24
    6992:	99 1f       	adc	r25, r25
    6994:	88 0f       	add	r24, r24
    6996:	99 1f       	adc	r25, r25
    6998:	9c 01       	movw	r18, r24
    699a:	44 27       	eor	r20, r20
    699c:	37 fd       	sbrc	r19, 7
    699e:	40 95       	com	r20
    69a0:	54 2f       	mov	r21, r20
    69a2:	89 81       	ldd	r24, Y+1	; 0x01
    69a4:	9a 81       	ldd	r25, Y+2	; 0x02
    69a6:	ab 81       	ldd	r26, Y+3	; 0x03
    69a8:	bc 81       	ldd	r27, Y+4	; 0x04
    69aa:	82 2b       	or	r24, r18
    69ac:	93 2b       	or	r25, r19
    69ae:	a4 2b       	or	r26, r20
    69b0:	b5 2b       	or	r27, r21
    69b2:	89 83       	std	Y+1, r24	; 0x01
    69b4:	9a 83       	std	Y+2, r25	; 0x02
    69b6:	ab 83       	std	Y+3, r26	; 0x03
    69b8:	bc 83       	std	Y+4, r27	; 0x04
													Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ONE], &Local_u8KeyState) << KPAD_SHIFTBIT_THREE);
			 if(DIO_u8LOW == Local_u8KeyState)
    69ba:	89 85       	ldd	r24, Y+9	; 0x09
    69bc:	88 23       	and	r24, r24
    69be:	09 f0       	breq	.+2      	; 0x69c2 <KPAD_enuGetPassedKey+0x104>
    69c0:	4f c0       	rjmp	.+158    	; 0x6a60 <KPAD_enuGetPassedKey+0x1a2>
    69c2:	36 c0       	rjmp	.+108    	; 0x6a30 <KPAD_enuGetPassedKey+0x172>
			 {
				 /* Polling (Busy waiting until the key is released) */
				 while(DIO_u8LOW == Local_u8KeyState)
				 {
					 Local_u32Check |= (DIO_enuGetPinValue(Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ZERO],
    69c4:	8e 81       	ldd	r24, Y+6	; 0x06
    69c6:	88 2f       	mov	r24, r24
    69c8:	90 e0       	ldi	r25, 0x00	; 0
    69ca:	88 0f       	add	r24, r24
    69cc:	99 1f       	adc	r25, r25
    69ce:	fc 01       	movw	r30, r24
    69d0:	e3 52       	subi	r30, 0x23	; 35
    69d2:	fe 4f       	sbci	r31, 0xFE	; 254
    69d4:	40 81       	ld	r20, Z
    69d6:	8e 81       	ldd	r24, Y+6	; 0x06
    69d8:	88 2f       	mov	r24, r24
    69da:	90 e0       	ldi	r25, 0x00	; 0
    69dc:	88 0f       	add	r24, r24
    69de:	99 1f       	adc	r25, r25
    69e0:	fc 01       	movw	r30, r24
    69e2:	e2 52       	subi	r30, 0x22	; 34
    69e4:	fe 4f       	sbci	r31, 0xFE	; 254
    69e6:	90 81       	ld	r25, Z
    69e8:	9e 01       	movw	r18, r28
    69ea:	27 5f       	subi	r18, 0xF7	; 247
    69ec:	3f 4f       	sbci	r19, 0xFF	; 255
    69ee:	84 2f       	mov	r24, r20
    69f0:	69 2f       	mov	r22, r25
    69f2:	a9 01       	movw	r20, r18
    69f4:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <DIO_enuGetPinValue>
    69f8:	88 2f       	mov	r24, r24
    69fa:	90 e0       	ldi	r25, 0x00	; 0
    69fc:	00 24       	eor	r0, r0
    69fe:	96 95       	lsr	r25
    6a00:	87 95       	ror	r24
    6a02:	07 94       	ror	r0
    6a04:	96 95       	lsr	r25
    6a06:	87 95       	ror	r24
    6a08:	07 94       	ror	r0
    6a0a:	98 2f       	mov	r25, r24
    6a0c:	80 2d       	mov	r24, r0
    6a0e:	9c 01       	movw	r18, r24
    6a10:	44 27       	eor	r20, r20
    6a12:	37 fd       	sbrc	r19, 7
    6a14:	40 95       	com	r20
    6a16:	54 2f       	mov	r21, r20
    6a18:	89 81       	ldd	r24, Y+1	; 0x01
    6a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    6a1c:	ab 81       	ldd	r26, Y+3	; 0x03
    6a1e:	bc 81       	ldd	r27, Y+4	; 0x04
    6a20:	82 2b       	or	r24, r18
    6a22:	93 2b       	or	r25, r19
    6a24:	a4 2b       	or	r26, r20
    6a26:	b5 2b       	or	r27, r21
    6a28:	89 83       	std	Y+1, r24	; 0x01
    6a2a:	9a 83       	std	Y+2, r25	; 0x02
    6a2c:	ab 83       	std	Y+3, r26	; 0x03
    6a2e:	bc 83       	std	Y+4, r27	; 0x04
			 Local_u32Check |= (DIO_enuGetPinValue(Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ZERO],
													Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ONE], &Local_u8KeyState) << KPAD_SHIFTBIT_THREE);
			 if(DIO_u8LOW == Local_u8KeyState)
			 {
				 /* Polling (Busy waiting until the key is released) */
				 while(DIO_u8LOW == Local_u8KeyState)
    6a30:	89 85       	ldd	r24, Y+9	; 0x09
    6a32:	88 23       	and	r24, r24
    6a34:	39 f2       	breq	.-114    	; 0x69c4 <KPAD_enuGetPassedKey+0x106>
				 {
					 Local_u32Check |= (DIO_enuGetPinValue(Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ZERO],
															Local_u8AKPADRowButtons[Local_u8RowIndex][KPAD_ONE], &Local_u8KeyState) << KPAD_SHIFTBIT_SIX);
				 }

				 *Copy_pu8KeyNumber = Local_u8AKPADARR[Local_u8RowIndex][Local_u8ColIndex];
    6a36:	8e 81       	ldd	r24, Y+6	; 0x06
    6a38:	48 2f       	mov	r20, r24
    6a3a:	50 e0       	ldi	r21, 0x00	; 0
    6a3c:	8f 81       	ldd	r24, Y+7	; 0x07
    6a3e:	28 2f       	mov	r18, r24
    6a40:	30 e0       	ldi	r19, 0x00	; 0
    6a42:	ca 01       	movw	r24, r20
    6a44:	88 0f       	add	r24, r24
    6a46:	99 1f       	adc	r25, r25
    6a48:	88 0f       	add	r24, r24
    6a4a:	99 1f       	adc	r25, r25
    6a4c:	82 0f       	add	r24, r18
    6a4e:	93 1f       	adc	r25, r19
    6a50:	fc 01       	movw	r30, r24
    6a52:	e3 53       	subi	r30, 0x33	; 51
    6a54:	fe 4f       	sbci	r31, 0xFE	; 254
    6a56:	80 81       	ld	r24, Z
    6a58:	ea 85       	ldd	r30, Y+10	; 0x0a
    6a5a:	fb 85       	ldd	r31, Y+11	; 0x0b
    6a5c:	80 83       	st	Z, r24
    6a5e:	07 c0       	rjmp	.+14     	; 0x6a6e <KPAD_enuGetPassedKey+0x1b0>
	{
		/* Activate Column */
		Local_u32Check |= (DIO_enuSetPinValue(Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ZERO],
						   Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ONE], DIO_u8LOW) << KPAD_SHIFTBIT_ZERO);

		for(Local_u8RowIndex = KPAD_ZERO; Local_u8RowIndex < KPAD_ROWNUM; Local_u8RowIndex++)
    6a60:	8e 81       	ldd	r24, Y+6	; 0x06
    6a62:	8f 5f       	subi	r24, 0xFF	; 255
    6a64:	8e 83       	std	Y+6, r24	; 0x06
    6a66:	8e 81       	ldd	r24, Y+6	; 0x06
    6a68:	84 30       	cpi	r24, 0x04	; 4
    6a6a:	08 f4       	brcc	.+2      	; 0x6a6e <KPAD_enuGetPassedKey+0x1b0>
    6a6c:	73 cf       	rjmp	.-282    	; 0x6954 <KPAD_enuGetPassedKey+0x96>
				 break;
			 }
		}

		/* Deactivate Column */
		Local_u32Check |= (DIO_enuSetPinValue(Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ZERO],
    6a6e:	8f 81       	ldd	r24, Y+7	; 0x07
    6a70:	88 2f       	mov	r24, r24
    6a72:	90 e0       	ldi	r25, 0x00	; 0
    6a74:	88 0f       	add	r24, r24
    6a76:	99 1f       	adc	r25, r25
    6a78:	fc 01       	movw	r30, r24
    6a7a:	eb 51       	subi	r30, 0x1B	; 27
    6a7c:	fe 4f       	sbci	r31, 0xFE	; 254
    6a7e:	20 81       	ld	r18, Z
    6a80:	8f 81       	ldd	r24, Y+7	; 0x07
    6a82:	88 2f       	mov	r24, r24
    6a84:	90 e0       	ldi	r25, 0x00	; 0
    6a86:	88 0f       	add	r24, r24
    6a88:	99 1f       	adc	r25, r25
    6a8a:	fc 01       	movw	r30, r24
    6a8c:	ea 51       	subi	r30, 0x1A	; 26
    6a8e:	fe 4f       	sbci	r31, 0xFE	; 254
    6a90:	90 81       	ld	r25, Z
    6a92:	82 2f       	mov	r24, r18
    6a94:	69 2f       	mov	r22, r25
    6a96:	41 e0       	ldi	r20, 0x01	; 1
    6a98:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>
    6a9c:	88 2f       	mov	r24, r24
    6a9e:	90 e0       	ldi	r25, 0x00	; 0
    6aa0:	98 2f       	mov	r25, r24
    6aa2:	88 27       	eor	r24, r24
    6aa4:	99 0f       	add	r25, r25
    6aa6:	9c 01       	movw	r18, r24
    6aa8:	44 27       	eor	r20, r20
    6aaa:	37 fd       	sbrc	r19, 7
    6aac:	40 95       	com	r20
    6aae:	54 2f       	mov	r21, r20
    6ab0:	89 81       	ldd	r24, Y+1	; 0x01
    6ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    6ab4:	ab 81       	ldd	r26, Y+3	; 0x03
    6ab6:	bc 81       	ldd	r27, Y+4	; 0x04
    6ab8:	82 2b       	or	r24, r18
    6aba:	93 2b       	or	r25, r19
    6abc:	a4 2b       	or	r26, r20
    6abe:	b5 2b       	or	r27, r21
    6ac0:	89 83       	std	Y+1, r24	; 0x01
    6ac2:	9a 83       	std	Y+2, r25	; 0x02
    6ac4:	ab 83       	std	Y+3, r26	; 0x03
    6ac6:	bc 83       	std	Y+4, r27	; 0x04
	else
	{
		return ES_NULL_POINTER;
	}

	for(Local_u8ColIndex = KPAD_ZERO; Local_u8ColIndex < KPAD_COLNUM; Local_u8ColIndex++)
    6ac8:	8f 81       	ldd	r24, Y+7	; 0x07
    6aca:	8f 5f       	subi	r24, 0xFF	; 255
    6acc:	8f 83       	std	Y+7, r24	; 0x07
    6ace:	8f 81       	ldd	r24, Y+7	; 0x07
    6ad0:	84 30       	cpi	r24, 0x04	; 4
    6ad2:	08 f4       	brcc	.+2      	; 0x6ad6 <KPAD_enuGetPassedKey+0x218>
    6ad4:	16 cf       	rjmp	.-468    	; 0x6902 <KPAD_enuGetPassedKey+0x44>
		/* Deactivate Column */
		Local_u32Check |= (DIO_enuSetPinValue(Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ZERO],
						   	   	   	   	   	   Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ONE], DIO_u8HIGH) << KPAD_SHIFTBIT_NINE);
	}

	for(Local_u8Iterator = KPAD_ZERO; Local_u8Iterator < KPAD_TWELVE; Local_u8Iterator += KPAD_THREE)
    6ad6:	1d 82       	std	Y+5, r1	; 0x05
    6ad8:	1e c0       	rjmp	.+60     	; 0x6b16 <KPAD_enuGetPassedKey+0x258>
	{
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & KPAD_SEVEN) != ES_OK)
    6ada:	8d 81       	ldd	r24, Y+5	; 0x05
    6adc:	28 2f       	mov	r18, r24
    6ade:	30 e0       	ldi	r19, 0x00	; 0
    6ae0:	89 81       	ldd	r24, Y+1	; 0x01
    6ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    6ae4:	ab 81       	ldd	r26, Y+3	; 0x03
    6ae6:	bc 81       	ldd	r27, Y+4	; 0x04
    6ae8:	02 2e       	mov	r0, r18
    6aea:	04 c0       	rjmp	.+8      	; 0x6af4 <KPAD_enuGetPassedKey+0x236>
    6aec:	b6 95       	lsr	r27
    6aee:	a7 95       	ror	r26
    6af0:	97 95       	ror	r25
    6af2:	87 95       	ror	r24
    6af4:	0a 94       	dec	r0
    6af6:	d2 f7       	brpl	.-12     	; 0x6aec <KPAD_enuGetPassedKey+0x22e>
    6af8:	87 70       	andi	r24, 0x07	; 7
    6afa:	90 70       	andi	r25, 0x00	; 0
    6afc:	a0 70       	andi	r26, 0x00	; 0
    6afe:	b0 70       	andi	r27, 0x00	; 0
    6b00:	81 30       	cpi	r24, 0x01	; 1
    6b02:	91 05       	cpc	r25, r1
    6b04:	a1 05       	cpc	r26, r1
    6b06:	b1 05       	cpc	r27, r1
    6b08:	19 f0       	breq	.+6      	; 0x6b10 <KPAD_enuGetPassedKey+0x252>
		{
			return Local_enuErrorState;
    6b0a:	88 85       	ldd	r24, Y+8	; 0x08
    6b0c:	8c 87       	std	Y+12, r24	; 0x0c
    6b0e:	0a c0       	rjmp	.+20     	; 0x6b24 <KPAD_enuGetPassedKey+0x266>
		/* Deactivate Column */
		Local_u32Check |= (DIO_enuSetPinValue(Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ZERO],
						   	   	   	   	   	   Local_u8AKPADColButtons[Local_u8ColIndex][KPAD_ONE], DIO_u8HIGH) << KPAD_SHIFTBIT_NINE);
	}

	for(Local_u8Iterator = KPAD_ZERO; Local_u8Iterator < KPAD_TWELVE; Local_u8Iterator += KPAD_THREE)
    6b10:	8d 81       	ldd	r24, Y+5	; 0x05
    6b12:	8d 5f       	subi	r24, 0xFD	; 253
    6b14:	8d 83       	std	Y+5, r24	; 0x05
    6b16:	8d 81       	ldd	r24, Y+5	; 0x05
    6b18:	8c 30       	cpi	r24, 0x0C	; 12
    6b1a:	f8 f2       	brcs	.-66     	; 0x6ada <KPAD_enuGetPassedKey+0x21c>
		if( ( ( (Local_u32Check)>>Local_u8Iterator) & KPAD_SEVEN) != ES_OK)
		{
			return Local_enuErrorState;
		}
	}
	Local_enuErrorState = ES_OK;
    6b1c:	81 e0       	ldi	r24, 0x01	; 1
    6b1e:	88 87       	std	Y+8, r24	; 0x08

	return Local_enuErrorState;
    6b20:	88 85       	ldd	r24, Y+8	; 0x08
    6b22:	8c 87       	std	Y+12, r24	; 0x0c
    6b24:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    6b26:	2c 96       	adiw	r28, 0x0c	; 12
    6b28:	0f b6       	in	r0, 0x3f	; 63
    6b2a:	f8 94       	cli
    6b2c:	de bf       	out	0x3e, r29	; 62
    6b2e:	0f be       	out	0x3f, r0	; 63
    6b30:	cd bf       	out	0x3d, r28	; 61
    6b32:	cf 91       	pop	r28
    6b34:	df 91       	pop	r29
    6b36:	08 95       	ret

00006b38 <main>:
volatile void tog(volatile void *Copy_pvoidParam);
extern EXTI_t EXTI_AstrEXTIConfig[3];
#define SREG  (*(volatile u8*) 0x5F)

int main(void)
{
    6b38:	df 93       	push	r29
    6b3a:	cf 93       	push	r28
    6b3c:	0f 92       	push	r0
    6b3e:	cd b7       	in	r28, 0x3d	; 61
    6b40:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPinDirection(DIO_u8PORTA, DIO_u8PIN2, DIO_u8OUTPUT);
    6b42:	80 e0       	ldi	r24, 0x00	; 0
    6b44:	62 e0       	ldi	r22, 0x02	; 2
    6b46:	41 e0       	ldi	r20, 0x01	; 1
    6b48:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8PORTD, DIO_u8PIN2, DIO_u8INPUT);
    6b4c:	83 e0       	ldi	r24, 0x03	; 3
    6b4e:	62 e0       	ldi	r22, 0x02	; 2
    6b50:	40 e0       	ldi	r20, 0x00	; 0
    6b52:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(DIO_u8PORTD, DIO_u8PIN2, DIO_u8PULL_UP);
    6b56:	83 e0       	ldi	r24, 0x03	; 3
    6b58:	62 e0       	ldi	r22, 0x02	; 2
    6b5a:	41 e0       	ldi	r20, 0x01	; 1
    6b5c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DIO_enuSetPinValue>

	u8 Local_u8Pin = DIO_u8PIN3;
    6b60:	83 e0       	ldi	r24, 0x03	; 3
    6b62:	89 83       	std	Y+1, r24	; 0x01
	EXTI_enuCallBack(tog, &Local_u8Pin, 0);
    6b64:	87 ec       	ldi	r24, 0xC7	; 199
    6b66:	95 e3       	ldi	r25, 0x35	; 53
    6b68:	9e 01       	movw	r18, r28
    6b6a:	2f 5f       	subi	r18, 0xFF	; 255
    6b6c:	3f 4f       	sbci	r19, 0xFF	; 255
    6b6e:	b9 01       	movw	r22, r18
    6b70:	40 e0       	ldi	r20, 0x00	; 0
    6b72:	0e 94 65 0a 	call	0x14ca	; 0x14ca <EXTI_enuCallBack>
	EXTI_enuInit(EXTI_AstrEXTIConfig);
    6b76:	88 e6       	ldi	r24, 0x68	; 104
    6b78:	91 e0       	ldi	r25, 0x01	; 1
    6b7a:	0e 94 9d 07 	call	0xf3a	; 0xf3a <EXTI_enuInit>

	SREG |= (1<<7);
    6b7e:	af e5       	ldi	r26, 0x5F	; 95
    6b80:	b0 e0       	ldi	r27, 0x00	; 0
    6b82:	ef e5       	ldi	r30, 0x5F	; 95
    6b84:	f0 e0       	ldi	r31, 0x00	; 0
    6b86:	80 81       	ld	r24, Z
    6b88:	80 68       	ori	r24, 0x80	; 128
    6b8a:	8c 93       	st	X, r24
    6b8c:	ff cf       	rjmp	.-2      	; 0x6b8c <main+0x54>

00006b8e <tog>:

	return 0;
}

volatile void tog(volatile void *Copy_pvoidParam)
{
    6b8e:	df 93       	push	r29
    6b90:	cf 93       	push	r28
    6b92:	00 d0       	rcall	.+0      	; 0x6b94 <tog+0x6>
    6b94:	cd b7       	in	r28, 0x3d	; 61
    6b96:	de b7       	in	r29, 0x3e	; 62
    6b98:	9a 83       	std	Y+2, r25	; 0x02
    6b9a:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPinDirection(DIO_u8PORTA, *((u8*)Copy_pvoidParam), DIO_u8OUTPUT);
    6b9c:	e9 81       	ldd	r30, Y+1	; 0x01
    6b9e:	fa 81       	ldd	r31, Y+2	; 0x02
    6ba0:	90 81       	ld	r25, Z
    6ba2:	80 e0       	ldi	r24, 0x00	; 0
    6ba4:	69 2f       	mov	r22, r25
    6ba6:	41 e0       	ldi	r20, 0x01	; 1
    6ba8:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_enuSetPinDirection>
	DIO_enuTogPinValue(DIO_u8PORTA, *((u8*)Copy_pvoidParam));
    6bac:	e9 81       	ldd	r30, Y+1	; 0x01
    6bae:	fa 81       	ldd	r31, Y+2	; 0x02
    6bb0:	90 81       	ld	r25, Z
    6bb2:	80 e0       	ldi	r24, 0x00	; 0
    6bb4:	69 2f       	mov	r22, r25
    6bb6:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <DIO_enuTogPinValue>
}
    6bba:	0f 90       	pop	r0
    6bbc:	0f 90       	pop	r0
    6bbe:	cf 91       	pop	r28
    6bc0:	df 91       	pop	r29
    6bc2:	08 95       	ret

00006bc4 <__prologue_saves__>:
    6bc4:	2f 92       	push	r2
    6bc6:	3f 92       	push	r3
    6bc8:	4f 92       	push	r4
    6bca:	5f 92       	push	r5
    6bcc:	6f 92       	push	r6
    6bce:	7f 92       	push	r7
    6bd0:	8f 92       	push	r8
    6bd2:	9f 92       	push	r9
    6bd4:	af 92       	push	r10
    6bd6:	bf 92       	push	r11
    6bd8:	cf 92       	push	r12
    6bda:	df 92       	push	r13
    6bdc:	ef 92       	push	r14
    6bde:	ff 92       	push	r15
    6be0:	0f 93       	push	r16
    6be2:	1f 93       	push	r17
    6be4:	cf 93       	push	r28
    6be6:	df 93       	push	r29
    6be8:	cd b7       	in	r28, 0x3d	; 61
    6bea:	de b7       	in	r29, 0x3e	; 62
    6bec:	ca 1b       	sub	r28, r26
    6bee:	db 0b       	sbc	r29, r27
    6bf0:	0f b6       	in	r0, 0x3f	; 63
    6bf2:	f8 94       	cli
    6bf4:	de bf       	out	0x3e, r29	; 62
    6bf6:	0f be       	out	0x3f, r0	; 63
    6bf8:	cd bf       	out	0x3d, r28	; 61
    6bfa:	09 94       	ijmp

00006bfc <__epilogue_restores__>:
    6bfc:	2a 88       	ldd	r2, Y+18	; 0x12
    6bfe:	39 88       	ldd	r3, Y+17	; 0x11
    6c00:	48 88       	ldd	r4, Y+16	; 0x10
    6c02:	5f 84       	ldd	r5, Y+15	; 0x0f
    6c04:	6e 84       	ldd	r6, Y+14	; 0x0e
    6c06:	7d 84       	ldd	r7, Y+13	; 0x0d
    6c08:	8c 84       	ldd	r8, Y+12	; 0x0c
    6c0a:	9b 84       	ldd	r9, Y+11	; 0x0b
    6c0c:	aa 84       	ldd	r10, Y+10	; 0x0a
    6c0e:	b9 84       	ldd	r11, Y+9	; 0x09
    6c10:	c8 84       	ldd	r12, Y+8	; 0x08
    6c12:	df 80       	ldd	r13, Y+7	; 0x07
    6c14:	ee 80       	ldd	r14, Y+6	; 0x06
    6c16:	fd 80       	ldd	r15, Y+5	; 0x05
    6c18:	0c 81       	ldd	r16, Y+4	; 0x04
    6c1a:	1b 81       	ldd	r17, Y+3	; 0x03
    6c1c:	aa 81       	ldd	r26, Y+2	; 0x02
    6c1e:	b9 81       	ldd	r27, Y+1	; 0x01
    6c20:	ce 0f       	add	r28, r30
    6c22:	d1 1d       	adc	r29, r1
    6c24:	0f b6       	in	r0, 0x3f	; 63
    6c26:	f8 94       	cli
    6c28:	de bf       	out	0x3e, r29	; 62
    6c2a:	0f be       	out	0x3f, r0	; 63
    6c2c:	cd bf       	out	0x3d, r28	; 61
    6c2e:	ed 01       	movw	r28, r26
    6c30:	08 95       	ret

00006c32 <_exit>:
    6c32:	f8 94       	cli

00006c34 <__stop_program>:
    6c34:	ff cf       	rjmp	.-2      	; 0x6c34 <__stop_program>
